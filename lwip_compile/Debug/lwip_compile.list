
lwip_compile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015490  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  08015630  08015630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187e8  080187e8  0001a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080187e8  080187e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080187f0  080187f0  0001a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187f0  080187f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080187f4  080187f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080187f8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d8c4  2000007c  08018874  0001a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d940  08018874  0001a940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e712  00000000  00000000  0001a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007df9  00000000  00000000  000487be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002528  00000000  00000000  000505b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2e  00000000  00000000  00052ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b92  00000000  00000000  0005480e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034326  00000000  00000000  000793a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af26b  00000000  00000000  000ad6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a158  00000000  00000000  0015c974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00166acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015618 	.word	0x08015618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08015618 	.word	0x08015618

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <MX_FREERTOS_Init+0x18>)
 8000586:	2100      	movs	r1, #0
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <MX_FREERTOS_Init+0x1c>)
 800058a:	f004 fae4 	bl	8004b56 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a03      	ldr	r2, [pc, #12]	@ (80005a0 <MX_FREERTOS_Init+0x20>)
 8000592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08018540 	.word	0x08018540
 800059c:	08000711 	.word	0x08000711
 80005a0:	20004d44 	.word	0x20004d44

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fd7c 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f80c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ffd0 	bl	80005a4 <MX_GPIO_Init>
  //MX_SPI1_Init();
  MX_USART2_UART_Init();
 8000604:	f000 fcda 	bl	8000fbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f004 fa46 	bl	8004a98 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800060c:	f7ff ffb8 	bl	8000580 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 fa66 	bl	8004ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x20>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f014 f8f7 	bl	801481a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2319      	movs	r3, #25
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	@ 0xa8
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f857 	bl	8001754 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f8c6 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fab9 	bl	8001c44 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f8b0 	bl	800083c <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	@ 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <putchar>:

/* USER CODE BEGIN 4 */
int putchar(int ch)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,1);
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2301      	movs	r3, #1
 80006f8:	2201      	movs	r2, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <putchar+0x20>)
 80006fc:	f002 fd4a 	bl	8003194 <HAL_UART_Transmit>
    return ch;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20004dd4 	.word	0x20004dd4

08000710 <StartDefaultTask>:




void StartDefaultTask(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	 osDelay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071c:	f004 faad 	bl	8004c7a <osDelay>
	 tcpip_init(NULL,NULL);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f008 f936 	bl	8008994 <tcpip_init>

	 Netif_Config();
 8000728:	f000 f802 	bl	8000730 <Netif_Config>
	 while(1);
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <StartDefaultTask+0x1c>

08000730 <Netif_Config>:
//        osDelay(1000);
//    }
}

static void Netif_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af04      	add	r7, sp, #16
  ip4_addr_t netmask;
  ip4_addr_t gw;//gateway IP address

  /* IP address setting */

  IP4_ADDR(&ipaddr, IP_ADDR_4, IP_ADDR_3, IP_ADDR_2, IP_ADDR_1);
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <Netif_Config+0xac>)
 8000738:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, 255, 255 , 255, 0);
 800073a:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800073e:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, IP_ADDR_4, IP_ADDR_3, IP_ADDR_2, 102);
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <Netif_Config+0xb0>)
 8000742:	607b      	str	r3, [r7, #4]


  /* create a binary semaphore used for informing ethernetif of frame reception */
  //osSemaphoreDef(Netif_SEM);
  //Netif_IRQSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1);//CMSIS V1 API
  Netif_IRQSemaphore = osSemaphoreNew(1,0,NULL);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2001      	movs	r0, #1
 800074a:	f004 fbbf 	bl	8004ecc <osSemaphoreNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a24      	ldr	r2, [pc, #144]	@ (80007e4 <Netif_Config+0xb4>)
 8000752:	6013      	str	r3, [r2, #0]

  The init function pointer must point to a initialization function for
  your ethernet netif interface. The following code illustrates it's use.*/


  printf("Adding Network IF ...\r\n ");
 8000754:	4824      	ldr	r0, [pc, #144]	@ (80007e8 <Netif_Config+0xb8>)
 8000756:	f000 fa39 	bl	8000bcc <printf>


  if(netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input)==NULL)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	f107 0208 	add.w	r2, r7, #8
 8000760:	f107 010c 	add.w	r1, r7, #12
 8000764:	4821      	ldr	r0, [pc, #132]	@ (80007ec <Netif_Config+0xbc>)
 8000766:	9002      	str	r0, [sp, #8]
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <Netif_Config+0xc0>)
 800076a:	9001      	str	r0, [sp, #4]
 800076c:	2000      	movs	r0, #0
 800076e:	9000      	str	r0, [sp, #0]
 8000770:	4820      	ldr	r0, [pc, #128]	@ (80007f4 <Netif_Config+0xc4>)
 8000772:	f008 ffcf 	bl	8009714 <netif_add>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <Netif_Config+0x56>
  {
      //could not initialize the ENC28J60 due to problem between connection of ENC28J60 & MCU
      printf("Error!\r\n ");
 800077c:	481e      	ldr	r0, [pc, #120]	@ (80007f8 <Netif_Config+0xc8>)
 800077e:	f000 fa25 	bl	8000bcc <printf>


      while(1);
 8000782:	bf00      	nop
 8000784:	e7fd      	b.n	8000782 <Netif_Config+0x52>
  }
  else
  {
      //show network card init success
      printf("Success!\r\n ");
 8000786:	481d      	ldr	r0, [pc, #116]	@ (80007fc <Netif_Config+0xcc>)
 8000788:	f000 fa20 	bl	8000bcc <printf>
  }


  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 800078c:	4819      	ldr	r0, [pc, #100]	@ (80007f4 <Netif_Config+0xc4>)
 800078e:	f009 f973 	bl	8009a78 <netif_set_default>


  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8000792:	491b      	ldr	r1, [pc, #108]	@ (8000800 <Netif_Config+0xd0>)
 8000794:	4817      	ldr	r0, [pc, #92]	@ (80007f4 <Netif_Config+0xc4>)
 8000796:	f009 fa3b 	bl	8009c10 <netif_set_link_callback>


  irq_arg.netif = &gnetif;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <Netif_Config+0xd4>)
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <Netif_Config+0xc4>)
 800079e:	601a      	str	r2, [r3, #0]
  irq_arg.semaphore = Netif_IRQSemaphore;
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <Netif_Config+0xb4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <Netif_Config+0xd4>)
 80007a6:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet IRQ handler thread */
  osThreadNew(ethernetif_process_irq, &irq_arg, &Netif_Thread_attr);//changed it to suit CMSIS OS V2
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <Netif_Config+0xd8>)
 80007aa:	4916      	ldr	r1, [pc, #88]	@ (8000804 <Netif_Config+0xd4>)
 80007ac:	4817      	ldr	r0, [pc, #92]	@ (800080c <Netif_Config+0xdc>)
 80007ae:	f004 f9d2 	bl	8004b56 <osThreadNew>


  printf("Waiting for cable ...");
 80007b2:	4817      	ldr	r0, [pc, #92]	@ (8000810 <Netif_Config+0xe0>)
 80007b4:	f000 fa0a 	bl	8000bcc <printf>


  while(!netif_is_link_up(&gnetif))
 80007b8:	bf00      	nop
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <Netif_Config+0xc4>)
 80007bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f8      	beq.n	80007ba <Netif_Config+0x8a>


  }


  printf("Cable plugged in!\r\n ");
 80007c8:	4812      	ldr	r0, [pc, #72]	@ (8000814 <Netif_Config+0xe4>)
 80007ca:	f000 f9ff 	bl	8000bcc <printf>


  netif_set_up(&gnetif);
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <Netif_Config+0xc4>)
 80007d0:	f009 f962 	bl	8009a98 <netif_set_up>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	0301a8c0 	.word	0x0301a8c0
 80007e0:	6601a8c0 	.word	0x6601a8c0
 80007e4:	20000098 	.word	0x20000098
 80007e8:	08015644 	.word	0x08015644
 80007ec:	080088e5 	.word	0x080088e5
 80007f0:	080048b9 	.word	0x080048b9
 80007f4:	20004d50 	.word	0x20004d50
 80007f8:	08015660 	.word	0x08015660
 80007fc:	0801566c 	.word	0x0801566c
 8000800:	080049cf 	.word	0x080049cf
 8000804:	20004d48 	.word	0x20004d48
 8000808:	08018564 	.word	0x08018564
 800080c:	0800498d 	.word	0x0800498d
 8000810:	08015678 	.word	0x08015678
 8000814:	08015690 	.word	0x08015690

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 fc85 	bl	8001138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40014400 	.word	0x40014400

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <printchar>:
*/

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);

	if (str) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00a      	beq.n	800086e <printchar+0x26>
		**str = c;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]
	}
	else (void)putchar(c);
}
 800086c:	e002      	b.n	8000874 <printchar+0x2c>
	else (void)putchar(c);
 800086e:	6838      	ldr	r0, [r7, #0]
 8000870:	f7ff ff3c 	bl	80006ec <putchar>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 800088c:	2400      	movs	r4, #0
 800088e:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dd17      	ble.n	80008c8 <prints+0x4c>
		register int len = 0;
 8000898:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800089a:	68be      	ldr	r6, [r7, #8]
 800089c:	e001      	b.n	80008a2 <prints+0x26>
 800089e:	3501      	adds	r5, #1
 80008a0:	3601      	adds	r6, #1
 80008a2:	7833      	ldrb	r3, [r6, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1fa      	bne.n	800089e <prints+0x22>
		if (len >= width) width = 0;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429d      	cmp	r5, r3
 80008ac:	db02      	blt.n	80008b4 <prints+0x38>
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e002      	b.n	80008ba <prints+0x3e>
		else width -= len;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	1b5b      	subs	r3, r3, r5
 80008b8:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <prints+0x4c>
 80008c4:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d116      	bne.n	8000900 <prints+0x84>
		for ( ; width > 0; --width) {
 80008d2:	e007      	b.n	80008e4 <prints+0x68>
			printchar (out, padchar);
 80008d4:	4641      	mov	r1, r8
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f7ff ffb6 	bl	8000848 <printchar>
			++pc;
 80008dc:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dcf4      	bgt.n	80008d4 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 80008ea:	e009      	b.n	8000900 <prints+0x84>
		printchar (out, *string);
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff ffa8 	bl	8000848 <printchar>
		++pc;
 80008f8:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f1      	bne.n	80008ec <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000908:	e007      	b.n	800091a <prints+0x9e>
		printchar (out, padchar);
 800090a:	4641      	mov	r1, r8
 800090c:	68f8      	ldr	r0, [r7, #12]
 800090e:	f7ff ff9b 	bl	8000848 <printchar>
		++pc;
 8000912:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dcf4      	bgt.n	800090a <prints+0x8e>
	}

	return pc;
 8000920:	4623      	mov	r3, r4
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800092c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000930:	b089      	sub	sp, #36	@ 0x24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800093c:	f04f 0900 	mov.w	r9, #0
 8000940:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000942:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10c      	bne.n	8000964 <printi+0x38>
		print_buf[0] = '0';
 800094a:	2330      	movs	r3, #48	@ 0x30
 800094c:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 800094e:	2300      	movs	r3, #0
 8000950:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000952:	f107 0114 	add.w	r1, r7, #20
 8000956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff ff8e 	bl	800087c <prints>
 8000960:	4603      	mov	r3, r0
 8000962:	e04a      	b.n	80009fa <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00a      	beq.n	8000980 <printi+0x54>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0a      	cmp	r3, #10
 800096e:	d107      	bne.n	8000980 <printi+0x54>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	da04      	bge.n	8000980 <printi+0x54>
		neg = 1;
 8000976:	f04f 0901 	mov.w	r9, #1
		u = -i;
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	425b      	negs	r3, r3
 800097e:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000980:	f107 0414 	add.w	r4, r7, #20
 8000984:	340b      	adds	r4, #11
	*s = '\0';
 8000986:	2300      	movs	r3, #0
 8000988:	7023      	strb	r3, [r4, #0]

	while (u) {
 800098a:	e015      	b.n	80009b8 <printi+0x8c>
		t = u % b;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	fbb5 f2f3 	udiv	r2, r5, r3
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	1aeb      	subs	r3, r5, r3
 8000998:	4698      	mov	r8, r3
		if( t >= 10 )
 800099a:	f1b8 0f09 	cmp.w	r8, #9
 800099e:	dd02      	ble.n	80009a6 <printi+0x7a>
			t += letbase - '0' - 10;
 80009a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009a2:	3b3a      	subs	r3, #58	@ 0x3a
 80009a4:	4498      	add	r8, r3
		*--s = t + '0';
 80009a6:	fa5f f388 	uxtb.w	r3, r8
 80009aa:	3c01      	subs	r4, #1
 80009ac:	3330      	adds	r3, #48	@ 0x30
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	7023      	strb	r3, [r4, #0]
		u /= b;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d1e7      	bne.n	800098c <printi+0x60>
	}

	if (neg) {
 80009bc:	f1b9 0f00 	cmp.w	r9, #0
 80009c0:	d013      	beq.n	80009ea <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 80009c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00d      	beq.n	80009e4 <printi+0xb8>
 80009c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <printi+0xb8>
			printchar (out, '-');
 80009d2:	212d      	movs	r1, #45	@ 0x2d
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff ff37 	bl	8000848 <printchar>
			++pc;
 80009da:	3601      	adds	r6, #1
			--width;
 80009dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009de:	3b01      	subs	r3, #1
 80009e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80009e2:	e002      	b.n	80009ea <printi+0xbe>
		}
		else {
			*--s = '-';
 80009e4:	3c01      	subs	r4, #1
 80009e6:	232d      	movs	r3, #45	@ 0x2d
 80009e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 80009ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80009ee:	4621      	mov	r1, r4
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff ff43 	bl	800087c <prints>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4433      	add	r3, r6
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	@ 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a04 <print>:

static int print( char **out, const char *format, va_list args )
{
 8000a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a08:	b08a      	sub	sp, #40	@ 0x28
 8000a0a:	af04      	add	r7, sp, #16
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000a12:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000a14:	e0c4      	b.n	8000ba0 <print+0x19c>
		if (*format == '%') {
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b25      	cmp	r3, #37	@ 0x25
 8000a1c:	f040 80b3 	bne.w	8000b86 <print+0x182>
			++format;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000a26:	2600      	movs	r6, #0
 8000a28:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 80bc 	beq.w	8000bac <print+0x1a8>
			if (*format == '%') goto out;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b25      	cmp	r3, #37	@ 0x25
 8000a3a:	f000 80a6 	beq.w	8000b8a <print+0x186>
			if (*format == '-') {
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b2d      	cmp	r3, #45	@ 0x2d
 8000a44:	d109      	bne.n	8000a5a <print+0x56>
				++format;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000a4c:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000a4e:	e004      	b.n	8000a5a <print+0x56>
				++format;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000a56:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b30      	cmp	r3, #48	@ 0x30
 8000a60:	d0f6      	beq.n	8000a50 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a62:	e00b      	b.n	8000a7c <print+0x78>
				width *= 10;
 8000a64:	462b      	mov	r3, r5
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	442b      	add	r3, r5
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	461d      	mov	r5, r3
				width += *format - '0';
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	3b30      	subs	r3, #48	@ 0x30
 8000a74:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a82:	d903      	bls.n	8000a8c <print+0x88>
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b39      	cmp	r3, #57	@ 0x39
 8000a8a:	d9eb      	bls.n	8000a64 <print+0x60>
			}
			if( *format == 's' ) {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b73      	cmp	r3, #115	@ 0x73
 8000a92:	d112      	bne.n	8000aba <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	1d1a      	adds	r2, r3, #4
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000a9e:	f1b8 0f00 	cmp.w	r8, #0
 8000aa2:	d001      	beq.n	8000aa8 <print+0xa4>
 8000aa4:	4641      	mov	r1, r8
 8000aa6:	e000      	b.n	8000aaa <print+0xa6>
 8000aa8:	4947      	ldr	r1, [pc, #284]	@ (8000bc8 <print+0x1c4>)
 8000aaa:	4633      	mov	r3, r6
 8000aac:	462a      	mov	r2, r5
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fee4 	bl	800087c <prints>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	441c      	add	r4, r3
				continue;
 8000ab8:	e06f      	b.n	8000b9a <print+0x196>
			}
			if( *format == 'd' ) {
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b64      	cmp	r3, #100	@ 0x64
 8000ac0:	d10f      	bne.n	8000ae2 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	1d1a      	adds	r2, r3, #4
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	2361      	movs	r3, #97	@ 0x61
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	9601      	str	r6, [sp, #4]
 8000ad0:	9500      	str	r5, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff28 	bl	800092c <printi>
 8000adc:	4603      	mov	r3, r0
 8000ade:	441c      	add	r4, r3
				continue;
 8000ae0:	e05b      	b.n	8000b9a <print+0x196>
			}
			if( *format == 'x' ) {
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b78      	cmp	r3, #120	@ 0x78
 8000ae8:	d10f      	bne.n	8000b0a <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	1d1a      	adds	r2, r3, #4
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	6819      	ldr	r1, [r3, #0]
 8000af2:	2361      	movs	r3, #97	@ 0x61
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	9601      	str	r6, [sp, #4]
 8000af8:	9500      	str	r5, [sp, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	2210      	movs	r2, #16
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ff14 	bl	800092c <printi>
 8000b04:	4603      	mov	r3, r0
 8000b06:	441c      	add	r4, r3
				continue;
 8000b08:	e047      	b.n	8000b9a <print+0x196>
			}
			if( *format == 'X' ) {
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b58      	cmp	r3, #88	@ 0x58
 8000b10:	d10f      	bne.n	8000b32 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1d1a      	adds	r2, r3, #4
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	2341      	movs	r3, #65	@ 0x41
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	9601      	str	r6, [sp, #4]
 8000b20:	9500      	str	r5, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2210      	movs	r2, #16
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ff00 	bl	800092c <printi>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	441c      	add	r4, r3
				continue;
 8000b30:	e033      	b.n	8000b9a <print+0x196>
			}
			if( *format == 'u' ) {
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b75      	cmp	r3, #117	@ 0x75
 8000b38:	d10f      	bne.n	8000b5a <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	1d1a      	adds	r2, r3, #4
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	2361      	movs	r3, #97	@ 0x61
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	9601      	str	r6, [sp, #4]
 8000b48:	9500      	str	r5, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff feec 	bl	800092c <printi>
 8000b54:	4603      	mov	r3, r0
 8000b56:	441c      	add	r4, r3
				continue;
 8000b58:	e01f      	b.n	8000b9a <print+0x196>
			}
			if( *format == 'c' ) {
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b63      	cmp	r3, #99	@ 0x63
 8000b60:	d11b      	bne.n	8000b9a <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	1d1a      	adds	r2, r3, #4
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000b6e:	2300      	movs	r3, #0
 8000b70:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8000b72:	f107 0114 	add.w	r1, r7, #20
 8000b76:	4633      	mov	r3, r6
 8000b78:	462a      	mov	r2, r5
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fe7e 	bl	800087c <prints>
 8000b80:	4603      	mov	r3, r0
 8000b82:	441c      	add	r4, r3
				continue;
 8000b84:	e009      	b.n	8000b9a <print+0x196>
			}
		}
		else {
		out:
 8000b86:	bf00      	nop
 8000b88:	e000      	b.n	8000b8c <print+0x188>
			if (*format == '%') goto out;
 8000b8a:	bf00      	nop
			printchar (out, *format);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff fe58 	bl	8000848 <printchar>
			++pc;
 8000b98:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f af36 	bne.w	8000a16 <print+0x12>
 8000baa:	e000      	b.n	8000bae <print+0x1aa>
			if (*format == '\0') break;
 8000bac:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <print+0x1b8>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000bbc:	4623      	mov	r3, r4
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc8:	080156a8 	.word	0x080156a8

08000bcc <printf>:

int printf(const char *format, ...)
{
 8000bcc:	b40f      	push	{r0, r1, r2, r3}
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6939      	ldr	r1, [r7, #16]
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff10 	bl	8000a04 <print>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23e0      	movs	r3, #224	@ 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 fbbd 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x54>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	f06f 0001 	mvn.w	r0, #1
 8000cca:	f000 fb55 	bl	8001378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	@ 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <HAL_InitTick+0xd0>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <HAL_InitTick+0xd0>)
 8000cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <HAL_InitTick+0xd0>)
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f976 	bl	8002004 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d18:	f001 f960 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8000d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <HAL_InitTick+0xd4>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d2e:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <HAL_InitTick+0xdc>)
 8000d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d38:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000d52:	4818      	ldr	r0, [pc, #96]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d54:	f001 ff5a 	bl	8002c0c <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11b      	bne.n	8000d9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000d66:	4813      	ldr	r0, [pc, #76]	@ (8000db4 <HAL_InitTick+0xd8>)
 8000d68:	f001 ffaa 	bl	8002cc0 <HAL_TIM_Base_Start_IT>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d111      	bne.n	8000d9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d7a:	2019      	movs	r0, #25
 8000d7c:	f000 fb18 	bl	80013b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	d808      	bhi.n	8000d98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d86:	2200      	movs	r2, #0
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	2019      	movs	r0, #25
 8000d8c:	f000 faf4 	bl	8001378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_InitTick+0xe0>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e002      	b.n	8000d9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3730      	adds	r7, #48	@ 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	20004d8c 	.word	0x20004d8c
 8000db8:	40014400 	.word	0x40014400
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dfe:	f001 ffc1 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20004d8c 	.word	0x20004d8c

08000e0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return 1;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_kill>:

int _kill(int pid, int sig)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e26:	f013 fd9d 	bl	8014964 <__errno>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2216      	movs	r2, #22
 8000e2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_exit>:

void _exit (int status)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffe7 	bl	8000e1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e4e:	bf00      	nop
 8000e50:	e7fd      	b.n	8000e4e <_exit+0x12>

08000e52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e00a      	b.n	8000e7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e64:	f3af 8000 	nop.w
 8000e68:	4601      	mov	r1, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	60ba      	str	r2, [r7, #8]
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf0      	blt.n	8000e64 <_read+0x12>
  }

  return len;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e009      	b.n	8000eb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbf1      	blt.n	8000e9e <_write+0x12>
  }
  return len;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_close>:

int _close(int file)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eec:	605a      	str	r2, [r3, #4]
  return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_isatty>:

int _isatty(int file)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f013 fd02 	bl	8014964 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20018000 	.word	0x20018000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	2000009c 	.word	0x2000009c
 8000f94:	2000d940 	.word	0x2000d940

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <MX_USART2_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	f002 f87e 	bl	80030f4 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f7ff fc1d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20004dd4 	.word	0x20004dd4
 800100c:	40004400 	.word	0x40004400

08001010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <HAL_UART_MspInit+0x84>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12b      	bne.n	800108a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0x88>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_UART_MspInit+0x88>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0x88>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_UART_MspInit+0x88>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_UART_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800106a:	230c      	movs	r3, #12
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_UART_MspInit+0x8c>)
 8001086:	f000 f9af 	bl	80013e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004400 	.word	0x40004400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a4:	f7ff ff78 	bl	8000f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f013 fc4f 	bl	8014970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa8f 	bl	80005f4 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010e4:	080187f8 	.word	0x080187f8
  ldr r2, =_sbss
 80010e8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010ec:	2000d940 	.word	0x2000d940

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f920 	bl	8001362 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff fdda 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fdac 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20004e1c 	.word	0x20004e1c

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20004e1c 	.word	0x20004e1c

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	@ (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db12      	blt.n	8001298 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	490a      	ldr	r1, [pc, #40]	@ (80012a4 <__NVIC_DisableIRQ+0x44>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	3320      	adds	r3, #32
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800128c:	f3bf 8f4f 	dsb	sy
}
 8001290:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001292:	f3bf 8f6f 	isb	sy
}
 8001296:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	@ (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff28 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138a:	f7ff ff3d 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800138e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff ffb1 	bl	80012fc <NVIC_EncodePriority>
 800139a:	4602      	mov	r2, r0
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff80 	bl	80012a8 <__NVIC_SetPriority>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff30 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff40 	bl	8001260 <__NVIC_DisableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e159      	b.n	80016b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 8148 	bne.w	80016b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d005      	beq.n	800143a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	2b02      	cmp	r3, #2
 8001438:	d130      	bne.n	800149c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 0201 	and.w	r2, r3, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d017      	beq.n	80014d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a2 	beq.w	80016b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a56      	ldr	r2, [pc, #344]	@ (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b54      	ldr	r3, [pc, #336]	@ (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a52      	ldr	r2, [pc, #328]	@ (80016d4 <HAL_GPIO_Init+0x2ec>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a49      	ldr	r2, [pc, #292]	@ (80016d8 <HAL_GPIO_Init+0x2f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x202>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a48      	ldr	r2, [pc, #288]	@ (80016dc <HAL_GPIO_Init+0x2f4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x1fe>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a47      	ldr	r2, [pc, #284]	@ (80016e0 <HAL_GPIO_Init+0x2f8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a46      	ldr	r2, [pc, #280]	@ (80016e4 <HAL_GPIO_Init+0x2fc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x1f6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a45      	ldr	r2, [pc, #276]	@ (80016e8 <HAL_GPIO_Init+0x300>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x1f2>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e008      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015da:	2307      	movs	r3, #7
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015de:	2303      	movs	r3, #3
 80015e0:	e004      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x204>
 80015ea:	2300      	movs	r3, #0
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	f002 0203 	and.w	r2, r2, #3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4093      	lsls	r3, r2
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fc:	4935      	ldr	r1, [pc, #212]	@ (80016d4 <HAL_GPIO_Init+0x2ec>)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160a:	4b38      	ldr	r3, [pc, #224]	@ (80016ec <HAL_GPIO_Init+0x304>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162e:	4a2f      	ldr	r2, [pc, #188]	@ (80016ec <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001634:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <HAL_GPIO_Init+0x304>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001658:	4a24      	ldr	r2, [pc, #144]	@ (80016ec <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165e:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <HAL_GPIO_Init+0x304>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001682:	4a1a      	ldr	r2, [pc, #104]	@ (80016ec <HAL_GPIO_Init+0x304>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <HAL_GPIO_Init+0x304>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ac:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <HAL_GPIO_Init+0x304>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	f67f aea2 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3724      	adds	r7, #36	@ 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40013800 	.word	0x40013800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fee6 	bl	8004514 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e267      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d075      	beq.n	800185e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001772:	4b88      	ldr	r3, [pc, #544]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d00c      	beq.n	8001798 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b85      	ldr	r3, [pc, #532]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001786:	2b08      	cmp	r3, #8
 8001788:	d112      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178a:	4b82      	ldr	r3, [pc, #520]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001796:	d10b      	bne.n	80017b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	4b7e      	ldr	r3, [pc, #504]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d05b      	beq.n	800185c <HAL_RCC_OscConfig+0x108>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d157      	bne.n	800185c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e242      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x74>
 80017ba:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a75      	ldr	r2, [pc, #468]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e01d      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x98>
 80017d2:	4b70      	ldr	r3, [pc, #448]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b6d      	ldr	r3, [pc, #436]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0xb0>
 80017ec:	4b69      	ldr	r3, [pc, #420]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a68      	ldr	r2, [pc, #416]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b66      	ldr	r3, [pc, #408]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a65      	ldr	r2, [pc, #404]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fca8 	bl	8001160 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fca4 	bl	8001160 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e207      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0xc0>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fc94 	bl	8001160 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800183c:	f7ff fc90 	bl	8001160 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	@ 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1f3      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0xe8>
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186a:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800187e:	2b08      	cmp	r3, #8
 8001880:	d11c      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d116      	bne.n	80018bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e1c7      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4937      	ldr	r1, [pc, #220]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ba:	e03a      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc49 	bl	8001160 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff fc45 	bl	8001160 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1a8      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4925      	ldr	r1, [pc, #148]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x244>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fc28 	bl	8001160 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fc24 	bl	8001160 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e187      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d036      	beq.n	80019ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff fc08 	bl	8001160 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fc04 	bl	8001160 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e167      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_OscConfig+0x240>)
 8001968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x200>
 8001972:	e01b      	b.n	80019ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x248>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fbf1 	bl	8001160 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	e00e      	b.n	80019a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fbed 	bl	8001160 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d907      	bls.n	80019a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e150      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001994:	40023800 	.word	0x40023800
 8001998:	42470000 	.word	0x42470000
 800199c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ea      	bne.n	8001982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8097 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b81      	ldr	r3, [pc, #516]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019da:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b77      	ldr	r3, [pc, #476]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f6:	4b74      	ldr	r3, [pc, #464]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a73      	ldr	r2, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fbad 	bl	8001160 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff fba9 	bl	8001160 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e10c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_OscConfig+0x474>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2ea>
 8001a30:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	4a63      	ldr	r2, [pc, #396]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x30c>
 8001a46:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a52:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a56:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0x324>
 8001a60:	4b58      	ldr	r3, [pc, #352]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6c:	4b55      	ldr	r3, [pc, #340]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a70:	4a54      	ldr	r2, [pc, #336]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001a72:	f023 0304 	bic.w	r3, r3, #4
 8001a76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d015      	beq.n	8001aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fb6e 	bl	8001160 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fb6a 	bl	8001160 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0cb      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ee      	beq.n	8001a88 <HAL_RCC_OscConfig+0x334>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fb58 	bl	8001160 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb54 	bl	8001160 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0b5      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ee      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	4a38      	ldr	r2, [pc, #224]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a1 	beq.w	8001c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d05c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d141      	bne.n	8001b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb28 	bl	8001160 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff fb24 	bl	8001160 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e087      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	4b27      	ldr	r3, [pc, #156]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	491b      	ldr	r1, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fafd 	bl	8001160 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff faf9 	bl	8001160 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e05c      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x416>
 8001b88:	e054      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fae6 	bl	8001160 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fae2 	bl	8001160 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e045      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x444>
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e038      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <HAL_RCC_OscConfig+0x4ec>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d028      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d121      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0cc      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b68      	ldr	r3, [pc, #416]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d90c      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d044      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d119      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e067      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d22:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f023 0203 	bic.w	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4934      	ldr	r1, [pc, #208]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d34:	f7ff fa14 	bl	8001160 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7ff fa10 	bl	8001160 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e04f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 020c 	and.w	r2, r3, #12
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1eb      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d64:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20c      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff76 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08018588 	.word	0x08018588
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b090      	sub	sp, #64	@ 0x40
 8001e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d00d      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x40>
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f200 80a1 	bhi.w	8001f7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e42:	e09b      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e44:	4b53      	ldr	r3, [pc, #332]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e48:	e09b      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b53      	ldr	r3, [pc, #332]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e4e:	e098      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e50:	4b4f      	ldr	r3, [pc, #316]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d028      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e7c:	fb03 f201 	mul.w	r2, r3, r1
 8001e80:	2300      	movs	r3, #0
 8001e82:	fb00 f303 	mul.w	r3, r0, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	4a43      	ldr	r2, [pc, #268]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e90:	460a      	mov	r2, r1
 8001e92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e96:	4413      	add	r3, r2
 8001e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	61fa      	str	r2, [r7, #28]
 8001ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eaa:	f7fe f9f1 	bl	8000290 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eb6:	e053      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb8:	4b35      	ldr	r3, [pc, #212]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	617a      	str	r2, [r7, #20]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001eca:	f04f 0b00 	mov.w	fp, #0
 8001ece:	4652      	mov	r2, sl
 8001ed0:	465b      	mov	r3, fp
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eea:	eb63 090b 	sbc.w	r9, r3, fp
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001efa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001efe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f02:	ebb2 0408 	subs.w	r4, r2, r8
 8001f06:	eb63 0509 	sbc.w	r5, r3, r9
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	00eb      	lsls	r3, r5, #3
 8001f14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f18:	00e2      	lsls	r2, r4, #3
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	eb14 030a 	adds.w	r3, r4, sl
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	eb45 030b 	adc.w	r3, r5, fp
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f36:	4629      	mov	r1, r5
 8001f38:	028b      	lsls	r3, r1, #10
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f40:	4621      	mov	r1, r4
 8001f42:	028a      	lsls	r2, r1, #10
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	60fa      	str	r2, [r7, #12]
 8001f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f54:	f7fe f99c 	bl	8000290 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3740      	adds	r7, #64	@ 0x40
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	017d7840 	.word	0x017d7840

08001f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08018598 	.word	0x08018598

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffdc 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0b5b      	lsrs	r3, r3, #13
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08018598 	.word	0x08018598

08002004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	220f      	movs	r2, #15
 8002012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <HAL_RCC_GetClockConfig+0x60>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0207 	and.w	r2, r3, #7
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07b      	b.n	8002172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800208a:	d009      	beq.n	80020a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
 8002092:	e005      	b.n	80020a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fd9a 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002124:	ea42 0103 	orr.w	r1, r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	f003 0104 	and.w	r1, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f003 0210 	and.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800218a:	f7fe ffe9 	bl	8001160 <HAL_GetTick>
 800218e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d001      	beq.n	80021a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	e12a      	b.n	80023fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_SPI_Transmit+0x36>
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e122      	b.n	80023fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_SPI_Transmit+0x48>
 80021be:	2302      	movs	r3, #2
 80021c0:	e11b      	b.n	80023fa <HAL_SPI_Transmit+0x280>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002210:	d10f      	bne.n	8002232 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002230:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b40      	cmp	r3, #64	@ 0x40
 800223e:	d007      	beq.n	8002250 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800224e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002258:	d152      	bne.n	8002300 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_SPI_Transmit+0xee>
 8002262:	8b7b      	ldrh	r3, [r7, #26]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d145      	bne.n	80022f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800228c:	e032      	b.n	80022f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d112      	bne.n	80022c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	1c9a      	adds	r2, r3, #2
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022c0:	e018      	b.n	80022f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022c2:	f7fe ff4d 	bl	8001160 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d803      	bhi.n	80022da <HAL_SPI_Transmit+0x160>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d102      	bne.n	80022e0 <HAL_SPI_Transmit+0x166>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e082      	b.n	80023fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1c7      	bne.n	800228e <HAL_SPI_Transmit+0x114>
 80022fe:	e053      	b.n	80023a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_SPI_Transmit+0x194>
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d147      	bne.n	800239e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002334:	e033      	b.n	800239e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d113      	bne.n	800236c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	330c      	adds	r3, #12
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	86da      	strh	r2, [r3, #54]	@ 0x36
 800236a:	e018      	b.n	800239e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236c:	f7fe fef8 	bl	8001160 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d803      	bhi.n	8002384 <HAL_SPI_Transmit+0x20a>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d102      	bne.n	800238a <HAL_SPI_Transmit+0x210>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e02d      	b.n	80023fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1c6      	bne.n	8002336 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fbd9 	bl	8002b64 <SPI_EndRxTxTransaction>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af02      	add	r7, sp, #8
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	e104      	b.n	800262c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800242a:	d112      	bne.n	8002452 <HAL_SPI_Receive+0x50>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10e      	bne.n	8002452 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2204      	movs	r2, #4
 8002438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f8f3 	bl	8002634 <HAL_SPI_TransmitReceive>
 800244e:	4603      	mov	r3, r0
 8002450:	e0ec      	b.n	800262c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002452:	f7fe fe85 	bl	8001160 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_Receive+0x62>
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0e1      	b.n	800262c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_SPI_Receive+0x74>
 8002472:	2302      	movs	r3, #2
 8002474:	e0da      	b.n	800262c <HAL_SPI_Receive+0x22a>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2204      	movs	r2, #4
 8002482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024c4:	d10f      	bne.n	80024e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d170      	bne.n	80025ee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800250c:	e035      	b.n	800257a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b01      	cmp	r3, #1
 800251a:	d115      	bne.n	8002548 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f103 020c 	add.w	r2, r3, #12
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002546:	e018      	b.n	800257a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002548:	f7fe fe0a 	bl	8001160 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d803      	bhi.n	8002560 <HAL_SPI_Receive+0x15e>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d102      	bne.n	8002566 <HAL_SPI_Receive+0x164>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e058      	b.n	800262c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1c4      	bne.n	800250e <HAL_SPI_Receive+0x10c>
 8002584:	e038      	b.n	80025f8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d113      	bne.n	80025bc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259e:	b292      	uxth	r2, r2
 80025a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a6:	1c9a      	adds	r2, r3, #2
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025ba:	e018      	b.n	80025ee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025bc:	f7fe fdd0 	bl	8001160 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d803      	bhi.n	80025d4 <HAL_SPI_Receive+0x1d2>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d102      	bne.n	80025da <HAL_SPI_Receive+0x1d8>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e01e      	b.n	800262c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1c6      	bne.n	8002586 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	6839      	ldr	r1, [r7, #0]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fa4b 	bl	8002a98 <SPI_EndRxTransaction>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800262a:	2300      	movs	r3, #0
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002642:	2301      	movs	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002646:	f7fe fd8b 	bl	8001160 <HAL_GetTick>
 800264a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002652:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800265e:	7ffb      	ldrb	r3, [r7, #31]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d00c      	beq.n	800267e <HAL_SPI_TransmitReceive+0x4a>
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800266a:	d106      	bne.n	800267a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <HAL_SPI_TransmitReceive+0x46>
 8002674:	7ffb      	ldrb	r3, [r7, #31]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d001      	beq.n	800267e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	e17f      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x5c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x5c>
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e174      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x6e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e16d      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d003      	beq.n	80026be <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2205      	movs	r2, #5
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	887a      	ldrh	r2, [r7, #2]
 80026e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b40      	cmp	r3, #64	@ 0x40
 8002700:	d007      	beq.n	8002712 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800271a:	d17e      	bne.n	800281a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SPI_TransmitReceive+0xf6>
 8002724:	8afb      	ldrh	r3, [r7, #22]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d16c      	bne.n	8002804 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	881a      	ldrh	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	e059      	b.n	8002804 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d11b      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x162>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x162>
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	2b01      	cmp	r3, #1
 800276c:	d113      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d119      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x1a4>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d014      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	b292      	uxth	r2, r2
 80027ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c0:	1c9a      	adds	r2, r3, #2
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d4:	2301      	movs	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027d8:	f7fe fcc2 	bl	8001160 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d80d      	bhi.n	8002804 <HAL_SPI_TransmitReceive+0x1d0>
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d009      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0bc      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1a0      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x11c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d19b      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x11c>
 8002818:	e082      	b.n	8002920 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x1f4>
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d171      	bne.n	800290c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284e:	e05d      	b.n	800290c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d11c      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x264>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x264>
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	2b01      	cmp	r3, #1
 800286c:	d114      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d119      	bne.n	80028da <HAL_SPI_TransmitReceive+0x2a6>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d6:	2301      	movs	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028da:	f7fe fc41 	bl	8001160 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d803      	bhi.n	80028f2 <HAL_SPI_TransmitReceive+0x2be>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d102      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x2c4>
 80028f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e038      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d19c      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x21c>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d197      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002920:	6a3a      	ldr	r2, [r7, #32]
 8002922:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f91d 	bl	8002b64 <SPI_EndRxTxTransaction>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e01d      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800297c:	2300      	movs	r3, #0
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3728      	adds	r7, #40	@ 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002998:	f7fe fbe2 	bl	8001160 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029a8:	f7fe fbda 	bl	8001160 <HAL_GetTick>
 80029ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ae:	4b39      	ldr	r3, [pc, #228]	@ (8002a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	0d1b      	lsrs	r3, r3, #20
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029be:	e054      	b.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d050      	beq.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c8:	f7fe fbca 	bl	8001160 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d902      	bls.n	80029de <SPI_WaitFlagStateUntilTimeout+0x56>
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d13d      	bne.n	8002a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80029ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029f6:	d111      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a00:	d004      	beq.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0a:	d107      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a24:	d10f      	bne.n	8002a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e017      	b.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d19b      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aac:	d111      	bne.n	8002ad2 <SPI_EndRxTransaction+0x3a>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab6:	d004      	beq.n	8002ac2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac0:	d107      	bne.n	8002ad2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ada:	d12a      	bne.n	8002b32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae4:	d012      	beq.n	8002b0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2180      	movs	r1, #128	@ 0x80
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff ff49 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e026      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2101      	movs	r1, #1
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff ff36 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01a      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e013      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ff23 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e000      	b.n	8002b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2201      	movs	r2, #1
 8002b78:	2102      	movs	r1, #2
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7ff ff04 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e032      	b.n	8002bfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <SPI_EndRxTxTransaction+0xa0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <SPI_EndRxTxTransaction+0xa4>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb4:	d112      	bne.n	8002bdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fee1 	bl	8002988 <SPI_WaitFlagStateUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e00f      	b.n	8002bfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b80      	cmp	r3, #128	@ 0x80
 8002bf4:	d0f2      	beq.n	8002bdc <SPI_EndRxTxTransaction+0x78>
 8002bf6:	e000      	b.n	8002bfa <SPI_EndRxTxTransaction+0x96>
        break;
 8002bf8:	bf00      	nop
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000000 	.word	0x20000000
 8002c08:	165e9f81 	.word	0x165e9f81

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e041      	b.n	8002ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f839 	bl	8002caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 f9b2 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e044      	b.n	8002d62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d018      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x6c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d02:	d013      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x6c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	@ (8002d74 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x6c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x6c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x6c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d010      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	e007      	b.n	8002d60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40014000 	.word	0x40014000

08002d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0202 	mvn.w	r2, #2
 8002db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8d2 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8c4 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8d5 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8ac 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f89e 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8af 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d020      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0208 	mvn.w	r2, #8
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2204      	movs	r2, #4
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f886 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f878 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f889 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d020      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f860 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f852 	bl	8002f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f863 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0201 	mvn.w	r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fc94 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8e6 	bl	80030e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f834 	bl	8002fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0220 	mvn.w	r2, #32
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8b8 	bl	80030cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00f      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <TIM_Base_SetConfig+0x100>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <TIM_Base_SetConfig+0x104>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <TIM_Base_SetConfig+0x108>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d017      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <TIM_Base_SetConfig+0x100>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <TIM_Base_SetConfig+0x104>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00f      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a26      	ldr	r2, [pc, #152]	@ (80030bc <TIM_Base_SetConfig+0x108>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <TIM_Base_SetConfig+0x10c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <TIM_Base_SetConfig+0x110>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <TIM_Base_SetConfig+0x114>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800

080030cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e042      	b.n	800318c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd ff78 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	@ 0x24
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f973 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	@ 0x28
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d175      	bne.n	80032a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Transmit+0x2c>
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e06e      	b.n	80032a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	@ 0x21
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d2:	f7fd ffc5 	bl	8001160 <HAL_GetTick>
 80031d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ec:	d108      	bne.n	8003200 <HAL_UART_Transmit+0x6c>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e003      	b.n	8003208 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003208:	e02e      	b.n	8003268 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	@ 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f848 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e03a      	b.n	80032a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	3302      	adds	r3, #2
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	e007      	b.n	800325a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1cb      	bne.n	800320a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2200      	movs	r2, #0
 800327a:	2140      	movs	r1, #64	@ 0x40
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f814 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e006      	b.n	80032a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ba:	e03b      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d037      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fd ff4c 	bl	8001160 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <UART_WaitOnFlagUntilTimeout+0x30>
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e03a      	b.n	8003354 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d023      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d020      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d01d      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b08      	cmp	r3, #8
 8003304:	d116      	bne.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f81d 	bl	800335c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2208      	movs	r2, #8
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e00f      	b.n	8003354 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d0b4      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b095      	sub	sp, #84	@ 0x54
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003384:	643a      	str	r2, [r7, #64]	@ 0x40
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800338a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e5      	bne.n	8003364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d119      	bne.n	8003408 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033f4:	61ba      	str	r2, [r7, #24]
 80033f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	613b      	str	r3, [r7, #16]
   return(result);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e5      	bne.n	80033d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003416:	bf00      	nop
 8003418:	3754      	adds	r7, #84	@ 0x54
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0c0      	sub	sp, #256	@ 0x100
 800342a:	af00      	add	r7, sp, #0
 800342c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800347c:	f021 010c 	bic.w	r1, r1, #12
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	ea40 0301 	orr.w	r3, r0, r1
 80034aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b8f      	ldr	r3, [pc, #572]	@ (80036f0 <UART_SetConfig+0x2cc>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d005      	beq.n	80034c4 <UART_SetConfig+0xa0>
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b8d      	ldr	r3, [pc, #564]	@ (80036f4 <UART_SetConfig+0x2d0>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7fe fd8a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80034c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034cc:	e003      	b.n	80034d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7fe fd71 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80034d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e0:	f040 810c 	bne.w	80036fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034fe:	415b      	adcs	r3, r3
 8003500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003506:	4621      	mov	r1, r4
 8003508:	eb12 0801 	adds.w	r8, r2, r1
 800350c:	4629      	mov	r1, r5
 800350e:	eb43 0901 	adc.w	r9, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb18 0303 	adds.w	r3, r8, r3
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800354a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800354e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003552:	460b      	mov	r3, r1
 8003554:	18db      	adds	r3, r3, r3
 8003556:	653b      	str	r3, [r7, #80]	@ 0x50
 8003558:	4613      	mov	r3, r2
 800355a:	eb42 0303 	adc.w	r3, r2, r3
 800355e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003568:	f7fc fe92 	bl	8000290 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b61      	ldr	r3, [pc, #388]	@ (80036f8 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003584:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003594:	415b      	adcs	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800359c:	4641      	mov	r1, r8
 800359e:	eb12 0a01 	adds.w	sl, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb43 0b01 	adc.w	fp, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035bc:	4692      	mov	sl, r2
 80035be:	469b      	mov	fp, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	eb1a 0303 	adds.w	r3, sl, r3
 80035c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035ca:	464b      	mov	r3, r9
 80035cc:	eb4b 0303 	adc.w	r3, fp, r3
 80035d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035e8:	460b      	mov	r3, r1
 80035ea:	18db      	adds	r3, r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ee:	4613      	mov	r3, r2
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035fe:	f7fc fe47 	bl	8000290 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4611      	mov	r1, r2
 8003608:	4b3b      	ldr	r3, [pc, #236]	@ (80036f8 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2301 	umull	r2, r3, r3, r1
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	@ 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1acb      	subs	r3, r1, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800361e:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <UART_SetConfig+0x2d4>)
 8003620:	fba3 2302 	umull	r2, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800362c:	441c      	add	r4, r3
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003638:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800363c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003648:	415b      	adcs	r3, r3
 800364a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800364c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6339      	str	r1, [r7, #48]	@ 0x30
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800369c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036ba:	f7fc fde9 	bl	8000290 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <UART_SetConfig+0x2d4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	@ 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3332      	adds	r3, #50	@ 0x32
 80036d6:	4a08      	ldr	r2, [pc, #32]	@ (80036f8 <UART_SetConfig+0x2d4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4422      	add	r2, r4
 80036ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ec:	e106      	b.n	80038fc <UART_SetConfig+0x4d8>
 80036ee:	bf00      	nop
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003706:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800370a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800370e:	4642      	mov	r2, r8
 8003710:	464b      	mov	r3, r9
 8003712:	1891      	adds	r1, r2, r2
 8003714:	6239      	str	r1, [r7, #32]
 8003716:	415b      	adcs	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371e:	4641      	mov	r1, r8
 8003720:	1854      	adds	r4, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0501 	adc.w	r5, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	00eb      	lsls	r3, r5, #3
 8003732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003736:	00e2      	lsls	r2, r4, #3
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
 800373c:	4643      	mov	r3, r8
 800373e:	18e3      	adds	r3, r4, r3
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003744:	464b      	mov	r3, r9
 8003746:	eb45 0303 	adc.w	r3, r5, r3
 800374a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800375a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800376a:	4629      	mov	r1, r5
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003774:	4621      	mov	r1, r4
 8003776:	008a      	lsls	r2, r1, #2
 8003778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800377c:	f7fc fd88 	bl	8000290 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4b60      	ldr	r3, [pc, #384]	@ (8003908 <UART_SetConfig+0x4e4>)
 8003786:	fba3 2302 	umull	r2, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	011c      	lsls	r4, r3, #4
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003798:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800379c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	61b9      	str	r1, [r7, #24]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037e4:	464b      	mov	r3, r9
 80037e6:	460a      	mov	r2, r1
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003808:	4649      	mov	r1, r9
 800380a:	008b      	lsls	r3, r1, #2
 800380c:	4641      	mov	r1, r8
 800380e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003812:	4641      	mov	r1, r8
 8003814:	008a      	lsls	r2, r1, #2
 8003816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800381a:	f7fc fd39 	bl	8000290 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4611      	mov	r1, r2
 8003824:	4b38      	ldr	r3, [pc, #224]	@ (8003908 <UART_SetConfig+0x4e4>)
 8003826:	fba3 2301 	umull	r2, r3, r3, r1
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2264      	movs	r2, #100	@ 0x64
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	1acb      	subs	r3, r1, r3
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	3332      	adds	r3, #50	@ 0x32
 8003838:	4a33      	ldr	r2, [pc, #204]	@ (8003908 <UART_SetConfig+0x4e4>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003844:	441c      	add	r4, r3
 8003846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800384a:	2200      	movs	r2, #0
 800384c:	673b      	str	r3, [r7, #112]	@ 0x70
 800384e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003850:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	1891      	adds	r1, r2, r2
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	415b      	adcs	r3, r3
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003864:	4641      	mov	r1, r8
 8003866:	1851      	adds	r1, r2, r1
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	4649      	mov	r1, r9
 800386c:	414b      	adcs	r3, r1
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387c:	4659      	mov	r1, fp
 800387e:	00cb      	lsls	r3, r1, #3
 8003880:	4651      	mov	r1, sl
 8003882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003886:	4651      	mov	r1, sl
 8003888:	00ca      	lsls	r2, r1, #3
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	4603      	mov	r3, r0
 8003890:	4642      	mov	r2, r8
 8003892:	189b      	adds	r3, r3, r2
 8003894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003896:	464b      	mov	r3, r9
 8003898:	460a      	mov	r2, r1
 800389a:	eb42 0303 	adc.w	r3, r2, r3
 800389e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038b8:	4649      	mov	r1, r9
 80038ba:	008b      	lsls	r3, r1, #2
 80038bc:	4641      	mov	r1, r8
 80038be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c2:	4641      	mov	r1, r8
 80038c4:	008a      	lsls	r2, r1, #2
 80038c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038ca:	f7fc fce1 	bl	8000290 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <UART_SetConfig+0x4e4>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	@ 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	3332      	adds	r3, #50	@ 0x32
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <UART_SetConfig+0x4e4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4422      	add	r2, r4
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003902:	46bd      	mov	sp, r7
 8003904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003908:	51eb851f 	.word	0x51eb851f

0800390c <calibrate>:
/**
   Calibrate the constant time
 **/

static void calibrate(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
    uint32_t time;
    volatile uint32_t i;

    iter_per_us = 1000000;
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <calibrate+0x5c>)
 8003914:	4a15      	ldr	r2, [pc, #84]	@ (800396c <calibrate+0x60>)
 8003916:	601a      	str	r2, [r3, #0]

    time = HAL_GetTick();
 8003918:	f7fd fc22 	bl	8001160 <HAL_GetTick>
 800391c:	6078      	str	r0, [r7, #4]
    /* Wait for next tick */
    while (HAL_GetTick() == time) {
 800391e:	bf00      	nop
 8003920:	f7fd fc1e 	bl	8001160 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4293      	cmp	r3, r2
 800392a:	d0f9      	beq.n	8003920 <calibrate+0x14>
        /* wait */
    }
    for (i=0; i<iter_per_us; i++) {
 800392c:	2300      	movs	r3, #0
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	e002      	b.n	8003938 <calibrate+0x2c>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <calibrate+0x5c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d3f7      	bcc.n	8003932 <calibrate+0x26>
    }
    iter_per_us /= ((HAL_GetTick()-time)*1000);
 8003942:	f7fd fc0d 	bl	8001160 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003950:	fb02 f303 	mul.w	r3, r2, r3
 8003954:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <calibrate+0x5c>)
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <calibrate+0x5c>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200000a0 	.word	0x200000a0
 800396c:	000f4240 	.word	0x000f4240

08003970 <up_udelay>:
/**
 * Software delay in �s
 *  us: the number of �s to wait
 **/
__inline static void up_udelay(uint32_t us)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for (i=0; i<us*iter_per_us; i++) {
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e002      	b.n	8003984 <up_udelay+0x14>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <up_udelay+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	429a      	cmp	r2, r3
 8003992:	d8f4      	bhi.n	800397e <up_udelay+0xe>
    }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	200000a0 	.word	0x200000a0

080039a8 <enc_rdgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdgreg2(uint8_t cmd)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	733b      	strb	r3, [r7, #12]

  /* Send the read command and collect the data.  The sequence requires
   * 16-clocks:  8 to clock out the cmd + 8 to clock in the data.
   */

  ENC_SPI_SendBuf(cmdpdata, cmdpdata, 2);
 80039b6:	f107 010c 	add.w	r1, r7, #12
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	2202      	movs	r2, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe0d 	bl	80045e0 <ENC_SPI_SendBuf>

  return cmdpdata[1];
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <enc_wrgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	460a      	mov	r2, r1
 80039da:	71fb      	strb	r3, [r7, #7]
 80039dc:	4613      	mov	r3, r2
 80039de:	71bb      	strb	r3, [r7, #6]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	733b      	strb	r3, [r7, #12]
    cmdpdata[1] = wrdata;
 80039e4:	79bb      	ldrb	r3, [r7, #6]
 80039e6:	737b      	strb	r3, [r7, #13]

    /* Send the write command and data.  The sequence requires 16-clocks:
     * 8 to clock out the cmd + 8 to clock out the data.
     */

    ENC_SPI_SendBuf(cmdpdata, NULL, 2);
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2202      	movs	r2, #2
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fdf5 	bl	80045e0 <ENC_SPI_SendBuf>
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <enc_waitgreg>:
 *
 ****************************************************************************/

static bool enc_waitgreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	71bb      	strb	r3, [r7, #6]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8003a10:	f7fd fba6 	bl	8001160 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ffc2 	bl	80039a8 <enc_rdgreg2>
 8003a24:	4603      	mov	r3, r0
 8003a26:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003a28:	f7fd fb9a 	bl	8001160 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8003a34:	7cfa      	ldrb	r2, [r7, #19]
 8003a36:	79bb      	ldrb	r3, [r7, #6]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	797a      	ldrb	r2, [r7, #5]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d002      	beq.n	8003a48 <enc_waitgreg+0x4a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b31      	cmp	r3, #49	@ 0x31
 8003a46:	d9e6      	bls.n	8003a16 <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8003a48:	7cfa      	ldrb	r2, [r7, #19]
 8003a4a:	79bb      	ldrb	r3, [r7, #6]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	797a      	ldrb	r2, [r7, #5]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	bf0c      	ite	eq
 8003a56:	2301      	moveq	r3, #1
 8003a58:	2300      	movne	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <enc_waitwhilegreg>:
 ****************************************************************************/

#ifndef USE_PROTOTHREADS
static bool enc_waitwhilegreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	71bb      	strb	r3, [r7, #6]
 8003a72:	4613      	mov	r3, r2
 8003a74:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8003a76:	f7fd fb73 	bl	8001160 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff8f 	bl	80039a8 <enc_rdgreg2>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003a8e:	f7fd fb67 	bl	8001160 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8003a9a:	7cfa      	ldrb	r2, [r7, #19]
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	797a      	ldrb	r2, [r7, #5]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d102      	bne.n	8003aae <enc_waitwhilegreg+0x4a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b31      	cmp	r3, #49	@ 0x31
 8003aac:	d9e6      	bls.n	8003a7c <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8003aae:	7cfa      	ldrb	r2, [r7, #19]
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	797a      	ldrb	r2, [r7, #5]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <enc_reset>:
  *    SRC operation is terminated by raising the CS pin."
  *
  * @param  None
  * @retval None
  */
void enc_reset(ENC_HandleTypeDef *handle) {
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]

  /* Send the system reset command. */
  ENC_SPI_Send(ENC_SRC);
 8003ad2:	20ff      	movs	r0, #255	@ 0xff
 8003ad4:	f000 fd60 	bl	8004598 <ENC_SPI_Send>
   * written to until at least 50 �s have passed since the Reset has ended.
   * All registers will revert to their Reset default values. The dual
   * port buffer memory will maintain state throughout the System Reset."
   */

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	741a      	strb	r2, [r3, #16]
  //up_mdelay(2);
  HAL_Delay(2); /* >1000 �s, conforms to errata #2 */
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f7fd fb4a 	bl	8001178 <HAL_Delay>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <enc_setbank>:
 *
 * Assumptions:
 *
 ****************************************************************************/

void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]

  if (bank != handle->bank) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7c1b      	ldrb	r3, [r3, #16]
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d00e      	beq.n	8003b20 <enc_setbank+0x34>
      /* Select bank 0 (just so that all of the bits are cleared) */

      enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8003b02:	2103      	movs	r1, #3
 8003b04:	20bf      	movs	r0, #191	@ 0xbf
 8003b06:	f7ff ff63 	bl	80039d0 <enc_wrgreg2>

      /* Then OR in bits to get the correct bank */

      if (bank != 0)
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <enc_setbank+0x2e>
        {
          enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	4619      	mov	r1, r3
 8003b14:	209f      	movs	r0, #159	@ 0x9f
 8003b16:	f7ff ff5b 	bl	80039d0 <enc_wrgreg2>
        }

      /* Then remember the bank setting */

      handle->bank = bank;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	741a      	strb	r2, [r3, #16]
    }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <enc_rdbreg>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffd2 	bl	8003aec <enc_setbank>
  /* Send the RCR command and collect the data.  How we collect the data
   * depends on if this is a PHY/CAN or not.  The normal sequence requires
   * 16-clocks:  8 to clock out the cmd and  8 to clock in the data.
   */

  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	733b      	strb	r3, [r7, #12]

  /* The PHY/MAC sequence requires 24-clocks:  8 to clock out the cmd,
   * 8 dummy bits, and 8 to clock in the PHY/MAC data.
   */

  ENC_SPI_SendBuf(data, data, (ISPHYMAC(ctrlreg))?3:2);
 8003b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da01      	bge.n	8003b5e <enc_rdbreg+0x36>
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	e000      	b.n	8003b60 <enc_rdbreg+0x38>
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f107 010c 	add.w	r1, r7, #12
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fd39 	bl	80045e0 <ENC_SPI_SendBuf>
  return (ISPHYMAC(ctrlreg))?data[2]:data[1];
 8003b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	da01      	bge.n	8003b7a <enc_rdbreg+0x52>
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	e000      	b.n	8003b7c <enc_rdbreg+0x54>
 8003b7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <enc_wrbreg>:
 *
 ****************************************************************************/

static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                       uint8_t wrdata)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
 8003b90:	4613      	mov	r3, r2
 8003b92:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ffa2 	bl	8003aec <enc_setbank>

  /* Send the WCR command and data.  The sequence requires 16-clocks:
   * 8 to clock out the cmd + 8 to clock out the data.
   */

  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8003ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8003bbc:	78bb      	ldrb	r3, [r7, #2]
 8003bbe:	737b      	strb	r3, [r7, #13]

  ENC_SPI_SendBuf(data, NULL, 2);
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fd09 	bl	80045e0 <ENC_SPI_SendBuf>
}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <enc_waitbreg>:
 *
 ****************************************************************************/

static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	461a      	mov	r2, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	70fb      	strb	r3, [r7, #3]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70bb      	strb	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8003bf0:	f7fd fab6 	bl	8001160 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdbreg(handle, ctrlreg);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff94 	bl	8003b28 <enc_rdbreg>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003c04:	f7fd faac 	bl	8001160 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8003c10:	7cfa      	ldrb	r2, [r7, #19]
 8003c12:	78bb      	ldrb	r3, [r7, #2]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	787a      	ldrb	r2, [r7, #1]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d002      	beq.n	8003c24 <enc_waitbreg+0x4e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b31      	cmp	r3, #49	@ 0x31
 8003c22:	d9e8      	bls.n	8003bf6 <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8003c24:	7cfa      	ldrb	r2, [r7, #19]
 8003c26:	78bb      	ldrb	r3, [r7, #2]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	787a      	ldrb	r2, [r7, #1]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <enc_rdphy>:
 * Assumptions:
 *
 ****************************************************************************/

static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	81fb      	strh	r3, [r7, #14]
   *
   *   1. Write the address of the PHY register to read from into the MIREGADR
   *      register.
   */

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	461a      	mov	r2, r3
 8003c54:	21d4      	movs	r1, #212	@ 0xd4
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ff94 	bl	8003b84 <enc_wrbreg>

  /*   2. Set the MICMD.MIIRD bit. The read operation begins and the
   *      MISTAT.BUSY bit is set.
   */

  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	21d2      	movs	r1, #210	@ 0xd2
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff8f 	bl	8003b84 <enc_wrbreg>

//  volatile int i;
//  for (i=0; i<12*17; i++) {
//  }

  up_udelay(12);
 8003c66:	200c      	movs	r0, #12
 8003c68:	f7ff fe82 	bl	8003970 <up_udelay>

  if (enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2201      	movs	r2, #1
 8003c70:	21ea      	movs	r1, #234	@ 0xea
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ffaf 	bl	8003bd6 <enc_waitbreg>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <enc_rdphy+0x6c>
    {
      /* 4. Clear the MICMD.MIIRD bit. */

      enc_wrbreg(handle, ENC_MICMD, 0x00);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	21d2      	movs	r1, #210	@ 0xd2
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff7e 	bl	8003b84 <enc_wrbreg>

      /* 5. Read the desired data from the MIRDL and MIRDH registers. The
       *    order that these bytes are accessed is unimportant."
       */

      data  = (uint16_t)enc_rdbreg(handle, ENC_MIRDL);
 8003c88:	21d8      	movs	r1, #216	@ 0xd8
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff4c 	bl	8003b28 <enc_rdbreg>
 8003c90:	4603      	mov	r3, r0
 8003c92:	81fb      	strh	r3, [r7, #14]
      data |= (uint16_t)enc_rdbreg(handle, ENC_MIRDH) << 8;
 8003c94:	21d9      	movs	r1, #217	@ 0xd9
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff46 	bl	8003b28 <enc_rdbreg>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	b21a      	sxth	r2, r3
 8003ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	81fb      	strh	r3, [r7, #14]
    }

  return data;
 8003cac:	89fb      	ldrh	r3, [r7, #14]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <enc_wrphy>:
 *
 ****************************************************************************/

static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr,
                      uint16_t phydata)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	803b      	strh	r3, [r7, #0]
   *
   *    1. Write the address of the PHY register to write to into the
   *       MIREGADR register.
   */

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	21d4      	movs	r1, #212	@ 0xd4
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff59 	bl	8003b84 <enc_wrbreg>

  /*    2. Write the lower 8 bits of data to write into the MIWRL register. */

  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8003cd2:	883b      	ldrh	r3, [r7, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	21d6      	movs	r1, #214	@ 0xd6
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff52 	bl	8003b84 <enc_wrbreg>
   *       Writing to this register automatically begins the MIIM transaction,
   *       so it must be written to after MIWRL. The MISTAT.BUSY bit becomes
   *       set.
   */

  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8003ce0:	883b      	ldrh	r3, [r7, #0]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	21d7      	movs	r1, #215	@ 0xd7
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff49 	bl	8003b84 <enc_wrbreg>
  /* wait for approx 12 �s */
//  volatile int i;
//  for (i=0; i<12*17; i++) {
//  }

  up_udelay(12);
 8003cf2:	200c      	movs	r0, #12
 8003cf4:	f7ff fe3c 	bl	8003970 <up_udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	21ea      	movs	r1, #234	@ 0xea
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ff69 	bl	8003bd6 <enc_waitbreg>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <ENC_Start>:
  * @brief  Initialize the enc28j60 and configure the needed hardware resources
  * @param  handle: Handle on data configuration.
  * @retval None
  */
bool ENC_Start(ENC_HandleTypeDef *handle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    /* register value */
    uint8_t regval;

    /* Calibrate time constant */
    calibrate();
 8003d14:	f7ff fdfa 	bl	800390c <calibrate>

    /* System reset */
	enc_reset(handle);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fed6 	bl	8003aca <enc_reset>

	/* Use bank 0 */
	enc_setbank(handle, 0);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fee3 	bl	8003aec <enc_setbank>
    /* Check if we are actually communicating with the ENC28J60.  If its
     * 0x00 or 0xff, then we are probably not communicating correctly
     * via SPI.
     */

    regval = enc_rdbreg(handle, ENC_EREVID);
 8003d26:	2172      	movs	r1, #114	@ 0x72
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fefd 	bl	8003b28 <enc_rdbreg>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	73fb      	strb	r3, [r7, #15]
    if (regval == 0x00 || regval == 0xff) {
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <ENC_Start+0x32>
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2bff      	cmp	r3, #255	@ 0xff
 8003d3c:	d101      	bne.n	8003d42 <ENC_Start+0x36>
      return false;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e0cc      	b.n	8003edc <ENC_Start+0x1d0>
    }

    /* Initialize ECON2: Enable address auto increment.
     */

    enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 8003d42:	2180      	movs	r1, #128	@ 0x80
 8003d44:	205e      	movs	r0, #94	@ 0x5e
 8003d46:	f7ff fe43 	bl	80039d0 <enc_wrgreg2>

    /* Initialize receive buffer.
     * First, set the receive buffer start address.
     */

    handle->nextpkt = PKTMEM_RX_START;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	829a      	strh	r2, [r3, #20]
    enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2108      	movs	r1, #8
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff15 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2109      	movs	r1, #9
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ff10 	bl	8003b84 <enc_wrbreg>

    /* Set the receive data pointer */

    /* Errata 14 */
    enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8003d64:	22ff      	movs	r2, #255	@ 0xff
 8003d66:	210c      	movs	r1, #12
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff0b 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 8003d6e:	2219      	movs	r2, #25
 8003d70:	210d      	movs	r1, #13
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff06 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_START >> 8);
*/

    /* Set the receive buffer end. */

    enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 8003d78:	22ff      	movs	r2, #255	@ 0xff
 8003d7a:	210a      	movs	r1, #10
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff01 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 8003d82:	2219      	movs	r2, #25
 8003d84:	210b      	movs	r1, #11
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fefc 	bl	8003b84 <enc_wrbreg>

    /* Set transmit buffer start. */

    handle->transmitLength = 0;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	831a      	strh	r2, [r3, #24]
    enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2104      	movs	r1, #4
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fef4 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8003d9c:	221a      	movs	r2, #26
 8003d9e:	2105      	movs	r1, #5
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff feef 	bl	8003b84 <enc_wrbreg>

    /* Set filter mode: unicast OR broadcast AND crc valid */

    enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 8003da6:	22a1      	movs	r2, #161	@ 0xa1
 8003da8:	2138      	movs	r1, #56	@ 0x38
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff feea 	bl	8003b84 <enc_wrbreg>

	do {
		HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 8003db0:	200a      	movs	r0, #10
 8003db2:	f7fd f9e1 	bl	8001178 <HAL_Delay>
		regval = enc_rdbreg(handle, ENC_ESTAT);
 8003db6:	211d      	movs	r1, #29
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff feb5 	bl	8003b28 <enc_rdbreg>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	73fb      	strb	r3, [r7, #15]
	} while ((regval & ESTAT_CLKRDY) == 0);
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f1      	beq.n	8003db0 <ENC_Start+0xa4>

    /* Enable MAC receive */

    enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 8003dcc:	220d      	movs	r2, #13
 8003dce:	21c0      	movs	r1, #192	@ 0xc0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fed7 	bl	8003b84 <enc_wrbreg>

    /* Enable automatic padding and CRC operations */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d120      	bne.n	8003e20 <ENC_Start+0x114>
      enc_wrbreg(handle, ENC_MACON3,
                 ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <ENC_Start+0xde>
 8003de6:	2332      	movs	r3, #50	@ 0x32
 8003de8:	e000      	b.n	8003dec <ENC_Start+0xe0>
 8003dea:	2302      	movs	r3, #2
 8003dec:	461a      	mov	r2, r3
 8003dee:	21c2      	movs	r1, #194	@ 0xc2
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fec7 	bl	8003b84 <enc_wrbreg>
                 MACON3_FRMLNEN);
      enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER);        /* Defer transmission enable */
 8003df6:	2240      	movs	r2, #64	@ 0x40
 8003df8:	21c3      	movs	r1, #195	@ 0xc3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fec2 	bl	8003b84 <enc_wrbreg>

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8003e00:	2212      	movs	r2, #18
 8003e02:	21c6      	movs	r1, #198	@ 0xc6
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff febd 	bl	8003b84 <enc_wrbreg>
      enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	21c7      	movs	r1, #199	@ 0xc7
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff feb8 	bl	8003b84 <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 8003e14:	2212      	movs	r2, #18
 8003e16:	21c4      	movs	r1, #196	@ 0xc4
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff feb3 	bl	8003b84 <enc_wrbreg>
 8003e1e:	e015      	b.n	8003e4c <ENC_Start+0x140>
    } else {
      /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */

      enc_wrbreg(handle, ENC_MACON3,
                ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <ENC_Start+0x120>
 8003e28:	2333      	movs	r3, #51	@ 0x33
 8003e2a:	e000      	b.n	8003e2e <ENC_Start+0x122>
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	21c2      	movs	r1, #194	@ 0xc2
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fea6 	bl	8003b84 <enc_wrbreg>
                MACON3_FRMLNEN | MACON3_FULDPX);

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8003e38:	2212      	movs	r2, #18
 8003e3a:	21c6      	movs	r1, #198	@ 0xc6
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fea1 	bl	8003b84 <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 8003e42:	2215      	movs	r2, #21
 8003e44:	21c4      	movs	r1, #196	@ 0xc4
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fe9c 	bl	8003b84 <enc_wrbreg>
    }

    /* Set the maximum packet size which the controller will accept */

    enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU+18) & 0xff);
 8003e4c:	22ee      	movs	r2, #238	@ 0xee
 8003e4e:	21ca      	movs	r1, #202	@ 0xca
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fe97 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU+18) >> 8);
 8003e56:	2205      	movs	r2, #5
 8003e58:	21cb      	movs	r1, #203	@ 0xcb
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fe92 	bl	8003b84 <enc_wrbreg>
  /* Configure LEDs (No, just use the defaults for now) */
  /* enc_wrphy(priv, ENC_PHLCON, ??); */

    /* Setup up PHCON1 & 2 */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10b      	bne.n	8003e80 <ENC_Start+0x174>
      enc_wrphy(handle, ENC_PHCON1, 0x00);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff22 	bl	8003cb6 <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 8003e72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e76:	2110      	movs	r1, #16
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff1c 	bl	8003cb6 <enc_wrphy>
 8003e7e:	e00a      	b.n	8003e96 <ENC_Start+0x18a>
    } else {
      enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 8003e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e84:	2100      	movs	r1, #0
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ff15 	bl	8003cb6 <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, 0x00);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2110      	movs	r1, #16
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff10 	bl	8003cb6 <enc_wrphy>

    /* Not used Restore normal operation mode
    enc_pwrfull(handle); */

    /* Process interrupt settings */
    if (handle->Init.InterruptEnableBits & EIE_LINKIE) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7b1b      	ldrb	r3, [r3, #12]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <ENC_Start+0x1a0>
      /* Enable link change interrupt in PHY module */
      enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 8003ea2:	2212      	movs	r2, #18
 8003ea4:	2112      	movs	r1, #18
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ff05 	bl	8003cb6 <enc_wrphy>
    }

    /* Since we not modify PHLCON register, we don't fall in errata 11 case */

    /* Reset all interrupt flags */
    enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8003eac:	213b      	movs	r1, #59	@ 0x3b
 8003eae:	20bc      	movs	r0, #188	@ 0xbc
 8003eb0:	f7ff fd8e 	bl	80039d0 <enc_wrgreg2>

    regval = handle->Init.InterruptEnableBits;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7b1b      	ldrb	r3, [r3, #12]
 8003eb8:	73fb      	strb	r3, [r7, #15]
    if (regval) {
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <ENC_Start+0x1bc>
        /* Ensure INTIE is set when at least an interruption is selected */
        regval |= EIE_INTIE;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ec6:	73fb      	strb	r3, [r7, #15]
    }
    /* Enable selected interrupts in ethernet controller module */
    enc_bfsgreg(ENC_EIE, regval);
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	209b      	movs	r0, #155	@ 0x9b
 8003ece:	f7ff fd7f 	bl	80039d0 <enc_wrgreg2>

    /* Enable the receiver */
    enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	209f      	movs	r0, #159	@ 0x9f
 8003ed6:	f7ff fd7b 	bl	80039d0 <enc_wrgreg2>

    return true;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <ENC_SetMacAddr>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_SetMacAddr(ENC_HandleTypeDef *handle)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
   *   MAADR4  MAC Address Byte 4 (MAADR<23:16>)
   *   MAADR5  MAC Address Byte 5 (MAADR<15:8>)
   *   MAADR6  MAC Address Byte 6 (MAADR<7:0>)
   */

  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	21e4      	movs	r1, #228	@ 0xe4
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fe44 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	3301      	adds	r3, #1
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	21e5      	movs	r1, #229	@ 0xe5
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fe3b 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	3302      	adds	r3, #2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	21e2      	movs	r1, #226	@ 0xe2
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fe32 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	3303      	adds	r3, #3
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	21e3      	movs	r1, #227	@ 0xe3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fe29 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	21e0      	movs	r1, #224	@ 0xe0
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fe20 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	3305      	adds	r3, #5
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	21e1      	movs	r1, #225	@ 0xe1
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe17 	bl	8003b84 <enc_wrbreg>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <ENC_WriteBuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

void ENC_WriteBuffer(void *buffer, uint16_t buflen)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]
   * We explicitly select the ENC28J60 chip because we have to transmits several pieces of
   * information while keeping CS low
   *
   */

  ENC_SPI_Select(true);
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	f000 fb76 	bl	800465c <ENC_SPI_Select>
   * "...The [3-bit]WBM opcode should then be sent to the ENC28J60,
   *  followed by the 5-bit constant, 1Ah."
   */


  ENC_SPI_SendWithoutSelection(ENC_WBM);
 8003f70:	207a      	movs	r0, #122	@ 0x7a
 8003f72:	f000 fafb 	bl	800456c <ENC_SPI_SendWithoutSelection>
   *  enabled, it is possible to continuously write sequential bytes
   *  to the buffer memory without any extra SPI command
   *  overhead.
   */

  ENC_SPI_SendBuf(buffer, NULL, buflen);
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb2f 	bl	80045e0 <ENC_SPI_SendBuf>
   *
   * "The WBM command is terminated by bringing up the CS pin. ..."
   * done in ENC_SPI_SendBuf callback
   */

}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <enc_rdbuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	807b      	strh	r3, [r7, #2]
  /* Select ENC28J60 chip */

  ENC_SPI_Select(true);
 8003f96:	2001      	movs	r0, #1
 8003f98:	f000 fb60 	bl	800465c <ENC_SPI_Select>

  /* Send the read buffer memory command (ignoring the response) */

  ENC_SPI_SendWithoutSelection(ENC_RBM);
 8003f9c:	203a      	movs	r0, #58	@ 0x3a
 8003f9e:	f000 fae5 	bl	800456c <ENC_SPI_SendWithoutSelection>

  /* Then read the buffer data */

  ENC_SPI_SendBuf(NULL, buffer, buflen);
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f000 fb19 	bl	80045e0 <ENC_SPI_SendBuf>

  /* De-select ENC28J60 chip: done in ENC_SPI_SendBuf callback */
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ENC_RestoreTXBuffer>:
 * Assumptions:
 *
 ****************************************************************************/

int8_t ENC_RestoreTXBuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if (!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0)) {
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2108      	movs	r1, #8
 8003fc6:	201f      	movs	r0, #31
 8003fc8:	f7ff fd19 	bl	80039fe <enc_waitgreg>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <ENC_RestoreTXBuffer+0x28>
    return ERR_TIMEOUT;
 8003fd8:	f06f 0302 	mvn.w	r3, #2
 8003fdc:	e03c      	b.n	8004058 <ENC_RestoreTXBuffer+0xa2>

  /* Send the packet: address=priv->dev.d_buf, length=priv->dev.d_len */

  /* Set transmit buffer start (is this necessary?). */

  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fdce 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8003fe8:	221a      	movs	r2, #26
 8003fea:	2105      	movs	r1, #5
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fdc9 	bl	8003b84 <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */

  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fdc4 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 8003ffc:	221a      	movs	r2, #26
 8003ffe:	2103      	movs	r1, #3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fdbf 	bl	8003b84 <enc_wrbreg>
  /* Set the TX End pointer based on the size of the packet to send. Note
   * that the offset accounts for the control byte at the beginning the
   * buffer plus the size of the packet data.
   */

  txend = PKTMEM_TX_START + len;
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 800400c:	81fb      	strh	r3, [r7, #14]

  if (txend+8>PKTMEM_TX_ENDP1) {
 800400e:	89fb      	ldrh	r3, [r7, #14]
 8004010:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <ENC_RestoreTXBuffer+0x68>
    return ERR_MEM;
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	e01c      	b.n	8004058 <ENC_RestoreTXBuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 800401e:	89fb      	ldrh	r3, [r7, #14]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	2106      	movs	r1, #6
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fdac 	bl	8003b84 <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	2107      	movs	r1, #7
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fda3 	bl	8003b84 <enc_wrbreg>
   *   POVERRIDE is zero).
   * PHUGEEN: Per Packet Huge Frame Enable bit (Set, but won't be used
   *   because POVERRIDE is zero).
   */

  control_write[0] = ENC_WBM;
 800403e:	237a      	movs	r3, #122	@ 0x7a
 8004040:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 8004042:	230e      	movs	r3, #14
 8004044:	737b      	strb	r3, [r7, #13]
  ENC_SPI_SendBuf(control_write, control_write, 2);
 8004046:	f107 010c 	add.w	r1, r7, #12
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	2202      	movs	r2, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fac5 	bl	80045e0 <ENC_SPI_SendBuf>

  return ERR_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <ENC_Transmit>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_Transmit(ENC_HandleTypeDef *handle)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    if (handle->transmitLength != 0) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8b1b      	ldrh	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d053      	beq.n	8004118 <ENC_Transmit+0xb8>
        /* Set TXRTS to send the packet in the transmit buffer */

        //enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
        /* Implement erratas 12, 13 and 15 */
        /* Reset transmit logic */
        handle->retries = 16;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2210      	movs	r2, #16
 8004074:	849a      	strh	r2, [r3, #36]	@ 0x24
        do {
            enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	209f      	movs	r0, #159	@ 0x9f
 800407a:	f7ff fca9 	bl	80039d0 <enc_wrgreg2>
            enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 800407e:	2180      	movs	r1, #128	@ 0x80
 8004080:	20bf      	movs	r0, #191	@ 0xbf
 8004082:	f7ff fca5 	bl	80039d0 <enc_wrgreg2>
            enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8004086:	210a      	movs	r1, #10
 8004088:	20bc      	movs	r0, #188	@ 0xbc
 800408a:	f7ff fca1 	bl	80039d0 <enc_wrgreg2>

            /* Start transmission */
            enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 800408e:	2108      	movs	r1, #8
 8004090:	209f      	movs	r0, #159	@ 0x9f
 8004092:	f7ff fc9d 	bl	80039d0 <enc_wrgreg2>

            /* Wait for end of transmission */
            enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8004096:	2200      	movs	r2, #0
 8004098:	210a      	movs	r1, #10
 800409a:	201c      	movs	r0, #28
 800409c:	f7ff fce2 	bl	8003a64 <enc_waitwhilegreg>

            /* Stop transmission */
            enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 80040a0:	2108      	movs	r1, #8
 80040a2:	20bf      	movs	r0, #191	@ 0xbf
 80040a4:	f7ff fc94 	bl	80039d0 <enc_wrgreg2>
            {
                uint16_t addtTsv4;
                uint8_t tsv4, regval;

                /* read tsv */
                addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8b1b      	ldrh	r3, [r3, #24]
 80040ac:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 80040b0:	3304      	adds	r3, #4
 80040b2:	81fb      	strh	r3, [r7, #14]

                enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 80040b4:	89fb      	ldrh	r3, [r7, #14]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	2100      	movs	r1, #0
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fd61 	bl	8003b84 <enc_wrbreg>
                enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 80040c2:	89fb      	ldrh	r3, [r7, #14]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	2101      	movs	r1, #1
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fd58 	bl	8003b84 <enc_wrbreg>

                enc_rdbuffer(&tsv4, 1);
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff55 	bl	8003f8a <enc_rdbuffer>
                regval = enc_rdgreg(ENC_EIR);
 80040e0:	201c      	movs	r0, #28
 80040e2:	f7ff fc61 	bl	80039a8 <enc_rdgreg2>
 80040e6:	4603      	mov	r3, r0
 80040e8:	737b      	strb	r3, [r7, #13]
                if (!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL)) {
 80040ea:	7b7b      	ldrb	r3, [r7, #13]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <ENC_Transmit+0xb2>
 80040f4:	7b3b      	ldrb	r3, [r7, #12]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <ENC_Transmit+0xb2>
                    break;
                }
            }
            handle->retries--;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	849a      	strh	r2, [r3, #36]	@ 0x24
        } while (handle->retries > 0);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1b1      	bne.n	8004076 <ENC_Transmit+0x16>
        /* Transmission finished (but can be unsuccessful) */
        handle->transmitLength = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	831a      	strh	r2, [r3, #24]
    }
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <ENC_GetReceivedFrame>:
 * Assumptions:
 *
 ****************************************************************************/

bool ENC_GetReceivedFrame(ENC_HandleTypeDef *handle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    uint16_t pktlen;
    uint16_t rxstat;

    uint8_t pktcnt;

    bool result = true;
 8004128:	2301      	movs	r3, #1
 800412a:	757b      	strb	r3, [r7, #21]

    pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 800412c:	2139      	movs	r1, #57	@ 0x39
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fcfa 	bl	8003b28 <enc_rdbreg>
 8004134:	4603      	mov	r3, r0
 8004136:	753b      	strb	r3, [r7, #20]
    if (pktcnt == 0) {
 8004138:	7d3b      	ldrb	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <ENC_GetReceivedFrame+0x22>
        return false;
 800413e:	2300      	movs	r3, #0
 8004140:	e078      	b.n	8004234 <ENC_GetReceivedFrame+0x114>
    };

    /* Set the read pointer to the start of the received packet (ERDPT) */

    enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8a9b      	ldrh	r3, [r3, #20]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fd19 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8a9b      	ldrh	r3, [r3, #20]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b29b      	uxth	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	2101      	movs	r1, #1
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fd0f 	bl	8003b84 <enc_wrbreg>
    /* Read the next packet pointer and the 4 byte read status vector (RSV)
    * at the beginning of the received packet. (ERDPT should auto-increment
    * and wrap to the beginning of the read buffer as necessary)
    */

    enc_rdbuffer(rsv, 6);
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	2106      	movs	r1, #6
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff0c 	bl	8003f8a <enc_rdbuffer>
    *              padding and CRC fields. This field is stored in little-
    *              endian format.
    *  Bits 16-31: Bit encoded RX status.
    */

    handle->nextpkt = (uint16_t)rsv[1] << 8 | (uint16_t)rsv[0];
 8004172:	7b7b      	ldrb	r3, [r7, #13]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	b21a      	sxth	r2, r3
 8004178:	7b3b      	ldrb	r3, [r7, #12]
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21b      	sxth	r3, r3
 8004180:	b29a      	uxth	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	829a      	strh	r2, [r3, #20]
    pktlen        = (uint16_t)rsv[3] << 8 | (uint16_t)rsv[2];
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	b21a      	sxth	r2, r3
 800418c:	7bbb      	ldrb	r3, [r7, #14]
 800418e:	b21b      	sxth	r3, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	b21b      	sxth	r3, r3
 8004194:	827b      	strh	r3, [r7, #18]
    rxstat        = (uint16_t)rsv[5] << 8 | (uint16_t)rsv[4];
 8004196:	7c7b      	ldrb	r3, [r7, #17]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	b21a      	sxth	r2, r3
 800419c:	7c3b      	ldrb	r3, [r7, #16]
 800419e:	b21b      	sxth	r3, r3
 80041a0:	4313      	orrs	r3, r2
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */

    if ((rxstat & RXSTAT_OK) == 0) {
 80041a6:	8afb      	ldrh	r3, [r7, #22]
 80041a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <ENC_GetReceivedFrame+0x96>
#ifdef CONFIG_ENC28J60_STATS
        priv->stats.rxnotok++;
#endif
        result = false;
 80041b0:	2300      	movs	r3, #0
 80041b2:	757b      	strb	r3, [r7, #21]
 80041b4:	e018      	b.n	80041e8 <ENC_GetReceivedFrame+0xc8>
    } else { /* Check for a usable packet length (4 added for the CRC) */
        if (pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4)) {
 80041b6:	8a7b      	ldrh	r3, [r7, #18]
 80041b8:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 80041bc:	d802      	bhi.n	80041c4 <ENC_GetReceivedFrame+0xa4>
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	2b12      	cmp	r3, #18
 80041c2:	d802      	bhi.n	80041ca <ENC_GetReceivedFrame+0xaa>
    #ifdef CONFIG_ENC28J60_STATS
            priv->stats.rxpktlen++;
    #endif
            result = false;
 80041c4:	2300      	movs	r3, #0
 80041c6:	757b      	strb	r3, [r7, #21]
 80041c8:	e00e      	b.n	80041e8 <ENC_GetReceivedFrame+0xc8>
        } else { /* Otherwise, read and process the packet */
            /* Save the packet length (without the 4 byte CRC) in handle->RxFrameInfos.length*/

            handle->RxFrameInfos.length = pktlen - 4;
 80041ca:	8a7b      	ldrh	r3, [r7, #18]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28
            /* Copy the data data from the receive buffer to priv->dev.d_buf.
            * ERDPT should be correctly positioned from the last call to to
            * end_rdbuffer (above).
            */

            enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	b21b      	sxth	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f7ff fed1 	bl	8003f8a <enc_rdbuffer>
    /* Move the RX read pointer to the start of the next received packet.
    * This frees the memory we just read.
    */

    /* Errata 14 (on se sert de rxstat comme variable temporaire */
    rxstat = handle->nextpkt;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8a9b      	ldrh	r3, [r3, #20]
 80041ec:	82fb      	strh	r3, [r7, #22]
    if (rxstat == PKTMEM_RX_START) {
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <ENC_GetReceivedFrame+0xdc>
        rxstat = PKTMEM_RX_END;
 80041f4:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 80041f8:	82fb      	strh	r3, [r7, #22]
 80041fa:	e002      	b.n	8004202 <ENC_GetReceivedFrame+0xe2>
    } else {
        rxstat--;
 80041fc:	8afb      	ldrh	r3, [r7, #22]
 80041fe:	3b01      	subs	r3, #1
 8004200:	82fb      	strh	r3, [r7, #22]
    }
    enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	210c      	movs	r1, #12
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fcb6 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8004218:	8afb      	ldrh	r3, [r7, #22]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	210d      	movs	r1, #13
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fcad 	bl	8003b84 <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, (handle->nextpkt) >> 8);
*/

    /* Decrement the packet counter indicate we are done with this packet */

    enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 800422a:	2140      	movs	r1, #64	@ 0x40
 800422c:	209e      	movs	r0, #158	@ 0x9e
 800422e:	f7ff fbcf 	bl	80039d0 <enc_wrgreg2>

    return result;
 8004232:	7d7b      	ldrb	r3, [r7, #21]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <enc_linkstatus>:
 * Assumptions:
 *
 ****************************************************************************/

static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8004244:	2111      	movs	r1, #17
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fcfa 	bl	8003c40 <enc_rdphy>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	82da      	strh	r2, [r3, #22]
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <ENC_EnableInterrupts>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_EnableInterrupts(uint8_t bits)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
    enc_bfsgreg(ENC_EIE, bits);
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4619      	mov	r1, r3
 800426a:	209b      	movs	r0, #155	@ 0x9b
 800426c:	f7ff fbb0 	bl	80039d0 <enc_wrgreg2>
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <ENC_IRQHandler>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_IRQHandler(ENC_HandleTypeDef *handle)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
     * state (high). Doing so will prevent the host controller from missing a
     * falling edge should another interrupt occur while the immediate interrupt
     * is being serviced."
     */

    enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8004280:	2180      	movs	r1, #128	@ 0x80
 8004282:	20bb      	movs	r0, #187	@ 0xbb
 8004284:	f7ff fba4 	bl	80039d0 <enc_wrgreg2>

    /* Read EIR for interrupt flags
     */

    eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8004288:	201c      	movs	r0, #28
 800428a:	f7ff fb8d 	bl	80039a8 <enc_rdgreg2>
 800428e:	4603      	mov	r3, r0
 8004290:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8004294:	73fb      	strb	r3, [r7, #15]

    /* PKTIF is not reliable, check PKCNT instead */
    if (enc_rdbreg(handle, ENC_EPKTCNT) != 0) {
 8004296:	2139      	movs	r1, #57	@ 0x39
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fc45 	bl	8003b28 <enc_rdbreg>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <ENC_IRQHandler+0x34>
        /* Manage EIR_PKTIF by software */
        eir |= EIR_PKTIF;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042aa:	73fb      	strb	r3, [r7, #15]
    }

    /* Store interrupt flags in handle */
    handle->interruptFlags = eir;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	745a      	strb	r2, [r3, #17]

    /* If link status has changed, read it */
    if ((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d006      	beq.n	80042ca <ENC_IRQHandler+0x52>
    {
        enc_linkstatus(handle);       /* Get current link status */
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffbd 	bl	800423c <enc_linkstatus>
        enc_rdphy(handle, ENC_PHIR);  /* Clear the LINKIF interrupt */
 80042c2:	2113      	movs	r1, #19
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fcbb 	bl	8003c40 <enc_rdphy>
    }

    /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
    enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 80042ca:	213b      	movs	r1, #59	@ 0x3b
 80042cc:	20bc      	movs	r0, #188	@ 0xbc
 80042ce:	f7ff fb7f 	bl	80039d0 <enc_wrgreg2>

    /* Enable Ethernet interrupts */
    /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <up_udelay>:
/**
 * Software delay in �s
 *  us: the number of �s to wait
 **/
__inline static void up_udelay(uint32_t us)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for (i=0; i<us*_iter_per_us; i++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e002      	b.n	80042f0 <up_udelay+0x14>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <up_udelay+0x34>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	fb03 f202 	mul.w	r2, r3, r2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d8f4      	bhi.n	80042ea <up_udelay+0xe>
    }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	200000a4 	.word	0x200000a4

08004314 <_calibrate>:

static void _calibrate(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
    uint32_t time;
    volatile uint32_t i;

    _iter_per_us = 1000000;
 800431a:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <_calibrate+0x5c>)
 800431c:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <_calibrate+0x60>)
 800431e:	601a      	str	r2, [r3, #0]

    time = HAL_GetTick();
 8004320:	f7fc ff1e 	bl	8001160 <HAL_GetTick>
 8004324:	6078      	str	r0, [r7, #4]
    /* Wait for next tick */
    while (HAL_GetTick() == time) {
 8004326:	bf00      	nop
 8004328:	f7fc ff1a 	bl	8001160 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4293      	cmp	r3, r2
 8004332:	d0f9      	beq.n	8004328 <_calibrate+0x14>
        /* wait */
    }
    for (i=0; i<_iter_per_us; i++) {
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	e002      	b.n	8004340 <_calibrate+0x2c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <_calibrate+0x5c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3f7      	bcc.n	800433a <_calibrate+0x26>
    }
    _iter_per_us /= ((HAL_GetTick()-time)*1000);
 800434a:	f7fc ff09 	bl	8001160 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004358:	fb02 f303 	mul.w	r3, r2, r3
 800435c:	4a04      	ldr	r2, [pc, #16]	@ (8004370 <_calibrate+0x5c>)
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	4a02      	ldr	r2, [pc, #8]	@ (8004370 <_calibrate+0x5c>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200000a4 	.word	0x200000a4
 8004374:	000f4240 	.word	0x000f4240

08004378 <ENC28J60SPIInit>:

void ENC28J60SPIInit(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
	//SPI Pins
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_SPI1_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 8004388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800438c:	6453      	str	r3, [r2, #68]	@ 0x44
 800438e:	4b2c      	ldr	r3, [pc, #176]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4a27      	ldr	r2, [pc, #156]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043aa:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <ENC28J60SPIInit+0xc8>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80043b6:	23e0      	movs	r3, #224	@ 0xe0
 80043b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c2:	2303      	movs	r3, #3
 80043c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Alternate = GPIO_AF5_SPI1;
 80043c6:	2305      	movs	r3, #5
 80043c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);//MISO
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	4619      	mov	r1, r3
 80043d0:	481c      	ldr	r0, [pc, #112]	@ (8004444 <ENC28J60SPIInit+0xcc>)
 80043d2:	f7fd f809 	bl	80013e8 <HAL_GPIO_Init>

	hspi_enc28j60.Instance = SPI1;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043d8:	4a1c      	ldr	r2, [pc, #112]	@ (800444c <ENC28J60SPIInit+0xd4>)
 80043da:	601a      	str	r2, [r3, #0]
	hspi_enc28j60.Init.Mode = SPI_MODE_MASTER;
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043de:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80043e2:	605a      	str	r2, [r3, #4]
	hspi_enc28j60.Init.Direction = SPI_DIRECTION_2LINES;
 80043e4:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
	hspi_enc28j60.Init.DataSize = SPI_DATASIZE_8BIT;
 80043ea:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
	hspi_enc28j60.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043f0:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
	hspi_enc28j60.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
	hspi_enc28j60.Init.NSS = SPI_NSS_SOFT;
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 80043fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004402:	619a      	str	r2, [r3, #24]
	hspi_enc28j60.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;//84/8=10.5MHz
 8004404:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 8004406:	2210      	movs	r2, #16
 8004408:	61da      	str	r2, [r3, #28]
	hspi_enc28j60.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800440a:	4b0f      	ldr	r3, [pc, #60]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 800440c:	2200      	movs	r2, #0
 800440e:	621a      	str	r2, [r3, #32]
	hspi_enc28j60.Init.TIMode = SPI_TIMODE_DISABLE;
 8004410:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 8004412:	2200      	movs	r2, #0
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi_enc28j60.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004416:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 8004418:	2200      	movs	r2, #0
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi_enc28j60.Init.CRCPolynomial = 10;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 800441e:	220a      	movs	r2, #10
 8004420:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (HAL_SPI_Init(&hspi_enc28j60) != HAL_OK)
 8004422:	4809      	ldr	r0, [pc, #36]	@ (8004448 <ENC28J60SPIInit+0xd0>)
 8004424:	f7fd fe20 	bl	8002068 <HAL_SPI_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <ENC28J60SPIInit+0xba>
	{
		Error_Handler();
 800442e:	f7fc fa05 	bl	800083c <Error_Handler>
	}
	_calibrate();
 8004432:	f7ff ff6f 	bl	8004314 <_calibrate>
}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	40020000 	.word	0x40020000
 8004448:	20004e20 	.word	0x20004e20
 800444c:	40013000 	.word	0x40013000

08004450 <ENC28J60GPIOInit>:
 * CS	---------->PA4
 * RESET---------->PA8
 *
 */
void ENC28J60GPIOInit(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <ENC28J60GPIOInit+0x54>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <ENC28J60GPIOInit+0x54>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6313      	str	r3, [r2, #48]	@ 0x30
 8004466:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <ENC28J60GPIOInit+0x54>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = ENC_CS_PIN|ENC_RESET_PIN;
 8004472:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004476:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004478:	2301      	movs	r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004480:	2302      	movs	r3, #2
 8004482:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	4619      	mov	r1, r3
 8004488:	4807      	ldr	r0, [pc, #28]	@ (80044a8 <ENC28J60GPIOInit+0x58>)
 800448a:	f7fc ffad 	bl	80013e8 <HAL_GPIO_Init>

	/* Deselect ENC28J60 module */
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN|ENC_RESET_PIN, GPIO_PIN_SET);
 800448e:	2201      	movs	r2, #1
 8004490:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004494:	4804      	ldr	r0, [pc, #16]	@ (80044a8 <ENC28J60GPIOInit+0x58>)
 8004496:	f7fd f92b 	bl	80016f0 <HAL_GPIO_WritePin>

}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40020000 	.word	0x40020000

080044ac <ENC28J60INTInit>:
/*
 * Initialize interrupt for INT pin
 */

void ENC28J60INTInit(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	//Interrupt Pin
	GPIO_InitStructure.Pin = ENC_INT_PIN;
 80044b2:	2304      	movs	r3, #4
 80044b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80044b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;//i have changed this from no pull
 80044bc:	2301      	movs	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4807      	ldr	r0, [pc, #28]	@ (80044e4 <ENC28J60INTInit+0x38>)
 80044c6:	f7fc ff8f 	bl	80013e8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn , 0x0F, 0x0F);
 80044ca:	220f      	movs	r2, #15
 80044cc:	210f      	movs	r1, #15
 80044ce:	2008      	movs	r0, #8
 80044d0:	f7fc ff52 	bl	8001378 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn );
 80044d4:	2008      	movs	r0, #8
 80044d6:	f7fc ff6b 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020400 	.word	0x40020400

080044e8 <ENC28J60EnableIRQ>:

void ENC28J60EnableIRQ(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80044ec:	2008      	movs	r0, #8
 80044ee:	f7fc ff5f 	bl	80013b0 <HAL_NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <ENC28J60DisableIRQ>:

void ENC28J60DisableIRQ(void)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80044fa:	2008      	movs	r0, #8
 80044fc:	f7fc ff66 	bl	80013cc <HAL_NVIC_DisableIRQ>
}
 8004500:	bf00      	nop
 8004502:	bd80      	pop	{r7, pc}

08004504 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(ENC_INT_PIN);
 8004508:	2004      	movs	r0, #4
 800450a:	f7fd f90b 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENC_INT_PIN)
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d104      	bne.n	800452e <HAL_GPIO_EXTI_Callback+0x1a>
  {
      ethernet_irq_handler(Netif_IRQSemaphore);
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <HAL_GPIO_EXTI_Callback+0x24>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fa45 	bl	80049b8 <ethernet_irq_handler>
  }
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000098 	.word	0x20000098

0800453c <ENC28J60AssertCS>:

void ENC28J60AssertCS(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN, GPIO_PIN_RESET);
 8004540:	2200      	movs	r2, #0
 8004542:	2110      	movs	r1, #16
 8004544:	4802      	ldr	r0, [pc, #8]	@ (8004550 <ENC28J60AssertCS+0x14>)
 8004546:	f7fd f8d3 	bl	80016f0 <HAL_GPIO_WritePin>
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40020000 	.word	0x40020000

08004554 <ENC28J60ReleaseCS>:

void ENC28J60ReleaseCS(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN, GPIO_PIN_SET);
 8004558:	2201      	movs	r2, #1
 800455a:	2110      	movs	r1, #16
 800455c:	4802      	ldr	r0, [pc, #8]	@ (8004568 <ENC28J60ReleaseCS+0x14>)
 800455e:	f7fd f8c7 	bl	80016f0 <HAL_GPIO_WritePin>
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40020000 	.word	0x40020000

0800456c <ENC_SPI_SendWithoutSelection>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_SendWithoutSelection(uint8_t command)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af02      	add	r7, sp, #8
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_TransmitReceive(&hspi_enc28j60, &command, &command, 1, 1000);
 8004576:	1dfa      	adds	r2, r7, #7
 8004578:	1df9      	adds	r1, r7, #7
 800457a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2301      	movs	r3, #1
 8004582:	4804      	ldr	r0, [pc, #16]	@ (8004594 <ENC_SPI_SendWithoutSelection+0x28>)
 8004584:	f7fe f856 	bl	8002634 <HAL_SPI_TransmitReceive>
    return command;
 8004588:	79fb      	ldrb	r3, [r7, #7]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20004e20 	.word	0x20004e20

08004598 <ENC_SPI_Send>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_Send(uint8_t command)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af02      	add	r7, sp, #8
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
    /* Select ENC28J60 module */
    ENC28J60DisableIRQ();
 80045a2:	f7ff ffa8 	bl	80044f6 <ENC28J60DisableIRQ>
    ENC28J60AssertCS();
 80045a6:	f7ff ffc9 	bl	800453c <ENC28J60AssertCS>
    up_udelay(1);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7ff fe96 	bl	80042dc <up_udelay>

    HAL_SPI_TransmitReceive(&hspi_enc28j60, &command, &command, 1, 1000);
 80045b0:	1dfa      	adds	r2, r7, #7
 80045b2:	1df9      	adds	r1, r7, #7
 80045b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2301      	movs	r3, #1
 80045bc:	4807      	ldr	r0, [pc, #28]	@ (80045dc <ENC_SPI_Send+0x44>)
 80045be:	f7fe f839 	bl	8002634 <HAL_SPI_TransmitReceive>

    ENC28J60ReleaseCS();
 80045c2:	f7ff ffc7 	bl	8004554 <ENC28J60ReleaseCS>
    up_udelay(1);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7ff fe88 	bl	80042dc <up_udelay>

    ENC28J60EnableIRQ();
 80045cc:	f7ff ff8c 	bl	80044e8 <ENC28J60EnableIRQ>
    return command;
 80045d0:	79fb      	ldrb	r3, [r7, #7]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20004e20 	.word	0x20004e20

080045e0 <ENC_SPI_SendBuf>:
  * param  slave2master: answer from ENC28J60 to host, can be NULL if we only want to send data to slave
  * retval none
  */

void ENC_SPI_SendBuf(uint8_t *master2slave, uint8_t *slave2master, uint16_t bufferSize)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
    /* Select ENC28J60 module */
	ENC28J60DisableIRQ();
 80045ee:	f7ff ff82 	bl	80044f6 <ENC28J60DisableIRQ>
	ENC28J60AssertCS();
 80045f2:	f7ff ffa3 	bl	800453c <ENC28J60AssertCS>
    up_udelay(1);
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7ff fe70 	bl	80042dc <up_udelay>

    /* Transmit or receuve data */
    if (slave2master == NULL) {
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <ENC_SPI_SendBuf+0x38>
        if (master2slave != NULL) {
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <ENC_SPI_SendBuf+0x60>
            HAL_SPI_Transmit(&hspi_enc28j60, master2slave, bufferSize, 1000);
 8004608:	88fa      	ldrh	r2, [r7, #6]
 800460a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800460e:	68f9      	ldr	r1, [r7, #12]
 8004610:	4811      	ldr	r0, [pc, #68]	@ (8004658 <ENC_SPI_SendBuf+0x78>)
 8004612:	f7fd fdb2 	bl	800217a <HAL_SPI_Transmit>
 8004616:	e013      	b.n	8004640 <ENC_SPI_SendBuf+0x60>
        }
    } else if (master2slave == NULL) {
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <ENC_SPI_SendBuf+0x4e>
        HAL_SPI_Receive(&hspi_enc28j60, slave2master, bufferSize, 1000);
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	480c      	ldr	r0, [pc, #48]	@ (8004658 <ENC_SPI_SendBuf+0x78>)
 8004628:	f7fd feeb 	bl	8002402 <HAL_SPI_Receive>
 800462c:	e008      	b.n	8004640 <ENC_SPI_SendBuf+0x60>
    } else {
        HAL_SPI_TransmitReceive(&hspi_enc28j60, master2slave, slave2master, bufferSize, 1000);
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	4807      	ldr	r0, [pc, #28]	@ (8004658 <ENC_SPI_SendBuf+0x78>)
 800463c:	f7fd fffa 	bl	8002634 <HAL_SPI_TransmitReceive>
    }

    /* De-select ENC28J60 module */
    ENC28J60ReleaseCS();
 8004640:	f7ff ff88 	bl	8004554 <ENC28J60ReleaseCS>
    up_udelay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f7ff fe49 	bl	80042dc <up_udelay>
    ENC28J60EnableIRQ();
 800464a:	f7ff ff4d 	bl	80044e8 <ENC28J60EnableIRQ>
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20004e20 	.word	0x20004e20

0800465c <ENC_SPI_Select>:
  * param  select: true if the ENC28J60 slave SPI if selected, false otherwise
  * retval none
  */

void ENC_SPI_Select(bool select)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
    /* Select or de-select ENC28J60 module */
    if (select) {
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <ENC_SPI_Select+0x20>
        ENC28J60DisableIRQ();
 800466c:	f7ff ff43 	bl	80044f6 <ENC28J60DisableIRQ>
        ENC28J60AssertCS();
 8004670:	f7ff ff64 	bl	800453c <ENC28J60AssertCS>
        up_udelay(1);
 8004674:	2001      	movs	r0, #1
 8004676:	f7ff fe31 	bl	80042dc <up_udelay>
    } else {
        ENC28J60ReleaseCS();
        up_udelay(1);
        ENC28J60EnableIRQ();
    }
}
 800467a:	e006      	b.n	800468a <ENC_SPI_Select+0x2e>
        ENC28J60ReleaseCS();
 800467c:	f7ff ff6a 	bl	8004554 <ENC28J60ReleaseCS>
        up_udelay(1);
 8004680:	2001      	movs	r0, #1
 8004682:	f7ff fe2b 	bl	80042dc <up_udelay>
        ENC28J60EnableIRQ();
 8004686:	f7ff ff2f 	bl	80044e8 <ENC28J60EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <sys_now>:
#ifdef USE_PROTOTHREADS
static struct pt transmit_pt;
#endif

u32_t sys_now(void)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004696:	f7fc fd63 	bl	8001160 <HAL_GetTick>
 800469a:	4603      	mov	r3, r0
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}

080046a0 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static err_t low_level_init(struct netif *netif)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  //uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };


  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2206      	movs	r2, #6
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  ENC_MAC_6;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2280      	movs	r2, #128	@ 0x80
 80046b4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  ENC_MAC_5;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2234      	movs	r2, #52	@ 0x34
 80046bc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  ENC_MAC_4;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2228      	movs	r2, #40	@ 0x28
 80046c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  ENC_MAC_3;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2274      	movs	r2, #116	@ 0x74
 80046cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  ENC_MAC_2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2292      	movs	r2, #146	@ 0x92
 80046d4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  ENC_MAC_1;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2212      	movs	r2, #18
 80046dc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  EncHandle.Init.MACAddr = netif->hwaddr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	332e      	adds	r3, #46	@ 0x2e
 80046e4:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <low_level_init+0xa4>)
 80046e6:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80046e8:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <low_level_init+0xa4>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <low_level_init+0xa4>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits =  EIE_LINKIE | EIE_PKTIE;
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <low_level_init+0xa4>)
 80046f6:	2250      	movs	r2, #80	@ 0x50
 80046f8:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC28J60SPIInit();
 80046fa:	f7ff fe3d 	bl	8004378 <ENC28J60SPIInit>
  ENC28J60GPIOInit();
 80046fe:	f7ff fea7 	bl	8004450 <ENC28J60GPIOInit>
  ENC28J60INTInit();
 8004702:	f7ff fed3 	bl	80044ac <ENC28J60INTInit>

  /* Set netif link flag */
  //  netif->flags |= NETIF_FLAG_LINK_UP;

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800470c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004714:	f043 030a 	orr.w	r3, r3, #10
 8004718:	b2da      	uxtb	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Start the EN28J60 module */
  if (ENC_Start(&EncHandle)) {
 8004720:	4808      	ldr	r0, [pc, #32]	@ (8004744 <low_level_init+0xa4>)
 8004722:	f7ff faf3 	bl	8003d0c <ENC_Start>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <low_level_init+0x96>
    /* Set the MAC address */
    ENC_SetMacAddr(&EncHandle);//copied MAC address from this handle to actual hardware registers
 800472c:	4805      	ldr	r0, [pc, #20]	@ (8004744 <low_level_init+0xa4>)
 800472e:	f7ff fbd9 	bl	8003ee4 <ENC_SetMacAddr>

    /* Set netif link flag */
    //netif->flags |= NETIF_FLAG_LINK_UP;//Avinash says: why this? setting link up flag without any checks?

    return ERR_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e001      	b.n	800473a <low_level_init+0x9a>
  }
  else
  {
	  return ERR_IF;
 8004736:	f06f 030b 	mvn.w	r3, #11
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20004e78 	.word	0x20004e78

08004748 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]

  if (EncHandle.transmitLength != 0) {
 8004756:	4b23      	ldr	r3, [pc, #140]	@ (80047e4 <low_level_output+0x9c>)
 8004758:	8b1b      	ldrh	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <low_level_output+0x24>
     while (PT_SCHEDULE(ENC_Transmit(&transmit_pt, &EncHandle))) {
         /* Wait for end of previous transmission */
     }
#else
     do {
         ENC_Transmit(&EncHandle);
 800475e:	4821      	ldr	r0, [pc, #132]	@ (80047e4 <low_level_output+0x9c>)
 8004760:	f7ff fc7e 	bl	8004060 <ENC_Transmit>
     } while (EncHandle.transmitLength != 0);
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <low_level_output+0x9c>)
 8004766:	8b1b      	ldrh	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f8      	bne.n	800475e <low_level_output+0x16>
#endif
  }

  /* Prepare ENC28J60 Tx buffer */
  errval = ENC_RestoreTXBuffer(&EncHandle, p->tot_len);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	891b      	ldrh	r3, [r3, #8]
 8004770:	4619      	mov	r1, r3
 8004772:	481c      	ldr	r0, [pc, #112]	@ (80047e4 <low_level_output+0x9c>)
 8004774:	f7ff fc1f 	bl	8003fb6 <ENC_RestoreTXBuffer>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 800477c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <low_level_output+0x42>
      return errval;
 8004784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004788:	e027      	b.n	80047da <low_level_output+0x92>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e010      	b.n	80047b2 <low_level_output+0x6a>
    ENC_WriteBuffer(q->payload, q->len);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	895b      	ldrh	r3, [r3, #10]
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7ff fbdf 	bl	8003f5e <ENC_WriteBuffer>
    framelength += q->len;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	895b      	ldrh	r3, [r3, #10]
 80047a4:	461a      	mov	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1eb      	bne.n	8004790 <low_level_output+0x48>
  }

  if (framelength != p->tot_len) {
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	891b      	ldrh	r3, [r3, #8]
 80047bc:	461a      	mov	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d002      	beq.n	80047ca <low_level_output+0x82>
     return ERR_BUF;
 80047c4:	f06f 0301 	mvn.w	r3, #1
 80047c8:	e007      	b.n	80047da <low_level_output+0x92>
  }

  EncHandle.transmitLength = p->tot_len;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	891a      	ldrh	r2, [r3, #8]
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <low_level_output+0x9c>)
 80047d0:	831a      	strh	r2, [r3, #24]

  /* If PROTOTHREADS are use, actual transmission is triggered in main loop */
#ifndef USE_PROTOTHREADS
    ENC_Transmit(&EncHandle);
 80047d2:	4804      	ldr	r0, [pc, #16]	@ (80047e4 <low_level_output+0x9c>)
 80047d4:	f7ff fc44 	bl	8004060 <ENC_Transmit>
#endif

  return ERR_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20004e78 	.word	0x20004e78

080047e8 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

  if (!ENC_GetReceivedFrame(&EncHandle)) {
 80047f8:	481e      	ldr	r0, [pc, #120]	@ (8004874 <low_level_input+0x8c>)
 80047fa:	f7ff fc91 	bl	8004120 <ENC_GetReceivedFrame>
 80047fe:	4603      	mov	r3, r0
 8004800:	f083 0301 	eor.w	r3, r3, #1
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <low_level_input+0x26>
    return NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	e02e      	b.n	800486c <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 800480e:	4b19      	ldr	r3, [pc, #100]	@ (8004874 <low_level_input+0x8c>)
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t *)EncHandle.RxFrameInfos.buffer;
 8004814:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <low_level_input+0x90>)
 8004816:	60fb      	str	r3, [r7, #12]

  if (len > 0)
 8004818:	8a7b      	ldrh	r3, [r7, #18]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800481e:	8a7b      	ldrh	r3, [r7, #18]
 8004820:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8004824:	4619      	mov	r1, r3
 8004826:	2000      	movs	r0, #0
 8004828:	f005 fa62 	bl	8009cf0 <pbuf_alloc>
 800482c:	61f8      	str	r0, [r7, #28]
  }

  if (p != NULL)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <low_level_input+0x82>
  {
    bufferoffset = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

    for(q = p; q != NULL; q = q->next)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e012      	b.n	8004864 <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload), (uint8_t*)((uint8_t*)buffer + bufferoffset), q->len);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	6858      	ldr	r0, [r3, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	18d1      	adds	r1, r2, r3
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	895b      	ldrh	r3, [r3, #10]
 800484c:	461a      	mov	r2, r3
 800484e:	f010 f8b6 	bl	80149be <memcpy>
      bufferoffset = bufferoffset + q->len;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	895b      	ldrh	r3, [r3, #10]
 8004856:	461a      	mov	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
    for(q = p; q != NULL; q = q->next)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e9      	bne.n	800483e <low_level_input+0x56>
    }
  }

  return p;
 800486a:	69fb      	ldr	r3, [r7, #28]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20004e78 	.word	0x20004e78
 8004878:	20004ea4 	.word	0x20004ea4

0800487c <ethernetif_input_do>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input_do(struct netif * netif)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
    struct pbuf *p;

    do {
        p = low_level_input(netif);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ffaf 	bl	80047e8 <low_level_input>
 800488a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <ethernetif_input_do+0x2c>
        {
          if (netif->input(p, netif) != ERR_OK )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	4798      	blx	r3
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <ethernetif_input_do+0x2c>
          {
            pbuf_free(p);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f005 fd04 	bl	800a2b0 <pbuf_free>
          }
        }
    }while(p!=NULL);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ea      	bne.n	8004884 <ethernetif_input_do+0x8>
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	err_t status;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <ethernetif_init+0x1c>
 80048c6:	4b11      	ldr	r3, [pc, #68]	@ (800490c <ethernetif_init+0x54>)
 80048c8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80048cc:	4910      	ldr	r1, [pc, #64]	@ (8004910 <ethernetif_init+0x58>)
 80048ce:	4811      	ldr	r0, [pc, #68]	@ (8004914 <ethernetif_init+0x5c>)
 80048d0:	f7fc f97c 	bl	8000bcc <printf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a10      	ldr	r2, [pc, #64]	@ (8004918 <ethernetif_init+0x60>)
 80048d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2265      	movs	r2, #101	@ 0x65
 80048de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	226e      	movs	r2, #110	@ 0x6e
 80048e6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  netif->output = etharp_output;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a0b      	ldr	r2, [pc, #44]	@ (800491c <ethernetif_init+0x64>)
 80048ee:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004920 <ethernetif_init+0x68>)
 80048f4:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  status=low_level_init(netif);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fed2 	bl	80046a0 <low_level_init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]


  return status;
 8004900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	080156b0 	.word	0x080156b0
 8004910:	080156cc 	.word	0x080156cc
 8004914:	080156dc 	.word	0x080156dc
 8004918:	08015704 	.word	0x08015704
 800491c:	080124b5 	.word	0x080124b5
 8004920:	08004749 	.word	0x08004749

08004924 <ethernetif_process_irq_do>:
  * @brief  This function actually process pending IRQs.
  * @param  handler: Reference to the driver state structure
  * @retval None
  */
void ethernetif_process_irq_do(void const *argument)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
    struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60fb      	str	r3, [r7, #12]

    /* Handle ENC28J60 interrupt */
    ENC_IRQHandler(&EncHandle);
 8004930:	4815      	ldr	r0, [pc, #84]	@ (8004988 <ethernetif_process_irq_do+0x64>)
 8004932:	f7ff fca1 	bl	8004278 <ENC_IRQHandler>

    /* Check whether the link is up or down*/
    if ((EncHandle.interruptFlags & EIE_LINKIE) != 0) {
 8004936:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <ethernetif_process_irq_do+0x64>)
 8004938:	7c5b      	ldrb	r3, [r3, #17]
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <ethernetif_process_irq_do+0x40>
        if((EncHandle.LinkStatus & PHSTAT2_LSTAT)!= 0) {
 8004942:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <ethernetif_process_irq_do+0x64>)
 8004944:	8adb      	ldrh	r3, [r3, #22]
 8004946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <ethernetif_process_irq_do+0x36>
            netif_set_link_up(irq_arg->netif);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f005 f904 	bl	8009b60 <netif_set_link_up>
 8004958:	e004      	b.n	8004964 <ethernetif_process_irq_do+0x40>
        } else {
            netif_set_link_down(irq_arg->netif);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f005 f92e 	bl	8009bc0 <netif_set_link_down>
        }
    }

    /* Check whether we have received a packet */
    if((EncHandle.interruptFlags & EIR_PKTIF) != 0) {
 8004964:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <ethernetif_process_irq_do+0x64>)
 8004966:	7c5b      	ldrb	r3, [r3, #17]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <ethernetif_process_irq_do+0x56>
        ethernetif_input_do(irq_arg->netif);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff81 	bl	800487c <ethernetif_input_do>
    }

    /* Renable global interrupts */
    ENC_EnableInterrupts(EIE_INTIE);
 800497a:	2080      	movs	r0, #128	@ 0x80
 800497c:	f7ff fc6e 	bl	800425c <ENC_EnableInterrupts>
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20004e78 	.word	0x20004e78

0800498c <ethernetif_process_irq>:
  * @brief  This function triggers the interrupt service callback.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_process_irq(void *argument)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	//if (osSemaphoreWait(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
	if (osSemaphoreAcquire(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2164      	movs	r1, #100	@ 0x64
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fb1e 	bl	8004fe0 <osSemaphoreAcquire>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f6      	bne.n	8004998 <ethernetif_process_irq+0xc>
    {
        /* Handle ENC28J60 interrupt */
        tcpip_callback((tcpip_callback_fn) ethernetif_process_irq_do, (void *) argument);
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4801      	ldr	r0, [pc, #4]	@ (80049b4 <ethernetif_process_irq+0x28>)
 80049ae:	f003 ffbb 	bl	8008928 <tcpip_callback>
	if (osSemaphoreAcquire(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80049b2:	e7f1      	b.n	8004998 <ethernetif_process_irq+0xc>
 80049b4:	08004925 	.word	0x08004925

080049b8 <ethernet_irq_handler>:
  * @brief  This function unblocks ethernetif_process_irq when a new interrupt is received
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_irq_handler(osSemaphoreId Netif_IrqSemaphore)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    /* Release thread to check interrupt flags */
     osSemaphoreRelease(Netif_IrqSemaphore);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fb5f 	bl	8005084 <osSemaphoreRelease>
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif)) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <ethernetif_update_config+0x20>
      /* Restart the EN28J60 module */
      low_level_init(netif);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fe59 	bl	80046a0 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f804 	bl	80049fc <ethernetif_notify_conn_changed>
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <__NVIC_SetPriority>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db0a      	blt.n	8004a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	490c      	ldr	r1, [pc, #48]	@ (8004a5c <__NVIC_SetPriority+0x4c>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a38:	e00a      	b.n	8004a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4908      	ldr	r1, [pc, #32]	@ (8004a60 <__NVIC_SetPriority+0x50>)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3b04      	subs	r3, #4
 8004a48:	0112      	lsls	r2, r2, #4
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	761a      	strb	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e100 	.word	0xe000e100
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <SysTick_Handler+0x1c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a6c:	f002 fcc8 	bl	8007400 <xTaskGetSchedulerState>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a76:	f003 fbbf 	bl	80081f8 <xPortSysTickHandler>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010

08004a84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f06f 0004 	mvn.w	r0, #4
 8004a8e:	f7ff ffbf 	bl	8004a10 <__NVIC_SetPriority>
#endif
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004aaa:	f06f 0305 	mvn.w	r3, #5
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e00c      	b.n	8004acc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <osKernelInitialize+0x44>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004aba:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <osKernelInitialize+0x44>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e002      	b.n	8004acc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004acc:	687b      	ldr	r3, [r7, #4]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200000a8 	.word	0x200000a8

08004ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae6:	f3ef 8305 	mrs	r3, IPSR
 8004aea:	603b      	str	r3, [r7, #0]
  return(result);
 8004aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004af2:	f06f 0305 	mvn.w	r3, #5
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e010      	b.n	8004b1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <osKernelStart+0x48>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d109      	bne.n	8004b16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b02:	f7ff ffbf 	bl	8004a84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <osKernelStart+0x48>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b0c:	f001 fff2 	bl	8006af4 <vTaskStartScheduler>
      stat = osOK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	e002      	b.n	8004b1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b1c:	687b      	ldr	r3, [r7, #4]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200000a8 	.word	0x200000a8

08004b2c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	603b      	str	r3, [r7, #0]
  return(result);
 8004b38:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004b3e:	f002 f905 	bl	8006d4c <xTaskGetTickCountFromISR>
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	e002      	b.n	8004b4c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004b46:	f002 f8f1 	bl	8006d2c <xTaskGetTickCount>
 8004b4a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004b4c:	687b      	ldr	r3, [r7, #4]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08e      	sub	sp, #56	@ 0x38
 8004b5a:	af04      	add	r7, sp, #16
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b66:	f3ef 8305 	mrs	r3, IPSR
 8004b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8004b6c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d17e      	bne.n	8004c70 <osThreadNew+0x11a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d07b      	beq.n	8004c70 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b7c:	2318      	movs	r3, #24
 8004b7e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295
 8004b88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d045      	beq.n	8004c1c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <osThreadNew+0x48>
        name = attr->name;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <osThreadNew+0x6e>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2b38      	cmp	r3, #56	@ 0x38
 8004bb6:	d805      	bhi.n	8004bc4 <osThreadNew+0x6e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <osThreadNew+0x72>
        return (NULL);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e054      	b.n	8004c72 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <osThreadNew+0xa8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2bab      	cmp	r3, #171	@ 0xab
 8004be6:	d90a      	bls.n	8004bfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <osThreadNew+0xa8>
        mem = 1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e010      	b.n	8004c20 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <osThreadNew+0xca>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <osThreadNew+0xca>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <osThreadNew+0xca>
          mem = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e001      	b.n	8004c20 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d110      	bne.n	8004c48 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c2e:	9202      	str	r2, [sp, #8]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f001 fd63 	bl	8006708 <xTaskCreateStatic>
 8004c42:	4603      	mov	r3, r0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e013      	b.n	8004c70 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d110      	bne.n	8004c70 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	f107 0310 	add.w	r3, r7, #16
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f001 fdb1 	bl	80067c8 <xTaskCreate>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d001      	beq.n	8004c70 <osThreadNew+0x11a>
            hTask = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c70:	693b      	ldr	r3, [r7, #16]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	@ 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c82:	f3ef 8305 	mrs	r3, IPSR
 8004c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <osDelay+0x1c>
    stat = osErrorISR;
 8004c8e:	f06f 0305 	mvn.w	r3, #5
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e007      	b.n	8004ca6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fef1 	bl	8006a88 <vTaskDelay>
    }
  }

  return (stat);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cbc:	f3ef 8305 	mrs	r3, IPSR
 8004cc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cc2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d174      	bne.n	8004db2 <osMutexNew+0x102>
    if (attr != NULL) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e001      	b.n	8004cda <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <osMutexNew+0x3a>
      rmtx = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e001      	b.n	8004cee <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d15c      	bne.n	8004db2 <osMutexNew+0x102>
      mem = -1;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d006      	beq.n	8004d1a <osMutexNew+0x6a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d12:	d902      	bls.n	8004d1a <osMutexNew+0x6a>
          mem = 1;
 8004d14:	2301      	movs	r3, #1
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	e00c      	b.n	8004d34 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <osMutexNew+0x84>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <osMutexNew+0x84>
            mem = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e001      	b.n	8004d34 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d112      	bne.n	8004d60 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4619      	mov	r1, r3
 8004d46:	2004      	movs	r0, #4
 8004d48:	f000 fd71 	bl	800582e <xQueueCreateMutexStatic>
 8004d4c:	61f8      	str	r0, [r7, #28]
 8004d4e:	e016      	b.n	8004d7e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2001      	movs	r0, #1
 8004d58:	f000 fd69 	bl	800582e <xQueueCreateMutexStatic>
 8004d5c:	61f8      	str	r0, [r7, #28]
 8004d5e:	e00e      	b.n	8004d7e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d6c:	2004      	movs	r0, #4
 8004d6e:	f000 fd46 	bl	80057fe <xQueueCreateMutex>
 8004d72:	61f8      	str	r0, [r7, #28]
 8004d74:	e003      	b.n	8004d7e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004d76:	2001      	movs	r0, #1
 8004d78:	f000 fd41 	bl	80057fe <xQueueCreateMutex>
 8004d7c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <osMutexNew+0xee>
        if (attr != NULL) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <osMutexNew+0xe2>
          name = attr->name;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e001      	b.n	8004d96 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	69f8      	ldr	r0, [r7, #28]
 8004d9a:	f001 fc2d 	bl	80065f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <osMutexNew+0x102>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004db2:	69fb      	ldr	r3, [r7, #28]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dda:	f3ef 8305 	mrs	r3, IPSR
 8004dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004de6:	f06f 0305 	mvn.w	r3, #5
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e02c      	b.n	8004e48 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004df4:	f06f 0303 	mvn.w	r3, #3
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e025      	b.n	8004e48 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6938      	ldr	r0, [r7, #16]
 8004e06:	f000 fd62 	bl	80058ce <xQueueTakeMutexRecursive>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d01b      	beq.n	8004e48 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004e16:	f06f 0301 	mvn.w	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e014      	b.n	8004e48 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e1e:	f06f 0302 	mvn.w	r3, #2
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e010      	b.n	8004e48 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	6938      	ldr	r0, [r7, #16]
 8004e2a:	f001 f907 	bl	800603c <xQueueSemaphoreTake>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d009      	beq.n	8004e48 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004e3a:	f06f 0301 	mvn.w	r3, #1
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e002      	b.n	8004e48 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004e42:	f06f 0302 	mvn.w	r3, #2
 8004e46:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004e48:	697b      	ldr	r3, [r7, #20]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b086      	sub	sp, #24
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6e:	f3ef 8305 	mrs	r3, IPSR
 8004e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004e7a:	f06f 0305 	mvn.w	r3, #5
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e01f      	b.n	8004ec2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004e88:	f06f 0303 	mvn.w	r3, #3
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e018      	b.n	8004ec2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e96:	6938      	ldr	r0, [r7, #16]
 8004e98:	f000 fce4 	bl	8005864 <xQueueGiveMutexRecursive>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d00f      	beq.n	8004ec2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004ea2:	f06f 0302 	mvn.w	r3, #2
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e00b      	b.n	8004ec2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2200      	movs	r2, #0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	6938      	ldr	r0, [r7, #16]
 8004eb2:	f000 fdb1 	bl	8005a18 <xQueueGenericSend>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004ebc:	f06f 0302 	mvn.w	r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ec2:	697b      	ldr	r3, [r7, #20]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004edc:	f3ef 8305 	mrs	r3, IPSR
 8004ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ee2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d175      	bne.n	8004fd4 <osSemaphoreNew+0x108>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d072      	beq.n	8004fd4 <osSemaphoreNew+0x108>
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d86e      	bhi.n	8004fd4 <osSemaphoreNew+0x108>
    mem = -1;
 8004ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8004efa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d015      	beq.n	8004f2e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <osSemaphoreNew+0x4c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f10:	d902      	bls.n	8004f18 <osSemaphoreNew+0x4c>
        mem = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e00c      	b.n	8004f32 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d108      	bne.n	8004f32 <osSemaphoreNew+0x66>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <osSemaphoreNew+0x66>
          mem = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e001      	b.n	8004f32 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d04c      	beq.n	8004fd4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d128      	bne.n	8004f92 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10a      	bne.n	8004f5c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	9200      	str	r2, [sp, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2100      	movs	r1, #0
 8004f52:	2001      	movs	r0, #1
 8004f54:	f000 fb5e 	bl	8005614 <xQueueGenericCreateStatic>
 8004f58:	61f8      	str	r0, [r7, #28]
 8004f5a:	e005      	b.n	8004f68 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2001      	movs	r0, #1
 8004f62:	f000 fbd4 	bl	800570e <xQueueGenericCreate>
 8004f66:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d022      	beq.n	8004fb4 <osSemaphoreNew+0xe8>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01f      	beq.n	8004fb4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f74:	2300      	movs	r3, #0
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	69f8      	ldr	r0, [r7, #28]
 8004f7c:	f000 fd4c 	bl	8005a18 <xQueueGenericSend>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d016      	beq.n	8004fb4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004f86:	69f8      	ldr	r0, [r7, #28]
 8004f88:	f001 f9ea 	bl	8006360 <vQueueDelete>
            hSemaphore = NULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e010      	b.n	8004fb4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d108      	bne.n	8004faa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fccb 	bl	800593c <xQueueCreateCountingSemaphoreStatic>
 8004fa6:	61f8      	str	r0, [r7, #28]
 8004fa8:	e004      	b.n	8004fb4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fcfe 	bl	80059ae <xQueueCreateCountingSemaphore>
 8004fb2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e001      	b.n	8004fcc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	69f8      	ldr	r0, [r7, #28]
 8004fd0:	f001 fb12 	bl	80065f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d103      	bne.n	8005000 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004ff8:	f06f 0303 	mvn.w	r3, #3
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e039      	b.n	8005074 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005000:	f3ef 8305 	mrs	r3, IPSR
 8005004:	60fb      	str	r3, [r7, #12]
  return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005008:	2b00      	cmp	r3, #0
 800500a:	d022      	beq.n	8005052 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005012:	f06f 0303 	mvn.w	r3, #3
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e02c      	b.n	8005074 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	461a      	mov	r2, r3
 8005024:	2100      	movs	r1, #0
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f001 f918 	bl	800625c <xQueueReceiveFromISR>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d003      	beq.n	800503a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005032:	f06f 0302 	mvn.w	r3, #2
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e01c      	b.n	8005074 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <osSemaphoreAcquire+0x94>
 8005040:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <osSemaphoreAcquire+0xa0>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	e010      	b.n	8005074 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6938      	ldr	r0, [r7, #16]
 8005056:	f000 fff1 	bl	800603c <xQueueSemaphoreTake>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d009      	beq.n	8005074 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005066:	f06f 0301 	mvn.w	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e002      	b.n	8005074 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800506e:	f06f 0302 	mvn.w	r3, #2
 8005072:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005074:	697b      	ldr	r3, [r7, #20]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800509a:	f06f 0303 	mvn.w	r3, #3
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e02c      	b.n	80050fc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050a2:	f3ef 8305 	mrs	r3, IPSR
 80050a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80050b2:	f107 0308 	add.w	r3, r7, #8
 80050b6:	4619      	mov	r1, r3
 80050b8:	6938      	ldr	r0, [r7, #16]
 80050ba:	f000 fe4d 	bl	8005d58 <xQueueGiveFromISR>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d003      	beq.n	80050cc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80050c4:	f06f 0302 	mvn.w	r3, #2
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e017      	b.n	80050fc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d014      	beq.n	80050fc <osSemaphoreRelease+0x78>
 80050d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <osSemaphoreRelease+0x84>)
 80050d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	e00b      	b.n	80050fc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050e4:	2300      	movs	r3, #0
 80050e6:	2200      	movs	r2, #0
 80050e8:	2100      	movs	r1, #0
 80050ea:	6938      	ldr	r0, [r7, #16]
 80050ec:	f000 fc94 	bl	8005a18 <xQueueGenericSend>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d002      	beq.n	80050fc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80050f6:	f06f 0302 	mvn.w	r3, #2
 80050fa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80050fc:	697b      	ldr	r3, [r7, #20]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511c:	f3ef 8305 	mrs	r3, IPSR
 8005120:	613b      	str	r3, [r7, #16]
  return(result);
 8005122:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005124:	2b00      	cmp	r3, #0
 8005126:	d15f      	bne.n	80051e8 <osMessageQueueNew+0xdc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d05c      	beq.n	80051e8 <osMessageQueueNew+0xdc>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d059      	beq.n	80051e8 <osMessageQueueNew+0xdc>
    mem = -1;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d029      	beq.n	8005194 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <osMessageQueueNew+0x62>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b4f      	cmp	r3, #79	@ 0x4f
 800514e:	d90e      	bls.n	800516e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	429a      	cmp	r2, r3
 8005166:	d302      	bcc.n	800516e <osMessageQueueNew+0x62>
        mem = 1;
 8005168:	2301      	movs	r3, #1
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e014      	b.n	8005198 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d110      	bne.n	8005198 <osMessageQueueNew+0x8c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <osMessageQueueNew+0x8c>
          mem = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e001      	b.n	8005198 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d10b      	bne.n	80051b6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2100      	movs	r1, #0
 80051a8:	9100      	str	r1, [sp, #0]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa31 	bl	8005614 <xQueueGenericCreateStatic>
 80051b2:	61f8      	str	r0, [r7, #28]
 80051b4:	e008      	b.n	80051c8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80051bc:	2200      	movs	r2, #0
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 faa4 	bl	800570e <xQueueGenericCreate>
 80051c6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <osMessageQueueNew+0xd0>
        name = attr->name;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e001      	b.n	80051e0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	69f8      	ldr	r0, [r7, #28]
 80051e4:	f001 fa08 	bl	80065f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80051e8:	69fb      	ldr	r3, [r7, #28]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800520c:	f3ef 8305 	mrs	r3, IPSR
 8005210:	617b      	str	r3, [r7, #20]
  return(result);
 8005212:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005214:	2b00      	cmp	r3, #0
 8005216:	d028      	beq.n	800526a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <osMessageQueuePut+0x36>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <osMessageQueuePut+0x36>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800522a:	f06f 0303 	mvn.w	r3, #3
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e038      	b.n	80052a4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005236:	f107 0210 	add.w	r2, r7, #16
 800523a:	2300      	movs	r3, #0
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	69b8      	ldr	r0, [r7, #24]
 8005240:	f000 fcec 	bl	8005c1c <xQueueGenericSendFromISR>
 8005244:	4603      	mov	r3, r0
 8005246:	2b01      	cmp	r3, #1
 8005248:	d003      	beq.n	8005252 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800524a:	f06f 0302 	mvn.w	r3, #2
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e028      	b.n	80052a4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d025      	beq.n	80052a4 <osMessageQueuePut+0xb0>
 8005258:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <osMessageQueuePut+0xbc>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	e01c      	b.n	80052a4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <osMessageQueuePut+0x82>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005276:	f06f 0303 	mvn.w	r3, #3
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e012      	b.n	80052a4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800527e:	2300      	movs	r3, #0
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	69b8      	ldr	r0, [r7, #24]
 8005286:	f000 fbc7 	bl	8005a18 <xQueueGenericSend>
 800528a:	4603      	mov	r3, r0
 800528c:	2b01      	cmp	r3, #1
 800528e:	d009      	beq.n	80052a4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005296:	f06f 0301 	mvn.w	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e002      	b.n	80052a4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800529e:	f06f 0302 	mvn.w	r3, #2
 80052a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80052a4:	69fb      	ldr	r3, [r7, #28]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ca:	f3ef 8305 	mrs	r3, IPSR
 80052ce:	617b      	str	r3, [r7, #20]
  return(result);
 80052d0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d028      	beq.n	8005328 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <osMessageQueueGet+0x34>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <osMessageQueueGet+0x34>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80052e8:	f06f 0303 	mvn.w	r3, #3
 80052ec:	61fb      	str	r3, [r7, #28]
 80052ee:	e037      	b.n	8005360 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052f4:	f107 0310 	add.w	r3, r7, #16
 80052f8:	461a      	mov	r2, r3
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	69b8      	ldr	r0, [r7, #24]
 80052fe:	f000 ffad 	bl	800625c <xQueueReceiveFromISR>
 8005302:	4603      	mov	r3, r0
 8005304:	2b01      	cmp	r3, #1
 8005306:	d003      	beq.n	8005310 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005308:	f06f 0302 	mvn.w	r3, #2
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e027      	b.n	8005360 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d024      	beq.n	8005360 <osMessageQueueGet+0xac>
 8005316:	4b15      	ldr	r3, [pc, #84]	@ (800536c <osMessageQueueGet+0xb8>)
 8005318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	e01b      	b.n	8005360 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <osMessageQueueGet+0x80>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005334:	f06f 0303 	mvn.w	r3, #3
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e011      	b.n	8005360 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	69b8      	ldr	r0, [r7, #24]
 8005342:	f000 fd99 	bl	8005e78 <xQueueReceive>
 8005346:	4603      	mov	r3, r0
 8005348:	2b01      	cmp	r3, #1
 800534a:	d009      	beq.n	8005360 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005352:	f06f 0301 	mvn.w	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e002      	b.n	8005360 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800535a:	f06f 0302 	mvn.w	r3, #2
 800535e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005360:	69fb      	ldr	r3, [r7, #28]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a07      	ldr	r2, [pc, #28]	@ (800539c <vApplicationGetIdleTaskMemory+0x2c>)
 8005380:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a06      	ldr	r2, [pc, #24]	@ (80053a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005386:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2280      	movs	r2, #128	@ 0x80
 800538c:	601a      	str	r2, [r3, #0]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	200000ac 	.word	0x200000ac
 80053a0:	20000158 	.word	0x20000158

080053a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a07      	ldr	r2, [pc, #28]	@ (80053d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80053b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a06      	ldr	r2, [pc, #24]	@ (80053d4 <vApplicationGetTimerTaskMemory+0x30>)
 80053ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053c2:	601a      	str	r2, [r3, #0]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	20000358 	.word	0x20000358
 80053d4:	20000404 	.word	0x20000404

080053d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 0208 	add.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f103 0208 	add.w	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f103 0208 	add.w	r2, r3, #8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d103      	bne.n	800549a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e00c      	b.n	80054b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3308      	adds	r3, #8
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	e002      	b.n	80054a8 <vListInsert+0x2e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d2f6      	bcs.n	80054a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6892      	ldr	r2, [r2, #8]
 8005502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d103      	bne.n	8005520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	1e5a      	subs	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800556c:	f002 fdb4 	bl	80080d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	441a      	add	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	3b01      	subs	r3, #1
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	22ff      	movs	r2, #255	@ 0xff
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	22ff      	movs	r2, #255	@ 0xff
 80055b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d114      	bne.n	80055ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01a      	beq.n	8005600 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3310      	adds	r3, #16
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fd40 	bl	8007054 <xTaskRemoveFromEventList>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d012      	beq.n	8005600 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <xQueueGenericReset+0xd0>)
 80055dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	e009      	b.n	8005600 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3310      	adds	r3, #16
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fef1 	bl	80053d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3324      	adds	r3, #36	@ 0x24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff feec 	bl	80053d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005600:	f002 fd9c 	bl	800813c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005604:	2301      	movs	r3, #1
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	@ 0x38
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <xQueueGenericCreateStatic+0x56>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <xQueueGenericCreateStatic+0x5a>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <xQueueGenericCreateStatic+0x5c>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10b      	bne.n	800568c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	623b      	str	r3, [r7, #32]
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <xQueueGenericCreateStatic+0x84>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <xQueueGenericCreateStatic+0x88>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <xQueueGenericCreateStatic+0x8a>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056ba:	2350      	movs	r3, #80	@ 0x50
 80056bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b50      	cmp	r3, #80	@ 0x50
 80056c2:	d00b      	beq.n	80056dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	61bb      	str	r3, [r7, #24]
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f840 	bl	8005784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005706:	4618      	mov	r0, r3
 8005708:	3730      	adds	r7, #48	@ 0x30
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800570e:	b580      	push	{r7, lr}
 8005710:	b08a      	sub	sp, #40	@ 0x28
 8005712:	af02      	add	r7, sp, #8
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	4613      	mov	r3, r2
 800571a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	613b      	str	r3, [r7, #16]
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop
 8005738:	e7fd      	b.n	8005736 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3350      	adds	r3, #80	@ 0x50
 8005748:	4618      	mov	r0, r3
 800574a:	f002 fde7 	bl	800831c <pvPortMalloc>
 800574e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	3350      	adds	r3, #80	@ 0x50
 800575e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005768:	79fa      	ldrb	r2, [r7, #7]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f805 	bl	8005784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800577a:	69bb      	ldr	r3, [r7, #24]
	}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e002      	b.n	80057a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057b2:	2101      	movs	r1, #1
 80057b4:	69b8      	ldr	r0, [r7, #24]
 80057b6:	f7ff fec3 	bl	8005540 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057ea:	2300      	movs	r3, #0
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f911 	bl	8005a18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	4603      	mov	r3, r0
 8005806:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	461a      	mov	r2, r3
 8005814:	6939      	ldr	r1, [r7, #16]
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f7ff ff79 	bl	800570e <xQueueGenericCreate>
 800581c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff ffd3 	bl	80057ca <prvInitialiseMutex>

		return xNewQueue;
 8005824:	68fb      	ldr	r3, [r7, #12]
	}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af02      	add	r7, sp, #8
 8005834:	4603      	mov	r3, r0
 8005836:	6039      	str	r1, [r7, #0]
 8005838:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800583a:	2301      	movs	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	6978      	ldr	r0, [r7, #20]
 800584e:	f7ff fee1 	bl	8005614 <xQueueGenericCreateStatic>
 8005852:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff ffb8 	bl	80057ca <prvInitialiseMutex>

		return xNewQueue;
 800585a:	68fb      	ldr	r3, [r7, #12]
	}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	689c      	ldr	r4, [r3, #8]
 8005892:	f001 fda5 	bl	80073e0 <xTaskGetCurrentTaskHandle>
 8005896:	4603      	mov	r3, r0
 8005898:	429c      	cmp	r4, r3
 800589a:	d111      	bne.n	80058c0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	1e5a      	subs	r2, r3, #1
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	6938      	ldr	r0, [r7, #16]
 80058b6:	f000 f8af 	bl	8005a18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e001      	b.n	80058c4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}

080058ce <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80058ce:	b590      	push	{r4, r7, lr}
 80058d0:	b087      	sub	sp, #28
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60fb      	str	r3, [r7, #12]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	689c      	ldr	r4, [r3, #8]
 80058fe:	f001 fd6f 	bl	80073e0 <xTaskGetCurrentTaskHandle>
 8005902:	4603      	mov	r3, r0
 8005904:	429c      	cmp	r4, r3
 8005906:	d107      	bne.n	8005918 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005912:	2301      	movs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e00c      	b.n	8005932 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f000 fb8e 	bl	800603c <xQueueSemaphoreTake>
 8005920:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005932:	697b      	ldr	r3, [r7, #20]
	}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}

0800593c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	@ 0x28
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61bb      	str	r3, [r7, #24]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90b      	bls.n	8005986 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	617b      	str	r3, [r7, #20]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005986:	2302      	movs	r3, #2
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fe3f 	bl	8005614 <xQueueGenericCreateStatic>
 8005996:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80059a4:	69fb      	ldr	r3, [r7, #28]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3720      	adds	r7, #32
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	613b      	str	r3, [r7, #16]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d90b      	bls.n	80059f6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60fb      	str	r3, [r7, #12]
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	e7fd      	b.n	80059f2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80059f6:	2202      	movs	r2, #2
 80059f8:	2100      	movs	r1, #0
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fe87 	bl	800570e <xQueueGenericCreate>
 8005a00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a0e:	697b      	ldr	r3, [r7, #20]
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08e      	sub	sp, #56	@ 0x38
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a26:	2300      	movs	r3, #0
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <xQueueGenericSend+0x34>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	e7fd      	b.n	8005a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <xQueueGenericSend+0x42>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <xQueueGenericSend+0x46>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueGenericSend+0x48>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueGenericSend+0x64>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSend+0x72>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <xQueueGenericSend+0x76>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericSend+0x78>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <xQueueGenericSend+0x94>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aac:	f001 fca8 	bl	8007400 <xTaskGetSchedulerState>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <xQueueGenericSend+0xa4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <xQueueGenericSend+0xa8>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <xQueueGenericSend+0xaa>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <xQueueGenericSend+0xc6>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	61fb      	str	r3, [r7, #28]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ade:	f002 fafb 	bl	80080d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <xQueueGenericSend+0xdc>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d129      	bne.n	8005b48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005afa:	f000 fc6d 	bl	80063d8 <prvCopyDataToQueue>
 8005afe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	3324      	adds	r3, #36	@ 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 faa1 	bl	8007054 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b18:	4b3f      	ldr	r3, [pc, #252]	@ (8005c18 <xQueueGenericSend+0x200>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e00a      	b.n	8005b40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b39      	ldr	r3, [pc, #228]	@ (8005c18 <xQueueGenericSend+0x200>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b40:	f002 fafc 	bl	800813c <vPortExitCritical>
				return pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e063      	b.n	8005c10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b4e:	f002 faf5 	bl	800813c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e05c      	b.n	8005c10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fadb 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6a:	f002 fae7 	bl	800813c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6e:	f001 f831 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b72:	f002 fab1 	bl	80080d8 <vPortEnterCritical>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d103      	bne.n	8005b8c <xQueueGenericSend+0x174>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSend+0x18a>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba2:	f002 facb 	bl	800813c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba6:	1d3a      	adds	r2, r7, #4
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 faca 	bl	8007148 <xTaskCheckForTimeOut>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d124      	bne.n	8005c04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bbc:	f000 fd04 	bl	80065c8 <prvIsQueueFull>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	3310      	adds	r3, #16
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f9ee 	bl	8006fb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bd6:	f000 fc8f 	bl	80064f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bda:	f001 f809 	bl	8006bf0 <xTaskResumeAll>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f af7c 	bne.w	8005ade <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <xQueueGenericSend+0x200>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e772      	b.n	8005ade <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bfa:	f000 fc7d 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fff7 	bl	8006bf0 <xTaskResumeAll>
 8005c02:	e76c      	b.n	8005ade <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c06:	f000 fc77 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fff1 	bl	8006bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3738      	adds	r7, #56	@ 0x38
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b090      	sub	sp, #64	@ 0x40
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c46:	bf00      	nop
 8005c48:	bf00      	nop
 8005c4a:	e7fd      	b.n	8005c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueGenericSendFromISR+0x3e>
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueGenericSendFromISR+0x42>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueGenericSendFromISR+0x44>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d103      	bne.n	8005c8a <xQueueGenericSendFromISR+0x6e>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericSendFromISR+0x72>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericSendFromISR+0x74>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	e7fd      	b.n	8005ca8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cac:	f002 faf4 	bl	8008298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cb0:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	61fa      	str	r2, [r7, #28]
 8005cc6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <xQueueGenericSendFromISR+0xc2>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d12f      	bne.n	8005d3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cf4:	f000 fb70 	bl	80063d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cf8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d112      	bne.n	8005d28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d016      	beq.n	8005d38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	3324      	adds	r3, #36	@ 0x24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f9a0 	bl	8007054 <xTaskRemoveFromEventList>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e007      	b.n	8005d38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	b25a      	sxtb	r2, r3
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005d3c:	e001      	b.n	8005d42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3740      	adds	r7, #64	@ 0x40
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08e      	sub	sp, #56	@ 0x38
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	623b      	str	r3, [r7, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	61fb      	str	r3, [r7, #28]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d103      	bne.n	8005db4 <xQueueGiveFromISR+0x5c>
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <xQueueGiveFromISR+0x60>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <xQueueGiveFromISR+0x62>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61bb      	str	r3, [r7, #24]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd6:	f002 fa5f 	bl	8008298 <vPortValidateInterruptPriority>
	__asm volatile
 8005dda:	f3ef 8211 	mrs	r2, BASEPRI
 8005dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	617a      	str	r2, [r7, #20]
 8005df0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005df2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d22b      	bcs.n	8005e5e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d112      	bne.n	8005e48 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	3324      	adds	r3, #36	@ 0x24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f910 	bl	8007054 <xTaskRemoveFromEventList>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e007      	b.n	8005e58 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	b25a      	sxtb	r2, r3
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5c:	e001      	b.n	8005e62 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f383 8811 	msr	BASEPRI, r3
}
 8005e6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3738      	adds	r7, #56	@ 0x38
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	@ 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <xQueueReceive+0x32>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	623b      	str	r3, [r7, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <xQueueReceive+0x40>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <xQueueReceive+0x44>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <xQueueReceive+0x46>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10b      	bne.n	8005eda <xQueueReceive+0x62>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	61fb      	str	r3, [r7, #28]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eda:	f001 fa91 	bl	8007400 <xTaskGetSchedulerState>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <xQueueReceive+0x72>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <xQueueReceive+0x76>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueReceive+0x78>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xQueueReceive+0x94>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61bb      	str	r3, [r7, #24]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f0c:	f002 f8e4 	bl	80080d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01f      	beq.n	8005f5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f20:	f000 fac4 	bl	80064ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	1e5a      	subs	r2, r3, #1
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	3310      	adds	r3, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 f88b 	bl	8007054 <xTaskRemoveFromEventList>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f44:	4b3c      	ldr	r3, [pc, #240]	@ (8006038 <xQueueReceive+0x1c0>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f54:	f002 f8f2 	bl	800813c <vPortExitCritical>
				return pdPASS;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e069      	b.n	8006030 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f62:	f002 f8eb 	bl	800813c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e062      	b.n	8006030 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f8d1 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f7e:	f002 f8dd 	bl	800813c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f82:	f000 fe27 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f86:	f002 f8a7 	bl	80080d8 <vPortEnterCritical>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d103      	bne.n	8005fa0 <xQueueReceive+0x128>
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d103      	bne.n	8005fb6 <xQueueReceive+0x13e>
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb6:	f002 f8c1 	bl	800813c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fba:	1d3a      	adds	r2, r7, #4
 8005fbc:	f107 0310 	add.w	r3, r7, #16
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f8c0 	bl	8007148 <xTaskCheckForTimeOut>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d123      	bne.n	8006016 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd0:	f000 fae4 	bl	800659c <prvIsQueueEmpty>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	3324      	adds	r3, #36	@ 0x24
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 ffe4 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fea:	f000 fa85 	bl	80064f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fee:	f000 fdff 	bl	8006bf0 <xTaskResumeAll>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d189      	bne.n	8005f0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8006038 <xQueueReceive+0x1c0>)
 8005ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	e780      	b.n	8005f0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800600a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600c:	f000 fa74 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006010:	f000 fdee 	bl	8006bf0 <xTaskResumeAll>
 8006014:	e77a      	b.n	8005f0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006018:	f000 fa6e 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800601c:	f000 fde8 	bl	8006bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006022:	f000 fabb 	bl	800659c <prvIsQueueEmpty>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	f43f af6f 	beq.w	8005f0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800602e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006030:	4618      	mov	r0, r3
 8006032:	3730      	adds	r7, #48	@ 0x30
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	@ 0x38
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800604e:	2300      	movs	r3, #0
 8006050:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	61fb      	str	r3, [r7, #28]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006090:	f001 f9b6 	bl	8007400 <xTaskGetSchedulerState>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <xQueueSemaphoreTake+0x64>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <xQueueSemaphoreTake+0x68>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <xQueueSemaphoreTake+0x6a>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	61bb      	str	r3, [r7, #24]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060c2:	f002 f809 	bl	80080d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d024      	beq.n	800611c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	1e5a      	subs	r2, r3, #1
 80060d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d104      	bne.n	80060ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060e2:	f001 fb07 	bl	80076f4 <pvTaskIncrementMutexHeldCount>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	3310      	adds	r3, #16
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ffab 	bl	8007054 <xTaskRemoveFromEventList>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006104:	4b54      	ldr	r3, [pc, #336]	@ (8006258 <xQueueSemaphoreTake+0x21c>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006114:	f002 f812 	bl	800813c <vPortExitCritical>
				return pdPASS;
 8006118:	2301      	movs	r3, #1
 800611a:	e098      	b.n	800624e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d112      	bne.n	8006148 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	617b      	str	r3, [r7, #20]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006140:	f001 fffc 	bl	800813c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006144:	2300      	movs	r3, #0
 8006146:	e082      	b.n	800624e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ffe2 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800615c:	f001 ffee 	bl	800813c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006160:	f000 fd38 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006164:	f001 ffb8 	bl	80080d8 <vPortEnterCritical>
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800616e:	b25b      	sxtb	r3, r3
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d103      	bne.n	800617e <xQueueSemaphoreTake+0x142>
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006184:	b25b      	sxtb	r3, r3
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d103      	bne.n	8006194 <xQueueSemaphoreTake+0x158>
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006194:	f001 ffd2 	bl	800813c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006198:	463a      	mov	r2, r7
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 ffd1 	bl	8007148 <xTaskCheckForTimeOut>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d132      	bne.n	8006212 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061ae:	f000 f9f5 	bl	800659c <prvIsQueueEmpty>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d026      	beq.n	8006206 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80061c0:	f001 ff8a 	bl	80080d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f937 	bl	800743c <xTaskPriorityInherit>
 80061ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80061d0:	f001 ffb4 	bl	800813c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	3324      	adds	r3, #36	@ 0x24
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fee7 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061e4:	f000 f988 	bl	80064f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061e8:	f000 fd02 	bl	8006bf0 <xTaskResumeAll>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f47f af67 	bne.w	80060c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80061f4:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <xQueueSemaphoreTake+0x21c>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	e75d      	b.n	80060c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006208:	f000 f976 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800620c:	f000 fcf0 	bl	8006bf0 <xTaskResumeAll>
 8006210:	e757      	b.n	80060c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006214:	f000 f970 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006218:	f000 fcea 	bl	8006bf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800621c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800621e:	f000 f9bd 	bl	800659c <prvIsQueueEmpty>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	f43f af4c 	beq.w	80060c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006230:	f001 ff52 	bl	80080d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006234:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006236:	f000 f8b7 	bl	80063a8 <prvGetDisinheritPriorityAfterTimeout>
 800623a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006242:	4618      	mov	r0, r3
 8006244:	f001 f9d2 	bl	80075ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006248:	f001 ff78 	bl	800813c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800624c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800624e:	4618      	mov	r0, r3
 8006250:	3738      	adds	r7, #56	@ 0x38
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08e      	sub	sp, #56	@ 0x38
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	623b      	str	r3, [r7, #32]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <xQueueReceiveFromISR+0x3c>
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <xQueueReceiveFromISR+0x40>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <xQueueReceiveFromISR+0x42>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61fb      	str	r3, [r7, #28]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ba:	f001 ffed 	bl	8008298 <vPortValidateInterruptPriority>
	__asm volatile
 80062be:	f3ef 8211 	mrs	r2, BASEPRI
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	61ba      	str	r2, [r7, #24]
 80062d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d02f      	beq.n	8006346 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062f4:	f000 f8da 	bl	80064ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	1e5a      	subs	r2, r3, #1
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006300:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d112      	bne.n	8006330 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	3310      	adds	r3, #16
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fe9c 	bl	8007054 <xTaskRemoveFromEventList>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e007      	b.n	8006340 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006334:	3301      	adds	r3, #1
 8006336:	b2db      	uxtb	r3, r3
 8006338:	b25a      	sxtb	r2, r3
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006340:	2301      	movs	r3, #1
 8006342:	637b      	str	r3, [r7, #52]	@ 0x34
 8006344:	e001      	b.n	800634a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006346:	2300      	movs	r3, #0
 8006348:	637b      	str	r3, [r7, #52]	@ 0x34
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f383 8811 	msr	BASEPRI, r3
}
 8006354:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006358:	4618      	mov	r0, r3
 800635a:	3738      	adds	r7, #56	@ 0x38
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <vQueueDelete+0x2a>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60bb      	str	r3, [r7, #8]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f95e 	bl	800664c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f002 f88c 	bl	80084b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e001      	b.n	80063ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063ca:	68fb      	ldr	r3, [r7, #12]
	}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d14d      	bne.n	800649a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f882 	bl	800750c <xTaskPriorityDisinherit>
 8006408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	609a      	str	r2, [r3, #8]
 8006410:	e043      	b.n	800649a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d119      	bne.n	800644c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6858      	ldr	r0, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	461a      	mov	r2, r3
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	f00e facb 	bl	80149be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d32b      	bcc.n	800649a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	e026      	b.n	800649a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68d8      	ldr	r0, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	461a      	mov	r2, r3
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	f00e fab1 	bl	80149be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	425b      	negs	r3, r3
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d207      	bcs.n	8006488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	425b      	negs	r3, r3
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d105      	bne.n	800649a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	3b01      	subs	r3, #1
 8006498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064a2:	697b      	ldr	r3, [r7, #20]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	441a      	add	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d303      	bcc.n	80064e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68d9      	ldr	r1, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	461a      	mov	r2, r3
 80064ea:	6838      	ldr	r0, [r7, #0]
 80064ec:	f00e fa67 	bl	80149be <memcpy>
	}
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006500:	f001 fdea 	bl	80080d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800650a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800650c:	e011      	b.n	8006532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d012      	beq.n	800653c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3324      	adds	r3, #36	@ 0x24
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fd9a 	bl	8007054 <xTaskRemoveFromEventList>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006526:	f000 fe73 	bl	8007210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3b01      	subs	r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	dce9      	bgt.n	800650e <prvUnlockQueue+0x16>
 800653a:	e000      	b.n	800653e <prvUnlockQueue+0x46>
					break;
 800653c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	22ff      	movs	r2, #255	@ 0xff
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006546:	f001 fdf9 	bl	800813c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800654a:	f001 fdc5 	bl	80080d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006556:	e011      	b.n	800657c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d012      	beq.n	8006586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3310      	adds	r3, #16
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fd75 	bl	8007054 <xTaskRemoveFromEventList>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006570:	f000 fe4e 	bl	8007210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	3b01      	subs	r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800657c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006580:	2b00      	cmp	r3, #0
 8006582:	dce9      	bgt.n	8006558 <prvUnlockQueue+0x60>
 8006584:	e000      	b.n	8006588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	22ff      	movs	r2, #255	@ 0xff
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006590:	f001 fdd4 	bl	800813c <vPortExitCritical>
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065a4:	f001 fd98 	bl	80080d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e001      	b.n	80065ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ba:	f001 fdbf 	bl	800813c <vPortExitCritical>

	return xReturn;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d0:	f001 fd82 	bl	80080d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	429a      	cmp	r2, r3
 80065de:	d102      	bne.n	80065e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e001      	b.n	80065ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ea:	f001 fda7 	bl	800813c <vPortExitCritical>

	return xReturn;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e014      	b.n	8006632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006608:	4a0f      	ldr	r2, [pc, #60]	@ (8006648 <vQueueAddToRegistry+0x50>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006614:	490c      	ldr	r1, [pc, #48]	@ (8006648 <vQueueAddToRegistry+0x50>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800661e:	4a0a      	ldr	r2, [pc, #40]	@ (8006648 <vQueueAddToRegistry+0x50>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800662a:	e006      	b.n	800663a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b07      	cmp	r3, #7
 8006636:	d9e7      	bls.n	8006608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	200054a8 	.word	0x200054a8

0800664c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e016      	b.n	8006688 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800665a:	4a10      	ldr	r2, [pc, #64]	@ (800669c <vQueueUnregisterQueue+0x50>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d10b      	bne.n	8006682 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800666a:	4a0c      	ldr	r2, [pc, #48]	@ (800669c <vQueueUnregisterQueue+0x50>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2100      	movs	r1, #0
 8006670:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006674:	4a09      	ldr	r2, [pc, #36]	@ (800669c <vQueueUnregisterQueue+0x50>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
				break;
 8006680:	e006      	b.n	8006690 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b07      	cmp	r3, #7
 800668c:	d9e5      	bls.n	800665a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	200054a8 	.word	0x200054a8

080066a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066b0:	f001 fd12 	bl	80080d8 <vPortEnterCritical>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066ba:	b25b      	sxtb	r3, r3
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d103      	bne.n	80066ca <vQueueWaitForMessageRestricted+0x2a>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d103      	bne.n	80066e0 <vQueueWaitForMessageRestricted+0x40>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e0:	f001 fd2c 	bl	800813c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	3324      	adds	r3, #36	@ 0x24
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fc81 	bl	8006ffc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff fefc 	bl	80064f8 <prvUnlockQueue>
	}
 8006700:	bf00      	nop
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	@ 0x38
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <xTaskCreateStatic+0x2c>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	623b      	str	r3, [r7, #32]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <xTaskCreateStatic+0x4a>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	61fb      	str	r3, [r7, #28]
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	e7fd      	b.n	800674e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006752:	23ac      	movs	r3, #172	@ 0xac
 8006754:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2bac      	cmp	r3, #172	@ 0xac
 800675a:	d00b      	beq.n	8006774 <xTaskCreateStatic+0x6c>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61bb      	str	r3, [r7, #24]
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	e7fd      	b.n	8006770 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006774:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01e      	beq.n	80067ba <xTaskCreateStatic+0xb2>
 800677c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01b      	beq.n	80067ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	2202      	movs	r2, #2
 8006790:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006794:	2300      	movs	r3, #0
 8006796:	9303      	str	r3, [sp, #12]
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	9302      	str	r3, [sp, #8]
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f851 	bl	8006854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067b4:	f000 f8f8 	bl	80069a8 <prvAddNewTaskToReadyList>
 80067b8:	e001      	b.n	80067be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067be:	697b      	ldr	r3, [r7, #20]
	}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	@ 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	@ 0x30
 80067cc:	af04      	add	r7, sp, #16
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fd9d 	bl	800831c <pvPortMalloc>
 80067e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067ea:	20ac      	movs	r0, #172	@ 0xac
 80067ec:	f001 fd96 	bl	800831c <pvPortMalloc>
 80067f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80067fe:	e005      	b.n	800680c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f001 fe59 	bl	80084b8 <vPortFree>
 8006806:	e001      	b.n	800680c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	2300      	movs	r3, #0
 800681e:	9303      	str	r3, [sp, #12]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	9302      	str	r3, [sp, #8]
 8006824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f80f 	bl	8006854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006836:	69f8      	ldr	r0, [r7, #28]
 8006838:	f000 f8b6 	bl	80069a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800683c:	2301      	movs	r3, #1
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	e002      	b.n	8006848 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006848:	69bb      	ldr	r3, [r7, #24]
	}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	461a      	mov	r2, r3
 800686c:	21a5      	movs	r1, #165	@ 0xa5
 800686e:	f00d ffd4 	bl	801481a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800687c:	3b01      	subs	r3, #1
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	617b      	str	r3, [r7, #20]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01f      	beq.n	80068fa <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	e012      	b.n	80068e6 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	7819      	ldrb	r1, [r3, #0]
 80068c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	3334      	adds	r3, #52	@ 0x34
 80068d0:	460a      	mov	r2, r1
 80068d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3301      	adds	r3, #1
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	2b0f      	cmp	r3, #15
 80068ea:	d9e9      	bls.n	80068c0 <prvInitialiseNewTask+0x6c>
 80068ec:	e000      	b.n	80068f0 <prvInitialiseNewTask+0x9c>
			{
				break;
 80068ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068f8:	e003      	b.n	8006902 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	2b37      	cmp	r3, #55	@ 0x37
 8006906:	d901      	bls.n	800690c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006908:	2337      	movs	r3, #55	@ 0x37
 800690a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006910:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006916:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	2200      	movs	r2, #0
 800691c:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	3304      	adds	r3, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fd78 	bl	8005418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	3318      	adds	r3, #24
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fd73 	bl	8005418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006936:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	2200      	movs	r2, #0
 8006954:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	3358      	adds	r3, #88	@ 0x58
 800695c:	224c      	movs	r2, #76	@ 0x4c
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f00d ff5a 	bl	801481a <memset>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	4a0c      	ldr	r2, [pc, #48]	@ (800699c <prvInitialiseNewTask+0x148>)
 800696a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <prvInitialiseNewTask+0x14c>)
 8006970:	661a      	str	r2, [r3, #96]	@ 0x60
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	4a0b      	ldr	r2, [pc, #44]	@ (80069a4 <prvInitialiseNewTask+0x150>)
 8006976:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	69b8      	ldr	r0, [r7, #24]
 800697e:	f001 fa7b 	bl	8007e78 <pxPortInitialiseStack>
 8006982:	4602      	mov	r2, r0
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006992:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006994:	bf00      	nop
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20004bf8 	.word	0x20004bf8
 80069a0:	20004c60 	.word	0x20004c60
 80069a4:	20004cc8 	.word	0x20004cc8

080069a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069b0:	f001 fb92 	bl	80080d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069b4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a6c <prvAddNewTaskToReadyList+0xc4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3301      	adds	r3, #1
 80069ba:	4a2c      	ldr	r2, [pc, #176]	@ (8006a6c <prvAddNewTaskToReadyList+0xc4>)
 80069bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069be:	4b2c      	ldr	r3, [pc, #176]	@ (8006a70 <prvAddNewTaskToReadyList+0xc8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a70 <prvAddNewTaskToReadyList+0xc8>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069cc:	4b27      	ldr	r3, [pc, #156]	@ (8006a6c <prvAddNewTaskToReadyList+0xc4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d110      	bne.n	80069f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069d4:	f000 fc40 	bl	8007258 <prvInitialiseTaskLists>
 80069d8:	e00d      	b.n	80069f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069da:	4b26      	ldr	r3, [pc, #152]	@ (8006a74 <prvAddNewTaskToReadyList+0xcc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069e2:	4b23      	ldr	r3, [pc, #140]	@ (8006a70 <prvAddNewTaskToReadyList+0xc8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d802      	bhi.n	80069f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <prvAddNewTaskToReadyList+0xc8>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069f6:	4b20      	ldr	r3, [pc, #128]	@ (8006a78 <prvAddNewTaskToReadyList+0xd0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3301      	adds	r3, #1
 80069fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006a78 <prvAddNewTaskToReadyList+0xd0>)
 80069fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a00:	4b1d      	ldr	r3, [pc, #116]	@ (8006a78 <prvAddNewTaskToReadyList+0xd0>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a7c <prvAddNewTaskToReadyList+0xd4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d903      	bls.n	8006a1c <prvAddNewTaskToReadyList+0x74>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <prvAddNewTaskToReadyList+0xd4>)
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4a15      	ldr	r2, [pc, #84]	@ (8006a80 <prvAddNewTaskToReadyList+0xd8>)
 8006a2a:	441a      	add	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7fe fcfd 	bl	8005432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a38:	f001 fb80 	bl	800813c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <prvAddNewTaskToReadyList+0xcc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a44:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <prvAddNewTaskToReadyList+0xc8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d207      	bcs.n	8006a62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a52:	4b0c      	ldr	r3, [pc, #48]	@ (8006a84 <prvAddNewTaskToReadyList+0xdc>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000cd8 	.word	0x20000cd8
 8006a70:	20000804 	.word	0x20000804
 8006a74:	20000ce4 	.word	0x20000ce4
 8006a78:	20000cf4 	.word	0x20000cf4
 8006a7c:	20000ce0 	.word	0x20000ce0
 8006a80:	20000808 	.word	0x20000808
 8006a84:	e000ed04 	.word	0xe000ed04

08006a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d018      	beq.n	8006acc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a9a:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <vTaskDelay+0x64>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <vTaskDelay+0x32>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60bb      	str	r3, [r7, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006aba:	f000 f88b 	bl	8006bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fe2b 	bl	800771c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ac6:	f000 f893 	bl	8006bf0 <xTaskResumeAll>
 8006aca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d107      	bne.n	8006ae2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ad2:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <vTaskDelay+0x68>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000d00 	.word	0x20000d00
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	@ 0x28
 8006af8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b02:	463a      	mov	r2, r7
 8006b04:	1d39      	adds	r1, r7, #4
 8006b06:	f107 0308 	add.w	r3, r7, #8
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fc30 	bl	8005370 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	9202      	str	r2, [sp, #8]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	460a      	mov	r2, r1
 8006b22:	4924      	ldr	r1, [pc, #144]	@ (8006bb4 <vTaskStartScheduler+0xc0>)
 8006b24:	4824      	ldr	r0, [pc, #144]	@ (8006bb8 <vTaskStartScheduler+0xc4>)
 8006b26:	f7ff fdef 	bl	8006708 <xTaskCreateStatic>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	4a23      	ldr	r2, [pc, #140]	@ (8006bbc <vTaskStartScheduler+0xc8>)
 8006b2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b30:	4b22      	ldr	r3, [pc, #136]	@ (8006bbc <vTaskStartScheduler+0xc8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e001      	b.n	8006b42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d102      	bne.n	8006b4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b48:	f000 fe3c 	bl	80077c4 <xTimerCreateTimerTask>
 8006b4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d11b      	bne.n	8006b8c <vTaskStartScheduler+0x98>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b68:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <vTaskStartScheduler+0xcc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3358      	adds	r3, #88	@ 0x58
 8006b6e:	4a15      	ldr	r2, [pc, #84]	@ (8006bc4 <vTaskStartScheduler+0xd0>)
 8006b70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b72:	4b15      	ldr	r3, [pc, #84]	@ (8006bc8 <vTaskStartScheduler+0xd4>)
 8006b74:	f04f 32ff 	mov.w	r2, #4294967295
 8006b78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b7a:	4b14      	ldr	r3, [pc, #80]	@ (8006bcc <vTaskStartScheduler+0xd8>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b80:	4b13      	ldr	r3, [pc, #76]	@ (8006bd0 <vTaskStartScheduler+0xdc>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b86:	f001 fa03 	bl	8007f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b8a:	e00f      	b.n	8006bac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d10b      	bne.n	8006bac <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <vTaskStartScheduler+0xb4>
}
 8006bac:	bf00      	nop
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08015710 	.word	0x08015710
 8006bb8:	08007229 	.word	0x08007229
 8006bbc:	20000cfc 	.word	0x20000cfc
 8006bc0:	20000804 	.word	0x20000804
 8006bc4:	2000002c 	.word	0x2000002c
 8006bc8:	20000cf8 	.word	0x20000cf8
 8006bcc:	20000ce4 	.word	0x20000ce4
 8006bd0:	20000cdc 	.word	0x20000cdc

08006bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a03      	ldr	r2, [pc, #12]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006be0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	20000d00 	.word	0x20000d00

08006bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfe:	4b42      	ldr	r3, [pc, #264]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	603b      	str	r3, [r7, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c1e:	f001 fa5b 	bl	80080d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c22:	4b39      	ldr	r3, [pc, #228]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a37      	ldr	r2, [pc, #220]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c2c:	4b36      	ldr	r3, [pc, #216]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d162      	bne.n	8006cfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05e      	beq.n	8006cfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3c:	e02f      	b.n	8006c9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3e:	4b34      	ldr	r3, [pc, #208]	@ (8006d10 <xTaskResumeAll+0x120>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3318      	adds	r3, #24
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fc4e 	bl	80054ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fc49 	bl	80054ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d903      	bls.n	8006c6e <xTaskResumeAll+0x7e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4a27      	ldr	r2, [pc, #156]	@ (8006d18 <xTaskResumeAll+0x128>)
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fe fbd4 	bl	8005432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	4b23      	ldr	r3, [pc, #140]	@ (8006d1c <xTaskResumeAll+0x12c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006c98:	4b21      	ldr	r3, [pc, #132]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8006d10 <xTaskResumeAll+0x120>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1cb      	bne.n	8006c3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cac:	f000 fb78 	bl	80073a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cbc:	f000 f858 	bl	8006d70 <xTaskIncrementTick>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006cc6:	4b16      	ldr	r3, [pc, #88]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006cc8:	2201      	movs	r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f1      	bne.n	8006cbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006cd8:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cde:	4b10      	ldr	r3, [pc, #64]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cea:	4b0f      	ldr	r3, [pc, #60]	@ (8006d28 <xTaskResumeAll+0x138>)
 8006cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cfa:	f001 fa1f 	bl	800813c <vPortExitCritical>

	return xAlreadyYielded;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000d00 	.word	0x20000d00
 8006d0c:	20000cd8 	.word	0x20000cd8
 8006d10:	20000c98 	.word	0x20000c98
 8006d14:	20000ce0 	.word	0x20000ce0
 8006d18:	20000808 	.word	0x20000808
 8006d1c:	20000804 	.word	0x20000804
 8006d20:	20000cec 	.word	0x20000cec
 8006d24:	20000ce8 	.word	0x20000ce8
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d32:	4b05      	ldr	r3, [pc, #20]	@ (8006d48 <xTaskGetTickCount+0x1c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d38:	687b      	ldr	r3, [r7, #4]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000cdc 	.word	0x20000cdc

08006d4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d52:	f001 faa1 	bl	8008298 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d5a:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <xTaskGetTickCountFromISR+0x20>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d60:	683b      	ldr	r3, [r7, #0]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000cdc 	.word	0x20000cdc

08006d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006eb8 <xTaskIncrementTick+0x148>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 8090 	bne.w	8006ea4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d84:	4b4d      	ldr	r3, [pc, #308]	@ (8006ebc <xTaskIncrementTick+0x14c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8006ebc <xTaskIncrementTick+0x14c>)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d121      	bne.n	8006ddc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d98:	4b49      	ldr	r3, [pc, #292]	@ (8006ec0 <xTaskIncrementTick+0x150>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <xTaskIncrementTick+0x4a>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	603b      	str	r3, [r7, #0]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <xTaskIncrementTick+0x46>
 8006dba:	4b41      	ldr	r3, [pc, #260]	@ (8006ec0 <xTaskIncrementTick+0x150>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	4b40      	ldr	r3, [pc, #256]	@ (8006ec4 <xTaskIncrementTick+0x154>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec0 <xTaskIncrementTick+0x150>)
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec4 <xTaskIncrementTick+0x154>)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b3e      	ldr	r3, [pc, #248]	@ (8006ec8 <xTaskIncrementTick+0x158>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec8 <xTaskIncrementTick+0x158>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	f000 fae2 	bl	80073a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8006ecc <xTaskIncrementTick+0x15c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d349      	bcc.n	8006e7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de6:	4b36      	ldr	r3, [pc, #216]	@ (8006ec0 <xTaskIncrementTick+0x150>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df0:	4b36      	ldr	r3, [pc, #216]	@ (8006ecc <xTaskIncrementTick+0x15c>)
 8006df2:	f04f 32ff 	mov.w	r2, #4294967295
 8006df6:	601a      	str	r2, [r3, #0]
					break;
 8006df8:	e03f      	b.n	8006e7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dfa:	4b31      	ldr	r3, [pc, #196]	@ (8006ec0 <xTaskIncrementTick+0x150>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d203      	bcs.n	8006e1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e12:	4a2e      	ldr	r2, [pc, #184]	@ (8006ecc <xTaskIncrementTick+0x15c>)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e18:	e02f      	b.n	8006e7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fb64 	bl	80054ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	3318      	adds	r3, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fb5b 	bl	80054ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <xTaskIncrementTick+0x160>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d903      	bls.n	8006e4a <xTaskIncrementTick+0xda>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	4a22      	ldr	r2, [pc, #136]	@ (8006ed0 <xTaskIncrementTick+0x160>)
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a1f      	ldr	r2, [pc, #124]	@ (8006ed4 <xTaskIncrementTick+0x164>)
 8006e58:	441a      	add	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fe fae6 	bl	8005432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <xTaskIncrementTick+0x168>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d3b8      	bcc.n	8006de6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e78:	e7b5      	b.n	8006de6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <xTaskIncrementTick+0x168>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e80:	4914      	ldr	r1, [pc, #80]	@ (8006ed4 <xTaskIncrementTick+0x164>)
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d901      	bls.n	8006e96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006e92:	2301      	movs	r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e96:	4b11      	ldr	r3, [pc, #68]	@ (8006edc <xTaskIncrementTick+0x16c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	e004      	b.n	8006eae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <xTaskIncrementTick+0x170>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee0 <xTaskIncrementTick+0x170>)
 8006eac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006eae:	697b      	ldr	r3, [r7, #20]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000d00 	.word	0x20000d00
 8006ebc:	20000cdc 	.word	0x20000cdc
 8006ec0:	20000c90 	.word	0x20000c90
 8006ec4:	20000c94 	.word	0x20000c94
 8006ec8:	20000cf0 	.word	0x20000cf0
 8006ecc:	20000cf8 	.word	0x20000cf8
 8006ed0:	20000ce0 	.word	0x20000ce0
 8006ed4:	20000808 	.word	0x20000808
 8006ed8:	20000804 	.word	0x20000804
 8006edc:	20000cec 	.word	0x20000cec
 8006ee0:	20000ce8 	.word	0x20000ce8

08006ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eea:	4b2b      	ldr	r3, [pc, #172]	@ (8006f98 <vTaskSwitchContext+0xb4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f9c <vTaskSwitchContext+0xb8>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ef8:	e047      	b.n	8006f8a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006efa:	4b28      	ldr	r3, [pc, #160]	@ (8006f9c <vTaskSwitchContext+0xb8>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	4b27      	ldr	r3, [pc, #156]	@ (8006fa0 <vTaskSwitchContext+0xbc>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e011      	b.n	8006f2c <vTaskSwitchContext+0x48>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10b      	bne.n	8006f26 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	e7fd      	b.n	8006f22 <vTaskSwitchContext+0x3e>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	491d      	ldr	r1, [pc, #116]	@ (8006fa4 <vTaskSwitchContext+0xc0>)
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4613      	mov	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0e3      	beq.n	8006f08 <vTaskSwitchContext+0x24>
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4a16      	ldr	r2, [pc, #88]	@ (8006fa4 <vTaskSwitchContext+0xc0>)
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3308      	adds	r3, #8
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d104      	bne.n	8006f70 <vTaskSwitchContext+0x8c>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa8 <vTaskSwitchContext+0xc4>)
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4a09      	ldr	r2, [pc, #36]	@ (8006fa0 <vTaskSwitchContext+0xbc>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f80:	4b09      	ldr	r3, [pc, #36]	@ (8006fa8 <vTaskSwitchContext+0xc4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3358      	adds	r3, #88	@ 0x58
 8006f86:	4a09      	ldr	r2, [pc, #36]	@ (8006fac <vTaskSwitchContext+0xc8>)
 8006f88:	6013      	str	r3, [r2, #0]
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20000d00 	.word	0x20000d00
 8006f9c:	20000cec 	.word	0x20000cec
 8006fa0:	20000ce0 	.word	0x20000ce0
 8006fa4:	20000808 	.word	0x20000808
 8006fa8:	20000804 	.word	0x20000804
 8006fac:	2000002c 	.word	0x2000002c

08006fb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	e7fd      	b.n	8006fd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fd8:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <vTaskPlaceOnEventList+0x48>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3318      	adds	r3, #24
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fe fa4a 	bl	800547a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f000 fb97 	bl	800771c <prvAddCurrentTaskToDelayedList>
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000804 	.word	0x20000804

08006ffc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	617b      	str	r3, [r7, #20]
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007026:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <vTaskPlaceOnEventListRestricted+0x54>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3318      	adds	r3, #24
 800702c:	4619      	mov	r1, r3
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7fe f9ff 	bl	8005432 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	68b8      	ldr	r0, [r7, #8]
 8007044:	f000 fb6a 	bl	800771c <prvAddCurrentTaskToDelayedList>
	}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000804 	.word	0x20000804

08007054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60fb      	str	r3, [r7, #12]
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	e7fd      	b.n	800707e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	3318      	adds	r3, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fa30 	bl	80054ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708c:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <xTaskRemoveFromEventList+0xb0>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11d      	bne.n	80070d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fa27 	bl	80054ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a2:	4b19      	ldr	r3, [pc, #100]	@ (8007108 <xTaskRemoveFromEventList+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d903      	bls.n	80070b2 <xTaskRemoveFromEventList+0x5e>
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	4a16      	ldr	r2, [pc, #88]	@ (8007108 <xTaskRemoveFromEventList+0xb4>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a13      	ldr	r2, [pc, #76]	@ (800710c <xTaskRemoveFromEventList+0xb8>)
 80070c0:	441a      	add	r2, r3
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4619      	mov	r1, r3
 80070c8:	4610      	mov	r0, r2
 80070ca:	f7fe f9b2 	bl	8005432 <vListInsertEnd>
 80070ce:	e005      	b.n	80070dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3318      	adds	r3, #24
 80070d4:	4619      	mov	r1, r3
 80070d6:	480e      	ldr	r0, [pc, #56]	@ (8007110 <xTaskRemoveFromEventList+0xbc>)
 80070d8:	f7fe f9ab 	bl	8005432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <xTaskRemoveFromEventList+0xc0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d905      	bls.n	80070f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007118 <xTaskRemoveFromEventList+0xc4>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e001      	b.n	80070fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000d00 	.word	0x20000d00
 8007108:	20000ce0 	.word	0x20000ce0
 800710c:	20000808 	.word	0x20000808
 8007110:	20000c98 	.word	0x20000c98
 8007114:	20000804 	.word	0x20000804
 8007118:	20000cec 	.word	0x20000cec

0800711c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007124:	4b06      	ldr	r3, [pc, #24]	@ (8007140 <vTaskInternalSetTimeOutState+0x24>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <vTaskInternalSetTimeOutState+0x28>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20000cf0 	.word	0x20000cf0
 8007144:	20000cdc 	.word	0x20000cdc

08007148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	613b      	str	r3, [r7, #16]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60fb      	str	r3, [r7, #12]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800718e:	f000 ffa3 	bl	80080d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007192:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <xTaskCheckForTimeOut+0xc0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d102      	bne.n	80071b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	e023      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b15      	ldr	r3, [pc, #84]	@ (800720c <xTaskCheckForTimeOut+0xc4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d007      	beq.n	80071ce <xTaskCheckForTimeOut+0x86>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e015      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d20b      	bcs.n	80071f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff99 	bl	800711c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e004      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071fa:	f000 ff9f 	bl	800813c <vPortExitCritical>

	return xReturn;
 80071fe:	69fb      	ldr	r3, [r7, #28]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000cdc 	.word	0x20000cdc
 800720c:	20000cf0 	.word	0x20000cf0

08007210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007214:	4b03      	ldr	r3, [pc, #12]	@ (8007224 <vTaskMissedYield+0x14>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000cec 	.word	0x20000cec

08007228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007230:	f000 f852 	bl	80072d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007234:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <prvIdleTask+0x28>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d9f9      	bls.n	8007230 <prvIdleTask+0x8>
			{
				taskYIELD();
 800723c:	4b05      	ldr	r3, [pc, #20]	@ (8007254 <prvIdleTask+0x2c>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800724c:	e7f0      	b.n	8007230 <prvIdleTask+0x8>
 800724e:	bf00      	nop
 8007250:	20000808 	.word	0x20000808
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	e00c      	b.n	800727e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <prvInitialiseTaskLists+0x60>)
 8007270:	4413      	add	r3, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe f8b0 	bl	80053d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b37      	cmp	r3, #55	@ 0x37
 8007282:	d9ef      	bls.n	8007264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007284:	480d      	ldr	r0, [pc, #52]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 8007286:	f7fe f8a7 	bl	80053d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800728a:	480d      	ldr	r0, [pc, #52]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 800728c:	f7fe f8a4 	bl	80053d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007290:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <prvInitialiseTaskLists+0x6c>)
 8007292:	f7fe f8a1 	bl	80053d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007296:	480c      	ldr	r0, [pc, #48]	@ (80072c8 <prvInitialiseTaskLists+0x70>)
 8007298:	f7fe f89e 	bl	80053d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800729c:	480b      	ldr	r0, [pc, #44]	@ (80072cc <prvInitialiseTaskLists+0x74>)
 800729e:	f7fe f89b 	bl	80053d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <prvInitialiseTaskLists+0x78>)
 80072a4:	4a05      	ldr	r2, [pc, #20]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 80072a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <prvInitialiseTaskLists+0x7c>)
 80072aa:	4a05      	ldr	r2, [pc, #20]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000808 	.word	0x20000808
 80072bc:	20000c68 	.word	0x20000c68
 80072c0:	20000c7c 	.word	0x20000c7c
 80072c4:	20000c98 	.word	0x20000c98
 80072c8:	20000cac 	.word	0x20000cac
 80072cc:	20000cc4 	.word	0x20000cc4
 80072d0:	20000c90 	.word	0x20000c90
 80072d4:	20000c94 	.word	0x20000c94

080072d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072de:	e019      	b.n	8007314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072e0:	f000 fefa 	bl	80080d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b10      	ldr	r3, [pc, #64]	@ (8007328 <prvCheckTasksWaitingTermination+0x50>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe f8fb 	bl	80054ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	4a0b      	ldr	r2, [pc, #44]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3b01      	subs	r3, #1
 8007306:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800730a:	f000 ff17 	bl	800813c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f810 	bl	8007334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e1      	bne.n	80072e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000cac 	.word	0x20000cac
 800732c:	20000cd8 	.word	0x20000cd8
 8007330:	20000cc0 	.word	0x20000cc0

08007334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3358      	adds	r3, #88	@ 0x58
 8007340:	4618      	mov	r0, r3
 8007342:	f00d fa83 	bl	801484c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800734c:	2b00      	cmp	r3, #0
 800734e:	d108      	bne.n	8007362 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	4618      	mov	r0, r3
 8007356:	f001 f8af 	bl	80084b8 <vPortFree>
				vPortFree( pxTCB );
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 f8ac 	bl	80084b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007360:	e019      	b.n	8007396 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8007368:	2b01      	cmp	r3, #1
 800736a:	d103      	bne.n	8007374 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f8a3 	bl	80084b8 <vPortFree>
	}
 8007372:	e010      	b.n	8007396 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800737a:	2b02      	cmp	r3, #2
 800737c:	d00b      	beq.n	8007396 <prvDeleteTCB+0x62>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <prvDeleteTCB+0x5e>
	}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073b8:	e008      	b.n	80073cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000c90 	.word	0x20000c90
 80073dc:	20000cf8 	.word	0x20000cf8

080073e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80073e6:	4b05      	ldr	r3, [pc, #20]	@ (80073fc <xTaskGetCurrentTaskHandle+0x1c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80073ec:	687b      	ldr	r3, [r7, #4]
	}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000804 	.word	0x20000804

08007400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007406:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <xTaskGetSchedulerState+0x34>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800740e:	2301      	movs	r3, #1
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e008      	b.n	8007426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <xTaskGetSchedulerState+0x38>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800741c:	2302      	movs	r3, #2
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e001      	b.n	8007426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007426:	687b      	ldr	r3, [r7, #4]
	}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20000ce4 	.word	0x20000ce4
 8007438:	20000d00 	.word	0x20000d00

0800743c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d051      	beq.n	80074f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007456:	4b2a      	ldr	r3, [pc, #168]	@ (8007500 <xTaskPriorityInherit+0xc4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d241      	bcs.n	80074e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	db06      	blt.n	8007476 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007468:	4b25      	ldr	r3, [pc, #148]	@ (8007500 <xTaskPriorityInherit+0xc4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6959      	ldr	r1, [r3, #20]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a1f      	ldr	r2, [pc, #124]	@ (8007504 <xTaskPriorityInherit+0xc8>)
 8007488:	4413      	add	r3, r2
 800748a:	4299      	cmp	r1, r3
 800748c:	d122      	bne.n	80074d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe f82a 	bl	80054ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007498:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <xTaskPriorityInherit+0xc4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4b18      	ldr	r3, [pc, #96]	@ (8007508 <xTaskPriorityInherit+0xcc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d903      	bls.n	80074b6 <xTaskPriorityInherit+0x7a>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	4a15      	ldr	r2, [pc, #84]	@ (8007508 <xTaskPriorityInherit+0xcc>)
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4a10      	ldr	r2, [pc, #64]	@ (8007504 <xTaskPriorityInherit+0xc8>)
 80074c4:	441a      	add	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fd ffb0 	bl	8005432 <vListInsertEnd>
 80074d2:	e004      	b.n	80074de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <xTaskPriorityInherit+0xc4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80074de:	2301      	movs	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e008      	b.n	80074f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <xTaskPriorityInherit+0xc4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d201      	bcs.n	80074f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074f6:	68fb      	ldr	r3, [r7, #12]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000804 	.word	0x20000804
 8007504:	20000808 	.word	0x20000808
 8007508:	20000ce0 	.word	0x20000ce0

0800750c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d058      	beq.n	80075d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007522:	4b2f      	ldr	r3, [pc, #188]	@ (80075e0 <xTaskPriorityDisinherit+0xd4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	429a      	cmp	r2, r3
 800752a:	d00b      	beq.n	8007544 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60fb      	str	r3, [r7, #12]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60bb      	str	r3, [r7, #8]
}
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	e7fd      	b.n	8007560 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	1e5a      	subs	r2, r3, #1
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007576:	429a      	cmp	r2, r3
 8007578:	d02c      	beq.n	80075d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757e:	2b00      	cmp	r3, #0
 8007580:	d128      	bne.n	80075d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7fd ffb0 	bl	80054ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <xTaskPriorityDisinherit+0xd8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d903      	bls.n	80075b4 <xTaskPriorityDisinherit+0xa8>
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a0c      	ldr	r2, [pc, #48]	@ (80075e4 <xTaskPriorityDisinherit+0xd8>)
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4a09      	ldr	r2, [pc, #36]	@ (80075e8 <xTaskPriorityDisinherit+0xdc>)
 80075c2:	441a      	add	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7fd ff31 	bl	8005432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075d4:	697b      	ldr	r3, [r7, #20]
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000804 	.word	0x20000804
 80075e4:	20000ce0 	.word	0x20000ce0
 80075e8:	20000808 	.word	0x20000808

080075ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075fa:	2301      	movs	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d06c      	beq.n	80076de <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	bf00      	nop
 8007622:	e7fd      	b.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d902      	bls.n	8007634 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	e002      	b.n	800763a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007638:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763e:	69fa      	ldr	r2, [r7, #28]
 8007640:	429a      	cmp	r2, r3
 8007642:	d04c      	beq.n	80076de <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	429a      	cmp	r2, r3
 800764c:	d147      	bne.n	80076de <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800764e:	4b26      	ldr	r3, [pc, #152]	@ (80076e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	429a      	cmp	r2, r3
 8007656:	d10b      	bne.n	8007670 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60bb      	str	r3, [r7, #8]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	db04      	blt.n	800768e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	6959      	ldr	r1, [r3, #20]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4a13      	ldr	r2, [pc, #76]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800769e:	4413      	add	r3, r2
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d11c      	bne.n	80076de <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fd ff1f 	bl	80054ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	4b0f      	ldr	r3, [pc, #60]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a07      	ldr	r2, [pc, #28]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80076d0:	441a      	add	r2, r3
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fd feaa 	bl	8005432 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076de:	bf00      	nop
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000804 	.word	0x20000804
 80076ec:	20000808 	.word	0x20000808
 80076f0:	20000ce0 	.word	0x20000ce0

080076f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076f8:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <pvTaskIncrementMutexHeldCount+0x24>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007700:	4b05      	ldr	r3, [pc, #20]	@ (8007718 <pvTaskIncrementMutexHeldCount+0x24>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007706:	3201      	adds	r2, #1
 8007708:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800770a:	4b03      	ldr	r3, [pc, #12]	@ (8007718 <pvTaskIncrementMutexHeldCount+0x24>)
 800770c:	681b      	ldr	r3, [r3, #0]
	}
 800770e:	4618      	mov	r0, r3
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000804 	.word	0x20000804

0800771c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007726:	4b21      	ldr	r3, [pc, #132]	@ (80077ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772c:	4b20      	ldr	r3, [pc, #128]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3304      	adds	r3, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f7fd feda 	bl	80054ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d10a      	bne.n	8007756 <prvAddCurrentTaskToDelayedList+0x3a>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007746:	4b1a      	ldr	r3, [pc, #104]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4819      	ldr	r0, [pc, #100]	@ (80077b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007750:	f7fd fe6f 	bl	8005432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007754:	e026      	b.n	80077a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800775e:	4b14      	ldr	r3, [pc, #80]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	429a      	cmp	r2, r3
 800776c:	d209      	bcs.n	8007782 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800776e:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fd fe7d 	bl	800547a <vListInsert>
}
 8007780:	e010      	b.n	80077a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3304      	adds	r3, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f7fd fe73 	bl	800547a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007794:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	429a      	cmp	r2, r3
 800779c:	d202      	bcs.n	80077a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800779e:	4a08      	ldr	r2, [pc, #32]	@ (80077c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6013      	str	r3, [r2, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000cdc 	.word	0x20000cdc
 80077b0:	20000804 	.word	0x20000804
 80077b4:	20000cc4 	.word	0x20000cc4
 80077b8:	20000c94 	.word	0x20000c94
 80077bc:	20000c90 	.word	0x20000c90
 80077c0:	20000cf8 	.word	0x20000cf8

080077c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	@ 0x28
 80077c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077ce:	f000 fb13 	bl	8007df8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007848 <xTimerCreateTimerTask+0x84>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d021      	beq.n	800781e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077e2:	1d3a      	adds	r2, r7, #4
 80077e4:	f107 0108 	add.w	r1, r7, #8
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd fdd9 	bl	80053a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	9202      	str	r2, [sp, #8]
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	2302      	movs	r3, #2
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2300      	movs	r3, #0
 8007802:	460a      	mov	r2, r1
 8007804:	4911      	ldr	r1, [pc, #68]	@ (800784c <xTimerCreateTimerTask+0x88>)
 8007806:	4812      	ldr	r0, [pc, #72]	@ (8007850 <xTimerCreateTimerTask+0x8c>)
 8007808:	f7fe ff7e 	bl	8006708 <xTaskCreateStatic>
 800780c:	4603      	mov	r3, r0
 800780e:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <xTimerCreateTimerTask+0x90>)
 8007810:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007812:	4b10      	ldr	r3, [pc, #64]	@ (8007854 <xTimerCreateTimerTask+0x90>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800781a:	2301      	movs	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	613b      	str	r3, [r7, #16]
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000d34 	.word	0x20000d34
 800784c:	08015718 	.word	0x08015718
 8007850:	08007991 	.word	0x08007991
 8007854:	20000d38 	.word	0x20000d38

08007858 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	@ 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xTimerGenericCommand+0x30>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	623b      	str	r3, [r7, #32]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007888:	4b19      	ldr	r3, [pc, #100]	@ (80078f0 <xTimerGenericCommand+0x98>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02a      	beq.n	80078e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b05      	cmp	r3, #5
 80078a0:	dc18      	bgt.n	80078d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078a2:	f7ff fdad 	bl	8007400 <xTaskGetSchedulerState>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d109      	bne.n	80078c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ac:	4b10      	ldr	r3, [pc, #64]	@ (80078f0 <xTimerGenericCommand+0x98>)
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	f107 0110 	add.w	r1, r7, #16
 80078b4:	2300      	movs	r3, #0
 80078b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b8:	f7fe f8ae 	bl	8005a18 <xQueueGenericSend>
 80078bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80078be:	e012      	b.n	80078e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078c0:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <xTimerGenericCommand+0x98>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	f107 0110 	add.w	r1, r7, #16
 80078c8:	2300      	movs	r3, #0
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7fe f8a4 	bl	8005a18 <xQueueGenericSend>
 80078d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80078d2:	e008      	b.n	80078e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078d4:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <xTimerGenericCommand+0x98>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	f107 0110 	add.w	r1, r7, #16
 80078dc:	2300      	movs	r3, #0
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	f7fe f99c 	bl	8005c1c <xQueueGenericSendFromISR>
 80078e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3728      	adds	r7, #40	@ 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000d34 	.word	0x20000d34

080078f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fe:	4b23      	ldr	r3, [pc, #140]	@ (800798c <prvProcessExpiredTimer+0x98>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3304      	adds	r3, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f7fd fded 	bl	80054ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d023      	beq.n	8007968 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	699a      	ldr	r2, [r3, #24]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	18d1      	adds	r1, r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	6978      	ldr	r0, [r7, #20]
 800792e:	f000 f8d5 	bl	8007adc <prvInsertTimerInActiveList>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d020      	beq.n	800797a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007938:	2300      	movs	r3, #0
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	2100      	movs	r1, #0
 8007942:	6978      	ldr	r0, [r7, #20]
 8007944:	f7ff ff88 	bl	8007858 <xTimerGenericCommand>
 8007948:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d114      	bne.n	800797a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	6978      	ldr	r0, [r7, #20]
 8007980:	4798      	blx	r3
}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000d2c 	.word	0x20000d2c

08007990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007998:	f107 0308 	add.w	r3, r7, #8
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f859 	bl	8007a54 <prvGetNextExpireTime>
 80079a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4619      	mov	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f805 	bl	80079b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ae:	f000 f8d7 	bl	8007b60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079b2:	bf00      	nop
 80079b4:	e7f0      	b.n	8007998 <prvTimerTask+0x8>
	...

080079b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079c2:	f7ff f907 	bl	8006bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079c6:	f107 0308 	add.w	r3, r7, #8
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f866 	bl	8007a9c <prvSampleTimeNow>
 80079d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d130      	bne.n	8007a3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <prvProcessTimerOrBlockTask+0x3c>
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d806      	bhi.n	80079f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079e6:	f7ff f903 	bl	8006bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff81 	bl	80078f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079f2:	e024      	b.n	8007a3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079fa:	4b13      	ldr	r3, [pc, #76]	@ (8007a48 <prvProcessTimerOrBlockTask+0x90>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <prvProcessTimerOrBlockTask+0x50>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <prvProcessTimerOrBlockTask+0x52>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a4c <prvProcessTimerOrBlockTask+0x94>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f7fe fe41 	bl	80066a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a1e:	f7ff f8e7 	bl	8006bf0 <xTaskResumeAll>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a28:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <prvProcessTimerOrBlockTask+0x98>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
}
 8007a38:	e001      	b.n	8007a3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a3a:	f7ff f8d9 	bl	8006bf0 <xTaskResumeAll>
}
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000d30 	.word	0x20000d30
 8007a4c:	20000d34 	.word	0x20000d34
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a98 <prvGetNextExpireTime+0x44>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <prvGetNextExpireTime+0x16>
 8007a66:	2201      	movs	r2, #1
 8007a68:	e000      	b.n	8007a6c <prvGetNextExpireTime+0x18>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a78:	4b07      	ldr	r3, [pc, #28]	@ (8007a98 <prvGetNextExpireTime+0x44>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e001      	b.n	8007a88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a88:	68fb      	ldr	r3, [r7, #12]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20000d2c 	.word	0x20000d2c

08007a9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007aa4:	f7ff f942 	bl	8006d2c <xTaskGetTickCount>
 8007aa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <prvSampleTimeNow+0x3c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d205      	bcs.n	8007ac0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ab4:	f000 f93a 	bl	8007d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e002      	b.n	8007ac6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ac6:	4a04      	ldr	r2, [pc, #16]	@ (8007ad8 <prvSampleTimeNow+0x3c>)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007acc:	68fb      	ldr	r3, [r7, #12]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000d3c 	.word	0x20000d3c

08007adc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d812      	bhi.n	8007b28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d302      	bcc.n	8007b16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e01b      	b.n	8007b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b16:	4b10      	ldr	r3, [pc, #64]	@ (8007b58 <prvInsertTimerInActiveList+0x7c>)
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7fd fcaa 	bl	800547a <vListInsert>
 8007b26:	e012      	b.n	8007b4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d206      	bcs.n	8007b3e <prvInsertTimerInActiveList+0x62>
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e007      	b.n	8007b4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b3e:	4b07      	ldr	r3, [pc, #28]	@ (8007b5c <prvInsertTimerInActiveList+0x80>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4619      	mov	r1, r3
 8007b48:	4610      	mov	r0, r2
 8007b4a:	f7fd fc96 	bl	800547a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b4e:	697b      	ldr	r3, [r7, #20]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000d30 	.word	0x20000d30
 8007b5c:	20000d2c 	.word	0x20000d2c

08007b60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08e      	sub	sp, #56	@ 0x38
 8007b64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b66:	e0ce      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da19      	bge.n	8007ba2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	3304      	adds	r3, #4
 8007b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	61fb      	str	r3, [r7, #28]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b98:	6850      	ldr	r0, [r2, #4]
 8007b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b9c:	6892      	ldr	r2, [r2, #8]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f2c0 80ae 	blt.w	8007d06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fd fc96 	bl	80054ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff ff6a 	bl	8007a9c <prvSampleTimeNow>
 8007bc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b09      	cmp	r3, #9
 8007bce:	f200 8097 	bhi.w	8007d00 <prvProcessReceivedCommands+0x1a0>
 8007bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <prvProcessReceivedCommands+0x78>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c01 	.word	0x08007c01
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c01 	.word	0x08007c01
 8007be4:	08007c77 	.word	0x08007c77
 8007be8:	08007c8b 	.word	0x08007c8b
 8007bec:	08007cd7 	.word	0x08007cd7
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c01 	.word	0x08007c01
 8007bf8:	08007c77 	.word	0x08007c77
 8007bfc:	08007c8b 	.word	0x08007c8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	18d1      	adds	r1, r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c20:	f7ff ff5c 	bl	8007adc <prvInsertTimerInActiveList>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d06c      	beq.n	8007d04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d061      	beq.n	8007d04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	441a      	add	r2, r3
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	2100      	movs	r1, #0
 8007c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c52:	f7ff fe01 	bl	8007858 <xTimerGenericCommand>
 8007c56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d152      	bne.n	8007d04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	61bb      	str	r3, [r7, #24]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c88:	e03d      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	617b      	str	r3, [r7, #20]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	18d1      	adds	r1, r2, r3
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd0:	f7ff ff04 	bl	8007adc <prvInsertTimerInActiveList>
					break;
 8007cd4:	e017      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ce4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce6:	f000 fbe7 	bl	80084b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cea:	e00c      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cfe:	e002      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <prvProcessReceivedCommands+0x1c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1d39      	adds	r1, r7, #4
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f8b2 	bl	8005e78 <xQueueReceive>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f af26 	bne.w	8007b68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3730      	adds	r7, #48	@ 0x30
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000d34 	.word	0x20000d34

08007d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d32:	e049      	b.n	8007dc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d34:	4b2e      	ldr	r3, [pc, #184]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fbcd 	bl	80054ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02f      	beq.n	8007dc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d90e      	bls.n	8007d98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d86:	4b1a      	ldr	r3, [pc, #104]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7fd fb72 	bl	800547a <vListInsert>
 8007d96:	e017      	b.n	8007dc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fd58 	bl	8007858 <xTimerGenericCommand>
 8007da8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	603b      	str	r3, [r7, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dc8:	4b09      	ldr	r3, [pc, #36]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1b0      	bne.n	8007d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dd2:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dd8:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <prvSwitchTimerLists+0xc8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a04      	ldr	r2, [pc, #16]	@ (8007df0 <prvSwitchTimerLists+0xc4>)
 8007dde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007de0:	4a04      	ldr	r2, [pc, #16]	@ (8007df4 <prvSwitchTimerLists+0xc8>)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	6013      	str	r3, [r2, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000d2c 	.word	0x20000d2c
 8007df4:	20000d30 	.word	0x20000d30

08007df8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dfe:	f000 f96b 	bl	80080d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e02:	4b15      	ldr	r3, [pc, #84]	@ (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d120      	bne.n	8007e4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e0a:	4814      	ldr	r0, [pc, #80]	@ (8007e5c <prvCheckForValidListAndQueue+0x64>)
 8007e0c:	f7fd fae4 	bl	80053d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e10:	4813      	ldr	r0, [pc, #76]	@ (8007e60 <prvCheckForValidListAndQueue+0x68>)
 8007e12:	f7fd fae1 	bl	80053d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e16:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <prvCheckForValidListAndQueue+0x6c>)
 8007e18:	4a10      	ldr	r2, [pc, #64]	@ (8007e5c <prvCheckForValidListAndQueue+0x64>)
 8007e1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e1c:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <prvCheckForValidListAndQueue+0x70>)
 8007e1e:	4a10      	ldr	r2, [pc, #64]	@ (8007e60 <prvCheckForValidListAndQueue+0x68>)
 8007e20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e22:	2300      	movs	r3, #0
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4b11      	ldr	r3, [pc, #68]	@ (8007e6c <prvCheckForValidListAndQueue+0x74>)
 8007e28:	4a11      	ldr	r2, [pc, #68]	@ (8007e70 <prvCheckForValidListAndQueue+0x78>)
 8007e2a:	2110      	movs	r1, #16
 8007e2c:	200a      	movs	r0, #10
 8007e2e:	f7fd fbf1 	bl	8005614 <xQueueGenericCreateStatic>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4a08      	ldr	r2, [pc, #32]	@ (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e38:	4b07      	ldr	r3, [pc, #28]	@ (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e40:	4b05      	ldr	r3, [pc, #20]	@ (8007e58 <prvCheckForValidListAndQueue+0x60>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	490b      	ldr	r1, [pc, #44]	@ (8007e74 <prvCheckForValidListAndQueue+0x7c>)
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fbd6 	bl	80065f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e4c:	f000 f976 	bl	800813c <vPortExitCritical>
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000d34 	.word	0x20000d34
 8007e5c:	20000d04 	.word	0x20000d04
 8007e60:	20000d18 	.word	0x20000d18
 8007e64:	20000d2c 	.word	0x20000d2c
 8007e68:	20000d30 	.word	0x20000d30
 8007e6c:	20000de0 	.word	0x20000de0
 8007e70:	20000d40 	.word	0x20000d40
 8007e74:	08015720 	.word	0x08015720

08007e78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b04      	subs	r3, #4
 8007e88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3b04      	subs	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8007edc <pxPortInitialiseStack+0x64>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b14      	subs	r3, #20
 8007eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f06f 0202 	mvn.w	r2, #2
 8007ec6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3b20      	subs	r3, #32
 8007ecc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ece:	68fb      	ldr	r3, [r7, #12]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	08007ee1 	.word	0x08007ee1

08007ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eea:	4b13      	ldr	r3, [pc, #76]	@ (8007f38 <prvTaskExitError+0x58>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d00b      	beq.n	8007f0c <prvTaskExitError+0x2c>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60fb      	str	r3, [r7, #12]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <prvTaskExitError+0x28>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60bb      	str	r3, [r7, #8]
}
 8007f1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f20:	bf00      	nop
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0fc      	beq.n	8007f22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	2000000c 	.word	0x2000000c
 8007f3c:	00000000 	.word	0x00000000

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	@ (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	4770      	bx	lr
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst2>:
 8007f60:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f68:	4808      	ldr	r0, [pc, #32]	@ (8007f8c <prvPortStartFirstTask+0x24>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8814 	msr	CONTROL, r0
 8007f7a:	b662      	cpsie	i
 8007f7c:	b661      	cpsie	f
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	df00      	svc	0
 8007f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed08 	.word	0xe000ed08

08007f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f96:	4b47      	ldr	r3, [pc, #284]	@ (80080b4 <xPortStartScheduler+0x124>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a47      	ldr	r2, [pc, #284]	@ (80080b8 <xPortStartScheduler+0x128>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10b      	bne.n	8007fb8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80080b4 <xPortStartScheduler+0x124>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80080bc <xPortStartScheduler+0x12c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10b      	bne.n	8007fda <xPortStartScheduler+0x4a>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fda:	4b39      	ldr	r3, [pc, #228]	@ (80080c0 <xPortStartScheduler+0x130>)
 8007fdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	22ff      	movs	r2, #255	@ 0xff
 8007fea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	4b31      	ldr	r3, [pc, #196]	@ (80080c4 <xPortStartScheduler+0x134>)
 8008000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008002:	4b31      	ldr	r3, [pc, #196]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008004:	2207      	movs	r2, #7
 8008006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008008:	e009      	b.n	800801e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800800a:	4b2f      	ldr	r3, [pc, #188]	@ (80080c8 <xPortStartScheduler+0x138>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3b01      	subs	r3, #1
 8008010:	4a2d      	ldr	r2, [pc, #180]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008026:	2b80      	cmp	r3, #128	@ 0x80
 8008028:	d0ef      	beq.n	800800a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800802a:	4b27      	ldr	r3, [pc, #156]	@ (80080c8 <xPortStartScheduler+0x138>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1c3 0307 	rsb	r3, r3, #7
 8008032:	2b04      	cmp	r3, #4
 8008034:	d00b      	beq.n	800804e <xPortStartScheduler+0xbe>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60bb      	str	r3, [r7, #8]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800804e:	4b1e      	ldr	r3, [pc, #120]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008058:	4b1b      	ldr	r3, [pc, #108]	@ (80080c8 <xPortStartScheduler+0x138>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008060:	4a19      	ldr	r2, [pc, #100]	@ (80080c8 <xPortStartScheduler+0x138>)
 8008062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800806c:	4b17      	ldr	r3, [pc, #92]	@ (80080cc <xPortStartScheduler+0x13c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a16      	ldr	r2, [pc, #88]	@ (80080cc <xPortStartScheduler+0x13c>)
 8008072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008078:	4b14      	ldr	r3, [pc, #80]	@ (80080cc <xPortStartScheduler+0x13c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a13      	ldr	r2, [pc, #76]	@ (80080cc <xPortStartScheduler+0x13c>)
 800807e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008084:	f000 f8da 	bl	800823c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008088:	4b11      	ldr	r3, [pc, #68]	@ (80080d0 <xPortStartScheduler+0x140>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800808e:	f000 f8f9 	bl	8008284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008092:	4b10      	ldr	r3, [pc, #64]	@ (80080d4 <xPortStartScheduler+0x144>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a0f      	ldr	r2, [pc, #60]	@ (80080d4 <xPortStartScheduler+0x144>)
 8008098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800809c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800809e:	f7ff ff63 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080a2:	f7fe ff1f 	bl	8006ee4 <vTaskSwitchContext>
	prvTaskExitError();
 80080a6:	f7ff ff1b 	bl	8007ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	e000ed00 	.word	0xe000ed00
 80080b8:	410fc271 	.word	0x410fc271
 80080bc:	410fc270 	.word	0x410fc270
 80080c0:	e000e400 	.word	0xe000e400
 80080c4:	20000e30 	.word	0x20000e30
 80080c8:	20000e34 	.word	0x20000e34
 80080cc:	e000ed20 	.word	0xe000ed20
 80080d0:	2000000c 	.word	0x2000000c
 80080d4:	e000ef34 	.word	0xe000ef34

080080d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080f2:	4b10      	ldr	r3, [pc, #64]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <vPortEnterCritical+0x5c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d110      	bne.n	8008126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <vPortEnterCritical+0x60>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <vPortEnterCritical+0x4e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	603b      	str	r3, [r7, #0]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <vPortEnterCritical+0x4a>
	}
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000000c 	.word	0x2000000c
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008142:	4b12      	ldr	r3, [pc, #72]	@ (800818c <vPortExitCritical+0x50>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10b      	bne.n	8008162 <vPortExitCritical+0x26>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	607b      	str	r3, [r7, #4]
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	e7fd      	b.n	800815e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	4a08      	ldr	r2, [pc, #32]	@ (800818c <vPortExitCritical+0x50>)
 800816a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800816c:	4b07      	ldr	r3, [pc, #28]	@ (800818c <vPortExitCritical+0x50>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <vPortExitCritical+0x44>
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	2000000c 	.word	0x2000000c

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7fe fe90 	bl	8006ee4 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008212:	f7fe fdad 	bl	8006d70 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821c:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <xPortSysTickHandler+0x40>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008240:	4b0b      	ldr	r3, [pc, #44]	@ (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008246:	4b0b      	ldr	r3, [pc, #44]	@ (8008274 <vPortSetupTimerInterrupt+0x38>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800824c:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <vPortSetupTimerInterrupt+0x3c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0a      	ldr	r2, [pc, #40]	@ (800827c <vPortSetupTimerInterrupt+0x40>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	099b      	lsrs	r3, r3, #6
 8008258:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <vPortSetupTimerInterrupt+0x44>)
 800825a:	3b01      	subs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825e:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010
 8008274:	e000e018 	.word	0xe000e018
 8008278:	20000000 	.word	0x20000000
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	e000e014 	.word	0xe000e014

08008284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008294 <vPortEnableVFP+0x10>
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800828e:	6001      	str	r1, [r0, #0]
 8008290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008292:	bf00      	nop
 8008294:	e000ed88 	.word	0xe000ed88

08008298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800829e:	f3ef 8305 	mrs	r3, IPSR
 80082a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d915      	bls.n	80082d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082aa:	4a18      	ldr	r2, [pc, #96]	@ (800830c <vPortValidateInterruptPriority+0x74>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082b4:	4b16      	ldr	r3, [pc, #88]	@ (8008310 <vPortValidateInterruptPriority+0x78>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	7afa      	ldrb	r2, [r7, #11]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20b      	bcs.n	80082d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <vPortValidateInterruptPriority+0x7c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082de:	4b0e      	ldr	r3, [pc, #56]	@ (8008318 <vPortValidateInterruptPriority+0x80>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d90b      	bls.n	80082fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	603b      	str	r3, [r7, #0]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <vPortValidateInterruptPriority+0x62>
	}
 80082fe:	bf00      	nop
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	e000e3f0 	.word	0xe000e3f0
 8008310:	20000e30 	.word	0x20000e30
 8008314:	e000ed0c 	.word	0xe000ed0c
 8008318:	20000e34 	.word	0x20000e34

0800831c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	@ 0x28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008328:	f7fe fc54 	bl	8006bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800832c:	4b5c      	ldr	r3, [pc, #368]	@ (80084a0 <pvPortMalloc+0x184>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008334:	f000 f924 	bl	8008580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008338:	4b5a      	ldr	r3, [pc, #360]	@ (80084a4 <pvPortMalloc+0x188>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4013      	ands	r3, r2
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 8095 	bne.w	8008470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01e      	beq.n	800838a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800834c:	2208      	movs	r2, #8
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	2b00      	cmp	r3, #0
 800835c:	d015      	beq.n	800838a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	3308      	adds	r3, #8
 8008366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <pvPortMalloc+0x6e>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	617b      	str	r3, [r7, #20]
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	e7fd      	b.n	8008386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d06f      	beq.n	8008470 <pvPortMalloc+0x154>
 8008390:	4b45      	ldr	r3, [pc, #276]	@ (80084a8 <pvPortMalloc+0x18c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d86a      	bhi.n	8008470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800839a:	4b44      	ldr	r3, [pc, #272]	@ (80084ac <pvPortMalloc+0x190>)
 800839c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800839e:	4b43      	ldr	r3, [pc, #268]	@ (80084ac <pvPortMalloc+0x190>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a4:	e004      	b.n	80083b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d903      	bls.n	80083c2 <pvPortMalloc+0xa6>
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f1      	bne.n	80083a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083c2:	4b37      	ldr	r3, [pc, #220]	@ (80084a0 <pvPortMalloc+0x184>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d051      	beq.n	8008470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	4413      	add	r3, r2
 80083d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	2308      	movs	r3, #8
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d920      	bls.n	8008430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <pvPortMalloc+0xfc>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	613b      	str	r3, [r7, #16]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800842a:	69b8      	ldr	r0, [r7, #24]
 800842c:	f000 f90a 	bl	8008644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008430:	4b1d      	ldr	r3, [pc, #116]	@ (80084a8 <pvPortMalloc+0x18c>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	4a1b      	ldr	r2, [pc, #108]	@ (80084a8 <pvPortMalloc+0x18c>)
 800843c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800843e:	4b1a      	ldr	r3, [pc, #104]	@ (80084a8 <pvPortMalloc+0x18c>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b1b      	ldr	r3, [pc, #108]	@ (80084b0 <pvPortMalloc+0x194>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d203      	bcs.n	8008452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800844a:	4b17      	ldr	r3, [pc, #92]	@ (80084a8 <pvPortMalloc+0x18c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a18      	ldr	r2, [pc, #96]	@ (80084b0 <pvPortMalloc+0x194>)
 8008450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <pvPortMalloc+0x188>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	431a      	orrs	r2, r3
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008466:	4b13      	ldr	r3, [pc, #76]	@ (80084b4 <pvPortMalloc+0x198>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	4a11      	ldr	r2, [pc, #68]	@ (80084b4 <pvPortMalloc+0x198>)
 800846e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008470:	f7fe fbbe 	bl	8006bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <pvPortMalloc+0x17a>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	60fb      	str	r3, [r7, #12]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <pvPortMalloc+0x176>
	return pvReturn;
 8008496:	69fb      	ldr	r3, [r7, #28]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3728      	adds	r7, #40	@ 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20004a40 	.word	0x20004a40
 80084a4:	20004a54 	.word	0x20004a54
 80084a8:	20004a44 	.word	0x20004a44
 80084ac:	20004a38 	.word	0x20004a38
 80084b0:	20004a48 	.word	0x20004a48
 80084b4:	20004a4c 	.word	0x20004a4c

080084b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d04f      	beq.n	800856a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084ca:	2308      	movs	r3, #8
 80084cc:	425b      	negs	r3, r3
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4413      	add	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	4b25      	ldr	r3, [pc, #148]	@ (8008574 <vPortFree+0xbc>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4013      	ands	r3, r2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <vPortFree+0x46>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00b      	beq.n	800851e <vPortFree+0x66>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60bb      	str	r3, [r7, #8]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <vPortFree+0xbc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4013      	ands	r3, r2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01e      	beq.n	800856a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d11a      	bne.n	800856a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	4b0e      	ldr	r3, [pc, #56]	@ (8008574 <vPortFree+0xbc>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	43db      	mvns	r3, r3
 800853e:	401a      	ands	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008544:	f7fe fb46 	bl	8006bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b0a      	ldr	r3, [pc, #40]	@ (8008578 <vPortFree+0xc0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4413      	add	r3, r2
 8008552:	4a09      	ldr	r2, [pc, #36]	@ (8008578 <vPortFree+0xc0>)
 8008554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008556:	6938      	ldr	r0, [r7, #16]
 8008558:	f000 f874 	bl	8008644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800855c:	4b07      	ldr	r3, [pc, #28]	@ (800857c <vPortFree+0xc4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a06      	ldr	r2, [pc, #24]	@ (800857c <vPortFree+0xc4>)
 8008564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008566:	f7fe fb43 	bl	8006bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20004a54 	.word	0x20004a54
 8008578:	20004a44 	.word	0x20004a44
 800857c:	20004a50 	.word	0x20004a50

08008580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008586:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800858a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800858c:	4b27      	ldr	r3, [pc, #156]	@ (800862c <prvHeapInit+0xac>)
 800858e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3307      	adds	r3, #7
 800859e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	4a1f      	ldr	r2, [pc, #124]	@ (800862c <prvHeapInit+0xac>)
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008630 <prvHeapInit+0xb0>)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085be:	4b1c      	ldr	r3, [pc, #112]	@ (8008630 <prvHeapInit+0xb0>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085cc:	2208      	movs	r2, #8
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4a15      	ldr	r2, [pc, #84]	@ (8008634 <prvHeapInit+0xb4>)
 80085e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085e2:	4b14      	ldr	r3, [pc, #80]	@ (8008634 <prvHeapInit+0xb4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <prvHeapInit+0xb4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008600:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <prvHeapInit+0xb4>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <prvHeapInit+0xb8>)
 800860e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a09      	ldr	r2, [pc, #36]	@ (800863c <prvHeapInit+0xbc>)
 8008616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008618:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <prvHeapInit+0xc0>)
 800861a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	20000e38 	.word	0x20000e38
 8008630:	20004a38 	.word	0x20004a38
 8008634:	20004a40 	.word	0x20004a40
 8008638:	20004a48 	.word	0x20004a48
 800863c:	20004a44 	.word	0x20004a44
 8008640:	20004a54 	.word	0x20004a54

08008644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800864c:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <prvInsertBlockIntoFreeList+0xac>)
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e002      	b.n	8008658 <prvInsertBlockIntoFreeList+0x14>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	429a      	cmp	r2, r3
 8008660:	d8f7      	bhi.n	8008652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4413      	add	r3, r2
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d108      	bne.n	8008686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	441a      	add	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d118      	bne.n	80086cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b15      	ldr	r3, [pc, #84]	@ (80086f4 <prvInsertBlockIntoFreeList+0xb0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d00d      	beq.n	80086c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	441a      	add	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e008      	b.n	80086d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086c2:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	e003      	b.n	80086d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d002      	beq.n	80086e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20004a38 	.word	0x20004a38
 80086f4:	20004a40 	.word	0x20004a40

080086f8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008702:	f006 ff3d 	bl	800f580 <sys_timeouts_sleeptime>
 8008706:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d10b      	bne.n	8008728 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008710:	4813      	ldr	r0, [pc, #76]	@ (8008760 <tcpip_timeouts_mbox_fetch+0x68>)
 8008712:	f00b ff02 	bl	801451a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008716:	2200      	movs	r2, #0
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f00b fe8a 	bl	8014434 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008720:	480f      	ldr	r0, [pc, #60]	@ (8008760 <tcpip_timeouts_mbox_fetch+0x68>)
 8008722:	f00b feeb 	bl	80144fc <sys_mutex_lock>
    return;
 8008726:	e018      	b.n	800875a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800872e:	f006 feed 	bl	800f50c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008732:	e7e6      	b.n	8008702 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008734:	480a      	ldr	r0, [pc, #40]	@ (8008760 <tcpip_timeouts_mbox_fetch+0x68>)
 8008736:	f00b fef0 	bl	801451a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f00b fe78 	bl	8014434 <sys_arch_mbox_fetch>
 8008744:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008746:	4806      	ldr	r0, [pc, #24]	@ (8008760 <tcpip_timeouts_mbox_fetch+0x68>)
 8008748:	f00b fed8 	bl	80144fc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d102      	bne.n	800875a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008754:	f006 feda 	bl	800f50c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008758:	e7d3      	b.n	8008702 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	200054e8 	.word	0x200054e8

08008764 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800876c:	4810      	ldr	r0, [pc, #64]	@ (80087b0 <tcpip_thread+0x4c>)
 800876e:	f00b fec5 	bl	80144fc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008772:	4b10      	ldr	r3, [pc, #64]	@ (80087b4 <tcpip_thread+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <tcpip_thread+0x50>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a0e      	ldr	r2, [pc, #56]	@ (80087b8 <tcpip_thread+0x54>)
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	4610      	mov	r0, r2
 8008784:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	4619      	mov	r1, r3
 800878c:	480b      	ldr	r0, [pc, #44]	@ (80087bc <tcpip_thread+0x58>)
 800878e:	f7ff ffb3 	bl	80086f8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008798:	4b09      	ldr	r3, [pc, #36]	@ (80087c0 <tcpip_thread+0x5c>)
 800879a:	2291      	movs	r2, #145	@ 0x91
 800879c:	4909      	ldr	r1, [pc, #36]	@ (80087c4 <tcpip_thread+0x60>)
 800879e:	480a      	ldr	r0, [pc, #40]	@ (80087c8 <tcpip_thread+0x64>)
 80087a0:	f7f8 fa14 	bl	8000bcc <printf>
      continue;
 80087a4:	e003      	b.n	80087ae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f80f 	bl	80087cc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80087ae:	e7ea      	b.n	8008786 <tcpip_thread+0x22>
 80087b0:	200054e8 	.word	0x200054e8
 80087b4:	20004a58 	.word	0x20004a58
 80087b8:	20004a5c 	.word	0x20004a5c
 80087bc:	20004a60 	.word	0x20004a60
 80087c0:	08015728 	.word	0x08015728
 80087c4:	08015754 	.word	0x08015754
 80087c8:	08015774 	.word	0x08015774

080087cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d026      	beq.n	800882a <tcpip_thread_handle_msg+0x5e>
 80087dc:	2b02      	cmp	r3, #2
 80087de:	dc2b      	bgt.n	8008838 <tcpip_thread_handle_msg+0x6c>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <tcpip_thread_handle_msg+0x1e>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d015      	beq.n	8008814 <tcpip_thread_handle_msg+0x48>
 80087e8:	e026      	b.n	8008838 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6850      	ldr	r0, [r2, #4]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6892      	ldr	r2, [r2, #8]
 80087f6:	4611      	mov	r1, r2
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	f001 fd53 	bl	800a2b0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	2009      	movs	r0, #9
 800880e:	f000 ff57 	bl	80096c0 <memp_free>
      break;
 8008812:	e018      	b.n	8008846 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6892      	ldr	r2, [r2, #8]
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	2008      	movs	r0, #8
 8008824:	f000 ff4c 	bl	80096c0 <memp_free>
      break;
 8008828:	e00d      	b.n	8008846 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6892      	ldr	r2, [r2, #8]
 8008832:	4610      	mov	r0, r2
 8008834:	4798      	blx	r3
      break;
 8008836:	e006      	b.n	8008846 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008838:	4b05      	ldr	r3, [pc, #20]	@ (8008850 <tcpip_thread_handle_msg+0x84>)
 800883a:	22cf      	movs	r2, #207	@ 0xcf
 800883c:	4905      	ldr	r1, [pc, #20]	@ (8008854 <tcpip_thread_handle_msg+0x88>)
 800883e:	4806      	ldr	r0, [pc, #24]	@ (8008858 <tcpip_thread_handle_msg+0x8c>)
 8008840:	f7f8 f9c4 	bl	8000bcc <printf>
      break;
 8008844:	bf00      	nop
  }
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	08015728 	.word	0x08015728
 8008854:	08015754 	.word	0x08015754
 8008858:	08015774 	.word	0x08015774

0800885c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008868:	481a      	ldr	r0, [pc, #104]	@ (80088d4 <tcpip_inpkt+0x78>)
 800886a:	f00b fe14 	bl	8014496 <sys_mbox_valid>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <tcpip_inpkt+0x24>
 8008874:	4b18      	ldr	r3, [pc, #96]	@ (80088d8 <tcpip_inpkt+0x7c>)
 8008876:	22fc      	movs	r2, #252	@ 0xfc
 8008878:	4918      	ldr	r1, [pc, #96]	@ (80088dc <tcpip_inpkt+0x80>)
 800887a:	4819      	ldr	r0, [pc, #100]	@ (80088e0 <tcpip_inpkt+0x84>)
 800887c:	f7f8 f9a6 	bl	8000bcc <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008880:	2009      	movs	r0, #9
 8008882:	f000 fed9 	bl	8009638 <memp_malloc>
 8008886:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	e01a      	b.n	80088ca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80088ac:	6979      	ldr	r1, [r7, #20]
 80088ae:	4809      	ldr	r0, [pc, #36]	@ (80088d4 <tcpip_inpkt+0x78>)
 80088b0:	f00b fda6 	bl	8014400 <sys_mbox_trypost>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d006      	beq.n	80088c8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80088ba:	6979      	ldr	r1, [r7, #20]
 80088bc:	2009      	movs	r0, #9
 80088be:	f000 feff 	bl	80096c0 <memp_free>
    return ERR_MEM;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	e000      	b.n	80088ca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80088c8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20004a60 	.word	0x20004a60
 80088d8:	08015728 	.word	0x08015728
 80088dc:	0801579c 	.word	0x0801579c
 80088e0:	08015774 	.word	0x08015774

080088e4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088f4:	f003 0318 	and.w	r3, r3, #24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d006      	beq.n	800890a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80088fc:	4a08      	ldr	r2, [pc, #32]	@ (8008920 <tcpip_input+0x3c>)
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff ffab 	bl	800885c <tcpip_inpkt>
 8008906:	4603      	mov	r3, r0
 8008908:	e005      	b.n	8008916 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800890a:	4a06      	ldr	r2, [pc, #24]	@ (8008924 <tcpip_input+0x40>)
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff ffa4 	bl	800885c <tcpip_inpkt>
 8008914:	4603      	mov	r3, r0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	080141f5 	.word	0x080141f5
 8008924:	08012fc5 	.word	0x08012fc5

08008928 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008932:	4814      	ldr	r0, [pc, #80]	@ (8008984 <tcpip_callback+0x5c>)
 8008934:	f00b fdaf 	bl	8014496 <sys_mbox_valid>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <tcpip_callback+0x24>
 800893e:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <tcpip_callback+0x60>)
 8008940:	f240 1239 	movw	r2, #313	@ 0x139
 8008944:	4911      	ldr	r1, [pc, #68]	@ (800898c <tcpip_callback+0x64>)
 8008946:	4812      	ldr	r0, [pc, #72]	@ (8008990 <tcpip_callback+0x68>)
 8008948:	f7f8 f940 	bl	8000bcc <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800894c:	2008      	movs	r0, #8
 800894e:	f000 fe73 	bl	8009638 <memp_malloc>
 8008952:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <tcpip_callback+0x38>
    return ERR_MEM;
 800895a:	f04f 33ff 	mov.w	r3, #4294967295
 800895e:	e00d      	b.n	800897c <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	4803      	ldr	r0, [pc, #12]	@ (8008984 <tcpip_callback+0x5c>)
 8008976:	f00b fd2d 	bl	80143d4 <sys_mbox_post>
  return ERR_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20004a60 	.word	0x20004a60
 8008988:	08015728 	.word	0x08015728
 800898c:	0801579c 	.word	0x0801579c
 8008990:	08015774 	.word	0x08015774

08008994 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af02      	add	r7, sp, #8
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800899e:	f000 f9ea 	bl	8008d76 <lwip_init>

  tcpip_init_done = initfunc;
 80089a2:	4a17      	ldr	r2, [pc, #92]	@ (8008a00 <tcpip_init+0x6c>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80089a8:	4a16      	ldr	r2, [pc, #88]	@ (8008a04 <tcpip_init+0x70>)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80089ae:	2105      	movs	r1, #5
 80089b0:	4815      	ldr	r0, [pc, #84]	@ (8008a08 <tcpip_init+0x74>)
 80089b2:	f00b fcf5 	bl	80143a0 <sys_mbox_new>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <tcpip_init+0x78>)
 80089be:	f240 2261 	movw	r2, #609	@ 0x261
 80089c2:	4913      	ldr	r1, [pc, #76]	@ (8008a10 <tcpip_init+0x7c>)
 80089c4:	4813      	ldr	r0, [pc, #76]	@ (8008a14 <tcpip_init+0x80>)
 80089c6:	f7f8 f901 	bl	8000bcc <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80089ca:	4813      	ldr	r0, [pc, #76]	@ (8008a18 <tcpip_init+0x84>)
 80089cc:	f00b fd80 	bl	80144d0 <sys_mutex_new>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d006      	beq.n	80089e4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <tcpip_init+0x78>)
 80089d8:	f240 2265 	movw	r2, #613	@ 0x265
 80089dc:	490f      	ldr	r1, [pc, #60]	@ (8008a1c <tcpip_init+0x88>)
 80089de:	480d      	ldr	r0, [pc, #52]	@ (8008a14 <tcpip_init+0x80>)
 80089e0:	f7f8 f8f4 	bl	8000bcc <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80089e4:	2330      	movs	r3, #48	@ 0x30
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80089ec:	2200      	movs	r2, #0
 80089ee:	490c      	ldr	r1, [pc, #48]	@ (8008a20 <tcpip_init+0x8c>)
 80089f0:	480c      	ldr	r0, [pc, #48]	@ (8008a24 <tcpip_init+0x90>)
 80089f2:	f00b fd9f 	bl	8014534 <sys_thread_new>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20004a58 	.word	0x20004a58
 8008a04:	20004a5c 	.word	0x20004a5c
 8008a08:	20004a60 	.word	0x20004a60
 8008a0c:	08015728 	.word	0x08015728
 8008a10:	080157ac 	.word	0x080157ac
 8008a14:	08015774 	.word	0x08015774
 8008a18:	200054e8 	.word	0x200054e8
 8008a1c:	080157d0 	.word	0x080157d0
 8008a20:	08008765 	.word	0x08008765
 8008a24:	080157f4 	.word	0x080157f4

08008a28 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b21a      	sxth	r2, r3
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	b29b      	uxth	r3, r3
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	061a      	lsls	r2, r3, #24
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	0e1b      	lsrs	r3, r3, #24
 8008a76:	4313      	orrs	r3, r2
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b089      	sub	sp, #36	@ 0x24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00d      	beq.n	8008ac4 <lwip_standard_chksum+0x40>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dd0a      	ble.n	8008ac4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	1c53      	adds	r3, r2, #1
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	f107 030e 	add.w	r3, r7, #14
 8008ab8:	3301      	adds	r3, #1
 8008aba:	7812      	ldrb	r2, [r2, #0]
 8008abc:	701a      	strb	r2, [r3, #0]
    len--;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008ac8:	e00a      	b.n	8008ae0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	1c9a      	adds	r2, r3, #2
 8008ace:	61ba      	str	r2, [r7, #24]
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	3b02      	subs	r3, #2
 8008ade:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	dcf1      	bgt.n	8008aca <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dd04      	ble.n	8008af6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008aec:	f107 030e 	add.w	r3, r7, #14
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	7812      	ldrb	r2, [r2, #0]
 8008af4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8008af6:	89fb      	ldrh	r3, [r7, #14]
 8008af8:	461a      	mov	r2, r3
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	0c1a      	lsrs	r2, r3, #16
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	4413      	add	r3, r2
 8008b0a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	0c1a      	lsrs	r2, r3, #16
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	b29b      	uxth	r3, r3
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3724      	adds	r7, #36	@ 0x24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	607b      	str	r3, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	72fb      	strb	r3, [r7, #11]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e02b      	b.n	8008bb2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	895b      	ldrh	r3, [r3, #10]
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7ff ff8d 	bl	8008a84 <lwip_standard_chksum>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	0c1a      	lsrs	r2, r3, #16
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	4413      	add	r3, r2
 8008b7e:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	895b      	ldrh	r3, [r3, #10]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf0c      	ite	eq
 8008b94:	2301      	moveq	r3, #1
 8008b96:	2300      	movne	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	021b      	lsls	r3, r3, #8
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	0a1b      	lsrs	r3, r3, #8
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1d0      	bne.n	8008b5a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff28 	bl	8008a28 <lwip_htons>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8008be2:	893b      	ldrh	r3, [r7, #8]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff ff1f 	bl	8008a28 <lwip_htons>
 8008bea:	4603      	mov	r3, r0
 8008bec:	461a      	mov	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	0c1a      	lsrs	r2, r3, #16
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4413      	add	r3, r2
 8008bfe:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	0c1a      	lsrs	r2, r3, #16
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	43db      	mvns	r3, r3
 8008c12:	b29b      	uxth	r3, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607b      	str	r3, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	72fb      	strb	r3, [r7, #11]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4413      	add	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	0c1a      	lsrs	r2, r3, #16
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	4413      	add	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	0c1a      	lsrs	r2, r3, #16
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8008c76:	893a      	ldrh	r2, [r7, #8]
 8008c78:	7af9      	ldrb	r1, [r7, #11]
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff ff5e 	bl	8008b3e <inet_cksum_pseudo_base>
 8008c82:	4603      	mov	r3, r0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	72fb      	strb	r3, [r7, #11]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8008c9e:	893a      	ldrh	r2, [r7, #8]
 8008ca0:	7af9      	ldrb	r1, [r7, #11]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7ff ffb7 	bl	8008c1c <inet_chksum_pseudo>
 8008cae:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008cc4:	887b      	ldrh	r3, [r7, #2]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fedb 	bl	8008a84 <lwip_standard_chksum>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	b29b      	uxth	r3, r3
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	e02b      	b.n	8008d4a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	895b      	ldrh	r3, [r3, #10]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7ff fec1 	bl	8008a84 <lwip_standard_chksum>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	4413      	add	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	0c1a      	lsrs	r2, r3, #16
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4413      	add	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	895b      	ldrh	r3, [r3, #10]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2301      	moveq	r3, #1
 8008d2e:	2300      	movne	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	0a1b      	lsrs	r3, r3, #8
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1d0      	bne.n	8008cf2 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d007      	beq.n	8008d66 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	b29b      	uxth	r3, r3
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008d80:	f00b fb9a 	bl	80144b8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008d84:	f000 f8d4 	bl	8008f30 <mem_init>
  memp_init();
 8008d88:	f000 fc12 	bl	80095b0 <memp_init>
  pbuf_init();
  netif_init();
 8008d8c:	f000 fcba 	bl	8009704 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008d90:	f006 fc2e 	bl	800f5f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008d94:	f001 fd56 	bl	800a844 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008d98:	f006 fb70 	bl	800f47c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008dae:	4b05      	ldr	r3, [pc, #20]	@ (8008dc4 <ptr_to_mem+0x20>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	4413      	add	r3, r2
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20004a64 	.word	0x20004a64

08008dc8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <mem_to_ptr+0x20>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	b29b      	uxth	r3, r3
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20004a64 	.word	0x20004a64

08008dec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008df4:	4b45      	ldr	r3, [pc, #276]	@ (8008f0c <plug_holes+0x120>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d206      	bcs.n	8008e0c <plug_holes+0x20>
 8008dfe:	4b44      	ldr	r3, [pc, #272]	@ (8008f10 <plug_holes+0x124>)
 8008e00:	f240 12df 	movw	r2, #479	@ 0x1df
 8008e04:	4943      	ldr	r1, [pc, #268]	@ (8008f14 <plug_holes+0x128>)
 8008e06:	4844      	ldr	r0, [pc, #272]	@ (8008f18 <plug_holes+0x12c>)
 8008e08:	f7f7 fee0 	bl	8000bcc <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008e0c:	4b43      	ldr	r3, [pc, #268]	@ (8008f1c <plug_holes+0x130>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d306      	bcc.n	8008e24 <plug_holes+0x38>
 8008e16:	4b3e      	ldr	r3, [pc, #248]	@ (8008f10 <plug_holes+0x124>)
 8008e18:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008e1c:	4940      	ldr	r1, [pc, #256]	@ (8008f20 <plug_holes+0x134>)
 8008e1e:	483e      	ldr	r0, [pc, #248]	@ (8008f18 <plug_holes+0x12c>)
 8008e20:	f7f7 fed4 	bl	8000bcc <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	791b      	ldrb	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d006      	beq.n	8008e3a <plug_holes+0x4e>
 8008e2c:	4b38      	ldr	r3, [pc, #224]	@ (8008f10 <plug_holes+0x124>)
 8008e2e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008e32:	493c      	ldr	r1, [pc, #240]	@ (8008f24 <plug_holes+0x138>)
 8008e34:	4838      	ldr	r0, [pc, #224]	@ (8008f18 <plug_holes+0x12c>)
 8008e36:	f7f7 fec9 	bl	8000bcc <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008e42:	d906      	bls.n	8008e52 <plug_holes+0x66>
 8008e44:	4b32      	ldr	r3, [pc, #200]	@ (8008f10 <plug_holes+0x124>)
 8008e46:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008e4a:	4937      	ldr	r1, [pc, #220]	@ (8008f28 <plug_holes+0x13c>)
 8008e4c:	4832      	ldr	r0, [pc, #200]	@ (8008f18 <plug_holes+0x12c>)
 8008e4e:	f7f7 febd 	bl	8000bcc <printf>

  nmem = ptr_to_mem(mem->next);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7ff ffa4 	bl	8008da4 <ptr_to_mem>
 8008e5c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d024      	beq.n	8008eb0 <plug_holes+0xc4>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	791b      	ldrb	r3, [r3, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d120      	bne.n	8008eb0 <plug_holes+0xc4>
 8008e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8008f1c <plug_holes+0x130>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d01b      	beq.n	8008eb0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008e78:	4b2c      	ldr	r3, [pc, #176]	@ (8008f2c <plug_holes+0x140>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d102      	bne.n	8008e88 <plug_holes+0x9c>
      lfree = mem;
 8008e82:	4a2a      	ldr	r2, [pc, #168]	@ (8008f2c <plug_holes+0x140>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	881a      	ldrh	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008e98:	d00a      	beq.n	8008eb0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff ff80 	bl	8008da4 <ptr_to_mem>
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f7ff ff8e 	bl	8008dc8 <mem_to_ptr>
 8008eac:	4603      	mov	r3, r0
 8008eae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	885b      	ldrh	r3, [r3, #2]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff75 	bl	8008da4 <ptr_to_mem>
 8008eba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d01f      	beq.n	8008f04 <plug_holes+0x118>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	791b      	ldrb	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d11b      	bne.n	8008f04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008ecc:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <plug_holes+0x140>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d102      	bne.n	8008edc <plug_holes+0xf0>
      lfree = pmem;
 8008ed6:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <plug_holes+0x140>)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	881a      	ldrh	r2, [r3, #0]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008eec:	d00a      	beq.n	8008f04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff ff56 	bl	8008da4 <ptr_to_mem>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	68b8      	ldr	r0, [r7, #8]
 8008efc:	f7ff ff64 	bl	8008dc8 <mem_to_ptr>
 8008f00:	4603      	mov	r3, r0
 8008f02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008f04:	bf00      	nop
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd90      	pop	{r4, r7, pc}
 8008f0c:	20004a64 	.word	0x20004a64
 8008f10:	080157fc 	.word	0x080157fc
 8008f14:	08015828 	.word	0x08015828
 8008f18:	08015840 	.word	0x08015840
 8008f1c:	20004a68 	.word	0x20004a68
 8008f20:	08015868 	.word	0x08015868
 8008f24:	08015884 	.word	0x08015884
 8008f28:	080158a0 	.word	0x080158a0
 8008f2c:	20004a70 	.word	0x20004a70

08008f30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008f36:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb4 <mem_init+0x84>)
 8008f38:	3303      	adds	r3, #3
 8008f3a:	f023 0303 	bic.w	r3, r3, #3
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb8 <mem_init+0x88>)
 8008f42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008f44:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb8 <mem_init+0x88>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008f50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008f5e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8008f62:	f7ff ff1f 	bl	8008da4 <ptr_to_mem>
 8008f66:	4603      	mov	r3, r0
 8008f68:	4a14      	ldr	r2, [pc, #80]	@ (8008fbc <mem_init+0x8c>)
 8008f6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008f6c:	4b13      	ldr	r3, [pc, #76]	@ (8008fbc <mem_init+0x8c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2201      	movs	r2, #1
 8008f72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008f74:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <mem_init+0x8c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008f7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fbc <mem_init+0x8c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008f86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <mem_init+0x88>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc0 <mem_init+0x90>)
 8008f8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008f90:	480c      	ldr	r0, [pc, #48]	@ (8008fc4 <mem_init+0x94>)
 8008f92:	f00b fa9d 	bl	80144d0 <sys_mutex_new>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d006      	beq.n	8008faa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <mem_init+0x98>)
 8008f9e:	f240 221f 	movw	r2, #543	@ 0x21f
 8008fa2:	490a      	ldr	r1, [pc, #40]	@ (8008fcc <mem_init+0x9c>)
 8008fa4:	480a      	ldr	r0, [pc, #40]	@ (8008fd0 <mem_init+0xa0>)
 8008fa6:	f7f7 fe11 	bl	8000bcc <printf>
  }
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20005504 	.word	0x20005504
 8008fb8:	20004a64 	.word	0x20004a64
 8008fbc:	20004a68 	.word	0x20004a68
 8008fc0:	20004a70 	.word	0x20004a70
 8008fc4:	20004a6c 	.word	0x20004a6c
 8008fc8:	080157fc 	.word	0x080157fc
 8008fcc:	080158cc 	.word	0x080158cc
 8008fd0:	08015840 	.word	0x08015840

08008fd4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fef3 	bl	8008dc8 <mem_to_ptr>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff feda 	bl	8008da4 <ptr_to_mem>
 8008ff0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	885b      	ldrh	r3, [r3, #2]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fed4 	bl	8008da4 <ptr_to_mem>
 8008ffc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009006:	d818      	bhi.n	800903a <mem_link_valid+0x66>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009010:	d813      	bhi.n	800903a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009016:	8afa      	ldrh	r2, [r7, #22]
 8009018:	429a      	cmp	r2, r3
 800901a:	d004      	beq.n	8009026 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	8afa      	ldrh	r2, [r7, #22]
 8009022:	429a      	cmp	r2, r3
 8009024:	d109      	bne.n	800903a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009026:	4b08      	ldr	r3, [pc, #32]	@ (8009048 <mem_link_valid+0x74>)
 8009028:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	429a      	cmp	r2, r3
 800902e:	d006      	beq.n	800903e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	885b      	ldrh	r3, [r3, #2]
 8009034:	8afa      	ldrh	r2, [r7, #22]
 8009036:	429a      	cmp	r2, r3
 8009038:	d001      	beq.n	800903e <mem_link_valid+0x6a>
    return 0;
 800903a:	2300      	movs	r3, #0
 800903c:	e000      	b.n	8009040 <mem_link_valid+0x6c>
  }
  return 1;
 800903e:	2301      	movs	r3, #1
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20004a68 	.word	0x20004a68

0800904c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d058      	beq.n	800910c <mem_free+0xc0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009064:	4b2b      	ldr	r3, [pc, #172]	@ (8009114 <mem_free+0xc8>)
 8009066:	f240 2273 	movw	r2, #627	@ 0x273
 800906a:	492b      	ldr	r1, [pc, #172]	@ (8009118 <mem_free+0xcc>)
 800906c:	482b      	ldr	r0, [pc, #172]	@ (800911c <mem_free+0xd0>)
 800906e:	f7f7 fdad 	bl	8000bcc <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009072:	e04c      	b.n	800910e <mem_free+0xc2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3b08      	subs	r3, #8
 8009078:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800907a:	4b29      	ldr	r3, [pc, #164]	@ (8009120 <mem_free+0xd4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	429a      	cmp	r2, r3
 8009082:	d306      	bcc.n	8009092 <mem_free+0x46>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 020c 	add.w	r2, r3, #12
 800908a:	4b26      	ldr	r3, [pc, #152]	@ (8009124 <mem_free+0xd8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d907      	bls.n	80090a2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009092:	4b20      	ldr	r3, [pc, #128]	@ (8009114 <mem_free+0xc8>)
 8009094:	f240 227f 	movw	r2, #639	@ 0x27f
 8009098:	4923      	ldr	r1, [pc, #140]	@ (8009128 <mem_free+0xdc>)
 800909a:	4820      	ldr	r0, [pc, #128]	@ (800911c <mem_free+0xd0>)
 800909c:	f7f7 fd96 	bl	8000bcc <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80090a0:	e035      	b.n	800910e <mem_free+0xc2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80090a2:	4822      	ldr	r0, [pc, #136]	@ (800912c <mem_free+0xe0>)
 80090a4:	f00b fa2a 	bl	80144fc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	791b      	ldrb	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80090b0:	4b18      	ldr	r3, [pc, #96]	@ (8009114 <mem_free+0xc8>)
 80090b2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80090b6:	491e      	ldr	r1, [pc, #120]	@ (8009130 <mem_free+0xe4>)
 80090b8:	4818      	ldr	r0, [pc, #96]	@ (800911c <mem_free+0xd0>)
 80090ba:	f7f7 fd87 	bl	8000bcc <printf>
    LWIP_MEM_FREE_UNPROTECT();
 80090be:	481b      	ldr	r0, [pc, #108]	@ (800912c <mem_free+0xe0>)
 80090c0:	f00b fa2b 	bl	801451a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80090c4:	e023      	b.n	800910e <mem_free+0xc2>
  }

  if (!mem_link_valid(mem)) {
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ff84 	bl	8008fd4 <mem_link_valid>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <mem_free+0x9c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80090d2:	4b10      	ldr	r3, [pc, #64]	@ (8009114 <mem_free+0xc8>)
 80090d4:	f240 2295 	movw	r2, #661	@ 0x295
 80090d8:	4916      	ldr	r1, [pc, #88]	@ (8009134 <mem_free+0xe8>)
 80090da:	4810      	ldr	r0, [pc, #64]	@ (800911c <mem_free+0xd0>)
 80090dc:	f7f7 fd76 	bl	8000bcc <printf>
    LWIP_MEM_FREE_UNPROTECT();
 80090e0:	4812      	ldr	r0, [pc, #72]	@ (800912c <mem_free+0xe0>)
 80090e2:	f00b fa1a 	bl	801451a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80090e6:	e012      	b.n	800910e <mem_free+0xc2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80090ee:	4b12      	ldr	r3, [pc, #72]	@ (8009138 <mem_free+0xec>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d202      	bcs.n	80090fe <mem_free+0xb2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80090f8:	4a0f      	ldr	r2, [pc, #60]	@ (8009138 <mem_free+0xec>)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fe74 	bl	8008dec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009104:	4809      	ldr	r0, [pc, #36]	@ (800912c <mem_free+0xe0>)
 8009106:	f00b fa08 	bl	801451a <sys_mutex_unlock>
 800910a:	e000      	b.n	800910e <mem_free+0xc2>
    return;
 800910c:	bf00      	nop
}
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	080157fc 	.word	0x080157fc
 8009118:	080158e8 	.word	0x080158e8
 800911c:	08015840 	.word	0x08015840
 8009120:	20004a64 	.word	0x20004a64
 8009124:	20004a68 	.word	0x20004a68
 8009128:	0801590c 	.word	0x0801590c
 800912c:	20004a6c 	.word	0x20004a6c
 8009130:	08015928 	.word	0x08015928
 8009134:	08015950 	.word	0x08015950
 8009138:	20004a70 	.word	0x20004a70

0800913c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009148:	887b      	ldrh	r3, [r7, #2]
 800914a:	3303      	adds	r3, #3
 800914c:	b29b      	uxth	r3, r3
 800914e:	f023 0303 	bic.w	r3, r3, #3
 8009152:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009154:	8bfb      	ldrh	r3, [r7, #30]
 8009156:	2b0b      	cmp	r3, #11
 8009158:	d801      	bhi.n	800915e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800915a:	230c      	movs	r3, #12
 800915c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800915e:	8bfb      	ldrh	r3, [r7, #30]
 8009160:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009164:	d803      	bhi.n	800916e <mem_trim+0x32>
 8009166:	8bfa      	ldrh	r2, [r7, #30]
 8009168:	887b      	ldrh	r3, [r7, #2]
 800916a:	429a      	cmp	r2, r3
 800916c:	d201      	bcs.n	8009172 <mem_trim+0x36>
    return NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	e0d2      	b.n	8009318 <mem_trim+0x1dc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009172:	4b6b      	ldr	r3, [pc, #428]	@ (8009320 <mem_trim+0x1e4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	d304      	bcc.n	8009186 <mem_trim+0x4a>
 800917c:	4b69      	ldr	r3, [pc, #420]	@ (8009324 <mem_trim+0x1e8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	429a      	cmp	r2, r3
 8009184:	d306      	bcc.n	8009194 <mem_trim+0x58>
 8009186:	4b68      	ldr	r3, [pc, #416]	@ (8009328 <mem_trim+0x1ec>)
 8009188:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800918c:	4967      	ldr	r1, [pc, #412]	@ (800932c <mem_trim+0x1f0>)
 800918e:	4868      	ldr	r0, [pc, #416]	@ (8009330 <mem_trim+0x1f4>)
 8009190:	f7f7 fd1c 	bl	8000bcc <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009194:	4b62      	ldr	r3, [pc, #392]	@ (8009320 <mem_trim+0x1e4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	429a      	cmp	r2, r3
 800919c:	d304      	bcc.n	80091a8 <mem_trim+0x6c>
 800919e:	4b61      	ldr	r3, [pc, #388]	@ (8009324 <mem_trim+0x1e8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d301      	bcc.n	80091ac <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	e0b5      	b.n	8009318 <mem_trim+0x1dc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3b08      	subs	r3, #8
 80091b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80091b2:	69b8      	ldr	r0, [r7, #24]
 80091b4:	f7ff fe08 	bl	8008dc8 <mem_to_ptr>
 80091b8:	4603      	mov	r3, r0
 80091ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	881a      	ldrh	r2, [r3, #0]
 80091c0:	8afb      	ldrh	r3, [r7, #22]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b08      	subs	r3, #8
 80091c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80091ca:	8bfa      	ldrh	r2, [r7, #30]
 80091cc:	8abb      	ldrh	r3, [r7, #20]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d906      	bls.n	80091e0 <mem_trim+0xa4>
 80091d2:	4b55      	ldr	r3, [pc, #340]	@ (8009328 <mem_trim+0x1ec>)
 80091d4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80091d8:	4956      	ldr	r1, [pc, #344]	@ (8009334 <mem_trim+0x1f8>)
 80091da:	4855      	ldr	r0, [pc, #340]	@ (8009330 <mem_trim+0x1f4>)
 80091dc:	f7f7 fcf6 	bl	8000bcc <printf>
  if (newsize > size) {
 80091e0:	8bfa      	ldrh	r2, [r7, #30]
 80091e2:	8abb      	ldrh	r3, [r7, #20]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d901      	bls.n	80091ec <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e095      	b.n	8009318 <mem_trim+0x1dc>
  }
  if (newsize == size) {
 80091ec:	8bfa      	ldrh	r2, [r7, #30]
 80091ee:	8abb      	ldrh	r3, [r7, #20]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d101      	bne.n	80091f8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	e08f      	b.n	8009318 <mem_trim+0x1dc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80091f8:	484f      	ldr	r0, [pc, #316]	@ (8009338 <mem_trim+0x1fc>)
 80091fa:	f00b f97f 	bl	80144fc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fdce 	bl	8008da4 <ptr_to_mem>
 8009208:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d13f      	bne.n	8009292 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800921a:	d106      	bne.n	800922a <mem_trim+0xee>
 800921c:	4b42      	ldr	r3, [pc, #264]	@ (8009328 <mem_trim+0x1ec>)
 800921e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009222:	4946      	ldr	r1, [pc, #280]	@ (800933c <mem_trim+0x200>)
 8009224:	4842      	ldr	r0, [pc, #264]	@ (8009330 <mem_trim+0x1f4>)
 8009226:	f7f7 fcd1 	bl	8000bcc <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009230:	8afa      	ldrh	r2, [r7, #22]
 8009232:	8bfb      	ldrh	r3, [r7, #30]
 8009234:	4413      	add	r3, r2
 8009236:	b29b      	uxth	r3, r3
 8009238:	3308      	adds	r3, #8
 800923a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800923c:	4b40      	ldr	r3, [pc, #256]	@ (8009340 <mem_trim+0x204>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	429a      	cmp	r2, r3
 8009244:	d106      	bne.n	8009254 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8009246:	89fb      	ldrh	r3, [r7, #14]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fdab 	bl	8008da4 <ptr_to_mem>
 800924e:	4603      	mov	r3, r0
 8009250:	4a3b      	ldr	r2, [pc, #236]	@ (8009340 <mem_trim+0x204>)
 8009252:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fda4 	bl	8008da4 <ptr_to_mem>
 800925c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2200      	movs	r2, #0
 8009262:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	89ba      	ldrh	r2, [r7, #12]
 8009268:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	8afa      	ldrh	r2, [r7, #22]
 800926e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	89fa      	ldrh	r2, [r7, #14]
 8009274:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800927e:	d047      	beq.n	8009310 <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff fd8d 	bl	8008da4 <ptr_to_mem>
 800928a:	4602      	mov	r2, r0
 800928c:	89fb      	ldrh	r3, [r7, #14]
 800928e:	8053      	strh	r3, [r2, #2]
 8009290:	e03e      	b.n	8009310 <mem_trim+0x1d4>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009292:	8bfb      	ldrh	r3, [r7, #30]
 8009294:	f103 0214 	add.w	r2, r3, #20
 8009298:	8abb      	ldrh	r3, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d838      	bhi.n	8009310 <mem_trim+0x1d4>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800929e:	8afa      	ldrh	r2, [r7, #22]
 80092a0:	8bfb      	ldrh	r3, [r7, #30]
 80092a2:	4413      	add	r3, r2
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3308      	adds	r3, #8
 80092a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80092b2:	d106      	bne.n	80092c2 <mem_trim+0x186>
 80092b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009328 <mem_trim+0x1ec>)
 80092b6:	f240 3216 	movw	r2, #790	@ 0x316
 80092ba:	4920      	ldr	r1, [pc, #128]	@ (800933c <mem_trim+0x200>)
 80092bc:	481c      	ldr	r0, [pc, #112]	@ (8009330 <mem_trim+0x1f4>)
 80092be:	f7f7 fc85 	bl	8000bcc <printf>
    mem2 = ptr_to_mem(ptr2);
 80092c2:	89fb      	ldrh	r3, [r7, #14]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fd6d 	bl	8008da4 <ptr_to_mem>
 80092ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80092cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009340 <mem_trim+0x204>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d202      	bcs.n	80092dc <mem_trim+0x1a0>
      lfree = mem2;
 80092d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009340 <mem_trim+0x204>)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2200      	movs	r2, #0
 80092e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	881a      	ldrh	r2, [r3, #0]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	8afa      	ldrh	r2, [r7, #22]
 80092ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	89fa      	ldrh	r2, [r7, #14]
 80092f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80092fe:	d007      	beq.n	8009310 <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff fd4d 	bl	8008da4 <ptr_to_mem>
 800930a:	4602      	mov	r2, r0
 800930c:	89fb      	ldrh	r3, [r7, #14]
 800930e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009310:	4809      	ldr	r0, [pc, #36]	@ (8009338 <mem_trim+0x1fc>)
 8009312:	f00b f902 	bl	801451a <sys_mutex_unlock>
  return rmem;
 8009316:	687b      	ldr	r3, [r7, #4]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20004a64 	.word	0x20004a64
 8009324:	20004a68 	.word	0x20004a68
 8009328:	080157fc 	.word	0x080157fc
 800932c:	08015984 	.word	0x08015984
 8009330:	08015840 	.word	0x08015840
 8009334:	0801599c 	.word	0x0801599c
 8009338:	20004a6c 	.word	0x20004a6c
 800933c:	080159bc 	.word	0x080159bc
 8009340:	20004a70 	.word	0x20004a70

08009344 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <mem_malloc+0x14>
    return NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	e0e2      	b.n	800951e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	3303      	adds	r3, #3
 800935c:	b29b      	uxth	r3, r3
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009364:	8bbb      	ldrh	r3, [r7, #28]
 8009366:	2b0b      	cmp	r3, #11
 8009368:	d801      	bhi.n	800936e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800936a:	230c      	movs	r3, #12
 800936c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800936e:	8bbb      	ldrh	r3, [r7, #28]
 8009370:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009374:	d803      	bhi.n	800937e <mem_malloc+0x3a>
 8009376:	8bba      	ldrh	r2, [r7, #28]
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	429a      	cmp	r2, r3
 800937c:	d201      	bcs.n	8009382 <mem_malloc+0x3e>
    return NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	e0cd      	b.n	800951e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009382:	4869      	ldr	r0, [pc, #420]	@ (8009528 <mem_malloc+0x1e4>)
 8009384:	f00b f8ba 	bl	80144fc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009388:	4b68      	ldr	r3, [pc, #416]	@ (800952c <mem_malloc+0x1e8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fd1b 	bl	8008dc8 <mem_to_ptr>
 8009392:	4603      	mov	r3, r0
 8009394:	83fb      	strh	r3, [r7, #30]
 8009396:	e0b7      	b.n	8009508 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009398:	8bfb      	ldrh	r3, [r7, #30]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff fd02 	bl	8008da4 <ptr_to_mem>
 80093a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	791b      	ldrb	r3, [r3, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f040 80a7 	bne.w	80094fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	8bfb      	ldrh	r3, [r7, #30]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	f1a3 0208 	sub.w	r2, r3, #8
 80093ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80093bc:	429a      	cmp	r2, r3
 80093be:	f0c0 809c 	bcc.w	80094fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	8bfb      	ldrh	r3, [r7, #30]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f1a3 0208 	sub.w	r2, r3, #8
 80093d0:	8bbb      	ldrh	r3, [r7, #28]
 80093d2:	3314      	adds	r3, #20
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d333      	bcc.n	8009440 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80093d8:	8bfa      	ldrh	r2, [r7, #30]
 80093da:	8bbb      	ldrh	r3, [r7, #28]
 80093dc:	4413      	add	r3, r2
 80093de:	b29b      	uxth	r3, r3
 80093e0:	3308      	adds	r3, #8
 80093e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80093e4:	8a7b      	ldrh	r3, [r7, #18]
 80093e6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80093ea:	d106      	bne.n	80093fa <mem_malloc+0xb6>
 80093ec:	4b50      	ldr	r3, [pc, #320]	@ (8009530 <mem_malloc+0x1ec>)
 80093ee:	f240 3287 	movw	r2, #903	@ 0x387
 80093f2:	4950      	ldr	r1, [pc, #320]	@ (8009534 <mem_malloc+0x1f0>)
 80093f4:	4850      	ldr	r0, [pc, #320]	@ (8009538 <mem_malloc+0x1f4>)
 80093f6:	f7f7 fbe9 	bl	8000bcc <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80093fa:	8a7b      	ldrh	r3, [r7, #18]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fcd1 	bl	8008da4 <ptr_to_mem>
 8009402:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	881a      	ldrh	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8bfa      	ldrh	r2, [r7, #30]
 8009416:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	8a7a      	ldrh	r2, [r7, #18]
 800941c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2201      	movs	r2, #1
 8009422:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800942c:	d00b      	beq.n	8009446 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fcb6 	bl	8008da4 <ptr_to_mem>
 8009438:	4602      	mov	r2, r0
 800943a:	8a7b      	ldrh	r3, [r7, #18]
 800943c:	8053      	strh	r3, [r2, #2]
 800943e:	e002      	b.n	8009446 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	2201      	movs	r2, #1
 8009444:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009446:	4b39      	ldr	r3, [pc, #228]	@ (800952c <mem_malloc+0x1e8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	429a      	cmp	r2, r3
 800944e:	d127      	bne.n	80094a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009450:	4b36      	ldr	r3, [pc, #216]	@ (800952c <mem_malloc+0x1e8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009456:	e005      	b.n	8009464 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fca1 	bl	8008da4 <ptr_to_mem>
 8009462:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	791b      	ldrb	r3, [r3, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <mem_malloc+0x132>
 800946c:	4b33      	ldr	r3, [pc, #204]	@ (800953c <mem_malloc+0x1f8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	429a      	cmp	r2, r3
 8009474:	d1f0      	bne.n	8009458 <mem_malloc+0x114>
          }
          lfree = cur;
 8009476:	4a2d      	ldr	r2, [pc, #180]	@ (800952c <mem_malloc+0x1e8>)
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800947c:	4b2b      	ldr	r3, [pc, #172]	@ (800952c <mem_malloc+0x1e8>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4b2e      	ldr	r3, [pc, #184]	@ (800953c <mem_malloc+0x1f8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d00b      	beq.n	80094a0 <mem_malloc+0x15c>
 8009488:	4b28      	ldr	r3, [pc, #160]	@ (800952c <mem_malloc+0x1e8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	791b      	ldrb	r3, [r3, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d006      	beq.n	80094a0 <mem_malloc+0x15c>
 8009492:	4b27      	ldr	r3, [pc, #156]	@ (8009530 <mem_malloc+0x1ec>)
 8009494:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009498:	4929      	ldr	r1, [pc, #164]	@ (8009540 <mem_malloc+0x1fc>)
 800949a:	4827      	ldr	r0, [pc, #156]	@ (8009538 <mem_malloc+0x1f4>)
 800949c:	f7f7 fb96 	bl	8000bcc <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80094a0:	4821      	ldr	r0, [pc, #132]	@ (8009528 <mem_malloc+0x1e4>)
 80094a2:	f00b f83a 	bl	801451a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80094a6:	8bba      	ldrh	r2, [r7, #28]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	4413      	add	r3, r2
 80094ac:	3308      	adds	r3, #8
 80094ae:	4a23      	ldr	r2, [pc, #140]	@ (800953c <mem_malloc+0x1f8>)
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d906      	bls.n	80094c4 <mem_malloc+0x180>
 80094b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009530 <mem_malloc+0x1ec>)
 80094b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80094bc:	4921      	ldr	r1, [pc, #132]	@ (8009544 <mem_malloc+0x200>)
 80094be:	481e      	ldr	r0, [pc, #120]	@ (8009538 <mem_malloc+0x1f4>)
 80094c0:	f7f7 fb84 	bl	8000bcc <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <mem_malloc+0x198>
 80094ce:	4b18      	ldr	r3, [pc, #96]	@ (8009530 <mem_malloc+0x1ec>)
 80094d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80094d4:	491c      	ldr	r1, [pc, #112]	@ (8009548 <mem_malloc+0x204>)
 80094d6:	4818      	ldr	r0, [pc, #96]	@ (8009538 <mem_malloc+0x1f4>)
 80094d8:	f7f7 fb78 	bl	8000bcc <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f003 0303 	and.w	r3, r3, #3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d006      	beq.n	80094f4 <mem_malloc+0x1b0>
 80094e6:	4b12      	ldr	r3, [pc, #72]	@ (8009530 <mem_malloc+0x1ec>)
 80094e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80094ec:	4917      	ldr	r1, [pc, #92]	@ (800954c <mem_malloc+0x208>)
 80094ee:	4812      	ldr	r0, [pc, #72]	@ (8009538 <mem_malloc+0x1f4>)
 80094f0:	f7f7 fb6c 	bl	8000bcc <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	3308      	adds	r3, #8
 80094f8:	e011      	b.n	800951e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80094fa:	8bfb      	ldrh	r3, [r7, #30]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fc51 	bl	8008da4 <ptr_to_mem>
 8009502:	4603      	mov	r3, r0
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009508:	8bfa      	ldrh	r2, [r7, #30]
 800950a:	8bbb      	ldrh	r3, [r7, #28]
 800950c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8009510:	429a      	cmp	r2, r3
 8009512:	f4ff af41 	bcc.w	8009398 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009516:	4804      	ldr	r0, [pc, #16]	@ (8009528 <mem_malloc+0x1e4>)
 8009518:	f00a ffff 	bl	801451a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20004a6c 	.word	0x20004a6c
 800952c:	20004a70 	.word	0x20004a70
 8009530:	080157fc 	.word	0x080157fc
 8009534:	080159bc 	.word	0x080159bc
 8009538:	08015840 	.word	0x08015840
 800953c:	20004a68 	.word	0x20004a68
 8009540:	080159d0 	.word	0x080159d0
 8009544:	080159ec 	.word	0x080159ec
 8009548:	08015a1c 	.word	0x08015a1c
 800954c:	08015a4c 	.word	0x08015a4c

08009550 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	3303      	adds	r3, #3
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	e011      	b.n	8009596 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	889b      	ldrh	r3, [r3, #4]
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4413      	add	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	88db      	ldrh	r3, [r3, #6]
 800959a:	461a      	mov	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4293      	cmp	r3, r2
 80095a0:	dbe7      	blt.n	8009572 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80095b6:	2300      	movs	r3, #0
 80095b8:	80fb      	strh	r3, [r7, #6]
 80095ba:	e009      	b.n	80095d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	4a08      	ldr	r2, [pc, #32]	@ (80095e0 <memp_init+0x30>)
 80095c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ffc3 	bl	8009550 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	3301      	adds	r3, #1
 80095ce:	80fb      	strh	r3, [r7, #6]
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	2b0c      	cmp	r3, #12
 80095d4:	d9f2      	bls.n	80095bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	08018670 	.word	0x08018670

080095e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d012      	beq.n	8009620 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d006      	beq.n	800961c <do_memp_malloc_pool+0x38>
 800960e:	4b07      	ldr	r3, [pc, #28]	@ (800962c <do_memp_malloc_pool+0x48>)
 8009610:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009614:	4906      	ldr	r1, [pc, #24]	@ (8009630 <do_memp_malloc_pool+0x4c>)
 8009616:	4807      	ldr	r0, [pc, #28]	@ (8009634 <do_memp_malloc_pool+0x50>)
 8009618:	f7f7 fad8 	bl	8000bcc <printf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	e000      	b.n	8009622 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	08015b08 	.word	0x08015b08
 8009630:	08015b34 	.word	0x08015b34
 8009634:	08015b58 	.word	0x08015b58

08009638 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	2b0c      	cmp	r3, #12
 8009646:	d904      	bls.n	8009652 <memp_malloc+0x1a>
 8009648:	4808      	ldr	r0, [pc, #32]	@ (800966c <memp_malloc+0x34>)
 800964a:	f7f7 fabf 	bl	8000bcc <printf>
 800964e:	2300      	movs	r3, #0
 8009650:	e008      	b.n	8009664 <memp_malloc+0x2c>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	4a06      	ldr	r2, [pc, #24]	@ (8009670 <memp_malloc+0x38>)
 8009656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff ffc2 	bl	80095e4 <do_memp_malloc_pool>
 8009660:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	08015b94 	.word	0x08015b94
 8009670:	08018670 	.word	0x08018670

08009674 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f003 0303 	and.w	r3, r3, #3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <do_memp_free_pool+0x22>
 8009688:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <do_memp_free_pool+0x40>)
 800968a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800968e:	490a      	ldr	r1, [pc, #40]	@ (80096b8 <do_memp_free_pool+0x44>)
 8009690:	480a      	ldr	r0, [pc, #40]	@ (80096bc <do_memp_free_pool+0x48>)
 8009692:	f7f7 fa9b 	bl	8000bcc <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	08015b08 	.word	0x08015b08
 80096b8:	08015bb4 	.word	0x08015bb4
 80096bc:	08015b58 	.word	0x08015b58

080096c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	2b0c      	cmp	r3, #12
 80096d0:	d903      	bls.n	80096da <memp_free+0x1a>
 80096d2:	480a      	ldr	r0, [pc, #40]	@ (80096fc <memp_free+0x3c>)
 80096d4:	f7f7 fa7a 	bl	8000bcc <printf>
 80096d8:	e00c      	b.n	80096f4 <memp_free+0x34>

  if (mem == NULL) {
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <memp_free+0x32>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	4a07      	ldr	r2, [pc, #28]	@ (8009700 <memp_free+0x40>)
 80096e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ffc2 	bl	8009674 <do_memp_free_pool>
 80096f0:	e000      	b.n	80096f4 <memp_free+0x34>
    return;
 80096f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	08015bd4 	.word	0x08015bd4
 8009700:	08018670 	.word	0x08018670

08009704 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d104      	bne.n	8009732 <netif_add+0x1e>
 8009728:	4857      	ldr	r0, [pc, #348]	@ (8009888 <netif_add+0x174>)
 800972a:	f7f7 fa4f 	bl	8000bcc <printf>
 800972e:	2300      	movs	r3, #0
 8009730:	e0a5      	b.n	800987e <netif_add+0x16a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <netif_add+0x2e>
 8009738:	4854      	ldr	r0, [pc, #336]	@ (800988c <netif_add+0x178>)
 800973a:	f7f7 fa47 	bl	8000bcc <printf>
 800973e:	2300      	movs	r3, #0
 8009740:	e09d      	b.n	800987e <netif_add+0x16a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <netif_add+0x38>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009748:	4b51      	ldr	r3, [pc, #324]	@ (8009890 <netif_add+0x17c>)
 800974a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <netif_add+0x42>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009752:	4b4f      	ldr	r3, [pc, #316]	@ (8009890 <netif_add+0x17c>)
 8009754:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <netif_add+0x4c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800975c:	4b4c      	ldr	r3, [pc, #304]	@ (8009890 <netif_add+0x17c>)
 800975e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a47      	ldr	r2, [pc, #284]	@ (8009894 <netif_add+0x180>)
 8009776:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3324      	adds	r3, #36	@ 0x24
 800978a:	2204      	movs	r2, #4
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f00b f843 	bl	801481a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a3a      	ldr	r2, [r7, #32]
 800979e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80097a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009898 <netif_add+0x184>)
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ae:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f914 	bl	80099e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <netif_add+0xb8>
    return NULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e058      	b.n	800987e <netif_add+0x16a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80097d2:	2bff      	cmp	r3, #255	@ 0xff
 80097d4:	d103      	bne.n	80097de <netif_add+0xca>
        netif->num = 0;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80097e2:	4b2e      	ldr	r3, [pc, #184]	@ (800989c <netif_add+0x188>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	e02b      	b.n	8009842 <netif_add+0x12e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d106      	bne.n	8009800 <netif_add+0xec>
 80097f2:	4b2b      	ldr	r3, [pc, #172]	@ (80098a0 <netif_add+0x18c>)
 80097f4:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 80097f8:	492a      	ldr	r1, [pc, #168]	@ (80098a4 <netif_add+0x190>)
 80097fa:	482b      	ldr	r0, [pc, #172]	@ (80098a8 <netif_add+0x194>)
 80097fc:	f7f7 f9e6 	bl	8000bcc <printf>
        num_netifs++;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	3301      	adds	r3, #1
 8009804:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2bff      	cmp	r3, #255	@ 0xff
 800980a:	dd06      	ble.n	800981a <netif_add+0x106>
 800980c:	4b24      	ldr	r3, [pc, #144]	@ (80098a0 <netif_add+0x18c>)
 800980e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009812:	4926      	ldr	r1, [pc, #152]	@ (80098ac <netif_add+0x198>)
 8009814:	4824      	ldr	r0, [pc, #144]	@ (80098a8 <netif_add+0x194>)
 8009816:	f7f7 f9d9 	bl	8000bcc <printf>
        if (netif2->num == netif->num) {
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009826:	429a      	cmp	r2, r3
 8009828:	d108      	bne.n	800983c <netif_add+0x128>
          netif->num++;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009830:	3301      	adds	r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 800983a:	e005      	b.n	8009848 <netif_add+0x134>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1d0      	bne.n	80097ea <netif_add+0xd6>
        }
      }
    } while (netif2 != NULL);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1be      	bne.n	80097cc <netif_add+0xb8>
  }
  if (netif->num == 254) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009854:	2bfe      	cmp	r3, #254	@ 0xfe
 8009856:	d103      	bne.n	8009860 <netif_add+0x14c>
    netif_num = 0;
 8009858:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <netif_add+0x184>)
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e006      	b.n	800986e <netif_add+0x15a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009866:	3301      	adds	r3, #1
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b0b      	ldr	r3, [pc, #44]	@ (8009898 <netif_add+0x184>)
 800986c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800986e:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <netif_add+0x188>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009876:	4a09      	ldr	r2, [pc, #36]	@ (800989c <netif_add+0x188>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	08015c80 	.word	0x08015c80
 800988c:	08015c9c 	.word	0x08015c9c
 8009890:	080186f4 	.word	0x080186f4
 8009894:	08009c33 	.word	0x08009c33
 8009898:	20004aa8 	.word	0x20004aa8
 800989c:	2000d8ec 	.word	0x2000d8ec
 80098a0:	08015bf0 	.word	0x08015bf0
 80098a4:	08015cc0 	.word	0x08015cc0
 80098a8:	08015c3c 	.word	0x08015c3c
 80098ac:	08015cd4 	.word	0x08015cd4

080098b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 fa87 	bl	800bdd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f006 fb05 	bl	800fed4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80098ca:	bf00      	nop
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <netif_do_set_ipaddr+0x20>
 80098e6:	4b1d      	ldr	r3, [pc, #116]	@ (800995c <netif_do_set_ipaddr+0x88>)
 80098e8:	f44f 72e7 	mov.w	r2, #462	@ 0x1ce
 80098ec:	491c      	ldr	r1, [pc, #112]	@ (8009960 <netif_do_set_ipaddr+0x8c>)
 80098ee:	481d      	ldr	r0, [pc, #116]	@ (8009964 <netif_do_set_ipaddr+0x90>)
 80098f0:	f7f7 f96c 	bl	8000bcc <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <netif_do_set_ipaddr+0x34>
 80098fa:	4b18      	ldr	r3, [pc, #96]	@ (800995c <netif_do_set_ipaddr+0x88>)
 80098fc:	f240 12cf 	movw	r2, #463	@ 0x1cf
 8009900:	4917      	ldr	r1, [pc, #92]	@ (8009960 <netif_do_set_ipaddr+0x8c>)
 8009902:	4818      	ldr	r0, [pc, #96]	@ (8009964 <netif_do_set_ipaddr+0x90>)
 8009904:	f7f7 f962 	bl	8000bcc <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3304      	adds	r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d01c      	beq.n	8009950 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3304      	adds	r3, #4
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009926:	f107 0314 	add.w	r3, r7, #20
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff ffbf 	bl	80098b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <netif_do_set_ipaddr+0x6a>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	e000      	b.n	8009940 <netif_do_set_ipaddr+0x6c>
 800993e:	2300      	movs	r3, #0
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009944:	2101      	movs	r1, #1
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 f8ca 	bl	8009ae0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800994c:	2301      	movs	r3, #1
 800994e:	e000      	b.n	8009952 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	08015bf0 	.word	0x08015bf0
 8009960:	08015d04 	.word	0x08015d04
 8009964:	08015c3c 	.word	0x08015c3c

08009968 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3308      	adds	r3, #8
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d00a      	beq.n	8009998 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <netif_do_set_netmask+0x26>
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	e000      	b.n	8009990 <netif_do_set_netmask+0x28>
 800998e:	2300      	movs	r3, #0
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009994:	2301      	movs	r3, #1
 8009996:	e000      	b.n	800999a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b085      	sub	sp, #20
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	330c      	adds	r3, #12
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d00a      	beq.n	80099d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <netif_do_set_gw+0x26>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	e000      	b.n	80099ce <netif_do_set_gw+0x28>
 80099cc:	2300      	movs	r3, #0
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80099d2:	2301      	movs	r3, #1
 80099d4:	e000      	b.n	80099d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009a00:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <netif_set_addr+0x90>)
 8009a02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009a74 <netif_set_addr+0x90>)
 8009a0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009a14:	4b17      	ldr	r3, [pc, #92]	@ (8009a74 <netif_set_addr+0x90>)
 8009a16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <netif_set_addr+0x42>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <netif_set_addr+0x46>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <netif_set_addr+0x48>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d006      	beq.n	8009a42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7ff ff49 	bl	80098d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7ff ff8e 	bl	8009968 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7ff ffa8 	bl	80099a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009a5c:	f107 0310 	add.w	r3, r7, #16
 8009a60:	461a      	mov	r2, r3
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff ff35 	bl	80098d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009a6a:	bf00      	nop
 8009a6c:	3720      	adds	r7, #32
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	080186f4 	.word	0x080186f4

08009a78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009a80:	4a04      	ldr	r2, [pc, #16]	@ (8009a94 <netif_set_default+0x1c>)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	2000d8f0 	.word	0x2000d8f0

08009a98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <netif_set_up+0x16>
 8009aa6:	480d      	ldr	r0, [pc, #52]	@ (8009adc <netif_set_up+0x44>)
 8009aa8:	f7f7 f890 	bl	8000bcc <printf>
 8009aac:	e013      	b.n	8009ad6 <netif_set_up+0x3e>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10c      	bne.n	8009ad6 <netif_set_up+0x3e>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ace:	2103      	movs	r1, #3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f805 	bl	8009ae0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	08015d74 	.word	0x08015d74

08009ae0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <netif_issue_reports+0x20>
 8009af2:	4b18      	ldr	r3, [pc, #96]	@ (8009b54 <netif_issue_reports+0x74>)
 8009af4:	f44f 725c 	mov.w	r2, #880	@ 0x370
 8009af8:	4917      	ldr	r1, [pc, #92]	@ (8009b58 <netif_issue_reports+0x78>)
 8009afa:	4818      	ldr	r0, [pc, #96]	@ (8009b5c <netif_issue_reports+0x7c>)
 8009afc:	f7f7 f866 	bl	8000bcc <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01e      	beq.n	8009b4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d017      	beq.n	8009b4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d013      	beq.n	8009b4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00e      	beq.n	8009b4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b36:	f003 0308 	and.w	r3, r3, #8
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f008 ffbf 	bl	8012ac8 <etharp_request>
 8009b4a:	e000      	b.n	8009b4e <netif_issue_reports+0x6e>
    return;
 8009b4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	08015bf0 	.word	0x08015bf0
 8009b58:	08015d90 	.word	0x08015d90
 8009b5c:	08015c3c 	.word	0x08015c3c

08009b60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <netif_set_link_up+0x16>
 8009b6e:	4813      	ldr	r0, [pc, #76]	@ (8009bbc <netif_set_link_up+0x5c>)
 8009b70:	f7f7 f82c 	bl	8000bcc <printf>
 8009b74:	e01e      	b.n	8009bb4 <netif_set_link_up+0x54>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d117      	bne.n	8009bb4 <netif_set_link_up+0x54>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b8a:	f043 0304 	orr.w	r3, r3, #4
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f006 fdb8 	bl	801070c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009b9c:	2103      	movs	r1, #3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff ff9e 	bl	8009ae0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <netif_set_link_up+0x54>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	08015dd4 	.word	0x08015dd4

08009bc0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d103      	bne.n	8009bd6 <netif_set_link_down+0x16>
 8009bce:	480f      	ldr	r0, [pc, #60]	@ (8009c0c <netif_set_link_down+0x4c>)
 8009bd0:	f7f6 fffc 	bl	8000bcc <printf>
 8009bd4:	e017      	b.n	8009c06 <netif_set_link_down+0x46>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d010      	beq.n	8009c06 <netif_set_link_down+0x46>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009bea:	f023 0304 	bic.w	r3, r3, #4
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
    netif->mtu6 = netif->mtu;
#endif

    NETIF_LINK_CALLBACK(netif);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <netif_set_link_down+0x46>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	08015df8 	.word	0x08015df8

08009c10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	61da      	str	r2, [r3, #28]
  }
}
 8009c26:	bf00      	nop
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b085      	sub	sp, #20
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009c3e:	f06f 030b 	mvn.w	r3, #11
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d013      	beq.n	8009c88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009c60:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <netif_get_by_index+0x48>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	e00c      	b.n	8009c82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	79fa      	ldrb	r2, [r7, #7]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d101      	bne.n	8009c7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	e006      	b.n	8009c8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1ef      	bne.n	8009c68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	2000d8ec 	.word	0x2000d8ec

08009c9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	460b      	mov	r3, r1
 8009cac:	80fb      	strh	r3, [r7, #6]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	88fa      	ldrh	r2, [r7, #6]
 8009cc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	88ba      	ldrh	r2, [r7, #4]
 8009cc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009cca:	8b3b      	ldrh	r3, [r7, #24]
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	7f3a      	ldrb	r2, [r7, #28]
 8009cd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	73da      	strb	r2, [r3, #15]
}
 8009ce4:	bf00      	nop
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08c      	sub	sp, #48	@ 0x30
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	80bb      	strh	r3, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009d06:	887b      	ldrh	r3, [r7, #2]
 8009d08:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009d0c:	d07f      	beq.n	8009e0e <pbuf_alloc+0x11e>
 8009d0e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009d12:	f300 80c8 	bgt.w	8009ea6 <pbuf_alloc+0x1b6>
 8009d16:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009d1a:	d010      	beq.n	8009d3e <pbuf_alloc+0x4e>
 8009d1c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009d20:	f300 80c1 	bgt.w	8009ea6 <pbuf_alloc+0x1b6>
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d002      	beq.n	8009d2e <pbuf_alloc+0x3e>
 8009d28:	2b41      	cmp	r3, #65	@ 0x41
 8009d2a:	f040 80bc 	bne.w	8009ea6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009d2e:	887a      	ldrh	r2, [r7, #2]
 8009d30:	88bb      	ldrh	r3, [r7, #4]
 8009d32:	4619      	mov	r1, r3
 8009d34:	2000      	movs	r0, #0
 8009d36:	f000 f8d1 	bl	8009edc <pbuf_alloc_reference>
 8009d3a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009d3c:	e0bd      	b.n	8009eba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009d46:	88bb      	ldrh	r3, [r7, #4]
 8009d48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009d4a:	200c      	movs	r0, #12
 8009d4c:	f7ff fc74 	bl	8009638 <memp_malloc>
 8009d50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d107      	bne.n	8009d68 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <pbuf_alloc+0x74>
            pbuf_free(p);
 8009d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d60:	f000 faa6 	bl	800a2b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	e0a9      	b.n	8009ebc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009d68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d6a:	3303      	adds	r3, #3
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f023 0303 	bic.w	r3, r3, #3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8009d78:	3304      	adds	r3, #4
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	8b7a      	ldrh	r2, [r7, #26]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	bf28      	it	cs
 8009d82:	4613      	movcs	r3, r2
 8009d84:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009d86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d88:	3310      	adds	r3, #16
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	3303      	adds	r3, #3
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	4618      	mov	r0, r3
 8009d96:	89f9      	ldrh	r1, [r7, #14]
 8009d98:	8b7a      	ldrh	r2, [r7, #26]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	887b      	ldrh	r3, [r7, #2]
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	460b      	mov	r3, r1
 8009da4:	4601      	mov	r1, r0
 8009da6:	6938      	ldr	r0, [r7, #16]
 8009da8:	f7ff ff78 	bl	8009c9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <pbuf_alloc+0xd6>
 8009db8:	4b42      	ldr	r3, [pc, #264]	@ (8009ec4 <pbuf_alloc+0x1d4>)
 8009dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dbe:	4942      	ldr	r1, [pc, #264]	@ (8009ec8 <pbuf_alloc+0x1d8>)
 8009dc0:	4842      	ldr	r0, [pc, #264]	@ (8009ecc <pbuf_alloc+0x1dc>)
 8009dc2:	f7f6 ff03 	bl	8000bcc <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009dc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009dc8:	3303      	adds	r3, #3
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d106      	bne.n	8009de4 <pbuf_alloc+0xf4>
 8009dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ec4 <pbuf_alloc+0x1d4>)
 8009dd8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009ddc:	493c      	ldr	r1, [pc, #240]	@ (8009ed0 <pbuf_alloc+0x1e0>)
 8009dde:	483b      	ldr	r0, [pc, #236]	@ (8009ecc <pbuf_alloc+0x1dc>)
 8009de0:	f7f6 fef4 	bl	8000bcc <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dee:	e002      	b.n	8009df6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009dfa:	8b7a      	ldrh	r2, [r7, #26]
 8009dfc:	89fb      	ldrh	r3, [r7, #14]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8009e06:	8b7b      	ldrh	r3, [r7, #26]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d19e      	bne.n	8009d4a <pbuf_alloc+0x5a>
      break;
 8009e0c:	e055      	b.n	8009eba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009e0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009e10:	3303      	adds	r3, #3
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f023 0303 	bic.w	r3, r3, #3
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	88bb      	ldrh	r3, [r7, #4]
 8009e1c:	3303      	adds	r3, #3
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4413      	add	r3, r2
 8009e28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009e2a:	8b3b      	ldrh	r3, [r7, #24]
 8009e2c:	3310      	adds	r3, #16
 8009e2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009e30:	8b3a      	ldrh	r2, [r7, #24]
 8009e32:	88bb      	ldrh	r3, [r7, #4]
 8009e34:	3303      	adds	r3, #3
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d306      	bcc.n	8009e4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009e3e:	8afa      	ldrh	r2, [r7, #22]
 8009e40:	88bb      	ldrh	r3, [r7, #4]
 8009e42:	3303      	adds	r3, #3
 8009e44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d201      	bcs.n	8009e50 <pbuf_alloc+0x160>
        return NULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e035      	b.n	8009ebc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009e50:	8afb      	ldrh	r3, [r7, #22]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff fa76 	bl	8009344 <mem_malloc>
 8009e58:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <pbuf_alloc+0x174>
        return NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	e02b      	b.n	8009ebc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009e64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009e66:	3310      	adds	r3, #16
 8009e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3303      	adds	r3, #3
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	4618      	mov	r0, r3
 8009e74:	88b9      	ldrh	r1, [r7, #4]
 8009e76:	88ba      	ldrh	r2, [r7, #4]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	887b      	ldrh	r3, [r7, #2]
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	460b      	mov	r3, r1
 8009e82:	4601      	mov	r1, r0
 8009e84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e86:	f7ff ff09 	bl	8009c9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d010      	beq.n	8009eb8 <pbuf_alloc+0x1c8>
 8009e96:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec4 <pbuf_alloc+0x1d4>)
 8009e98:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009e9c:	490d      	ldr	r1, [pc, #52]	@ (8009ed4 <pbuf_alloc+0x1e4>)
 8009e9e:	480b      	ldr	r0, [pc, #44]	@ (8009ecc <pbuf_alloc+0x1dc>)
 8009ea0:	f7f6 fe94 	bl	8000bcc <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009ea4:	e008      	b.n	8009eb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009ea6:	4b07      	ldr	r3, [pc, #28]	@ (8009ec4 <pbuf_alloc+0x1d4>)
 8009ea8:	f240 1227 	movw	r2, #295	@ 0x127
 8009eac:	490a      	ldr	r1, [pc, #40]	@ (8009ed8 <pbuf_alloc+0x1e8>)
 8009eae:	4807      	ldr	r0, [pc, #28]	@ (8009ecc <pbuf_alloc+0x1dc>)
 8009eb0:	f7f6 fe8c 	bl	8000bcc <printf>
      return NULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e001      	b.n	8009ebc <pbuf_alloc+0x1cc>
      break;
 8009eb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3728      	adds	r7, #40	@ 0x28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	08015e1c 	.word	0x08015e1c
 8009ec8:	08015e48 	.word	0x08015e48
 8009ecc:	08015e78 	.word	0x08015e78
 8009ed0:	08015ea0 	.word	0x08015ea0
 8009ed4:	08015ed4 	.word	0x08015ed4
 8009ed8:	08015f00 	.word	0x08015f00

08009edc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	807b      	strh	r3, [r7, #2]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009eec:	883b      	ldrh	r3, [r7, #0]
 8009eee:	2b41      	cmp	r3, #65	@ 0x41
 8009ef0:	d009      	beq.n	8009f06 <pbuf_alloc_reference+0x2a>
 8009ef2:	883b      	ldrh	r3, [r7, #0]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d006      	beq.n	8009f06 <pbuf_alloc_reference+0x2a>
 8009ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8009f38 <pbuf_alloc_reference+0x5c>)
 8009efa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009efe:	490f      	ldr	r1, [pc, #60]	@ (8009f3c <pbuf_alloc_reference+0x60>)
 8009f00:	480f      	ldr	r0, [pc, #60]	@ (8009f40 <pbuf_alloc_reference+0x64>)
 8009f02:	f7f6 fe63 	bl	8000bcc <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009f06:	200b      	movs	r0, #11
 8009f08:	f7ff fb96 	bl	8009638 <memp_malloc>
 8009f0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009f14:	2300      	movs	r3, #0
 8009f16:	e00b      	b.n	8009f30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009f18:	8879      	ldrh	r1, [r7, #2]
 8009f1a:	887a      	ldrh	r2, [r7, #2]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	883b      	ldrh	r3, [r7, #0]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	460b      	mov	r3, r1
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f7ff feb7 	bl	8009c9c <pbuf_init_alloced_pbuf>
  return p;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	08015e1c 	.word	0x08015e1c
 8009f3c:	08015f1c 	.word	0x08015f1c
 8009f40:	08015e78 	.word	0x08015e78

08009f44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b088      	sub	sp, #32
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	607b      	str	r3, [r7, #4]
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
 8009f50:	460b      	mov	r3, r1
 8009f52:	81bb      	strh	r3, [r7, #12]
 8009f54:	4613      	mov	r3, r2
 8009f56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009f5c:	8a7b      	ldrh	r3, [r7, #18]
 8009f5e:	3303      	adds	r3, #3
 8009f60:	f023 0203 	bic.w	r2, r3, #3
 8009f64:	89bb      	ldrh	r3, [r7, #12]
 8009f66:	441a      	add	r2, r3
 8009f68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d901      	bls.n	8009f72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e018      	b.n	8009fa4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009f78:	8a7b      	ldrh	r3, [r7, #18]
 8009f7a:	3303      	adds	r3, #3
 8009f7c:	f023 0303 	bic.w	r3, r3, #3
 8009f80:	6a3a      	ldr	r2, [r7, #32]
 8009f82:	4413      	add	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]
 8009f86:	e001      	b.n	8009f8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	89b9      	ldrh	r1, [r7, #12]
 8009f90:	89ba      	ldrh	r2, [r7, #12]
 8009f92:	2302      	movs	r3, #2
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	897b      	ldrh	r3, [r7, #10]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	6979      	ldr	r1, [r7, #20]
 8009f9e:	f7ff fe7d 	bl	8009c9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009fa2:	687b      	ldr	r3, [r7, #4]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <pbuf_realloc+0x20>
 8009fbe:	4b3a      	ldr	r3, [pc, #232]	@ (800a0a8 <pbuf_realloc+0xfc>)
 8009fc0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8009fc4:	4939      	ldr	r1, [pc, #228]	@ (800a0ac <pbuf_realloc+0x100>)
 8009fc6:	483a      	ldr	r0, [pc, #232]	@ (800a0b0 <pbuf_realloc+0x104>)
 8009fc8:	f7f6 fe00 	bl	8000bcc <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	891b      	ldrh	r3, [r3, #8]
 8009fd0:	887a      	ldrh	r2, [r7, #2]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d263      	bcs.n	800a09e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	891a      	ldrh	r2, [r3, #8]
 8009fda:	887b      	ldrh	r3, [r7, #2]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009fe0:	887b      	ldrh	r3, [r7, #2]
 8009fe2:	817b      	strh	r3, [r7, #10]
  q = p;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009fe8:	e018      	b.n	800a01c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	895b      	ldrh	r3, [r3, #10]
 8009fee:	897a      	ldrh	r2, [r7, #10]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	891a      	ldrh	r2, [r3, #8]
 8009ff8:	893b      	ldrh	r3, [r7, #8]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <pbuf_realloc+0x70>
 800a00e:	4b26      	ldr	r3, [pc, #152]	@ (800a0a8 <pbuf_realloc+0xfc>)
 800a010:	f240 12af 	movw	r2, #431	@ 0x1af
 800a014:	4927      	ldr	r1, [pc, #156]	@ (800a0b4 <pbuf_realloc+0x108>)
 800a016:	4826      	ldr	r0, [pc, #152]	@ (800a0b0 <pbuf_realloc+0x104>)
 800a018:	f7f6 fdd8 	bl	8000bcc <printf>
  while (rem_len > q->len) {
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	895b      	ldrh	r3, [r3, #10]
 800a020:	897a      	ldrh	r2, [r7, #10]
 800a022:	429a      	cmp	r2, r3
 800a024:	d8e1      	bhi.n	8009fea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	7b1b      	ldrb	r3, [r3, #12]
 800a02a:	f003 030f 	and.w	r3, r3, #15
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d121      	bne.n	800a076 <pbuf_realloc+0xca>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	895b      	ldrh	r3, [r3, #10]
 800a036:	897a      	ldrh	r2, [r7, #10]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d01c      	beq.n	800a076 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	7b5b      	ldrb	r3, [r3, #13]
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d116      	bne.n	800a076 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	b29a      	uxth	r2, r3
 800a052:	897b      	ldrh	r3, [r7, #10]
 800a054:	4413      	add	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	4619      	mov	r1, r3
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7ff f86e 	bl	800913c <mem_trim>
 800a060:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d106      	bne.n	800a076 <pbuf_realloc+0xca>
 800a068:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a8 <pbuf_realloc+0xfc>)
 800a06a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800a06e:	4912      	ldr	r1, [pc, #72]	@ (800a0b8 <pbuf_realloc+0x10c>)
 800a070:	480f      	ldr	r0, [pc, #60]	@ (800a0b0 <pbuf_realloc+0x104>)
 800a072:	f7f6 fdab 	bl	8000bcc <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	897a      	ldrh	r2, [r7, #10]
 800a07a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	895a      	ldrh	r2, [r3, #10]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 f90d 	bl	800a2b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	e000      	b.n	800a0a0 <pbuf_realloc+0xf4>
    return;
 800a09e:	bf00      	nop

}
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	08015e1c 	.word	0x08015e1c
 800a0ac:	08015f30 	.word	0x08015f30
 800a0b0:	08015e78 	.word	0x08015e78
 800a0b4:	08015f48 	.word	0x08015f48
 800a0b8:	08015f60 	.word	0x08015f60

0800a0bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d106      	bne.n	800a0de <pbuf_add_header_impl+0x22>
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800a180 <pbuf_add_header_impl+0xc4>)
 800a0d2:	f240 12df 	movw	r2, #479	@ 0x1df
 800a0d6:	492b      	ldr	r1, [pc, #172]	@ (800a184 <pbuf_add_header_impl+0xc8>)
 800a0d8:	482b      	ldr	r0, [pc, #172]	@ (800a188 <pbuf_add_header_impl+0xcc>)
 800a0da:	f7f6 fd77 	bl	8000bcc <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <pbuf_add_header_impl+0x30>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ea:	d301      	bcc.n	800a0f0 <pbuf_add_header_impl+0x34>
    return 1;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e043      	b.n	800a178 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <pbuf_add_header_impl+0x3e>
    return 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e03e      	b.n	800a178 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	891a      	ldrh	r2, [r3, #8]
 800a102:	8a7b      	ldrh	r3, [r7, #18]
 800a104:	4413      	add	r3, r2
 800a106:	b29b      	uxth	r3, r3
 800a108:	8a7a      	ldrh	r2, [r7, #18]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d901      	bls.n	800a112 <pbuf_add_header_impl+0x56>
    return 1;
 800a10e:	2301      	movs	r3, #1
 800a110:	e032      	b.n	800a178 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7b1b      	ldrb	r3, [r3, #12]
 800a116:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a118:	8a3b      	ldrh	r3, [r7, #16]
 800a11a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00c      	beq.n	800a13c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	425b      	negs	r3, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3310      	adds	r3, #16
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	429a      	cmp	r2, r3
 800a136:	d20d      	bcs.n	800a154 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a138:	2301      	movs	r3, #1
 800a13a:	e01d      	b.n	800a178 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d006      	beq.n	800a150 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	425b      	negs	r3, r3
 800a14a:	4413      	add	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e001      	b.n	800a154 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a150:	2301      	movs	r3, #1
 800a152:	e011      	b.n	800a178 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	895a      	ldrh	r2, [r3, #10]
 800a15e:	8a7b      	ldrh	r3, [r7, #18]
 800a160:	4413      	add	r3, r2
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	891a      	ldrh	r2, [r3, #8]
 800a16c:	8a7b      	ldrh	r3, [r7, #18]
 800a16e:	4413      	add	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	811a      	strh	r2, [r3, #8]


  return 0;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	08015e1c 	.word	0x08015e1c
 800a184:	08015f7c 	.word	0x08015f7c
 800a188:	08015e78 	.word	0x08015e78

0800a18c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a196:	2200      	movs	r2, #0
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff ff8e 	bl	800a0bc <pbuf_add_header_impl>
 800a1a0:	4603      	mov	r3, r0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <pbuf_remove_header+0x1e>
 800a1bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a238 <pbuf_remove_header+0x8c>)
 800a1be:	f240 224b 	movw	r2, #587	@ 0x24b
 800a1c2:	491e      	ldr	r1, [pc, #120]	@ (800a23c <pbuf_remove_header+0x90>)
 800a1c4:	481e      	ldr	r0, [pc, #120]	@ (800a240 <pbuf_remove_header+0x94>)
 800a1c6:	f7f6 fd01 	bl	8000bcc <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <pbuf_remove_header+0x2c>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d6:	d301      	bcc.n	800a1dc <pbuf_remove_header+0x30>
    return 1;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e028      	b.n	800a22e <pbuf_remove_header+0x82>
  }
  if (header_size_decrement == 0) {
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <pbuf_remove_header+0x3a>
    return 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e023      	b.n	800a22e <pbuf_remove_header+0x82>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	895b      	ldrh	r3, [r3, #10]
 800a1ee:	89fa      	ldrh	r2, [r7, #14]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d904      	bls.n	800a1fe <pbuf_remove_header+0x52>
 800a1f4:	4813      	ldr	r0, [pc, #76]	@ (800a244 <pbuf_remove_header+0x98>)
 800a1f6:	f7f6 fce9 	bl	8000bcc <printf>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e017      	b.n	800a22e <pbuf_remove_header+0x82>

  /* remember current payload pointer */
  payload = p->payload;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	441a      	add	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	895a      	ldrh	r2, [r3, #10]
 800a214:	89fb      	ldrh	r3, [r7, #14]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	b29a      	uxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	891a      	ldrh	r2, [r3, #8]
 800a222:	89fb      	ldrh	r3, [r7, #14]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	b29a      	uxth	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	08015e1c 	.word	0x08015e1c
 800a23c:	08015f7c 	.word	0x08015f7c
 800a240:	08015e78 	.word	0x08015e78
 800a244:	08015f88 	.word	0x08015f88

0800a248 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	807b      	strh	r3, [r7, #2]
 800a254:	4613      	mov	r3, r2
 800a256:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da08      	bge.n	800a272 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a264:	425b      	negs	r3, r3
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff ff9f 	bl	800a1ac <pbuf_remove_header>
 800a26e:	4603      	mov	r3, r0
 800a270:	e007      	b.n	800a282 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a276:	787a      	ldrb	r2, [r7, #1]
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff ff1e 	bl	800a0bc <pbuf_add_header_impl>
 800a280:	4603      	mov	r3, r0
  }
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a296:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a29a:	2201      	movs	r2, #1
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff ffd2 	bl	800a248 <pbuf_header_impl>
 800a2a4:	4603      	mov	r3, r0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10b      	bne.n	800a2d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d106      	bne.n	800a2d2 <pbuf_free+0x22>
 800a2c4:	4b38      	ldr	r3, [pc, #224]	@ (800a3a8 <pbuf_free+0xf8>)
 800a2c6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a2ca:	4938      	ldr	r1, [pc, #224]	@ (800a3ac <pbuf_free+0xfc>)
 800a2cc:	4838      	ldr	r0, [pc, #224]	@ (800a3b0 <pbuf_free+0x100>)
 800a2ce:	f7f6 fc7d 	bl	8000bcc <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e063      	b.n	800a39e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a2da:	e05c      	b.n	800a396 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7b9b      	ldrb	r3, [r3, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <pbuf_free+0x42>
 800a2e4:	4b30      	ldr	r3, [pc, #192]	@ (800a3a8 <pbuf_free+0xf8>)
 800a2e6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a2ea:	4932      	ldr	r1, [pc, #200]	@ (800a3b4 <pbuf_free+0x104>)
 800a2ec:	4830      	ldr	r0, [pc, #192]	@ (800a3b0 <pbuf_free+0x100>)
 800a2ee:	f7f6 fc6d 	bl	8000bcc <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7b9b      	ldrb	r3, [r3, #14]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	739a      	strb	r2, [r3, #14]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	7b9b      	ldrb	r3, [r3, #14]
 800a302:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a304:	7dbb      	ldrb	r3, [r7, #22]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d143      	bne.n	800a392 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7b1b      	ldrb	r3, [r3, #12]
 800a314:	f003 030f 	and.w	r3, r3, #15
 800a318:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	7b5b      	ldrb	r3, [r3, #13]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b00      	cmp	r3, #0
 800a324:	d011      	beq.n	800a34a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <pbuf_free+0x90>
 800a332:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a8 <pbuf_free+0xf8>)
 800a334:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a338:	491f      	ldr	r1, [pc, #124]	@ (800a3b8 <pbuf_free+0x108>)
 800a33a:	481d      	ldr	r0, [pc, #116]	@ (800a3b0 <pbuf_free+0x100>)
 800a33c:	f7f6 fc46 	bl	8000bcc <printf>
        pc->custom_free_function(p);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	4798      	blx	r3
 800a348:	e01d      	b.n	800a386 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d104      	bne.n	800a35a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	200c      	movs	r0, #12
 800a354:	f7ff f9b4 	bl	80096c0 <memp_free>
 800a358:	e015      	b.n	800a386 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d104      	bne.n	800a36a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	200b      	movs	r0, #11
 800a364:	f7ff f9ac 	bl	80096c0 <memp_free>
 800a368:	e00d      	b.n	800a386 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <pbuf_free+0xc8>
          mem_free(p);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe fe6b 	bl	800904c <mem_free>
 800a376:	e006      	b.n	800a386 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a378:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <pbuf_free+0xf8>)
 800a37a:	f240 320f 	movw	r2, #783	@ 0x30f
 800a37e:	490f      	ldr	r1, [pc, #60]	@ (800a3bc <pbuf_free+0x10c>)
 800a380:	480b      	ldr	r0, [pc, #44]	@ (800a3b0 <pbuf_free+0x100>)
 800a382:	f7f6 fc23 	bl	8000bcc <printf>
        }
      }
      count++;
 800a386:	7dfb      	ldrb	r3, [r7, #23]
 800a388:	3301      	adds	r3, #1
 800a38a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	e001      	b.n	800a396 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a392:	2300      	movs	r3, #0
 800a394:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d19f      	bne.n	800a2dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08015e1c 	.word	0x08015e1c
 800a3ac:	08015f7c 	.word	0x08015f7c
 800a3b0:	08015e78 	.word	0x08015e78
 800a3b4:	08015fa8 	.word	0x08015fa8
 800a3b8:	08015fc0 	.word	0x08015fc0
 800a3bc:	08015fe4 	.word	0x08015fe4

0800a3c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a3cc:	e005      	b.n	800a3da <pbuf_clen+0x1a>
    ++len;
 800a3ce:	89fb      	ldrh	r3, [r7, #14]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1f6      	bne.n	800a3ce <pbuf_clen+0xe>
  }
  return len;
 800a3e0:	89fb      	ldrh	r3, [r7, #14]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d010      	beq.n	800a420 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	7b9b      	ldrb	r3, [r3, #14]
 800a402:	3301      	adds	r3, #1
 800a404:	b2da      	uxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	7b9b      	ldrb	r3, [r3, #14]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <pbuf_ref+0x30>
 800a412:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <pbuf_ref+0x38>)
 800a414:	f240 3242 	movw	r2, #834	@ 0x342
 800a418:	4904      	ldr	r1, [pc, #16]	@ (800a42c <pbuf_ref+0x3c>)
 800a41a:	4805      	ldr	r0, [pc, #20]	@ (800a430 <pbuf_ref+0x40>)
 800a41c:	f7f6 fbd6 	bl	8000bcc <printf>
  }
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	08015e1c 	.word	0x08015e1c
 800a42c:	08015ff8 	.word	0x08015ff8
 800a430:	08015e78 	.word	0x08015e78

0800a434 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <pbuf_cat+0x16>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d103      	bne.n	800a452 <pbuf_cat+0x1e>
 800a44a:	481e      	ldr	r0, [pc, #120]	@ (800a4c4 <pbuf_cat+0x90>)
 800a44c:	f7f6 fbbe 	bl	8000bcc <printf>
 800a450:	e034      	b.n	800a4bc <pbuf_cat+0x88>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e00a      	b.n	800a46e <pbuf_cat+0x3a>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	891a      	ldrh	r2, [r3, #8]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	891b      	ldrh	r3, [r3, #8]
 800a460:	4413      	add	r3, r2
 800a462:	b29a      	uxth	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f0      	bne.n	800a458 <pbuf_cat+0x24>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	891a      	ldrh	r2, [r3, #8]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	895b      	ldrh	r3, [r3, #10]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d006      	beq.n	800a490 <pbuf_cat+0x5c>
 800a482:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <pbuf_cat+0x94>)
 800a484:	f240 3262 	movw	r2, #866	@ 0x362
 800a488:	4910      	ldr	r1, [pc, #64]	@ (800a4cc <pbuf_cat+0x98>)
 800a48a:	4811      	ldr	r0, [pc, #68]	@ (800a4d0 <pbuf_cat+0x9c>)
 800a48c:	f7f6 fb9e 	bl	8000bcc <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d006      	beq.n	800a4a6 <pbuf_cat+0x72>
 800a498:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c8 <pbuf_cat+0x94>)
 800a49a:	f240 3263 	movw	r2, #867	@ 0x363
 800a49e:	490d      	ldr	r1, [pc, #52]	@ (800a4d4 <pbuf_cat+0xa0>)
 800a4a0:	480b      	ldr	r0, [pc, #44]	@ (800a4d0 <pbuf_cat+0x9c>)
 800a4a2:	f7f6 fb93 	bl	8000bcc <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	891a      	ldrh	r2, [r3, #8]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	891b      	ldrh	r3, [r3, #8]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	0801600c 	.word	0x0801600c
 800a4c8:	08015e1c 	.word	0x08015e1c
 800a4cc:	08016044 	.word	0x08016044
 800a4d0:	08015e78 	.word	0x08015e78
 800a4d4:	08016074 	.word	0x08016074

0800a4d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ffa5 	bl	800a434 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a4ea:	6838      	ldr	r0, [r7, #0]
 800a4ec:	f7ff ff80 	bl	800a3f0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d105      	bne.n	800a514 <pbuf_copy+0x1c>
 800a508:	4808      	ldr	r0, [pc, #32]	@ (800a52c <pbuf_copy+0x34>)
 800a50a:	f7f6 fb5f 	bl	8000bcc <printf>
 800a50e:	f06f 030f 	mvn.w	r3, #15
 800a512:	e007      	b.n	800a524 <pbuf_copy+0x2c>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	891a      	ldrh	r2, [r3, #8]
 800a518:	2300      	movs	r3, #0
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f807 	bl	800a530 <pbuf_copy_partial_pbuf>
 800a522:	4603      	mov	r3, r0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	080160c0 	.word	0x080160c0

0800a530 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4611      	mov	r1, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	460b      	mov	r3, r1
 800a540:	80fb      	strh	r3, [r7, #6]
 800a542:	4613      	mov	r3, r2
 800a544:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len_calc;
 800a546:	88bb      	ldrh	r3, [r7, #4]
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <pbuf_copy_partial_pbuf+0x2e>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	891b      	ldrh	r3, [r3, #8]
 800a558:	88fa      	ldrh	r2, [r7, #6]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d905      	bls.n	800a56a <pbuf_copy_partial_pbuf+0x3a>
 800a55e:	4864      	ldr	r0, [pc, #400]	@ (800a6f0 <pbuf_copy_partial_pbuf+0x1c0>)
 800a560:	f7f6 fb34 	bl	8000bcc <printf>
 800a564:	f06f 030f 	mvn.w	r3, #15
 800a568:	e0bd      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d007      	beq.n	800a580 <pbuf_copy_partial_pbuf+0x50>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	891b      	ldrh	r3, [r3, #8]
 800a574:	4619      	mov	r1, r3
 800a576:	88ba      	ldrh	r2, [r7, #4]
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	4413      	add	r3, r2
 800a57c:	4299      	cmp	r1, r3
 800a57e:	da05      	bge.n	800a58c <pbuf_copy_partial_pbuf+0x5c>
 800a580:	485c      	ldr	r0, [pc, #368]	@ (800a6f4 <pbuf_copy_partial_pbuf+0x1c4>)
 800a582:	f7f6 fb23 	bl	8000bcc <printf>
 800a586:	f06f 030f 	mvn.w	r3, #15
 800a58a:	e0ac      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	895b      	ldrh	r3, [r3, #10]
 800a590:	461a      	mov	r2, r3
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	1ad2      	subs	r2, r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	895b      	ldrh	r3, [r3, #10]
 800a59a:	4619      	mov	r1, r3
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	1acb      	subs	r3, r1, r3
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d306      	bcc.n	800a5b2 <pbuf_copy_partial_pbuf+0x82>
      /* complete current p_from fits into current p_to */
      len_calc = p_from->len - offset_from;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	895b      	ldrh	r3, [r3, #10]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	617b      	str	r3, [r7, #20]
 800a5b0:	e005      	b.n	800a5be <pbuf_copy_partial_pbuf+0x8e>
    } else {
      /* current p_from does not fit into current p_to */
      len_calc = p_to->len - offset_to;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	895b      	ldrh	r3, [r3, #10]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	617b      	str	r3, [r7, #20]
    }
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d802      	bhi.n	800a5cc <pbuf_copy_partial_pbuf+0x9c>
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	e000      	b.n	800a5ce <pbuf_copy_partial_pbuf+0x9e>
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	827b      	strh	r3, [r7, #18]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	18d0      	adds	r0, r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	4413      	add	r3, r2
 800a5e0:	8a7a      	ldrh	r2, [r7, #18]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	f00a f9eb 	bl	80149be <memcpy>
    offset_to += len;
 800a5e8:	8a7b      	ldrh	r3, [r7, #18]
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800a5f0:	8a7b      	ldrh	r3, [r7, #18]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	61bb      	str	r3, [r7, #24]
    copy_len -= len;
 800a5f8:	88fa      	ldrh	r2, [r7, #6]
 800a5fa:	8a7b      	ldrh	r3, [r7, #18]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	895b      	ldrh	r3, [r3, #10]
 800a604:	461a      	mov	r2, r3
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4293      	cmp	r3, r2
 800a60a:	d906      	bls.n	800a61a <pbuf_copy_partial_pbuf+0xea>
 800a60c:	4b3a      	ldr	r3, [pc, #232]	@ (800a6f8 <pbuf_copy_partial_pbuf+0x1c8>)
 800a60e:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 800a612:	493a      	ldr	r1, [pc, #232]	@ (800a6fc <pbuf_copy_partial_pbuf+0x1cc>)
 800a614:	483a      	ldr	r0, [pc, #232]	@ (800a700 <pbuf_copy_partial_pbuf+0x1d0>)
 800a616:	f7f6 fad9 	bl	8000bcc <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	895b      	ldrh	r3, [r3, #10]
 800a61e:	461a      	mov	r2, r3
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	4293      	cmp	r3, r2
 800a624:	d906      	bls.n	800a634 <pbuf_copy_partial_pbuf+0x104>
 800a626:	4b34      	ldr	r3, [pc, #208]	@ (800a6f8 <pbuf_copy_partial_pbuf+0x1c8>)
 800a628:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 800a62c:	4935      	ldr	r1, [pc, #212]	@ (800a704 <pbuf_copy_partial_pbuf+0x1d4>)
 800a62e:	4834      	ldr	r0, [pc, #208]	@ (800a700 <pbuf_copy_partial_pbuf+0x1d0>)
 800a630:	f7f6 facc 	bl	8000bcc <printf>
    if (offset_from >= p_from->len) {
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	895b      	ldrh	r3, [r3, #10]
 800a638:	461a      	mov	r2, r3
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d310      	bcc.n	800a662 <pbuf_copy_partial_pbuf+0x132>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d108      	bne.n	800a662 <pbuf_copy_partial_pbuf+0x132>
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <pbuf_copy_partial_pbuf+0x132>
 800a656:	482c      	ldr	r0, [pc, #176]	@ (800a708 <pbuf_copy_partial_pbuf+0x1d8>)
 800a658:	f7f6 fab8 	bl	8000bcc <printf>
 800a65c:	f06f 030f 	mvn.w	r3, #15
 800a660:	e041      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
    }
    if (offset_to == p_to->len) {
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	461a      	mov	r2, r3
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d110      	bne.n	800a690 <pbuf_copy_partial_pbuf+0x160>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d108      	bne.n	800a690 <pbuf_copy_partial_pbuf+0x160>
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d005      	beq.n	800a690 <pbuf_copy_partial_pbuf+0x160>
 800a684:	4821      	ldr	r0, [pc, #132]	@ (800a70c <pbuf_copy_partial_pbuf+0x1dc>)
 800a686:	f7f6 faa1 	bl	8000bcc <printf>
 800a68a:	f06f 030f 	mvn.w	r3, #15
 800a68e:	e02a      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00f      	beq.n	800a6b6 <pbuf_copy_partial_pbuf+0x186>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	895a      	ldrh	r2, [r3, #10]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	891b      	ldrh	r3, [r3, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d109      	bne.n	800a6b6 <pbuf_copy_partial_pbuf+0x186>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <pbuf_copy_partial_pbuf+0x186>
 800a6aa:	4819      	ldr	r0, [pc, #100]	@ (800a710 <pbuf_copy_partial_pbuf+0x1e0>)
 800a6ac:	f7f6 fa8e 	bl	8000bcc <printf>
 800a6b0:	f06f 0305 	mvn.w	r3, #5
 800a6b4:	e017      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00f      	beq.n	800a6dc <pbuf_copy_partial_pbuf+0x1ac>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	895a      	ldrh	r2, [r3, #10]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	891b      	ldrh	r3, [r3, #8]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d109      	bne.n	800a6dc <pbuf_copy_partial_pbuf+0x1ac>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <pbuf_copy_partial_pbuf+0x1ac>
 800a6d0:	480f      	ldr	r0, [pc, #60]	@ (800a710 <pbuf_copy_partial_pbuf+0x1e0>)
 800a6d2:	f7f6 fa7b 	bl	8000bcc <printf>
 800a6d6:	f06f 0305 	mvn.w	r3, #5
 800a6da:	e004      	b.n	800a6e6 <pbuf_copy_partial_pbuf+0x1b6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f47f af54 	bne.w	800a58c <pbuf_copy_partial_pbuf+0x5c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3720      	adds	r7, #32
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	080160dc 	.word	0x080160dc
 800a6f4:	08016110 	.word	0x08016110
 800a6f8:	08015e1c 	.word	0x08015e1c
 800a6fc:	08016140 	.word	0x08016140
 800a700:	08015e78 	.word	0x08015e78
 800a704:	08016158 	.word	0x08016158
 800a708:	08016174 	.word	0x08016174
 800a70c:	08016184 	.word	0x08016184
 800a710:	08016194 	.word	0x08016194

0800a714 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4611      	mov	r1, r2
 800a720:	461a      	mov	r2, r3
 800a722:	460b      	mov	r3, r1
 800a724:	80fb      	strh	r3, [r7, #6]
 800a726:	4613      	mov	r3, r2
 800a728:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <pbuf_copy_partial+0x2e>
 800a738:	4827      	ldr	r0, [pc, #156]	@ (800a7d8 <pbuf_copy_partial+0xc4>)
 800a73a:	f7f6 fa47 	bl	8000bcc <printf>
 800a73e:	2300      	movs	r3, #0
 800a740:	e046      	b.n	800a7d0 <pbuf_copy_partial+0xbc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <pbuf_copy_partial+0x3e>
 800a748:	4824      	ldr	r0, [pc, #144]	@ (800a7dc <pbuf_copy_partial+0xc8>)
 800a74a:	f7f6 fa3f 	bl	8000bcc <printf>
 800a74e:	2300      	movs	r3, #0
 800a750:	e03e      	b.n	800a7d0 <pbuf_copy_partial+0xbc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e034      	b.n	800a7c2 <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
 800a758:	88bb      	ldrh	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <pbuf_copy_partial+0x60>
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	895b      	ldrh	r3, [r3, #10]
 800a762:	88ba      	ldrh	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	d305      	bcc.n	800a774 <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	895b      	ldrh	r3, [r3, #10]
 800a76c:	88ba      	ldrh	r2, [r7, #4]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	80bb      	strh	r3, [r7, #4]
 800a772:	e023      	b.n	800a7bc <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	895a      	ldrh	r2, [r3, #10]
 800a778:	88bb      	ldrh	r3, [r7, #4]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a77e:	8b3a      	ldrh	r2, [r7, #24]
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	429a      	cmp	r2, r3
 800a784:	d901      	bls.n	800a78a <pbuf_copy_partial+0x76>
        buf_copy_len = len;
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a78a:	8b7b      	ldrh	r3, [r7, #26]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	18d0      	adds	r0, r2, r3
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	88bb      	ldrh	r3, [r7, #4]
 800a796:	4413      	add	r3, r2
 800a798:	8b3a      	ldrh	r2, [r7, #24]
 800a79a:	4619      	mov	r1, r3
 800a79c:	f00a f90f 	bl	80149be <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a7a0:	8afa      	ldrh	r2, [r7, #22]
 800a7a2:	8b3b      	ldrh	r3, [r7, #24]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a7a8:	8b7a      	ldrh	r2, [r7, #26]
 800a7aa:	8b3b      	ldrh	r3, [r7, #24]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a7b0:	88fa      	ldrh	r2, [r7, #6]
 800a7b2:	8b3b      	ldrh	r3, [r7, #24]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	61fb      	str	r3, [r7, #28]
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <pbuf_copy_partial+0xba>
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1c4      	bne.n	800a758 <pbuf_copy_partial+0x44>
    }
  }
  return copied_total;
 800a7ce:	8afb      	ldrh	r3, [r7, #22]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	080161cc 	.word	0x080161cc
 800a7dc:	080161ec 	.word	0x080161ec

0800a7e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	603a      	str	r2, [r7, #0]
 800a7ea:	71fb      	strb	r3, [r7, #7]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	8919      	ldrh	r1, [r3, #8]
 800a7f4:	88ba      	ldrh	r2, [r7, #4]
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fa79 	bl	8009cf0 <pbuf_alloc>
 800a7fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <pbuf_clone+0x2a>
    return NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	e011      	b.n	800a82e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff fe73 	bl	800a4f8 <pbuf_copy>
 800a812:	4603      	mov	r3, r0
 800a814:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a816:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d006      	beq.n	800a82c <pbuf_clone+0x4c>
 800a81e:	4b06      	ldr	r3, [pc, #24]	@ (800a838 <pbuf_clone+0x58>)
 800a820:	f240 5246 	movw	r2, #1350	@ 0x546
 800a824:	4905      	ldr	r1, [pc, #20]	@ (800a83c <pbuf_clone+0x5c>)
 800a826:	4806      	ldr	r0, [pc, #24]	@ (800a840 <pbuf_clone+0x60>)
 800a828:	f7f6 f9d0 	bl	8000bcc <printf>
  return q;
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	08015e1c 	.word	0x08015e1c
 800a83c:	080162f8 	.word	0x080162f8
 800a840:	08015e78 	.word	0x08015e78

0800a844 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a848:	f009 fe94 	bl	8014574 <rand>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b29b      	uxth	r3, r3
 800a850:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a854:	b29b      	uxth	r3, r3
 800a856:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	4b01      	ldr	r3, [pc, #4]	@ (800a864 <tcp_init+0x20>)
 800a85e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a860:	bf00      	nop
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20000010 	.word	0x20000010

0800a868 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7d1b      	ldrb	r3, [r3, #20]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d105      	bne.n	800a884 <tcp_free+0x1c>
 800a878:	4b06      	ldr	r3, [pc, #24]	@ (800a894 <tcp_free+0x2c>)
 800a87a:	22d4      	movs	r2, #212	@ 0xd4
 800a87c:	4906      	ldr	r1, [pc, #24]	@ (800a898 <tcp_free+0x30>)
 800a87e:	4807      	ldr	r0, [pc, #28]	@ (800a89c <tcp_free+0x34>)
 800a880:	f7f6 f9a4 	bl	8000bcc <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	2001      	movs	r0, #1
 800a888:	f7fe ff1a 	bl	80096c0 <memp_free>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08016384 	.word	0x08016384
 800a898:	080163b0 	.word	0x080163b0
 800a89c:	080163c4 	.word	0x080163c4

0800a8a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7d1b      	ldrb	r3, [r3, #20]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d105      	bne.n	800a8bc <tcp_free_listen+0x1c>
 800a8b0:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <tcp_free_listen+0x2c>)
 800a8b2:	22df      	movs	r2, #223	@ 0xdf
 800a8b4:	4906      	ldr	r1, [pc, #24]	@ (800a8d0 <tcp_free_listen+0x30>)
 800a8b6:	4807      	ldr	r0, [pc, #28]	@ (800a8d4 <tcp_free_listen+0x34>)
 800a8b8:	f7f6 f988 	bl	8000bcc <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a8bc:	6879      	ldr	r1, [r7, #4]
 800a8be:	2002      	movs	r0, #2
 800a8c0:	f7fe fefe 	bl	80096c0 <memp_free>
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	08016384 	.word	0x08016384
 800a8d0:	080163ec 	.word	0x080163ec
 800a8d4:	080163c4 	.word	0x080163c4

0800a8d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a8dc:	f000 fe76 	bl	800b5cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a8e0:	4b07      	ldr	r3, [pc, #28]	@ (800a900 <tcp_tmr+0x28>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	4b05      	ldr	r3, [pc, #20]	@ (800a900 <tcp_tmr+0x28>)
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <tcp_tmr+0x28>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a8f8:	f000 fb3c 	bl	800af74 <tcp_slowtmr>
  }
}
 800a8fc:	bf00      	nop
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20004aa9 	.word	0x20004aa9

0800a904 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d105      	bne.n	800a920 <tcp_remove_listener+0x1c>
 800a914:	4b0d      	ldr	r3, [pc, #52]	@ (800a94c <tcp_remove_listener+0x48>)
 800a916:	22ff      	movs	r2, #255	@ 0xff
 800a918:	490d      	ldr	r1, [pc, #52]	@ (800a950 <tcp_remove_listener+0x4c>)
 800a91a:	480e      	ldr	r0, [pc, #56]	@ (800a954 <tcp_remove_listener+0x50>)
 800a91c:	f7f6 f956 	bl	8000bcc <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	e00a      	b.n	800a93c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d102      	bne.n	800a936 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f1      	bne.n	800a926 <tcp_remove_listener+0x22>
    }
  }
}
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	08016384 	.word	0x08016384
 800a950:	08016408 	.word	0x08016408
 800a954:	080163c4 	.word	0x080163c4

0800a958 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d106      	bne.n	800a974 <tcp_listen_closed+0x1c>
 800a966:	4b14      	ldr	r3, [pc, #80]	@ (800a9b8 <tcp_listen_closed+0x60>)
 800a968:	f240 1211 	movw	r2, #273	@ 0x111
 800a96c:	4913      	ldr	r1, [pc, #76]	@ (800a9bc <tcp_listen_closed+0x64>)
 800a96e:	4814      	ldr	r0, [pc, #80]	@ (800a9c0 <tcp_listen_closed+0x68>)
 800a970:	f7f6 f92c 	bl	8000bcc <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	7d1b      	ldrb	r3, [r3, #20]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d006      	beq.n	800a98a <tcp_listen_closed+0x32>
 800a97c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b8 <tcp_listen_closed+0x60>)
 800a97e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a982:	4910      	ldr	r1, [pc, #64]	@ (800a9c4 <tcp_listen_closed+0x6c>)
 800a984:	480e      	ldr	r0, [pc, #56]	@ (800a9c0 <tcp_listen_closed+0x68>)
 800a986:	f7f6 f921 	bl	8000bcc <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a98a:	2301      	movs	r3, #1
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e00b      	b.n	800a9a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a990:	4a0d      	ldr	r2, [pc, #52]	@ (800a9c8 <tcp_listen_closed+0x70>)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ffb1 	bl	800a904 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d9f0      	bls.n	800a990 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	08016384 	.word	0x08016384
 800a9bc:	08016430 	.word	0x08016430
 800a9c0:	080163c4 	.word	0x080163c4
 800a9c4:	0801643c 	.word	0x0801643c
 800a9c8:	080186bc 	.word	0x080186bc

0800a9cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a9cc:	b5b0      	push	{r4, r5, r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af04      	add	r7, sp, #16
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <tcp_close_shutdown+0x20>
 800a9de:	4b63      	ldr	r3, [pc, #396]	@ (800ab6c <tcp_close_shutdown+0x1a0>)
 800a9e0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a9e4:	4962      	ldr	r1, [pc, #392]	@ (800ab70 <tcp_close_shutdown+0x1a4>)
 800a9e6:	4863      	ldr	r0, [pc, #396]	@ (800ab74 <tcp_close_shutdown+0x1a8>)
 800a9e8:	f7f6 f8f0 	bl	8000bcc <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d067      	beq.n	800aac2 <tcp_close_shutdown+0xf6>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7d1b      	ldrb	r3, [r3, #20]
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d003      	beq.n	800aa02 <tcp_close_shutdown+0x36>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7d1b      	ldrb	r3, [r3, #20]
 800a9fe:	2b07      	cmp	r3, #7
 800aa00:	d15f      	bne.n	800aac2 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <tcp_close_shutdown+0x4a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa0e:	f640 3268 	movw	r2, #2920	@ 0xb68
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d055      	beq.n	800aac2 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	8b5b      	ldrh	r3, [r3, #26]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <tcp_close_shutdown+0x64>
 800aa22:	4b52      	ldr	r3, [pc, #328]	@ (800ab6c <tcp_close_shutdown+0x1a0>)
 800aa24:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800aa28:	4953      	ldr	r1, [pc, #332]	@ (800ab78 <tcp_close_shutdown+0x1ac>)
 800aa2a:	4852      	ldr	r0, [pc, #328]	@ (800ab74 <tcp_close_shutdown+0x1a8>)
 800aa2c:	f7f6 f8ce 	bl	8000bcc <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800aa38:	687d      	ldr	r5, [r7, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	8ad2      	ldrh	r2, [r2, #22]
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	8b09      	ldrh	r1, [r1, #24]
 800aa46:	9102      	str	r1, [sp, #8]
 800aa48:	9201      	str	r2, [sp, #4]
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	4622      	mov	r2, r4
 800aa50:	4601      	mov	r1, r0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f004 fa90 	bl	800ef78 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 f85f 	bl	800bb1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aa5e:	4b47      	ldr	r3, [pc, #284]	@ (800ab7c <tcp_close_shutdown+0x1b0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d105      	bne.n	800aa74 <tcp_close_shutdown+0xa8>
 800aa68:	4b44      	ldr	r3, [pc, #272]	@ (800ab7c <tcp_close_shutdown+0x1b0>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	4a43      	ldr	r2, [pc, #268]	@ (800ab7c <tcp_close_shutdown+0x1b0>)
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	e013      	b.n	800aa9c <tcp_close_shutdown+0xd0>
 800aa74:	4b41      	ldr	r3, [pc, #260]	@ (800ab7c <tcp_close_shutdown+0x1b0>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e00c      	b.n	800aa96 <tcp_close_shutdown+0xca>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d104      	bne.n	800aa90 <tcp_close_shutdown+0xc4>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	60da      	str	r2, [r3, #12]
 800aa8e:	e005      	b.n	800aa9c <tcp_close_shutdown+0xd0>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1ef      	bne.n	800aa7c <tcp_close_shutdown+0xb0>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	60da      	str	r2, [r3, #12]
 800aaa2:	4b37      	ldr	r3, [pc, #220]	@ (800ab80 <tcp_close_shutdown+0x1b4>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800aaa8:	4b36      	ldr	r3, [pc, #216]	@ (800ab84 <tcp_close_shutdown+0x1b8>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d102      	bne.n	800aab8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800aab2:	f003 f921 	bl	800dcf8 <tcp_trigger_input_pcb_close>
 800aab6:	e002      	b.n	800aabe <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fed5 	bl	800a868 <tcp_free>
      }
      return ERR_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e050      	b.n	800ab64 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d03b      	beq.n	800ab42 <tcp_close_shutdown+0x176>
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	dc44      	bgt.n	800ab58 <tcp_close_shutdown+0x18c>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d002      	beq.n	800aad8 <tcp_close_shutdown+0x10c>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d02a      	beq.n	800ab2c <tcp_close_shutdown+0x160>
 800aad6:	e03f      	b.n	800ab58 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	8adb      	ldrh	r3, [r3, #22]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d021      	beq.n	800ab24 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aae0:	4b29      	ldr	r3, [pc, #164]	@ (800ab88 <tcp_close_shutdown+0x1bc>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d105      	bne.n	800aaf6 <tcp_close_shutdown+0x12a>
 800aaea:	4b27      	ldr	r3, [pc, #156]	@ (800ab88 <tcp_close_shutdown+0x1bc>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	4a25      	ldr	r2, [pc, #148]	@ (800ab88 <tcp_close_shutdown+0x1bc>)
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	e013      	b.n	800ab1e <tcp_close_shutdown+0x152>
 800aaf6:	4b24      	ldr	r3, [pc, #144]	@ (800ab88 <tcp_close_shutdown+0x1bc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60bb      	str	r3, [r7, #8]
 800aafc:	e00c      	b.n	800ab18 <tcp_close_shutdown+0x14c>
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d104      	bne.n	800ab12 <tcp_close_shutdown+0x146>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	e005      	b.n	800ab1e <tcp_close_shutdown+0x152>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	60bb      	str	r3, [r7, #8]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1ef      	bne.n	800aafe <tcp_close_shutdown+0x132>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fe9f 	bl	800a868 <tcp_free>
      break;
 800ab2a:	e01a      	b.n	800ab62 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff ff13 	bl	800a958 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ab32:	6879      	ldr	r1, [r7, #4]
 800ab34:	4815      	ldr	r0, [pc, #84]	@ (800ab8c <tcp_close_shutdown+0x1c0>)
 800ab36:	f001 f833 	bl	800bba0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7ff feb0 	bl	800a8a0 <tcp_free_listen>
      break;
 800ab40:	e00f      	b.n	800ab62 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	480d      	ldr	r0, [pc, #52]	@ (800ab7c <tcp_close_shutdown+0x1b0>)
 800ab46:	f001 f82b 	bl	800bba0 <tcp_pcb_remove>
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab80 <tcp_close_shutdown+0x1b4>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff fe89 	bl	800a868 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ab56:	e004      	b.n	800ab62 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f819 	bl	800ab90 <tcp_close_shutdown_fin>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	e000      	b.n	800ab64 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab6c:	08016384 	.word	0x08016384
 800ab70:	08016454 	.word	0x08016454
 800ab74:	080163c4 	.word	0x080163c4
 800ab78:	08016474 	.word	0x08016474
 800ab7c:	2000d8f8 	.word	0x2000d8f8
 800ab80:	2000d8f4 	.word	0x2000d8f4
 800ab84:	2000d90c 	.word	0x2000d90c
 800ab88:	2000d904 	.word	0x2000d904
 800ab8c:	2000d900 	.word	0x2000d900

0800ab90 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d106      	bne.n	800abac <tcp_close_shutdown_fin+0x1c>
 800ab9e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac58 <tcp_close_shutdown_fin+0xc8>)
 800aba0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800aba4:	492d      	ldr	r1, [pc, #180]	@ (800ac5c <tcp_close_shutdown_fin+0xcc>)
 800aba6:	482e      	ldr	r0, [pc, #184]	@ (800ac60 <tcp_close_shutdown_fin+0xd0>)
 800aba8:	f7f6 f810 	bl	8000bcc <printf>

  switch (pcb->state) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	7d1b      	ldrb	r3, [r3, #20]
 800abb0:	2b07      	cmp	r3, #7
 800abb2:	d020      	beq.n	800abf6 <tcp_close_shutdown_fin+0x66>
 800abb4:	2b07      	cmp	r3, #7
 800abb6:	dc2b      	bgt.n	800ac10 <tcp_close_shutdown_fin+0x80>
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d002      	beq.n	800abc2 <tcp_close_shutdown_fin+0x32>
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d00d      	beq.n	800abdc <tcp_close_shutdown_fin+0x4c>
 800abc0:	e026      	b.n	800ac10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f003 fab8 	bl	800e138 <tcp_send_fin>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800abcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11f      	bne.n	800ac14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2205      	movs	r2, #5
 800abd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800abda:	e01b      	b.n	800ac14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f003 faab 	bl	800e138 <tcp_send_fin>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800abe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d114      	bne.n	800ac18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2205      	movs	r2, #5
 800abf2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800abf4:	e010      	b.n	800ac18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f003 fa9e 	bl	800e138 <tcp_send_fin>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ac00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d109      	bne.n	800ac1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2209      	movs	r2, #9
 800ac0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac0e:	e005      	b.n	800ac1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e01c      	b.n	800ac4e <tcp_close_shutdown_fin+0xbe>
      break;
 800ac14:	bf00      	nop
 800ac16:	e002      	b.n	800ac1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e000      	b.n	800ac1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ac1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ac1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d103      	bne.n	800ac2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f003 fbc4 	bl	800e3b4 <tcp_output>
 800ac2c:	e00d      	b.n	800ac4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ac2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac36:	d108      	bne.n	800ac4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8b5b      	ldrh	r3, [r3, #26]
 800ac3c:	f043 0308 	orr.w	r3, r3, #8
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	e001      	b.n	800ac4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ac4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	08016384 	.word	0x08016384
 800ac5c:	08016430 	.word	0x08016430
 800ac60:	080163c4 	.word	0x080163c4

0800ac64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d105      	bne.n	800ac7e <tcp_close+0x1a>
 800ac72:	480d      	ldr	r0, [pc, #52]	@ (800aca8 <tcp_close+0x44>)
 800ac74:	f7f5 ffaa 	bl	8000bcc <printf>
 800ac78:	f06f 030f 	mvn.w	r3, #15
 800ac7c:	e00f      	b.n	800ac9e <tcp_close+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7d1b      	ldrb	r3, [r3, #20]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d006      	beq.n	800ac94 <tcp_close+0x30>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8b5b      	ldrh	r3, [r3, #26]
 800ac8a:	f043 0310 	orr.w	r3, r3, #16
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ac94:	2101      	movs	r1, #1
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fe98 	bl	800a9cc <tcp_close_shutdown>
 800ac9c:	4603      	mov	r3, r0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	08016490 	.word	0x08016490

0800acac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08e      	sub	sp, #56	@ 0x38
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d103      	bne.n	800acc4 <tcp_abandon+0x18>
 800acbc:	484b      	ldr	r0, [pc, #300]	@ (800adec <tcp_abandon+0x140>)
 800acbe:	f7f5 ff85 	bl	8000bcc <printf>
 800acc2:	e090      	b.n	800ade6 <tcp_abandon+0x13a>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	7d1b      	ldrb	r3, [r3, #20]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d106      	bne.n	800acda <tcp_abandon+0x2e>
 800accc:	4b48      	ldr	r3, [pc, #288]	@ (800adf0 <tcp_abandon+0x144>)
 800acce:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800acd2:	4948      	ldr	r1, [pc, #288]	@ (800adf4 <tcp_abandon+0x148>)
 800acd4:	4848      	ldr	r0, [pc, #288]	@ (800adf8 <tcp_abandon+0x14c>)
 800acd6:	f7f5 ff79 	bl	8000bcc <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7d1b      	ldrb	r3, [r3, #20]
 800acde:	2b0a      	cmp	r3, #10
 800ace0:	d107      	bne.n	800acf2 <tcp_abandon+0x46>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	4845      	ldr	r0, [pc, #276]	@ (800adfc <tcp_abandon+0x150>)
 800ace6:	f000 ff5b 	bl	800bba0 <tcp_pcb_remove>
    tcp_free(pcb);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fdbc 	bl	800a868 <tcp_free>
 800acf0:	e079      	b.n	800ade6 <tcp_abandon+0x13a>
  } else {
    int send_rst = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad04:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad0c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7d1b      	ldrb	r3, [r3, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d126      	bne.n	800ad6a <tcp_abandon+0xbe>
      if (pcb->local_port != 0) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8adb      	ldrh	r3, [r3, #22]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d02e      	beq.n	800ad82 <tcp_abandon+0xd6>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad24:	4b36      	ldr	r3, [pc, #216]	@ (800ae00 <tcp_abandon+0x154>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d105      	bne.n	800ad3a <tcp_abandon+0x8e>
 800ad2e:	4b34      	ldr	r3, [pc, #208]	@ (800ae00 <tcp_abandon+0x154>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	4a32      	ldr	r2, [pc, #200]	@ (800ae00 <tcp_abandon+0x154>)
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e013      	b.n	800ad62 <tcp_abandon+0xb6>
 800ad3a:	4b31      	ldr	r3, [pc, #196]	@ (800ae00 <tcp_abandon+0x154>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	61fb      	str	r3, [r7, #28]
 800ad40:	e00c      	b.n	800ad5c <tcp_abandon+0xb0>
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d104      	bne.n	800ad56 <tcp_abandon+0xaa>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	60da      	str	r2, [r3, #12]
 800ad54:	e005      	b.n	800ad62 <tcp_abandon+0xb6>
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1ef      	bne.n	800ad42 <tcp_abandon+0x96>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	60da      	str	r2, [r3, #12]
 800ad68:	e00b      	b.n	800ad82 <tcp_abandon+0xd6>
      }
    } else {
      send_rst = reset;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8adb      	ldrh	r3, [r3, #22]
 800ad72:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	4823      	ldr	r0, [pc, #140]	@ (800ae04 <tcp_abandon+0x158>)
 800ad78:	f000 ff12 	bl	800bba0 <tcp_pcb_remove>
 800ad7c:	4b22      	ldr	r3, [pc, #136]	@ (800ae08 <tcp_abandon+0x15c>)
 800ad7e:	2201      	movs	r2, #1
 800ad80:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <tcp_abandon+0xe8>
      tcp_segs_free(pcb->unacked);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fcf6 	bl	800b780 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unsent);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fced 	bl	800b780 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <tcp_abandon+0x11e>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	8b12      	ldrh	r2, [r2, #24]
 800adb6:	9202      	str	r2, [sp, #8]
 800adb8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800adba:	9201      	str	r2, [sp, #4]
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	460b      	mov	r3, r1
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	69b9      	ldr	r1, [r7, #24]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f004 f8d7 	bl	800ef78 <tcp_rst>
    }
    last_state = pcb->state;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7d1b      	ldrb	r3, [r3, #20]
 800adce:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff fd49 	bl	800a868 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d004      	beq.n	800ade6 <tcp_abandon+0x13a>
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f06f 010c 	mvn.w	r1, #12
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	4798      	blx	r3
  }
}
 800ade6:	3728      	adds	r7, #40	@ 0x28
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	080164c4 	.word	0x080164c4
 800adf0:	08016384 	.word	0x08016384
 800adf4:	080164e0 	.word	0x080164e0
 800adf8:	080163c4 	.word	0x080163c4
 800adfc:	2000d908 	.word	0x2000d908
 800ae00:	2000d904 	.word	0x2000d904
 800ae04:	2000d8f8 	.word	0x2000d8f8
 800ae08:	2000d8f4 	.word	0x2000d8f4

0800ae0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ae14:	2101      	movs	r1, #1
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff ff48 	bl	800acac <tcp_abandon>
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <tcp_update_rcv_ann_wnd+0x1c>
 800ae32:	4b25      	ldr	r3, [pc, #148]	@ (800aec8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ae34:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800ae38:	4924      	ldr	r1, [pc, #144]	@ (800aecc <tcp_update_rcv_ann_wnd+0xa8>)
 800ae3a:	4825      	ldr	r0, [pc, #148]	@ (800aed0 <tcp_update_rcv_ann_wnd+0xac>)
 800ae3c:	f7f5 fec6 	bl	8000bcc <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ae48:	4413      	add	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ae54:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800ae58:	428a      	cmp	r2, r1
 800ae5a:	bf28      	it	cs
 800ae5c:	460a      	movcs	r2, r1
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	4413      	add	r3, r2
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db08      	blt.n	800ae7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	e020      	b.n	800aebe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dd03      	ble.n	800ae92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae90:	e014      	b.n	800aebc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea4:	d306      	bcc.n	800aeb4 <tcp_update_rcv_ann_wnd+0x90>
 800aea6:	4b08      	ldr	r3, [pc, #32]	@ (800aec8 <tcp_update_rcv_ann_wnd+0xa4>)
 800aea8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800aeac:	4909      	ldr	r1, [pc, #36]	@ (800aed4 <tcp_update_rcv_ann_wnd+0xb0>)
 800aeae:	4808      	ldr	r0, [pc, #32]	@ (800aed0 <tcp_update_rcv_ann_wnd+0xac>)
 800aeb0:	f7f5 fe8c 	bl	8000bcc <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800aebc:	2300      	movs	r3, #0
  }
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	08016384 	.word	0x08016384
 800aecc:	080165dc 	.word	0x080165dc
 800aed0:	080163c4 	.word	0x080163c4
 800aed4:	08016600 	.word	0x08016600

0800aed8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d103      	bne.n	800aef2 <tcp_recved+0x1a>
 800aeea:	481e      	ldr	r0, [pc, #120]	@ (800af64 <tcp_recved+0x8c>)
 800aeec:	f7f5 fe6e 	bl	8000bcc <printf>
 800aef0:	e034      	b.n	800af5c <tcp_recved+0x84>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7d1b      	ldrb	r3, [r3, #20]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d106      	bne.n	800af08 <tcp_recved+0x30>
 800aefa:	4b1b      	ldr	r3, [pc, #108]	@ (800af68 <tcp_recved+0x90>)
 800aefc:	f240 32d3 	movw	r2, #979	@ 0x3d3
 800af00:	491a      	ldr	r1, [pc, #104]	@ (800af6c <tcp_recved+0x94>)
 800af02:	481b      	ldr	r0, [pc, #108]	@ (800af70 <tcp_recved+0x98>)
 800af04:	f7f5 fe62 	bl	8000bcc <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800af0c:	887b      	ldrh	r3, [r7, #2]
 800af0e:	4413      	add	r3, r2
 800af10:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800af12:	89fb      	ldrh	r3, [r7, #14]
 800af14:	f640 3268 	movw	r2, #2920	@ 0xb68
 800af18:	4293      	cmp	r3, r2
 800af1a:	d804      	bhi.n	800af26 <tcp_recved+0x4e>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af20:	89fa      	ldrh	r2, [r7, #14]
 800af22:	429a      	cmp	r2, r3
 800af24:	d204      	bcs.n	800af30 <tcp_recved+0x58>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f640 3268 	movw	r2, #2920	@ 0xb68
 800af2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800af2e:	e002      	b.n	800af36 <tcp_recved+0x5e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	89fa      	ldrh	r2, [r7, #14]
 800af34:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff ff74 	bl	800ae24 <tcp_update_rcv_ann_wnd>
 800af3c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800af44:	4293      	cmp	r3, r2
 800af46:	d909      	bls.n	800af5c <tcp_recved+0x84>
    tcp_ack_now(pcb);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	8b5b      	ldrh	r3, [r3, #26]
 800af4c:	f043 0302 	orr.w	r3, r3, #2
 800af50:	b29a      	uxth	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f003 fa2c 	bl	800e3b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	0801661c 	.word	0x0801661c
 800af68:	08016384 	.word	0x08016384
 800af6c:	08016634 	.word	0x08016634
 800af70:	080163c4 	.word	0x080163c4

0800af74 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800af74:	b5b0      	push	{r4, r5, r7, lr}
 800af76:	b090      	sub	sp, #64	@ 0x40
 800af78:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800af80:	4b95      	ldr	r3, [pc, #596]	@ (800b1d8 <tcp_slowtmr+0x264>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	4a94      	ldr	r2, [pc, #592]	@ (800b1d8 <tcp_slowtmr+0x264>)
 800af88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800af8a:	4b94      	ldr	r3, [pc, #592]	@ (800b1dc <tcp_slowtmr+0x268>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4b92      	ldr	r3, [pc, #584]	@ (800b1dc <tcp_slowtmr+0x268>)
 800af94:	701a      	strb	r2, [r3, #0]
 800af96:	e000      	b.n	800af9a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800af98:	bf00      	nop
  prev = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800af9e:	4b90      	ldr	r3, [pc, #576]	@ (800b1e0 <tcp_slowtmr+0x26c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800afa4:	e289      	b.n	800b4ba <tcp_slowtmr+0x546>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	7d1b      	ldrb	r3, [r3, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <tcp_slowtmr+0x48>
 800afae:	4b8d      	ldr	r3, [pc, #564]	@ (800b1e4 <tcp_slowtmr+0x270>)
 800afb0:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800afb4:	498c      	ldr	r1, [pc, #560]	@ (800b1e8 <tcp_slowtmr+0x274>)
 800afb6:	488d      	ldr	r0, [pc, #564]	@ (800b1ec <tcp_slowtmr+0x278>)
 800afb8:	f7f5 fe08 	bl	8000bcc <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800afbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbe:	7d1b      	ldrb	r3, [r3, #20]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <tcp_slowtmr+0x5e>
 800afc4:	4b87      	ldr	r3, [pc, #540]	@ (800b1e4 <tcp_slowtmr+0x270>)
 800afc6:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800afca:	4989      	ldr	r1, [pc, #548]	@ (800b1f0 <tcp_slowtmr+0x27c>)
 800afcc:	4887      	ldr	r0, [pc, #540]	@ (800b1ec <tcp_slowtmr+0x278>)
 800afce:	f7f5 fdfd 	bl	8000bcc <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	7d1b      	ldrb	r3, [r3, #20]
 800afd6:	2b0a      	cmp	r3, #10
 800afd8:	d106      	bne.n	800afe8 <tcp_slowtmr+0x74>
 800afda:	4b82      	ldr	r3, [pc, #520]	@ (800b1e4 <tcp_slowtmr+0x270>)
 800afdc:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 800afe0:	4984      	ldr	r1, [pc, #528]	@ (800b1f4 <tcp_slowtmr+0x280>)
 800afe2:	4882      	ldr	r0, [pc, #520]	@ (800b1ec <tcp_slowtmr+0x278>)
 800afe4:	f7f5 fdf2 	bl	8000bcc <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800afe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afea:	7f9a      	ldrb	r2, [r3, #30]
 800afec:	4b7b      	ldr	r3, [pc, #492]	@ (800b1dc <tcp_slowtmr+0x268>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d105      	bne.n	800b000 <tcp_slowtmr+0x8c>
      prev = pcb;
 800aff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800affe:	e25c      	b.n	800b4ba <tcp_slowtmr+0x546>
    pcb->last_timer = tcp_timer_ctr;
 800b000:	4b76      	ldr	r3, [pc, #472]	@ (800b1dc <tcp_slowtmr+0x268>)
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b006:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b016:	7d1b      	ldrb	r3, [r3, #20]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d10a      	bne.n	800b032 <tcp_slowtmr+0xbe>
 800b01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b022:	2b05      	cmp	r3, #5
 800b024:	d905      	bls.n	800b032 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b02a:	3301      	adds	r3, #1
 800b02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800b030:	e11e      	b.n	800b270 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b038:	2b0b      	cmp	r3, #11
 800b03a:	d905      	bls.n	800b048 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800b03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b040:	3301      	adds	r3, #1
 800b042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b046:	e113      	b.n	800b270 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d075      	beq.n	800b13e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b056:	2b00      	cmp	r3, #0
 800b058:	d006      	beq.n	800b068 <tcp_slowtmr+0xf4>
 800b05a:	4b62      	ldr	r3, [pc, #392]	@ (800b1e4 <tcp_slowtmr+0x270>)
 800b05c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b060:	4965      	ldr	r1, [pc, #404]	@ (800b1f8 <tcp_slowtmr+0x284>)
 800b062:	4862      	ldr	r0, [pc, #392]	@ (800b1ec <tcp_slowtmr+0x278>)
 800b064:	f7f5 fdb2 	bl	8000bcc <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <tcp_slowtmr+0x10a>
 800b070:	4b5c      	ldr	r3, [pc, #368]	@ (800b1e4 <tcp_slowtmr+0x270>)
 800b072:	f240 42d6 	movw	r2, #1238	@ 0x4d6
 800b076:	4961      	ldr	r1, [pc, #388]	@ (800b1fc <tcp_slowtmr+0x288>)
 800b078:	485c      	ldr	r0, [pc, #368]	@ (800b1ec <tcp_slowtmr+0x278>)
 800b07a:	f7f5 fda7 	bl	8000bcc <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800b084:	2b0b      	cmp	r3, #11
 800b086:	d905      	bls.n	800b094 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800b088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b08c:	3301      	adds	r3, #1
 800b08e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b092:	e0ed      	b.n	800b270 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b09a:	3b01      	subs	r3, #1
 800b09c:	4a58      	ldr	r2, [pc, #352]	@ (800b200 <tcp_slowtmr+0x28c>)
 800b09e:	5cd3      	ldrb	r3, [r2, r3]
 800b0a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800b0a8:	7c7a      	ldrb	r2, [r7, #17]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d907      	bls.n	800b0be <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b0:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800b0c4:	7c7a      	ldrb	r2, [r7, #17]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	f200 80d2 	bhi.w	800b270 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800b0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d108      	bne.n	800b0ec <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b0da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0dc:	f004 f840 	bl	800f160 <tcp_zero_window_probe>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d014      	beq.n	800b110 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	623b      	str	r3, [r7, #32]
 800b0ea:	e011      	b.n	800b110 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b0f6:	f002 fecb 	bl	800de90 <tcp_split_unsent_seg>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800b100:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b102:	f003 f957 	bl	800e3b4 <tcp_output>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 80ac 	beq.w	800b270 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800b118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b122:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b126:	2b06      	cmp	r3, #6
 800b128:	f200 80a2 	bhi.w	800b270 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800b12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b132:	3301      	adds	r3, #1
 800b134:	b2da      	uxtb	r2, r3
 800b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b138:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800b13c:	e098      	b.n	800b270 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b144:	2b00      	cmp	r3, #0
 800b146:	db0f      	blt.n	800b168 <tcp_slowtmr+0x1f4>
 800b148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b14e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b152:	4293      	cmp	r3, r2
 800b154:	d008      	beq.n	800b168 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800b156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b158:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3301      	adds	r3, #1
 800b160:	b29b      	uxth	r3, r3
 800b162:	b21a      	sxth	r2, r3
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800b16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b170:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b174:	429a      	cmp	r2, r3
 800b176:	db7b      	blt.n	800b270 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b17a:	f003 fc23 	bl	800e9c4 <tcp_rexmit_rto_prepare>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d007      	beq.n	800b194 <tcp_slowtmr+0x220>
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d171      	bne.n	800b270 <tcp_slowtmr+0x2fc>
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b190:	2b00      	cmp	r3, #0
 800b192:	d06d      	beq.n	800b270 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	7d1b      	ldrb	r3, [r3, #20]
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d03a      	beq.n	800b212 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1a2:	2b0c      	cmp	r3, #12
 800b1a4:	bf28      	it	cs
 800b1a6:	230c      	movcs	r3, #12
 800b1a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b1b0:	10db      	asrs	r3, r3, #3
 800b1b2:	b21b      	sxth	r3, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b1bc:	4413      	add	r3, r2
 800b1be:	7efa      	ldrb	r2, [r7, #27]
 800b1c0:	4910      	ldr	r1, [pc, #64]	@ (800b204 <tcp_slowtmr+0x290>)
 800b1c2:	5c8a      	ldrb	r2, [r1, r2]
 800b1c4:	4093      	lsls	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	dc1a      	bgt.n	800b208 <tcp_slowtmr+0x294>
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	b21a      	sxth	r2, r3
 800b1d6:	e019      	b.n	800b20c <tcp_slowtmr+0x298>
 800b1d8:	2000d8fc 	.word	0x2000d8fc
 800b1dc:	20004aaa 	.word	0x20004aaa
 800b1e0:	2000d8f8 	.word	0x2000d8f8
 800b1e4:	08016384 	.word	0x08016384
 800b1e8:	080166c4 	.word	0x080166c4
 800b1ec:	080163c4 	.word	0x080163c4
 800b1f0:	080166f0 	.word	0x080166f0
 800b1f4:	0801671c 	.word	0x0801671c
 800b1f8:	0801674c 	.word	0x0801674c
 800b1fc:	08016780 	.word	0x08016780
 800b200:	080186b4 	.word	0x080186b4
 800b204:	080186a4 	.word	0x080186a4
 800b208:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800b212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b214:	2200      	movs	r2, #0
 800b216:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b220:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b224:	4293      	cmp	r3, r2
 800b226:	bf28      	it	cs
 800b228:	4613      	movcs	r3, r2
 800b22a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b22c:	8a7b      	ldrh	r3, [r7, #18]
 800b22e:	085b      	lsrs	r3, r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b234:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	b29b      	uxth	r3, r3
 800b246:	429a      	cmp	r2, r3
 800b248:	d206      	bcs.n	800b258 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	b29a      	uxth	r2, r3
 800b252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b254:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800b258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800b262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b264:	2200      	movs	r2, #0
 800b266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b26a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b26c:	f003 fc24 	bl	800eab8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	7d1b      	ldrb	r3, [r3, #20]
 800b274:	2b06      	cmp	r3, #6
 800b276:	d111      	bne.n	800b29c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27a:	8b5b      	ldrh	r3, [r3, #26]
 800b27c:	f003 0310 	and.w	r3, r3, #16
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00b      	beq.n	800b29c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b284:	4b92      	ldr	r3, [pc, #584]	@ (800b4d0 <tcp_slowtmr+0x55c>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	2b28      	cmp	r3, #40	@ 0x28
 800b290:	d904      	bls.n	800b29c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800b292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b296:	3301      	adds	r3, #1
 800b298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	7a5b      	ldrb	r3, [r3, #9]
 800b2a0:	f003 0308 	and.w	r3, r3, #8
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d04c      	beq.n	800b342 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d003      	beq.n	800b2b8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b2b4:	2b07      	cmp	r3, #7
 800b2b6:	d144      	bne.n	800b342 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2b8:	4b85      	ldr	r3, [pc, #532]	@ (800b4d0 <tcp_slowtmr+0x55c>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800b2cc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800b2d0:	4980      	ldr	r1, [pc, #512]	@ (800b4d4 <tcp_slowtmr+0x560>)
 800b2d2:	fba1 1303 	umull	r1, r3, r1, r3
 800b2d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d90a      	bls.n	800b2f2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800b2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800b2e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b2f0:	e027      	b.n	800b342 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2f2:	4b77      	ldr	r3, [pc, #476]	@ (800b4d0 <tcp_slowtmr+0x55c>)
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fe:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800b302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b304:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800b308:	4618      	mov	r0, r3
 800b30a:	4b73      	ldr	r3, [pc, #460]	@ (800b4d8 <tcp_slowtmr+0x564>)
 800b30c:	fb00 f303 	mul.w	r3, r0, r3
 800b310:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b312:	4970      	ldr	r1, [pc, #448]	@ (800b4d4 <tcp_slowtmr+0x560>)
 800b314:	fba1 1303 	umull	r1, r3, r1, r3
 800b318:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d911      	bls.n	800b342 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800b31e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b320:	f003 fede 	bl	800f0e0 <tcp_keepalive>
 800b324:	4603      	mov	r3, r0
 800b326:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800b32a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d107      	bne.n	800b342 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800b332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b334:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800b338:	3301      	adds	r3, #1
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33e:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 800b342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b344:	7d1b      	ldrb	r3, [r3, #20]
 800b346:	2b03      	cmp	r3, #3
 800b348:	d10b      	bne.n	800b362 <tcp_slowtmr+0x3ee>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b34a:	4b61      	ldr	r3, [pc, #388]	@ (800b4d0 <tcp_slowtmr+0x55c>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b28      	cmp	r3, #40	@ 0x28
 800b356:	d904      	bls.n	800b362 <tcp_slowtmr+0x3ee>
        ++pcb_remove;
 800b358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b35c:	3301      	adds	r3, #1
 800b35e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	7d1b      	ldrb	r3, [r3, #20]
 800b366:	2b09      	cmp	r3, #9
 800b368:	d10b      	bne.n	800b382 <tcp_slowtmr+0x40e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b36a:	4b59      	ldr	r3, [pc, #356]	@ (800b4d0 <tcp_slowtmr+0x55c>)
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	2bf0      	cmp	r3, #240	@ 0xf0
 800b376:	d904      	bls.n	800b382 <tcp_slowtmr+0x40e>
        ++pcb_remove;
 800b378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b37c:	3301      	adds	r3, #1
 800b37e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800b382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b386:	2b00      	cmp	r3, #0
 800b388:	d060      	beq.n	800b44c <tcp_slowtmr+0x4d8>
      tcp_err_fn err_fn = pcb->errf;
 800b38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b390:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800b392:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b394:	f000 fbc2 	bl	800bb1c <tcp_pcb_purge>
      if (prev != NULL) {
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d010      	beq.n	800b3c0 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b39e:	4b4f      	ldr	r3, [pc, #316]	@ (800b4dc <tcp_slowtmr+0x568>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d106      	bne.n	800b3b6 <tcp_slowtmr+0x442>
 800b3a8:	4b4d      	ldr	r3, [pc, #308]	@ (800b4e0 <tcp_slowtmr+0x56c>)
 800b3aa:	f240 526e 	movw	r2, #1390	@ 0x56e
 800b3ae:	494d      	ldr	r1, [pc, #308]	@ (800b4e4 <tcp_slowtmr+0x570>)
 800b3b0:	484d      	ldr	r0, [pc, #308]	@ (800b4e8 <tcp_slowtmr+0x574>)
 800b3b2:	f7f5 fc0b 	bl	8000bcc <printf>
        prev->next = pcb->next;
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	60da      	str	r2, [r3, #12]
 800b3be:	e00f      	b.n	800b3e0 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b3c0:	4b46      	ldr	r3, [pc, #280]	@ (800b4dc <tcp_slowtmr+0x568>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d006      	beq.n	800b3d8 <tcp_slowtmr+0x464>
 800b3ca:	4b45      	ldr	r3, [pc, #276]	@ (800b4e0 <tcp_slowtmr+0x56c>)
 800b3cc:	f240 5272 	movw	r2, #1394	@ 0x572
 800b3d0:	4946      	ldr	r1, [pc, #280]	@ (800b4ec <tcp_slowtmr+0x578>)
 800b3d2:	4845      	ldr	r0, [pc, #276]	@ (800b4e8 <tcp_slowtmr+0x574>)
 800b3d4:	f7f5 fbfa 	bl	8000bcc <printf>
        tcp_active_pcbs = pcb->next;
 800b3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b4dc <tcp_slowtmr+0x568>)
 800b3de:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800b3e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d013      	beq.n	800b410 <tcp_slowtmr+0x49c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b3f0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800b3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3f8:	8ad2      	ldrh	r2, [r2, #22]
 800b3fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3fc:	8b09      	ldrh	r1, [r1, #24]
 800b3fe:	9102      	str	r1, [sp, #8]
 800b400:	9201      	str	r2, [sp, #4]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	462b      	mov	r3, r5
 800b406:	4622      	mov	r2, r4
 800b408:	4601      	mov	r1, r0
 800b40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b40c:	f003 fdb4 	bl	800ef78 <tcp_rst>
      err_arg = pcb->callback_arg;
 800b410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	7d1b      	ldrb	r3, [r3, #20]
 800b41a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b426:	6838      	ldr	r0, [r7, #0]
 800b428:	f7ff fa1e 	bl	800a868 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b42c:	4b30      	ldr	r3, [pc, #192]	@ (800b4f0 <tcp_slowtmr+0x57c>)
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <tcp_slowtmr+0x4ce>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f06f 010c 	mvn.w	r1, #12
 800b43e:	68b8      	ldr	r0, [r7, #8]
 800b440:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b442:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f0 <tcp_slowtmr+0x57c>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d037      	beq.n	800b4ba <tcp_slowtmr+0x546>
        goto tcp_slowtmr_start;
 800b44a:	e5a6      	b.n	800af9a <tcp_slowtmr+0x26>
      prev = pcb;
 800b44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800b456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b458:	7f1b      	ldrb	r3, [r3, #28]
 800b45a:	3301      	adds	r3, #1
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b460:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b464:	7f1a      	ldrb	r2, [r3, #28]
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	7f5b      	ldrb	r3, [r3, #29]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d325      	bcc.n	800b4ba <tcp_slowtmr+0x546>
        prev->polltmr = 0;
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	2200      	movs	r2, #0
 800b472:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800b474:	4b1e      	ldr	r3, [pc, #120]	@ (800b4f0 <tcp_slowtmr+0x57c>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00b      	beq.n	800b49c <tcp_slowtmr+0x528>
 800b484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b48c:	6912      	ldr	r2, [r2, #16]
 800b48e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b490:	4610      	mov	r0, r2
 800b492:	4798      	blx	r3
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b49a:	e002      	b.n	800b4a2 <tcp_slowtmr+0x52e>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800b4a2:	4b13      	ldr	r3, [pc, #76]	@ (800b4f0 <tcp_slowtmr+0x57c>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f47f ad76 	bne.w	800af98 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b4ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <tcp_slowtmr+0x546>
          tcp_output(prev);
 800b4b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b6:	f002 ff7d 	bl	800e3b4 <tcp_output>
  while (pcb != NULL) {
 800b4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f47f ad72 	bne.w	800afa6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f4 <tcp_slowtmr+0x580>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b4cc:	e067      	b.n	800b59e <tcp_slowtmr+0x62a>
 800b4ce:	bf00      	nop
 800b4d0:	2000d8fc 	.word	0x2000d8fc
 800b4d4:	10624dd3 	.word	0x10624dd3
 800b4d8:	000124f8 	.word	0x000124f8
 800b4dc:	2000d8f8 	.word	0x2000d8f8
 800b4e0:	08016384 	.word	0x08016384
 800b4e4:	080167b8 	.word	0x080167b8
 800b4e8:	080163c4 	.word	0x080163c4
 800b4ec:	080167e4 	.word	0x080167e4
 800b4f0:	2000d8f4 	.word	0x2000d8f4
 800b4f4:	2000d908 	.word	0x2000d908
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	7d1b      	ldrb	r3, [r3, #20]
 800b4fc:	2b0a      	cmp	r3, #10
 800b4fe:	d006      	beq.n	800b50e <tcp_slowtmr+0x59a>
 800b500:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b0 <tcp_slowtmr+0x63c>)
 800b502:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 800b506:	492b      	ldr	r1, [pc, #172]	@ (800b5b4 <tcp_slowtmr+0x640>)
 800b508:	482b      	ldr	r0, [pc, #172]	@ (800b5b8 <tcp_slowtmr+0x644>)
 800b50a:	f7f5 fb5f 	bl	8000bcc <printf>
    pcb_remove = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b514:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <tcp_slowtmr+0x648>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2bf0      	cmp	r3, #240	@ 0xf0
 800b520:	d904      	bls.n	800b52c <tcp_slowtmr+0x5b8>
      ++pcb_remove;
 800b522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b526:	3301      	adds	r3, #1
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b530:	2b00      	cmp	r3, #0
 800b532:	d02f      	beq.n	800b594 <tcp_slowtmr+0x620>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b534:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b536:	f000 faf1 	bl	800bb1c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <tcp_slowtmr+0x5ee>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b540:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c0 <tcp_slowtmr+0x64c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b546:	429a      	cmp	r2, r3
 800b548:	d106      	bne.n	800b558 <tcp_slowtmr+0x5e4>
 800b54a:	4b19      	ldr	r3, [pc, #100]	@ (800b5b0 <tcp_slowtmr+0x63c>)
 800b54c:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
 800b550:	491c      	ldr	r1, [pc, #112]	@ (800b5c4 <tcp_slowtmr+0x650>)
 800b552:	4819      	ldr	r0, [pc, #100]	@ (800b5b8 <tcp_slowtmr+0x644>)
 800b554:	f7f5 fb3a 	bl	8000bcc <printf>
        prev->next = pcb->next;
 800b558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55a:	68da      	ldr	r2, [r3, #12]
 800b55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55e:	60da      	str	r2, [r3, #12]
 800b560:	e00f      	b.n	800b582 <tcp_slowtmr+0x60e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b562:	4b17      	ldr	r3, [pc, #92]	@ (800b5c0 <tcp_slowtmr+0x64c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d006      	beq.n	800b57a <tcp_slowtmr+0x606>
 800b56c:	4b10      	ldr	r3, [pc, #64]	@ (800b5b0 <tcp_slowtmr+0x63c>)
 800b56e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800b572:	4915      	ldr	r1, [pc, #84]	@ (800b5c8 <tcp_slowtmr+0x654>)
 800b574:	4810      	ldr	r0, [pc, #64]	@ (800b5b8 <tcp_slowtmr+0x644>)
 800b576:	f7f5 fb29 	bl	8000bcc <printf>
        tcp_tw_pcbs = pcb->next;
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	4a10      	ldr	r2, [pc, #64]	@ (800b5c0 <tcp_slowtmr+0x64c>)
 800b580:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b584:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b58c:	69f8      	ldr	r0, [r7, #28]
 800b58e:	f7ff f96b 	bl	800a868 <tcp_free>
 800b592:	e004      	b.n	800b59e <tcp_slowtmr+0x62a>
    } else {
      prev = pcb;
 800b594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b596:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1a9      	bne.n	800b4f8 <tcp_slowtmr+0x584>
    }
  }
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	3730      	adds	r7, #48	@ 0x30
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	08016384 	.word	0x08016384
 800b5b4:	08016810 	.word	0x08016810
 800b5b8:	080163c4 	.word	0x080163c4
 800b5bc:	2000d8fc 	.word	0x2000d8fc
 800b5c0:	2000d908 	.word	0x2000d908
 800b5c4:	08016840 	.word	0x08016840
 800b5c8:	08016868 	.word	0x08016868

0800b5cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b5d2:	4b2d      	ldr	r3, [pc, #180]	@ (800b688 <tcp_fasttmr+0xbc>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b2b      	ldr	r3, [pc, #172]	@ (800b688 <tcp_fasttmr+0xbc>)
 800b5dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b5de:	4b2b      	ldr	r3, [pc, #172]	@ (800b68c <tcp_fasttmr+0xc0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b5e4:	e048      	b.n	800b678 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7f9a      	ldrb	r2, [r3, #30]
 800b5ea:	4b27      	ldr	r3, [pc, #156]	@ (800b688 <tcp_fasttmr+0xbc>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d03f      	beq.n	800b672 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b5f2:	4b25      	ldr	r3, [pc, #148]	@ (800b688 <tcp_fasttmr+0xbc>)
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8b5b      	ldrh	r3, [r3, #26]
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d010      	beq.n	800b628 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	8b5b      	ldrh	r3, [r3, #26]
 800b60a:	f043 0302 	orr.w	r3, r3, #2
 800b60e:	b29a      	uxth	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f002 fecd 	bl	800e3b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8b5b      	ldrh	r3, [r3, #26]
 800b61e:	f023 0303 	bic.w	r3, r3, #3
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8b5b      	ldrh	r3, [r3, #26]
 800b62c:	f003 0308 	and.w	r3, r3, #8
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	8b5b      	ldrh	r3, [r3, #26]
 800b638:	f023 0308 	bic.w	r3, r3, #8
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff faa4 	bl	800ab90 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b656:	4b0e      	ldr	r3, [pc, #56]	@ (800b690 <tcp_fasttmr+0xc4>)
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f819 	bl	800b694 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b662:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <tcp_fasttmr+0xc4>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d000      	beq.n	800b66c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b66a:	e7b8      	b.n	800b5de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	607b      	str	r3, [r7, #4]
 800b670:	e002      	b.n	800b678 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1b3      	bne.n	800b5e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20004aaa 	.word	0x20004aaa
 800b68c:	2000d8f8 	.word	0x2000d8f8
 800b690:	2000d8f4 	.word	0x2000d8f4

0800b694 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <tcp_process_refused_data+0x1a>
 800b6a2:	4836      	ldr	r0, [pc, #216]	@ (800b77c <tcp_process_refused_data+0xe8>)
 800b6a4:	f7f5 fa92 	bl	8000bcc <printf>
 800b6a8:	f06f 030f 	mvn.w	r3, #15
 800b6ac:	e061      	b.n	800b772 <tcp_process_refused_data+0xde>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6b2:	7b5b      	ldrb	r3, [r3, #13]
 800b6b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <tcp_process_refused_data+0x50>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	47a0      	blx	r4
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]
 800b6e2:	e007      	b.n	800b6f4 <tcp_process_refused_data+0x60>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f000 f876 	bl	800b7dc <tcp_recv_null>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d12b      	bne.n	800b754 <tcp_process_refused_data+0xc0>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b6fc:	7bbb      	ldrb	r3, [r7, #14]
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b00      	cmp	r3, #0
 800b704:	d034      	beq.n	800b770 <tcp_process_refused_data+0xdc>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b70a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800b70e:	4293      	cmp	r3, r2
 800b710:	d005      	beq.n	800b71e <tcp_process_refused_data+0x8a>
          pcb->rcv_wnd++;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b716:	3301      	adds	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00b      	beq.n	800b740 <tcp_process_refused_data+0xac>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6918      	ldr	r0, [r3, #16]
 800b732:	2300      	movs	r3, #0
 800b734:	2200      	movs	r2, #0
 800b736:	6879      	ldr	r1, [r7, #4]
 800b738:	47a0      	blx	r4
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]
 800b73e:	e001      	b.n	800b744 <tcp_process_refused_data+0xb0>
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b748:	f113 0f0d 	cmn.w	r3, #13
 800b74c:	d110      	bne.n	800b770 <tcp_process_refused_data+0xdc>
          return ERR_ABRT;
 800b74e:	f06f 030c 	mvn.w	r3, #12
 800b752:	e00e      	b.n	800b772 <tcp_process_refused_data+0xde>
        }
      }
    } else if (err == ERR_ABRT) {
 800b754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b758:	f113 0f0d 	cmn.w	r3, #13
 800b75c:	d102      	bne.n	800b764 <tcp_process_refused_data+0xd0>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b75e:	f06f 030c 	mvn.w	r3, #12
 800b762:	e006      	b.n	800b772 <tcp_process_refused_data+0xde>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800b76a:	f06f 0304 	mvn.w	r3, #4
 800b76e:	e000      	b.n	800b772 <tcp_process_refused_data+0xde>
    }
  }
  return ERR_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	bd90      	pop	{r4, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	08016890 	.word	0x08016890

0800b780 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b788:	e007      	b.n	800b79a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f80a 	bl	800b7aa <tcp_seg_free>
    seg = next;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1f4      	bne.n	800b78a <tcp_segs_free+0xa>
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00c      	beq.n	800b7d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d004      	beq.n	800b7ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe fd73 	bl	800a2b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b7ca:	6879      	ldr	r1, [r7, #4]
 800b7cc:	2003      	movs	r0, #3
 800b7ce:	f7fd ff77 	bl	80096c0 <memp_free>
  }
}
 800b7d2:	bf00      	nop
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <tcp_recv_null+0x20>
 800b7f0:	4810      	ldr	r0, [pc, #64]	@ (800b834 <tcp_recv_null+0x58>)
 800b7f2:	f7f5 f9eb 	bl	8000bcc <printf>
 800b7f6:	f06f 030f 	mvn.w	r3, #15
 800b7fa:	e016      	b.n	800b82a <tcp_recv_null+0x4e>

  if (p != NULL) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d009      	beq.n	800b816 <tcp_recv_null+0x3a>
    tcp_recved(pcb, p->tot_len);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	891b      	ldrh	r3, [r3, #8]
 800b806:	4619      	mov	r1, r3
 800b808:	68b8      	ldr	r0, [r7, #8]
 800b80a:	f7ff fb65 	bl	800aed8 <tcp_recved>
    pbuf_free(p);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7fe fd4e 	bl	800a2b0 <pbuf_free>
 800b814:	e008      	b.n	800b828 <tcp_recv_null+0x4c>
  } else if (err == ERR_OK) {
 800b816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d104      	bne.n	800b828 <tcp_recv_null+0x4c>
    return tcp_close(pcb);
 800b81e:	68b8      	ldr	r0, [r7, #8]
 800b820:	f7ff fa20 	bl	800ac64 <tcp_close>
 800b824:	4603      	mov	r3, r0
 800b826:	e000      	b.n	800b82a <tcp_recv_null+0x4e>
  }
  return ERR_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	080168d4 	.word	0x080168d4

0800b838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b846:	2b00      	cmp	r3, #0
 800b848:	db01      	blt.n	800b84e <tcp_kill_prio+0x16>
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	e000      	b.n	800b850 <tcp_kill_prio+0x18>
 800b84e:	237f      	movs	r3, #127	@ 0x7f
 800b850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b852:	7afb      	ldrb	r3, [r7, #11]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d034      	beq.n	800b8c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b866:	4b19      	ldr	r3, [pc, #100]	@ (800b8cc <tcp_kill_prio+0x94>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	e01f      	b.n	800b8ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	7d5b      	ldrb	r3, [r3, #21]
 800b872:	7afa      	ldrb	r2, [r7, #11]
 800b874:	429a      	cmp	r2, r3
 800b876:	d80c      	bhi.n	800b892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b87c:	7afa      	ldrb	r2, [r7, #11]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d112      	bne.n	800b8a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b882:	4b13      	ldr	r3, [pc, #76]	@ (800b8d0 <tcp_kill_prio+0x98>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d80a      	bhi.n	800b8a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b892:	4b0f      	ldr	r3, [pc, #60]	@ (800b8d0 <tcp_kill_prio+0x98>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	7d5b      	ldrb	r3, [r3, #21]
 800b8a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1dc      	bne.n	800b86e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d004      	beq.n	800b8c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b8ba:	6938      	ldr	r0, [r7, #16]
 800b8bc:	f7ff faa6 	bl	800ae0c <tcp_abort>
 800b8c0:	e000      	b.n	800b8c4 <tcp_kill_prio+0x8c>
    return;
 800b8c2:	bf00      	nop
  }
}
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	2000d8f8 	.word	0x2000d8f8
 800b8d0:	2000d8fc 	.word	0x2000d8fc

0800b8d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d009      	beq.n	800b8f8 <tcp_kill_state+0x24>
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	2b09      	cmp	r3, #9
 800b8e8:	d006      	beq.n	800b8f8 <tcp_kill_state+0x24>
 800b8ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b954 <tcp_kill_state+0x80>)
 800b8ec:	f240 62de 	movw	r2, #1758	@ 0x6de
 800b8f0:	4919      	ldr	r1, [pc, #100]	@ (800b958 <tcp_kill_state+0x84>)
 800b8f2:	481a      	ldr	r0, [pc, #104]	@ (800b95c <tcp_kill_state+0x88>)
 800b8f4:	f7f5 f96a 	bl	8000bcc <printf>

  inactivity = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b900:	4b17      	ldr	r3, [pc, #92]	@ (800b960 <tcp_kill_state+0x8c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	e017      	b.n	800b938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	7d1b      	ldrb	r3, [r3, #20]
 800b90c:	79fa      	ldrb	r2, [r7, #7]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d10f      	bne.n	800b932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b912:	4b14      	ldr	r3, [pc, #80]	@ (800b964 <tcp_kill_state+0x90>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d807      	bhi.n	800b932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b922:	4b10      	ldr	r3, [pc, #64]	@ (800b964 <tcp_kill_state+0x90>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	617b      	str	r3, [r7, #20]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e4      	bne.n	800b908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b944:	2100      	movs	r1, #0
 800b946:	6938      	ldr	r0, [r7, #16]
 800b948:	f7ff f9b0 	bl	800acac <tcp_abandon>
  }
}
 800b94c:	bf00      	nop
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	08016384 	.word	0x08016384
 800b958:	080168f0 	.word	0x080168f0
 800b95c:	080163c4 	.word	0x080163c4
 800b960:	2000d8f8 	.word	0x2000d8f8
 800b964:	2000d8fc 	.word	0x2000d8fc

0800b968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b976:	4b12      	ldr	r3, [pc, #72]	@ (800b9c0 <tcp_kill_timewait+0x58>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	e012      	b.n	800b9a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b97e:	4b11      	ldr	r3, [pc, #68]	@ (800b9c4 <tcp_kill_timewait+0x5c>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d807      	bhi.n	800b99e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b98e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c4 <tcp_kill_timewait+0x5c>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1e9      	bne.n	800b97e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b9b0:	68b8      	ldr	r0, [r7, #8]
 800b9b2:	f7ff fa2b 	bl	800ae0c <tcp_abort>
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000d908 	.word	0x2000d908
 800b9c4:	2000d8fc 	.word	0x2000d8fc

0800b9c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b9ce:	4b10      	ldr	r3, [pc, #64]	@ (800ba10 <tcp_handle_closepend+0x48>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b9d4:	e014      	b.n	800ba00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	8b5b      	ldrh	r3, [r3, #26]
 800b9e0:	f003 0308 	and.w	r3, r3, #8
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	8b5b      	ldrh	r3, [r3, #26]
 800b9ec:	f023 0308 	bic.w	r3, r3, #8
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff f8ca 	bl	800ab90 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e7      	bne.n	800b9d6 <tcp_handle_closepend+0xe>
  }
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	2000d8f8 	.word	0x2000d8f8

0800ba14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba1e:	2001      	movs	r0, #1
 800ba20:	f7fd fe0a 	bl	8009638 <memp_malloc>
 800ba24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d126      	bne.n	800ba7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ba2c:	f7ff ffcc 	bl	800b9c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ba30:	f7ff ff9a 	bl	800b968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba34:	2001      	movs	r0, #1
 800ba36:	f7fd fdff 	bl	8009638 <memp_malloc>
 800ba3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11b      	bne.n	800ba7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ba42:	2009      	movs	r0, #9
 800ba44:	f7ff ff46 	bl	800b8d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba48:	2001      	movs	r0, #1
 800ba4a:	f7fd fdf5 	bl	8009638 <memp_malloc>
 800ba4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d111      	bne.n	800ba7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ba56:	2008      	movs	r0, #8
 800ba58:	f7ff ff3c 	bl	800b8d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f7fd fdeb 	bl	8009638 <memp_malloc>
 800ba62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d107      	bne.n	800ba7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fee3 	bl	800b838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ba72:	2001      	movs	r0, #1
 800ba74:	f7fd fde0 	bl	8009638 <memp_malloc>
 800ba78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d03f      	beq.n	800bb00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ba80:	2298      	movs	r2, #152	@ 0x98
 800ba82:	2100      	movs	r1, #0
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f008 fec8 	bl	801481a <memset>
    pcb->prio = prio;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ba96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f640 3268 	movw	r2, #2920	@ 0xb68
 800baa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	22ff      	movs	r2, #255	@ 0xff
 800baae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bab6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2206      	movs	r2, #6
 800babc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2206      	movs	r2, #6
 800bac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bacc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	@ (800bb0c <tcp_alloc+0xf8>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bade:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <tcp_alloc+0xfc>)
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800baec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4a08      	ldr	r2, [pc, #32]	@ (800bb14 <tcp_alloc+0x100>)
 800baf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4a07      	ldr	r2, [pc, #28]	@ (800bb18 <tcp_alloc+0x104>)
 800bafc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bb00:	68fb      	ldr	r3, [r7, #12]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	2000d8fc 	.word	0x2000d8fc
 800bb10:	20004aaa 	.word	0x20004aaa
 800bb14:	0800b7dd 	.word	0x0800b7dd
 800bb18:	006ddd00 	.word	0x006ddd00

0800bb1c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d103      	bne.n	800bb32 <tcp_pcb_purge+0x16>
 800bb2a:	481c      	ldr	r0, [pc, #112]	@ (800bb9c <tcp_pcb_purge+0x80>)
 800bb2c:	f7f5 f84e 	bl	8000bcc <printf>
 800bb30:	e030      	b.n	800bb94 <tcp_pcb_purge+0x78>

  if (pcb->state != CLOSED &&
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7d1b      	ldrb	r3, [r3, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d02c      	beq.n	800bb94 <tcp_pcb_purge+0x78>
      pcb->state != TIME_WAIT &&
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bb3e:	2b0a      	cmp	r3, #10
 800bb40:	d028      	beq.n	800bb94 <tcp_pcb_purge+0x78>
      pcb->state != LISTEN) {
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d024      	beq.n	800bb94 <tcp_pcb_purge+0x78>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d007      	beq.n	800bb62 <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fbaa 	bl	800a2b0 <pbuf_free>
      pcb->refused_data = NULL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb68:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff fe06 	bl	800b780 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fe01 	bl	800b780 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	080169b0 	.word	0x080169b0

0800bba0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d106      	bne.n	800bbbe <tcp_pcb_remove+0x1e>
 800bbb0:	4b38      	ldr	r3, [pc, #224]	@ (800bc94 <tcp_pcb_remove+0xf4>)
 800bbb2:	f640 0287 	movw	r2, #2183	@ 0x887
 800bbb6:	4938      	ldr	r1, [pc, #224]	@ (800bc98 <tcp_pcb_remove+0xf8>)
 800bbb8:	4838      	ldr	r0, [pc, #224]	@ (800bc9c <tcp_pcb_remove+0xfc>)
 800bbba:	f7f5 f807 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d106      	bne.n	800bbd2 <tcp_pcb_remove+0x32>
 800bbc4:	4b33      	ldr	r3, [pc, #204]	@ (800bc94 <tcp_pcb_remove+0xf4>)
 800bbc6:	f640 0288 	movw	r2, #2184	@ 0x888
 800bbca:	4935      	ldr	r1, [pc, #212]	@ (800bca0 <tcp_pcb_remove+0x100>)
 800bbcc:	4833      	ldr	r0, [pc, #204]	@ (800bc9c <tcp_pcb_remove+0xfc>)
 800bbce:	f7f4 fffd 	bl	8000bcc <printf>

  TCP_RMV(pcblist, pcb);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d105      	bne.n	800bbe8 <tcp_pcb_remove+0x48>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68da      	ldr	r2, [r3, #12]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e013      	b.n	800bc10 <tcp_pcb_remove+0x70>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	e00c      	b.n	800bc0a <tcp_pcb_remove+0x6a>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d104      	bne.n	800bc04 <tcp_pcb_remove+0x64>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	60da      	str	r2, [r3, #12]
 800bc02:	e005      	b.n	800bc10 <tcp_pcb_remove+0x70>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1ef      	bne.n	800bbf0 <tcp_pcb_remove+0x50>
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2200      	movs	r2, #0
 800bc14:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f7ff ff80 	bl	800bb1c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	7d1b      	ldrb	r3, [r3, #20]
 800bc20:	2b0a      	cmp	r3, #10
 800bc22:	d013      	beq.n	800bc4c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d00f      	beq.n	800bc4c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	8b5b      	ldrh	r3, [r3, #26]
 800bc30:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	8b5b      	ldrh	r3, [r3, #26]
 800bc3c:	f043 0302 	orr.w	r3, r3, #2
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bc46:	6838      	ldr	r0, [r7, #0]
 800bc48:	f002 fbb4 	bl	800e3b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d015      	beq.n	800bc80 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <tcp_pcb_remove+0xca>
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc94 <tcp_pcb_remove+0xf4>)
 800bc5e:	f640 0297 	movw	r2, #2199	@ 0x897
 800bc62:	4910      	ldr	r1, [pc, #64]	@ (800bca4 <tcp_pcb_remove+0x104>)
 800bc64:	480d      	ldr	r0, [pc, #52]	@ (800bc9c <tcp_pcb_remove+0xfc>)
 800bc66:	f7f4 ffb1 	bl	8000bcc <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <tcp_pcb_remove+0xe0>
 800bc72:	4b08      	ldr	r3, [pc, #32]	@ (800bc94 <tcp_pcb_remove+0xf4>)
 800bc74:	f640 0298 	movw	r2, #2200	@ 0x898
 800bc78:	490b      	ldr	r1, [pc, #44]	@ (800bca8 <tcp_pcb_remove+0x108>)
 800bc7a:	4808      	ldr	r0, [pc, #32]	@ (800bc9c <tcp_pcb_remove+0xfc>)
 800bc7c:	f7f4 ffa6 	bl	8000bcc <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2200      	movs	r2, #0
 800bc84:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	08016384 	.word	0x08016384
 800bc98:	080169cc 	.word	0x080169cc
 800bc9c:	080163c4 	.word	0x080163c4
 800bca0:	080169e8 	.word	0x080169e8
 800bca4:	08016a08 	.word	0x08016a08
 800bca8:	08016a20 	.word	0x08016a20

0800bcac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d106      	bne.n	800bcc8 <tcp_next_iss+0x1c>
 800bcba:	4b0a      	ldr	r3, [pc, #40]	@ (800bce4 <tcp_next_iss+0x38>)
 800bcbc:	f640 02b3 	movw	r2, #2227	@ 0x8b3
 800bcc0:	4909      	ldr	r1, [pc, #36]	@ (800bce8 <tcp_next_iss+0x3c>)
 800bcc2:	480a      	ldr	r0, [pc, #40]	@ (800bcec <tcp_next_iss+0x40>)
 800bcc4:	f7f4 ff82 	bl	8000bcc <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bcc8:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <tcp_next_iss+0x44>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b09      	ldr	r3, [pc, #36]	@ (800bcf4 <tcp_next_iss+0x48>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	4a07      	ldr	r2, [pc, #28]	@ (800bcf0 <tcp_next_iss+0x44>)
 800bcd4:	6013      	str	r3, [r2, #0]
  return iss;
 800bcd6:	4b06      	ldr	r3, [pc, #24]	@ (800bcf0 <tcp_next_iss+0x44>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	08016384 	.word	0x08016384
 800bce8:	08016a3c 	.word	0x08016a3c
 800bcec:	080163c4 	.word	0x080163c4
 800bcf0:	20000014 	.word	0x20000014
 800bcf4:	2000d8fc 	.word	0x2000d8fc

0800bcf8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <tcp_eff_send_mss_netif+0x22>
 800bd0c:	4b14      	ldr	r3, [pc, #80]	@ (800bd60 <tcp_eff_send_mss_netif+0x68>)
 800bd0e:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 800bd12:	4914      	ldr	r1, [pc, #80]	@ (800bd64 <tcp_eff_send_mss_netif+0x6c>)
 800bd14:	4814      	ldr	r0, [pc, #80]	@ (800bd68 <tcp_eff_send_mss_netif+0x70>)
 800bd16:	f7f4 ff59 	bl	8000bcc <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bd20:	89fb      	ldrh	r3, [r7, #14]
 800bd22:	e019      	b.n	800bd58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bd28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bd2a:	8afb      	ldrh	r3, [r7, #22]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d012      	beq.n	800bd56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bd30:	2328      	movs	r3, #40	@ 0x28
 800bd32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bd34:	8afa      	ldrh	r2, [r7, #22]
 800bd36:	8abb      	ldrh	r3, [r7, #20]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d904      	bls.n	800bd46 <tcp_eff_send_mss_netif+0x4e>
 800bd3c:	8afa      	ldrh	r2, [r7, #22]
 800bd3e:	8abb      	ldrh	r3, [r7, #20]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	e000      	b.n	800bd48 <tcp_eff_send_mss_netif+0x50>
 800bd46:	2300      	movs	r3, #0
 800bd48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bd4a:	8a7a      	ldrh	r2, [r7, #18]
 800bd4c:	89fb      	ldrh	r3, [r7, #14]
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	bf28      	it	cs
 800bd52:	4613      	movcs	r3, r2
 800bd54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bd56:	89fb      	ldrh	r3, [r7, #14]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	08016384 	.word	0x08016384
 800bd64:	08016a58 	.word	0x08016a58
 800bd68:	080163c4 	.word	0x080163c4

0800bd6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d119      	bne.n	800bdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bd80:	4b10      	ldr	r3, [pc, #64]	@ (800bdc4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bd82:	f640 1204 	movw	r2, #2308	@ 0x904
 800bd86:	4910      	ldr	r1, [pc, #64]	@ (800bdc8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bd88:	4810      	ldr	r0, [pc, #64]	@ (800bdcc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bd8a:	f7f4 ff1f 	bl	8000bcc <printf>

  while (pcb != NULL) {
 800bd8e:	e011      	b.n	800bdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d108      	bne.n	800bdae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff f832 	bl	800ae0c <tcp_abort>
      pcb = next;
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	e002      	b.n	800bdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1ea      	bne.n	800bd90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bdba:	bf00      	nop
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	08016384 	.word	0x08016384
 800bdc8:	08016a80 	.word	0x08016a80
 800bdcc:	080163c4 	.word	0x080163c4

0800bdd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d02a      	beq.n	800be36 <tcp_netif_ip_addr_changed+0x66>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d026      	beq.n	800be36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bde8:	4b15      	ldr	r3, [pc, #84]	@ (800be40 <tcp_netif_ip_addr_changed+0x70>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff ffbc 	bl	800bd6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bdf4:	4b13      	ldr	r3, [pc, #76]	@ (800be44 <tcp_netif_ip_addr_changed+0x74>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff ffb6 	bl	800bd6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d017      	beq.n	800be36 <tcp_netif_ip_addr_changed+0x66>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d013      	beq.n	800be36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be0e:	4b0e      	ldr	r3, [pc, #56]	@ (800be48 <tcp_netif_ip_addr_changed+0x78>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	e00c      	b.n	800be30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d103      	bne.n	800be2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1ef      	bne.n	800be16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800be36:	bf00      	nop
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2000d8f8 	.word	0x2000d8f8
 800be44:	2000d904 	.word	0x2000d904
 800be48:	2000d900 	.word	0x2000d900

0800be4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800be4c:	b590      	push	{r4, r7, lr}
 800be4e:	b08d      	sub	sp, #52	@ 0x34
 800be50:	af04      	add	r7, sp, #16
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d105      	bne.n	800be68 <tcp_input+0x1c>
 800be5c:	4b8b      	ldr	r3, [pc, #556]	@ (800c08c <tcp_input+0x240>)
 800be5e:	2283      	movs	r2, #131	@ 0x83
 800be60:	498b      	ldr	r1, [pc, #556]	@ (800c090 <tcp_input+0x244>)
 800be62:	488c      	ldr	r0, [pc, #560]	@ (800c094 <tcp_input+0x248>)
 800be64:	f7f4 feb2 	bl	8000bcc <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	4a8a      	ldr	r2, [pc, #552]	@ (800c098 <tcp_input+0x24c>)
 800be6e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	2b13      	cmp	r3, #19
 800be76:	f240 83e1 	bls.w	800c63c <tcp_input+0x7f0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be7a:	4b88      	ldr	r3, [pc, #544]	@ (800c09c <tcp_input+0x250>)
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	4a87      	ldr	r2, [pc, #540]	@ (800c09c <tcp_input+0x250>)
 800be80:	6812      	ldr	r2, [r2, #0]
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f007 fb29 	bl	80134dc <ip4_addr_isbroadcast_u32>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 83d7 	bne.w	800c640 <tcp_input+0x7f4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800be92:	4b82      	ldr	r3, [pc, #520]	@ (800c09c <tcp_input+0x250>)
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800be9a:	2be0      	cmp	r3, #224	@ 0xe0
 800be9c:	f000 83d0 	beq.w	800c640 <tcp_input+0x7f4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	891a      	ldrh	r2, [r3, #8]
 800bea4:	4b7e      	ldr	r3, [pc, #504]	@ (800c0a0 <tcp_input+0x254>)
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	4b7e      	ldr	r3, [pc, #504]	@ (800c0a4 <tcp_input+0x258>)
 800beaa:	2106      	movs	r1, #6
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fc feed 	bl	8008c8c <ip_chksum_pseudo>
 800beb2:	4603      	mov	r3, r0
 800beb4:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800beb6:	8a3b      	ldrh	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f040 83c3 	bne.w	800c644 <tcp_input+0x7f8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bebe:	4b76      	ldr	r3, [pc, #472]	@ (800c098 <tcp_input+0x24c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	899b      	ldrh	r3, [r3, #12]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fc fdae 	bl	8008a28 <lwip_htons>
 800becc:	4603      	mov	r3, r0
 800bece:	0b1b      	lsrs	r3, r3, #12
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	2b13      	cmp	r3, #19
 800bedc:	f240 83b4 	bls.w	800c648 <tcp_input+0x7fc>
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	891b      	ldrh	r3, [r3, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	f200 83ad 	bhi.w	800c648 <tcp_input+0x7fc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b14      	subs	r3, #20
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	4b6c      	ldr	r3, [pc, #432]	@ (800c0a8 <tcp_input+0x25c>)
 800bef8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800befa:	4b6c      	ldr	r3, [pc, #432]	@ (800c0ac <tcp_input+0x260>)
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	895a      	ldrh	r2, [r3, #10]
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d309      	bcc.n	800bf20 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bf0c:	4b66      	ldr	r3, [pc, #408]	@ (800c0a8 <tcp_input+0x25c>)
 800bf0e:	881a      	ldrh	r2, [r3, #0]
 800bf10:	4b67      	ldr	r3, [pc, #412]	@ (800c0b0 <tcp_input+0x264>)
 800bf12:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7fe f947 	bl	800a1ac <pbuf_remove_header>
 800bf1e:	e04e      	b.n	800bfbe <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d105      	bne.n	800bf34 <tcp_input+0xe8>
 800bf28:	4b58      	ldr	r3, [pc, #352]	@ (800c08c <tcp_input+0x240>)
 800bf2a:	22c2      	movs	r2, #194	@ 0xc2
 800bf2c:	4961      	ldr	r1, [pc, #388]	@ (800c0b4 <tcp_input+0x268>)
 800bf2e:	4859      	ldr	r0, [pc, #356]	@ (800c094 <tcp_input+0x248>)
 800bf30:	f7f4 fe4c 	bl	8000bcc <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bf34:	2114      	movs	r1, #20
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7fe f938 	bl	800a1ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	895a      	ldrh	r2, [r3, #10]
 800bf40:	4b5b      	ldr	r3, [pc, #364]	@ (800c0b0 <tcp_input+0x264>)
 800bf42:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bf44:	4b58      	ldr	r3, [pc, #352]	@ (800c0a8 <tcp_input+0x25c>)
 800bf46:	881a      	ldrh	r2, [r3, #0]
 800bf48:	4b59      	ldr	r3, [pc, #356]	@ (800c0b0 <tcp_input+0x264>)
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bf50:	4b57      	ldr	r3, [pc, #348]	@ (800c0b0 <tcp_input+0x264>)
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7fe f928 	bl	800a1ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	895b      	ldrh	r3, [r3, #10]
 800bf62:	89ba      	ldrh	r2, [r7, #12]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	f200 8371 	bhi.w	800c64c <tcp_input+0x800>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4a4e      	ldr	r2, [pc, #312]	@ (800c0ac <tcp_input+0x260>)
 800bf72:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	89ba      	ldrh	r2, [r7, #12]
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe f915 	bl	800a1ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	891a      	ldrh	r2, [r3, #8]
 800bf86:	89bb      	ldrh	r3, [r7, #12]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	895b      	ldrh	r3, [r3, #10]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d005      	beq.n	800bfa4 <tcp_input+0x158>
 800bf98:	4b3c      	ldr	r3, [pc, #240]	@ (800c08c <tcp_input+0x240>)
 800bf9a:	22df      	movs	r2, #223	@ 0xdf
 800bf9c:	4946      	ldr	r1, [pc, #280]	@ (800c0b8 <tcp_input+0x26c>)
 800bf9e:	483d      	ldr	r0, [pc, #244]	@ (800c094 <tcp_input+0x248>)
 800bfa0:	f7f4 fe14 	bl	8000bcc <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	891a      	ldrh	r2, [r3, #8]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	891b      	ldrh	r3, [r3, #8]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d005      	beq.n	800bfbe <tcp_input+0x172>
 800bfb2:	4b36      	ldr	r3, [pc, #216]	@ (800c08c <tcp_input+0x240>)
 800bfb4:	22e0      	movs	r2, #224	@ 0xe0
 800bfb6:	4941      	ldr	r1, [pc, #260]	@ (800c0bc <tcp_input+0x270>)
 800bfb8:	4836      	ldr	r0, [pc, #216]	@ (800c094 <tcp_input+0x248>)
 800bfba:	f7f4 fe07 	bl	8000bcc <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bfbe:	4b36      	ldr	r3, [pc, #216]	@ (800c098 <tcp_input+0x24c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	4a34      	ldr	r2, [pc, #208]	@ (800c098 <tcp_input+0x24c>)
 800bfc8:	6814      	ldr	r4, [r2, #0]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fc fd2c 	bl	8008a28 <lwip_htons>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bfd4:	4b30      	ldr	r3, [pc, #192]	@ (800c098 <tcp_input+0x24c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	885b      	ldrh	r3, [r3, #2]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4a2e      	ldr	r2, [pc, #184]	@ (800c098 <tcp_input+0x24c>)
 800bfde:	6814      	ldr	r4, [r2, #0]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fc fd21 	bl	8008a28 <lwip_htons>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bfea:	4b2b      	ldr	r3, [pc, #172]	@ (800c098 <tcp_input+0x24c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	4a29      	ldr	r2, [pc, #164]	@ (800c098 <tcp_input+0x24c>)
 800bff2:	6814      	ldr	r4, [r2, #0]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fc fd2c 	bl	8008a52 <lwip_htonl>
 800bffa:	4603      	mov	r3, r0
 800bffc:	6063      	str	r3, [r4, #4]
 800bffe:	6863      	ldr	r3, [r4, #4]
 800c000:	4a2f      	ldr	r2, [pc, #188]	@ (800c0c0 <tcp_input+0x274>)
 800c002:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c004:	4b24      	ldr	r3, [pc, #144]	@ (800c098 <tcp_input+0x24c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	4a23      	ldr	r2, [pc, #140]	@ (800c098 <tcp_input+0x24c>)
 800c00c:	6814      	ldr	r4, [r2, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fc fd1f 	bl	8008a52 <lwip_htonl>
 800c014:	4603      	mov	r3, r0
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	68a3      	ldr	r3, [r4, #8]
 800c01a:	4a2a      	ldr	r2, [pc, #168]	@ (800c0c4 <tcp_input+0x278>)
 800c01c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c01e:	4b1e      	ldr	r3, [pc, #120]	@ (800c098 <tcp_input+0x24c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	89db      	ldrh	r3, [r3, #14]
 800c024:	b29b      	uxth	r3, r3
 800c026:	4a1c      	ldr	r2, [pc, #112]	@ (800c098 <tcp_input+0x24c>)
 800c028:	6814      	ldr	r4, [r2, #0]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fc fcfc 	bl	8008a28 <lwip_htons>
 800c030:	4603      	mov	r3, r0
 800c032:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c034:	4b18      	ldr	r3, [pc, #96]	@ (800c098 <tcp_input+0x24c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	899b      	ldrh	r3, [r3, #12]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fc fcf3 	bl	8008a28 <lwip_htons>
 800c042:	4603      	mov	r3, r0
 800c044:	b2db      	uxtb	r3, r3
 800c046:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c8 <tcp_input+0x27c>)
 800c04e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	891a      	ldrh	r2, [r3, #8]
 800c054:	4b1d      	ldr	r3, [pc, #116]	@ (800c0cc <tcp_input+0x280>)
 800c056:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c058:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c8 <tcp_input+0x27c>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 0303 	and.w	r3, r3, #3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00c      	beq.n	800c07e <tcp_input+0x232>
    tcplen++;
 800c064:	4b19      	ldr	r3, [pc, #100]	@ (800c0cc <tcp_input+0x280>)
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	4b17      	ldr	r3, [pc, #92]	@ (800c0cc <tcp_input+0x280>)
 800c06e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	891a      	ldrh	r2, [r3, #8]
 800c074:	4b15      	ldr	r3, [pc, #84]	@ (800c0cc <tcp_input+0x280>)
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	429a      	cmp	r2, r3
 800c07a:	f200 82e9 	bhi.w	800c650 <tcp_input+0x804>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c082:	4b13      	ldr	r3, [pc, #76]	@ (800c0d0 <tcp_input+0x284>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	61bb      	str	r3, [r7, #24]
 800c088:	e09b      	b.n	800c1c2 <tcp_input+0x376>
 800c08a:	bf00      	nop
 800c08c:	08016ab4 	.word	0x08016ab4
 800c090:	08016ae4 	.word	0x08016ae4
 800c094:	08016afc 	.word	0x08016afc
 800c098:	20004ac0 	.word	0x20004ac0
 800c09c:	200054ec 	.word	0x200054ec
 800c0a0:	20005500 	.word	0x20005500
 800c0a4:	200054fc 	.word	0x200054fc
 800c0a8:	20004ac4 	.word	0x20004ac4
 800c0ac:	20004ac8 	.word	0x20004ac8
 800c0b0:	20004ac6 	.word	0x20004ac6
 800c0b4:	08016b24 	.word	0x08016b24
 800c0b8:	08016b34 	.word	0x08016b34
 800c0bc:	08016b40 	.word	0x08016b40
 800c0c0:	20004ad0 	.word	0x20004ad0
 800c0c4:	20004ad4 	.word	0x20004ad4
 800c0c8:	20004adc 	.word	0x20004adc
 800c0cc:	20004ada 	.word	0x20004ada
 800c0d0:	2000d8f8 	.word	0x2000d8f8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	7d1b      	ldrb	r3, [r3, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d105      	bne.n	800c0e8 <tcp_input+0x29c>
 800c0dc:	4b88      	ldr	r3, [pc, #544]	@ (800c300 <tcp_input+0x4b4>)
 800c0de:	22fb      	movs	r2, #251	@ 0xfb
 800c0e0:	4988      	ldr	r1, [pc, #544]	@ (800c304 <tcp_input+0x4b8>)
 800c0e2:	4889      	ldr	r0, [pc, #548]	@ (800c308 <tcp_input+0x4bc>)
 800c0e4:	f7f4 fd72 	bl	8000bcc <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	2b0a      	cmp	r3, #10
 800c0ee:	d105      	bne.n	800c0fc <tcp_input+0x2b0>
 800c0f0:	4b83      	ldr	r3, [pc, #524]	@ (800c300 <tcp_input+0x4b4>)
 800c0f2:	22fc      	movs	r2, #252	@ 0xfc
 800c0f4:	4985      	ldr	r1, [pc, #532]	@ (800c30c <tcp_input+0x4c0>)
 800c0f6:	4884      	ldr	r0, [pc, #528]	@ (800c308 <tcp_input+0x4bc>)
 800c0f8:	f7f4 fd68 	bl	8000bcc <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	7d1b      	ldrb	r3, [r3, #20]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d105      	bne.n	800c110 <tcp_input+0x2c4>
 800c104:	4b7e      	ldr	r3, [pc, #504]	@ (800c300 <tcp_input+0x4b4>)
 800c106:	22fd      	movs	r2, #253	@ 0xfd
 800c108:	4981      	ldr	r1, [pc, #516]	@ (800c310 <tcp_input+0x4c4>)
 800c10a:	487f      	ldr	r0, [pc, #508]	@ (800c308 <tcp_input+0x4bc>)
 800c10c:	f7f4 fd5e 	bl	8000bcc <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	7a1b      	ldrb	r3, [r3, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00c      	beq.n	800c132 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	7a1a      	ldrb	r2, [r3, #8]
 800c11c:	4b7d      	ldr	r3, [pc, #500]	@ (800c314 <tcp_input+0x4c8>)
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c124:	3301      	adds	r3, #1
 800c126:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c128:	429a      	cmp	r2, r3
 800c12a:	d002      	beq.n	800c132 <tcp_input+0x2e6>
      prev = pcb;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	61fb      	str	r3, [r7, #28]
      continue;
 800c130:	e044      	b.n	800c1bc <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	8b1a      	ldrh	r2, [r3, #24]
 800c136:	4b78      	ldr	r3, [pc, #480]	@ (800c318 <tcp_input+0x4cc>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	429a      	cmp	r2, r3
 800c140:	d13a      	bne.n	800c1b8 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	8ada      	ldrh	r2, [r3, #22]
 800c146:	4b74      	ldr	r3, [pc, #464]	@ (800c318 <tcp_input+0x4cc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	885b      	ldrh	r3, [r3, #2]
 800c14c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c14e:	429a      	cmp	r2, r3
 800c150:	d132      	bne.n	800c1b8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	4b6f      	ldr	r3, [pc, #444]	@ (800c314 <tcp_input+0x4c8>)
 800c158:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d12c      	bne.n	800c1b8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	4b6c      	ldr	r3, [pc, #432]	@ (800c314 <tcp_input+0x4c8>)
 800c164:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c166:	429a      	cmp	r2, r3
 800c168:	d126      	bne.n	800c1b8 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	429a      	cmp	r2, r3
 800c172:	d106      	bne.n	800c182 <tcp_input+0x336>
 800c174:	4b62      	ldr	r3, [pc, #392]	@ (800c300 <tcp_input+0x4b4>)
 800c176:	f240 120d 	movw	r2, #269	@ 0x10d
 800c17a:	4968      	ldr	r1, [pc, #416]	@ (800c31c <tcp_input+0x4d0>)
 800c17c:	4862      	ldr	r0, [pc, #392]	@ (800c308 <tcp_input+0x4bc>)
 800c17e:	f7f4 fd25 	bl	8000bcc <printf>
      if (prev != NULL) {
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00a      	beq.n	800c19e <tcp_input+0x352>
        prev->next = pcb->next;
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c190:	4b63      	ldr	r3, [pc, #396]	@ (800c320 <tcp_input+0x4d4>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c198:	4a61      	ldr	r2, [pc, #388]	@ (800c320 <tcp_input+0x4d4>)
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d110      	bne.n	800c1ca <tcp_input+0x37e>
 800c1a8:	4b55      	ldr	r3, [pc, #340]	@ (800c300 <tcp_input+0x4b4>)
 800c1aa:	f240 1215 	movw	r2, #277	@ 0x115
 800c1ae:	495d      	ldr	r1, [pc, #372]	@ (800c324 <tcp_input+0x4d8>)
 800c1b0:	4855      	ldr	r0, [pc, #340]	@ (800c308 <tcp_input+0x4bc>)
 800c1b2:	f7f4 fd0b 	bl	8000bcc <printf>
      break;
 800c1b6:	e008      	b.n	800c1ca <tcp_input+0x37e>
    }
    prev = pcb;
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	61bb      	str	r3, [r7, #24]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d185      	bne.n	800c0d4 <tcp_input+0x288>
 800c1c8:	e000      	b.n	800c1cc <tcp_input+0x380>
      break;
 800c1ca:	bf00      	nop
  }

  if (pcb == NULL) {
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 80b0 	bne.w	800c334 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1d4:	4b54      	ldr	r3, [pc, #336]	@ (800c328 <tcp_input+0x4dc>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	61bb      	str	r3, [r7, #24]
 800c1da:	e03f      	b.n	800c25c <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	2b0a      	cmp	r3, #10
 800c1e2:	d006      	beq.n	800c1f2 <tcp_input+0x3a6>
 800c1e4:	4b46      	ldr	r3, [pc, #280]	@ (800c300 <tcp_input+0x4b4>)
 800c1e6:	f240 121f 	movw	r2, #287	@ 0x11f
 800c1ea:	4950      	ldr	r1, [pc, #320]	@ (800c32c <tcp_input+0x4e0>)
 800c1ec:	4846      	ldr	r0, [pc, #280]	@ (800c308 <tcp_input+0x4bc>)
 800c1ee:	f7f4 fced 	bl	8000bcc <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	7a1b      	ldrb	r3, [r3, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	7a1a      	ldrb	r2, [r3, #8]
 800c1fe:	4b45      	ldr	r3, [pc, #276]	@ (800c314 <tcp_input+0x4c8>)
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c206:	3301      	adds	r3, #1
 800c208:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d122      	bne.n	800c254 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	8b1a      	ldrh	r2, [r3, #24]
 800c212:	4b41      	ldr	r3, [pc, #260]	@ (800c318 <tcp_input+0x4cc>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	881b      	ldrh	r3, [r3, #0]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d11b      	bne.n	800c256 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	8ada      	ldrh	r2, [r3, #22]
 800c222:	4b3d      	ldr	r3, [pc, #244]	@ (800c318 <tcp_input+0x4cc>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	885b      	ldrh	r3, [r3, #2]
 800c228:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d113      	bne.n	800c256 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	4b38      	ldr	r3, [pc, #224]	@ (800c314 <tcp_input+0x4c8>)
 800c234:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c236:	429a      	cmp	r2, r3
 800c238:	d10d      	bne.n	800c256 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	4b35      	ldr	r3, [pc, #212]	@ (800c314 <tcp_input+0x4c8>)
 800c240:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c242:	429a      	cmp	r2, r3
 800c244:	d107      	bne.n	800c256 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c246:	69b8      	ldr	r0, [r7, #24]
 800c248:	f000 fb5c 	bl	800c904 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7fe f82f 	bl	800a2b0 <pbuf_free>
        return;
 800c252:	e203      	b.n	800c65c <tcp_input+0x810>
        continue;
 800c254:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1bc      	bne.n	800c1dc <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c266:	4b32      	ldr	r3, [pc, #200]	@ (800c330 <tcp_input+0x4e4>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	617b      	str	r3, [r7, #20]
 800c26c:	e02a      	b.n	800c2c4 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	7a1b      	ldrb	r3, [r3, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00c      	beq.n	800c290 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	7a1a      	ldrb	r2, [r3, #8]
 800c27a:	4b26      	ldr	r3, [pc, #152]	@ (800c314 <tcp_input+0x4c8>)
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c282:	3301      	adds	r3, #1
 800c284:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c286:	429a      	cmp	r2, r3
 800c288:	d002      	beq.n	800c290 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	61fb      	str	r3, [r7, #28]
        continue;
 800c28e:	e016      	b.n	800c2be <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	8ada      	ldrh	r2, [r3, #22]
 800c294:	4b20      	ldr	r3, [pc, #128]	@ (800c318 <tcp_input+0x4cc>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d10c      	bne.n	800c2ba <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c314 <tcp_input+0x4c8>)
 800c2a6:	695b      	ldr	r3, [r3, #20]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d00f      	beq.n	800c2cc <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <tcp_input+0x482>
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1d1      	bne.n	800c26e <tcp_input+0x422>
 800c2ca:	e000      	b.n	800c2ce <tcp_input+0x482>
            break;
 800c2cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d02f      	beq.n	800c334 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	68da      	ldr	r2, [r3, #12]
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c2e2:	4b13      	ldr	r3, [pc, #76]	@ (800c330 <tcp_input+0x4e4>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c2ea:	4a11      	ldr	r2, [pc, #68]	@ (800c330 <tcp_input+0x4e4>)
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c2f0:	6978      	ldr	r0, [r7, #20]
 800c2f2:	f000 fa09 	bl	800c708 <tcp_listen_input>
      }
      pbuf_free(p);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fd ffda 	bl	800a2b0 <pbuf_free>
      return;
 800c2fc:	e1ae      	b.n	800c65c <tcp_input+0x810>
 800c2fe:	bf00      	nop
 800c300:	08016ab4 	.word	0x08016ab4
 800c304:	08016b60 	.word	0x08016b60
 800c308:	08016afc 	.word	0x08016afc
 800c30c:	08016b88 	.word	0x08016b88
 800c310:	08016bb4 	.word	0x08016bb4
 800c314:	200054ec 	.word	0x200054ec
 800c318:	20004ac0 	.word	0x20004ac0
 800c31c:	08016bdc 	.word	0x08016bdc
 800c320:	2000d8f8 	.word	0x2000d8f8
 800c324:	08016c08 	.word	0x08016c08
 800c328:	2000d908 	.word	0x2000d908
 800c32c:	08016c34 	.word	0x08016c34
 800c330:	2000d900 	.word	0x2000d900
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 8156 	beq.w	800c5e8 <tcp_input+0x79c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c33c:	4b94      	ldr	r3, [pc, #592]	@ (800c590 <tcp_input+0x744>)
 800c33e:	2200      	movs	r2, #0
 800c340:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	891a      	ldrh	r2, [r3, #8]
 800c346:	4b92      	ldr	r3, [pc, #584]	@ (800c590 <tcp_input+0x744>)
 800c348:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c34a:	4a91      	ldr	r2, [pc, #580]	@ (800c590 <tcp_input+0x744>)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c350:	4b90      	ldr	r3, [pc, #576]	@ (800c594 <tcp_input+0x748>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a8e      	ldr	r2, [pc, #568]	@ (800c590 <tcp_input+0x744>)
 800c356:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800c358:	4b8f      	ldr	r3, [pc, #572]	@ (800c598 <tcp_input+0x74c>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c35e:	4b8f      	ldr	r3, [pc, #572]	@ (800c59c <tcp_input+0x750>)
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c364:	4b8e      	ldr	r3, [pc, #568]	@ (800c5a0 <tcp_input+0x754>)
 800c366:	2200      	movs	r2, #0
 800c368:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c36a:	4b8e      	ldr	r3, [pc, #568]	@ (800c5a4 <tcp_input+0x758>)
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	f003 0308 	and.w	r3, r3, #8
 800c372:	2b00      	cmp	r3, #0
 800c374:	d006      	beq.n	800c384 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7b5b      	ldrb	r3, [r3, #13]
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d017      	beq.n	800c3bc <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c38c:	69b8      	ldr	r0, [r7, #24]
 800c38e:	f7ff f981 	bl	800b694 <tcp_process_refused_data>
 800c392:	4603      	mov	r3, r0
 800c394:	f113 0f0d 	cmn.w	r3, #13
 800c398:	d007      	beq.n	800c3aa <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00c      	beq.n	800c3bc <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c3a2:	4b81      	ldr	r3, [pc, #516]	@ (800c5a8 <tcp_input+0x75c>)
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d008      	beq.n	800c3bc <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 80e2 	bne.w	800c578 <tcp_input+0x72c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c3b4:	69b8      	ldr	r0, [r7, #24]
 800c3b6:	f002 fe31 	bl	800f01c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c3ba:	e0dd      	b.n	800c578 <tcp_input+0x72c>
      }
    }
    tcp_input_pcb = pcb;
 800c3bc:	4a7b      	ldr	r2, [pc, #492]	@ (800c5ac <tcp_input+0x760>)
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c3c2:	69b8      	ldr	r0, [r7, #24]
 800c3c4:	f000 fb18 	bl	800c9f8 <tcp_process>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c3cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3d0:	f113 0f0d 	cmn.w	r3, #13
 800c3d4:	f000 80d2 	beq.w	800c57c <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 800c3d8:	4b70      	ldr	r3, [pc, #448]	@ (800c59c <tcp_input+0x750>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f003 0308 	and.w	r3, r3, #8
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d015      	beq.n	800c410 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d008      	beq.n	800c400 <tcp_input+0x5b4>
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	6912      	ldr	r2, [r2, #16]
 800c3f8:	f06f 010d 	mvn.w	r1, #13
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c400:	69b9      	ldr	r1, [r7, #24]
 800c402:	486b      	ldr	r0, [pc, #428]	@ (800c5b0 <tcp_input+0x764>)
 800c404:	f7ff fbcc 	bl	800bba0 <tcp_pcb_remove>
        tcp_free(pcb);
 800c408:	69b8      	ldr	r0, [r7, #24]
 800c40a:	f7fe fa2d 	bl	800a868 <tcp_free>
 800c40e:	e0d8      	b.n	800c5c2 <tcp_input+0x776>
      } else {
        err = ERR_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c414:	4b62      	ldr	r3, [pc, #392]	@ (800c5a0 <tcp_input+0x754>)
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d01b      	beq.n	800c454 <tcp_input+0x608>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c41c:	4b60      	ldr	r3, [pc, #384]	@ (800c5a0 <tcp_input+0x754>)
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c426:	2b00      	cmp	r3, #0
 800c428:	d009      	beq.n	800c43e <tcp_input+0x5f2>
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	6910      	ldr	r0, [r2, #16]
 800c432:	897a      	ldrh	r2, [r7, #10]
 800c434:	69b9      	ldr	r1, [r7, #24]
 800c436:	4798      	blx	r3
 800c438:	4603      	mov	r3, r0
 800c43a:	74fb      	strb	r3, [r7, #19]
 800c43c:	e001      	b.n	800c442 <tcp_input+0x5f6>
 800c43e:	2300      	movs	r3, #0
 800c440:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c442:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c446:	f113 0f0d 	cmn.w	r3, #13
 800c44a:	f000 8099 	beq.w	800c580 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c44e:	4b54      	ldr	r3, [pc, #336]	@ (800c5a0 <tcp_input+0x754>)
 800c450:	2200      	movs	r2, #0
 800c452:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c454:	69b8      	ldr	r0, [r7, #24]
 800c456:	f000 f917 	bl	800c688 <tcp_input_delayed_close>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f040 8091 	bne.w	800c584 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c462:	4b4d      	ldr	r3, [pc, #308]	@ (800c598 <tcp_input+0x74c>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d041      	beq.n	800c4ee <tcp_input+0x6a2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d006      	beq.n	800c480 <tcp_input+0x634>
 800c472:	4b50      	ldr	r3, [pc, #320]	@ (800c5b4 <tcp_input+0x768>)
 800c474:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c478:	494f      	ldr	r1, [pc, #316]	@ (800c5b8 <tcp_input+0x76c>)
 800c47a:	4850      	ldr	r0, [pc, #320]	@ (800c5bc <tcp_input+0x770>)
 800c47c:	f7f4 fba6 	bl	8000bcc <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	8b5b      	ldrh	r3, [r3, #26]
 800c484:	f003 0310 	and.w	r3, r3, #16
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d008      	beq.n	800c49e <tcp_input+0x652>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c48c:	4b42      	ldr	r3, [pc, #264]	@ (800c598 <tcp_input+0x74c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4618      	mov	r0, r3
 800c492:	f7fd ff0d 	bl	800a2b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c496:	69b8      	ldr	r0, [r7, #24]
 800c498:	f7fe fcb8 	bl	800ae0c <tcp_abort>
            goto aborted;
 800c49c:	e091      	b.n	800c5c2 <tcp_input+0x776>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <tcp_input+0x676>
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	6918      	ldr	r0, [r3, #16]
 800c4b2:	4b39      	ldr	r3, [pc, #228]	@ (800c598 <tcp_input+0x74c>)
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	69b9      	ldr	r1, [r7, #24]
 800c4ba:	47a0      	blx	r4
 800c4bc:	4603      	mov	r3, r0
 800c4be:	74fb      	strb	r3, [r7, #19]
 800c4c0:	e008      	b.n	800c4d4 <tcp_input+0x688>
 800c4c2:	4b35      	ldr	r3, [pc, #212]	@ (800c598 <tcp_input+0x74c>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	69b9      	ldr	r1, [r7, #24]
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	f7ff f986 	bl	800b7dc <tcp_recv_null>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c4d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4d8:	f113 0f0d 	cmn.w	r3, #13
 800c4dc:	d054      	beq.n	800c588 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c4de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <tcp_input+0x6a2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c4e6:	4b2c      	ldr	r3, [pc, #176]	@ (800c598 <tcp_input+0x74c>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c4ee:	4b2b      	ldr	r3, [pc, #172]	@ (800c59c <tcp_input+0x750>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d031      	beq.n	800c55e <tcp_input+0x712>
          if (pcb->refused_data != NULL) {
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d009      	beq.n	800c516 <tcp_input+0x6ca>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c506:	7b5a      	ldrb	r2, [r3, #13]
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c50c:	f042 0220 	orr.w	r2, r2, #32
 800c510:	b2d2      	uxtb	r2, r2
 800c512:	735a      	strb	r2, [r3, #13]
 800c514:	e023      	b.n	800c55e <tcp_input+0x712>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c51a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800c51e:	4293      	cmp	r3, r2
 800c520:	d005      	beq.n	800c52e <tcp_input+0x6e2>
              pcb->rcv_wnd++;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c526:	3301      	adds	r3, #1
 800c528:	b29a      	uxth	r2, r3
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <tcp_input+0x704>
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	6918      	ldr	r0, [r3, #16]
 800c542:	2300      	movs	r3, #0
 800c544:	2200      	movs	r2, #0
 800c546:	69b9      	ldr	r1, [r7, #24]
 800c548:	47a0      	blx	r4
 800c54a:	4603      	mov	r3, r0
 800c54c:	74fb      	strb	r3, [r7, #19]
 800c54e:	e001      	b.n	800c554 <tcp_input+0x708>
 800c550:	2300      	movs	r3, #0
 800c552:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c558:	f113 0f0d 	cmn.w	r3, #13
 800c55c:	d016      	beq.n	800c58c <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c55e:	4b13      	ldr	r3, [pc, #76]	@ (800c5ac <tcp_input+0x760>)
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c564:	69b8      	ldr	r0, [r7, #24]
 800c566:	f000 f88f 	bl	800c688 <tcp_input_delayed_close>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d127      	bne.n	800c5c0 <tcp_input+0x774>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c570:	69b8      	ldr	r0, [r7, #24]
 800c572:	f001 ff1f 	bl	800e3b4 <tcp_output>
 800c576:	e024      	b.n	800c5c2 <tcp_input+0x776>
        goto aborted;
 800c578:	bf00      	nop
 800c57a:	e022      	b.n	800c5c2 <tcp_input+0x776>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c57c:	bf00      	nop
 800c57e:	e020      	b.n	800c5c2 <tcp_input+0x776>
              goto aborted;
 800c580:	bf00      	nop
 800c582:	e01e      	b.n	800c5c2 <tcp_input+0x776>
          goto aborted;
 800c584:	bf00      	nop
 800c586:	e01c      	b.n	800c5c2 <tcp_input+0x776>
            goto aborted;
 800c588:	bf00      	nop
 800c58a:	e01a      	b.n	800c5c2 <tcp_input+0x776>
              goto aborted;
 800c58c:	bf00      	nop
 800c58e:	e018      	b.n	800c5c2 <tcp_input+0x776>
 800c590:	20004aac 	.word	0x20004aac
 800c594:	20004ac0 	.word	0x20004ac0
 800c598:	20004ae0 	.word	0x20004ae0
 800c59c:	20004add 	.word	0x20004add
 800c5a0:	20004ad8 	.word	0x20004ad8
 800c5a4:	20004adc 	.word	0x20004adc
 800c5a8:	20004ada 	.word	0x20004ada
 800c5ac:	2000d90c 	.word	0x2000d90c
 800c5b0:	2000d8f8 	.word	0x2000d8f8
 800c5b4:	08016ab4 	.word	0x08016ab4
 800c5b8:	08016c64 	.word	0x08016c64
 800c5bc:	08016afc 	.word	0x08016afc
          goto aborted;
 800c5c0:	bf00      	nop
    tcp_input_pcb = NULL;
 800c5c2:	4b28      	ldr	r3, [pc, #160]	@ (800c664 <tcp_input+0x818>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c5c8:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <tcp_input+0x81c>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c5ce:	4b27      	ldr	r3, [pc, #156]	@ (800c66c <tcp_input+0x820>)
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d041      	beq.n	800c65a <tcp_input+0x80e>
      pbuf_free(inseg.p);
 800c5d6:	4b25      	ldr	r3, [pc, #148]	@ (800c66c <tcp_input+0x820>)
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fd fe68 	bl	800a2b0 <pbuf_free>
      inseg.p = NULL;
 800c5e0:	4b22      	ldr	r3, [pc, #136]	@ (800c66c <tcp_input+0x820>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c5e6:	e038      	b.n	800c65a <tcp_input+0x80e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c5e8:	4b21      	ldr	r3, [pc, #132]	@ (800c670 <tcp_input+0x824>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	899b      	ldrh	r3, [r3, #12]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fc fa19 	bl	8008a28 <lwip_htons>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d118      	bne.n	800c634 <tcp_input+0x7e8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c602:	4b1c      	ldr	r3, [pc, #112]	@ (800c674 <tcp_input+0x828>)
 800c604:	6819      	ldr	r1, [r3, #0]
 800c606:	4b1c      	ldr	r3, [pc, #112]	@ (800c678 <tcp_input+0x82c>)
 800c608:	881b      	ldrh	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	4b1b      	ldr	r3, [pc, #108]	@ (800c67c <tcp_input+0x830>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c612:	4b17      	ldr	r3, [pc, #92]	@ (800c670 <tcp_input+0x824>)
 800c614:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c616:	885b      	ldrh	r3, [r3, #2]
 800c618:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c61a:	4a15      	ldr	r2, [pc, #84]	@ (800c670 <tcp_input+0x824>)
 800c61c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c61e:	8812      	ldrh	r2, [r2, #0]
 800c620:	b292      	uxth	r2, r2
 800c622:	9202      	str	r2, [sp, #8]
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	4b16      	ldr	r3, [pc, #88]	@ (800c680 <tcp_input+0x834>)
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	4b16      	ldr	r3, [pc, #88]	@ (800c684 <tcp_input+0x838>)
 800c62c:	4602      	mov	r2, r0
 800c62e:	2000      	movs	r0, #0
 800c630:	f002 fca2 	bl	800ef78 <tcp_rst>
    pbuf_free(p);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fd fe3b 	bl	800a2b0 <pbuf_free>
  return;
 800c63a:	e00e      	b.n	800c65a <tcp_input+0x80e>
    goto dropped;
 800c63c:	bf00      	nop
 800c63e:	e008      	b.n	800c652 <tcp_input+0x806>
    goto dropped;
 800c640:	bf00      	nop
 800c642:	e006      	b.n	800c652 <tcp_input+0x806>
      goto dropped;
 800c644:	bf00      	nop
 800c646:	e004      	b.n	800c652 <tcp_input+0x806>
    goto dropped;
 800c648:	bf00      	nop
 800c64a:	e002      	b.n	800c652 <tcp_input+0x806>
      goto dropped;
 800c64c:	bf00      	nop
 800c64e:	e000      	b.n	800c652 <tcp_input+0x806>
      goto dropped;
 800c650:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7fd fe2c 	bl	800a2b0 <pbuf_free>
 800c658:	e000      	b.n	800c65c <tcp_input+0x810>
  return;
 800c65a:	bf00      	nop
}
 800c65c:	3724      	adds	r7, #36	@ 0x24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd90      	pop	{r4, r7, pc}
 800c662:	bf00      	nop
 800c664:	2000d90c 	.word	0x2000d90c
 800c668:	20004ae0 	.word	0x20004ae0
 800c66c:	20004aac 	.word	0x20004aac
 800c670:	20004ac0 	.word	0x20004ac0
 800c674:	20004ad4 	.word	0x20004ad4
 800c678:	20004ada 	.word	0x20004ada
 800c67c:	20004ad0 	.word	0x20004ad0
 800c680:	200054fc 	.word	0x200054fc
 800c684:	20005500 	.word	0x20005500

0800c688 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <tcp_input_delayed_close+0x1c>
 800c696:	4b17      	ldr	r3, [pc, #92]	@ (800c6f4 <tcp_input_delayed_close+0x6c>)
 800c698:	f240 225a 	movw	r2, #602	@ 0x25a
 800c69c:	4916      	ldr	r1, [pc, #88]	@ (800c6f8 <tcp_input_delayed_close+0x70>)
 800c69e:	4817      	ldr	r0, [pc, #92]	@ (800c6fc <tcp_input_delayed_close+0x74>)
 800c6a0:	f7f4 fa94 	bl	8000bcc <printf>

  if (recv_flags & TF_CLOSED) {
 800c6a4:	4b16      	ldr	r3, [pc, #88]	@ (800c700 <tcp_input_delayed_close+0x78>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	f003 0310 	and.w	r3, r3, #16
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d01c      	beq.n	800c6ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	8b5b      	ldrh	r3, [r3, #26]
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10d      	bne.n	800c6d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d008      	beq.n	800c6d8 <tcp_input_delayed_close+0x50>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6912      	ldr	r2, [r2, #16]
 800c6d0:	f06f 010e 	mvn.w	r1, #14
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c6d8:	6879      	ldr	r1, [r7, #4]
 800c6da:	480a      	ldr	r0, [pc, #40]	@ (800c704 <tcp_input_delayed_close+0x7c>)
 800c6dc:	f7ff fa60 	bl	800bba0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7fe f8c1 	bl	800a868 <tcp_free>
    return 1;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e000      	b.n	800c6ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	08016ab4 	.word	0x08016ab4
 800c6f8:	08016c80 	.word	0x08016c80
 800c6fc:	08016afc 	.word	0x08016afc
 800c700:	20004add 	.word	0x20004add
 800c704:	2000d8f8 	.word	0x2000d8f8

0800c708 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c708:	b590      	push	{r4, r7, lr}
 800c70a:	b08b      	sub	sp, #44	@ 0x2c
 800c70c:	af04      	add	r7, sp, #16
 800c70e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c710:	4b6f      	ldr	r3, [pc, #444]	@ (800c8d0 <tcp_listen_input+0x1c8>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f040 80d2 	bne.w	800c8c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <tcp_listen_input+0x2a>
 800c724:	4b6b      	ldr	r3, [pc, #428]	@ (800c8d4 <tcp_listen_input+0x1cc>)
 800c726:	f240 2281 	movw	r2, #641	@ 0x281
 800c72a:	496b      	ldr	r1, [pc, #428]	@ (800c8d8 <tcp_listen_input+0x1d0>)
 800c72c:	486b      	ldr	r0, [pc, #428]	@ (800c8dc <tcp_listen_input+0x1d4>)
 800c72e:	f7f4 fa4d 	bl	8000bcc <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c732:	4b67      	ldr	r3, [pc, #412]	@ (800c8d0 <tcp_listen_input+0x1c8>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	f003 0310 	and.w	r3, r3, #16
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d019      	beq.n	800c772 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c73e:	4b68      	ldr	r3, [pc, #416]	@ (800c8e0 <tcp_listen_input+0x1d8>)
 800c740:	6819      	ldr	r1, [r3, #0]
 800c742:	4b68      	ldr	r3, [pc, #416]	@ (800c8e4 <tcp_listen_input+0x1dc>)
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	4b67      	ldr	r3, [pc, #412]	@ (800c8e8 <tcp_listen_input+0x1e0>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c74e:	4b67      	ldr	r3, [pc, #412]	@ (800c8ec <tcp_listen_input+0x1e4>)
 800c750:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c752:	885b      	ldrh	r3, [r3, #2]
 800c754:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c756:	4a65      	ldr	r2, [pc, #404]	@ (800c8ec <tcp_listen_input+0x1e4>)
 800c758:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c75a:	8812      	ldrh	r2, [r2, #0]
 800c75c:	b292      	uxth	r2, r2
 800c75e:	9202      	str	r2, [sp, #8]
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	4b63      	ldr	r3, [pc, #396]	@ (800c8f0 <tcp_listen_input+0x1e8>)
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	4b63      	ldr	r3, [pc, #396]	@ (800c8f4 <tcp_listen_input+0x1ec>)
 800c768:	4602      	mov	r2, r0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f002 fc04 	bl	800ef78 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c770:	e0a9      	b.n	800c8c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c772:	4b57      	ldr	r3, [pc, #348]	@ (800c8d0 <tcp_listen_input+0x1c8>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 80a3 	beq.w	800c8c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7d5b      	ldrb	r3, [r3, #21]
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff f945 	bl	800ba14 <tcp_alloc>
 800c78a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d111      	bne.n	800c7b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00a      	beq.n	800c7b0 <tcp_listen_input+0xa8>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	6910      	ldr	r0, [r2, #16]
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4798      	blx	r3
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73bb      	strb	r3, [r7, #14]
      return;
 800c7ae:	e08b      	b.n	800c8c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c7b0:	23f0      	movs	r3, #240	@ 0xf0
 800c7b2:	73bb      	strb	r3, [r7, #14]
      return;
 800c7b4:	e088      	b.n	800c8c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c7b6:	4b50      	ldr	r3, [pc, #320]	@ (800c8f8 <tcp_listen_input+0x1f0>)
 800c7b8:	695a      	ldr	r2, [r3, #20]
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c7be:	4b4e      	ldr	r3, [pc, #312]	@ (800c8f8 <tcp_listen_input+0x1f0>)
 800c7c0:	691a      	ldr	r2, [r3, #16]
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8ada      	ldrh	r2, [r3, #22]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c7ce:	4b47      	ldr	r3, [pc, #284]	@ (800c8ec <tcp_listen_input+0x1e4>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	2203      	movs	r2, #3
 800c7de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c7e0:	4b41      	ldr	r3, [pc, #260]	@ (800c8e8 <tcp_listen_input+0x1e0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c7f2:	6978      	ldr	r0, [r7, #20]
 800c7f4:	f7ff fa5a 	bl	800bcac <tcp_next_iss>
 800c7f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c812:	4b35      	ldr	r3, [pc, #212]	@ (800c8e8 <tcp_listen_input+0x1e0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	1e5a      	subs	r2, r3, #1
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	691a      	ldr	r2, [r3, #16]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7a5b      	ldrb	r3, [r3, #9]
 800c82e:	f003 030c 	and.w	r3, r3, #12
 800c832:	b2da      	uxtb	r2, r3
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7a1a      	ldrb	r2, [r3, #8]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c840:	4b2e      	ldr	r3, [pc, #184]	@ (800c8fc <tcp_listen_input+0x1f4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	60da      	str	r2, [r3, #12]
 800c848:	4a2c      	ldr	r2, [pc, #176]	@ (800c8fc <tcp_listen_input+0x1f4>)
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	f002 fd55 	bl	800f2fc <tcp_timer_needed>
 800c852:	4b2b      	ldr	r3, [pc, #172]	@ (800c900 <tcp_listen_input+0x1f8>)
 800c854:	2201      	movs	r2, #1
 800c856:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c858:	6978      	ldr	r0, [r7, #20]
 800c85a:	f001 f9d5 	bl	800dc08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c85e:	4b23      	ldr	r3, [pc, #140]	@ (800c8ec <tcp_listen_input+0x1e4>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	89db      	ldrh	r3, [r3, #14]
 800c864:	b29a      	uxth	r2, r3
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	3304      	adds	r3, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f006 fb05 	bl	8012e90 <ip4_route>
 800c886:	4601      	mov	r1, r0
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	3304      	adds	r3, #4
 800c88c:	461a      	mov	r2, r3
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fa32 	bl	800bcf8 <tcp_eff_send_mss_netif>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c89c:	2112      	movs	r1, #18
 800c89e:	6978      	ldr	r0, [r7, #20]
 800c8a0:	f001 fc9a 	bl	800e1d8 <tcp_enqueue_flags>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c8a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	6978      	ldr	r0, [r7, #20]
 800c8b4:	f7fe f9fa 	bl	800acac <tcp_abandon>
      return;
 800c8b8:	e006      	b.n	800c8c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c8ba:	6978      	ldr	r0, [r7, #20]
 800c8bc:	f001 fd7a 	bl	800e3b4 <tcp_output>
  return;
 800c8c0:	e001      	b.n	800c8c6 <tcp_listen_input+0x1be>
    return;
 800c8c2:	bf00      	nop
 800c8c4:	e000      	b.n	800c8c8 <tcp_listen_input+0x1c0>
  return;
 800c8c6:	bf00      	nop
}
 800c8c8:	371c      	adds	r7, #28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd90      	pop	{r4, r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20004adc 	.word	0x20004adc
 800c8d4:	08016ab4 	.word	0x08016ab4
 800c8d8:	08016ca8 	.word	0x08016ca8
 800c8dc:	08016afc 	.word	0x08016afc
 800c8e0:	20004ad4 	.word	0x20004ad4
 800c8e4:	20004ada 	.word	0x20004ada
 800c8e8:	20004ad0 	.word	0x20004ad0
 800c8ec:	20004ac0 	.word	0x20004ac0
 800c8f0:	200054fc 	.word	0x200054fc
 800c8f4:	20005500 	.word	0x20005500
 800c8f8:	200054ec 	.word	0x200054ec
 800c8fc:	2000d8f8 	.word	0x2000d8f8
 800c900:	2000d8f4 	.word	0x2000d8f4

0800c904 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af04      	add	r7, sp, #16
 800c90a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c90c:	4b2f      	ldr	r3, [pc, #188]	@ (800c9cc <tcp_timewait_input+0xc8>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 0304 	and.w	r3, r3, #4
 800c914:	2b00      	cmp	r3, #0
 800c916:	d153      	bne.n	800c9c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <tcp_timewait_input+0x28>
 800c91e:	4b2c      	ldr	r3, [pc, #176]	@ (800c9d0 <tcp_timewait_input+0xcc>)
 800c920:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c924:	492b      	ldr	r1, [pc, #172]	@ (800c9d4 <tcp_timewait_input+0xd0>)
 800c926:	482c      	ldr	r0, [pc, #176]	@ (800c9d8 <tcp_timewait_input+0xd4>)
 800c928:	f7f4 f950 	bl	8000bcc <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c92c:	4b27      	ldr	r3, [pc, #156]	@ (800c9cc <tcp_timewait_input+0xc8>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d02a      	beq.n	800c98e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c938:	4b28      	ldr	r3, [pc, #160]	@ (800c9dc <tcp_timewait_input+0xd8>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	db2d      	blt.n	800c9a2 <tcp_timewait_input+0x9e>
 800c946:	4b25      	ldr	r3, [pc, #148]	@ (800c9dc <tcp_timewait_input+0xd8>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c952:	440b      	add	r3, r1
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	dc23      	bgt.n	800c9a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c95a:	4b21      	ldr	r3, [pc, #132]	@ (800c9e0 <tcp_timewait_input+0xdc>)
 800c95c:	6819      	ldr	r1, [r3, #0]
 800c95e:	4b21      	ldr	r3, [pc, #132]	@ (800c9e4 <tcp_timewait_input+0xe0>)
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	4b1d      	ldr	r3, [pc, #116]	@ (800c9dc <tcp_timewait_input+0xd8>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c96a:	4b1f      	ldr	r3, [pc, #124]	@ (800c9e8 <tcp_timewait_input+0xe4>)
 800c96c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c972:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <tcp_timewait_input+0xe4>)
 800c974:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c976:	8812      	ldrh	r2, [r2, #0]
 800c978:	b292      	uxth	r2, r2
 800c97a:	9202      	str	r2, [sp, #8]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	4b1b      	ldr	r3, [pc, #108]	@ (800c9ec <tcp_timewait_input+0xe8>)
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f0 <tcp_timewait_input+0xec>)
 800c984:	4602      	mov	r2, r0
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f002 faf6 	bl	800ef78 <tcp_rst>
      return;
 800c98c:	e01b      	b.n	800c9c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c98e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9cc <tcp_timewait_input+0xc8>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	2b00      	cmp	r3, #0
 800c998:	d003      	beq.n	800c9a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c99a:	4b16      	ldr	r3, [pc, #88]	@ (800c9f4 <tcp_timewait_input+0xf0>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c9a2:	4b10      	ldr	r3, [pc, #64]	@ (800c9e4 <tcp_timewait_input+0xe0>)
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00c      	beq.n	800c9c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8b5b      	ldrh	r3, [r3, #26]
 800c9ae:	f043 0302 	orr.w	r3, r3, #2
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f001 fcfb 	bl	800e3b4 <tcp_output>
  }
  return;
 800c9be:	e001      	b.n	800c9c4 <tcp_timewait_input+0xc0>
    return;
 800c9c0:	bf00      	nop
 800c9c2:	e000      	b.n	800c9c6 <tcp_timewait_input+0xc2>
  return;
 800c9c4:	bf00      	nop
}
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20004adc 	.word	0x20004adc
 800c9d0:	08016ab4 	.word	0x08016ab4
 800c9d4:	08016cc8 	.word	0x08016cc8
 800c9d8:	08016afc 	.word	0x08016afc
 800c9dc:	20004ad0 	.word	0x20004ad0
 800c9e0:	20004ad4 	.word	0x20004ad4
 800c9e4:	20004ada 	.word	0x20004ada
 800c9e8:	20004ac0 	.word	0x20004ac0
 800c9ec:	200054fc 	.word	0x200054fc
 800c9f0:	20005500 	.word	0x20005500
 800c9f4:	2000d8fc 	.word	0x2000d8fc

0800c9f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c9f8:	b590      	push	{r4, r7, lr}
 800c9fa:	b08d      	sub	sp, #52	@ 0x34
 800c9fc:	af04      	add	r7, sp, #16
 800c9fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <tcp_process+0x24>
 800ca0e:	4b9d      	ldr	r3, [pc, #628]	@ (800cc84 <tcp_process+0x28c>)
 800ca10:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ca14:	499c      	ldr	r1, [pc, #624]	@ (800cc88 <tcp_process+0x290>)
 800ca16:	489d      	ldr	r0, [pc, #628]	@ (800cc8c <tcp_process+0x294>)
 800ca18:	f7f4 f8d8 	bl	8000bcc <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ca1c:	4b9c      	ldr	r3, [pc, #624]	@ (800cc90 <tcp_process+0x298>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	f003 0304 	and.w	r3, r3, #4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d04e      	beq.n	800cac6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	7d1b      	ldrb	r3, [r3, #20]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d108      	bne.n	800ca42 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca34:	4b97      	ldr	r3, [pc, #604]	@ (800cc94 <tcp_process+0x29c>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d123      	bne.n	800ca84 <tcp_process+0x8c>
        acceptable = 1;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	77fb      	strb	r3, [r7, #31]
 800ca40:	e020      	b.n	800ca84 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca46:	4b94      	ldr	r3, [pc, #592]	@ (800cc98 <tcp_process+0x2a0>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d102      	bne.n	800ca54 <tcp_process+0x5c>
        acceptable = 1;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	77fb      	strb	r3, [r7, #31]
 800ca52:	e017      	b.n	800ca84 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca54:	4b90      	ldr	r3, [pc, #576]	@ (800cc98 <tcp_process+0x2a0>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	db10      	blt.n	800ca84 <tcp_process+0x8c>
 800ca62:	4b8d      	ldr	r3, [pc, #564]	@ (800cc98 <tcp_process+0x2a0>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6a:	6879      	ldr	r1, [r7, #4]
 800ca6c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca6e:	440b      	add	r3, r1
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dc06      	bgt.n	800ca84 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8b5b      	ldrh	r3, [r3, #26]
 800ca7a:	f043 0302 	orr.w	r3, r3, #2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ca84:	7ffb      	ldrb	r3, [r7, #31]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d01b      	beq.n	800cac2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d106      	bne.n	800caa0 <tcp_process+0xa8>
 800ca92:	4b7c      	ldr	r3, [pc, #496]	@ (800cc84 <tcp_process+0x28c>)
 800ca94:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ca98:	4980      	ldr	r1, [pc, #512]	@ (800cc9c <tcp_process+0x2a4>)
 800ca9a:	487c      	ldr	r0, [pc, #496]	@ (800cc8c <tcp_process+0x294>)
 800ca9c:	f7f4 f896 	bl	8000bcc <printf>
      recv_flags |= TF_RESET;
 800caa0:	4b7f      	ldr	r3, [pc, #508]	@ (800cca0 <tcp_process+0x2a8>)
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	f043 0308 	orr.w	r3, r3, #8
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b7d      	ldr	r3, [pc, #500]	@ (800cca0 <tcp_process+0x2a8>)
 800caac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	8b5b      	ldrh	r3, [r3, #26]
 800cab2:	f023 0301 	bic.w	r3, r3, #1
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800cabc:	f06f 030d 	mvn.w	r3, #13
 800cac0:	e37a      	b.n	800d1b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	e378      	b.n	800d1b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cac6:	4b72      	ldr	r3, [pc, #456]	@ (800cc90 <tcp_process+0x298>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	f003 0302 	and.w	r3, r3, #2
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d010      	beq.n	800caf4 <tcp_process+0xfc>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7d1b      	ldrb	r3, [r3, #20]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d00c      	beq.n	800caf4 <tcp_process+0xfc>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
 800cade:	2b03      	cmp	r3, #3
 800cae0:	d008      	beq.n	800caf4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	8b5b      	ldrh	r3, [r3, #26]
 800cae6:	f043 0302 	orr.w	r3, r3, #2
 800caea:	b29a      	uxth	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e361      	b.n	800d1b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8b5b      	ldrh	r3, [r3, #26]
 800caf8:	f003 0310 	and.w	r3, r3, #16
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d103      	bne.n	800cb08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cb00:	4b68      	ldr	r3, [pc, #416]	@ (800cca4 <tcp_process+0x2ac>)
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 f875 	bl	800dc08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7d1b      	ldrb	r3, [r3, #20]
 800cb22:	3b02      	subs	r3, #2
 800cb24:	2b07      	cmp	r3, #7
 800cb26:	f200 8337 	bhi.w	800d198 <tcp_process+0x7a0>
 800cb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb30 <tcp_process+0x138>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb51 	.word	0x0800cb51
 800cb34:	0800cd81 	.word	0x0800cd81
 800cb38:	0800cef9 	.word	0x0800cef9
 800cb3c:	0800cf23 	.word	0x0800cf23
 800cb40:	0800d047 	.word	0x0800d047
 800cb44:	0800cef9 	.word	0x0800cef9
 800cb48:	0800d0d3 	.word	0x0800d0d3
 800cb4c:	0800d163 	.word	0x0800d163
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cb50:	4b4f      	ldr	r3, [pc, #316]	@ (800cc90 <tcp_process+0x298>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	f003 0310 	and.w	r3, r3, #16
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80e4 	beq.w	800cd26 <tcp_process+0x32e>
 800cb5e:	4b4c      	ldr	r3, [pc, #304]	@ (800cc90 <tcp_process+0x298>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 80dd 	beq.w	800cd26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	4b48      	ldr	r3, [pc, #288]	@ (800cc94 <tcp_process+0x29c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	f040 80d5 	bne.w	800cd26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cb7c:	4b46      	ldr	r3, [pc, #280]	@ (800cc98 <tcp_process+0x2a0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800cb8e:	4b41      	ldr	r3, [pc, #260]	@ (800cc94 <tcp_process+0x29c>)
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cb96:	4b44      	ldr	r3, [pc, #272]	@ (800cca8 <tcp_process+0x2b0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	89db      	ldrh	r3, [r3, #14]
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cbb0:	4b39      	ldr	r3, [pc, #228]	@ (800cc98 <tcp_process+0x2a0>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	1e5a      	subs	r2, r3, #1
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2204      	movs	r2, #4
 800cbbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f006 f961 	bl	8012e90 <ip4_route>
 800cbce:	4601      	mov	r1, r0
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f7ff f88e 	bl	800bcf8 <tcp_eff_send_mss_netif>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	461a      	mov	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbe8:	009a      	lsls	r2, r3, #2
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800cbf4:	428b      	cmp	r3, r1
 800cbf6:	bf38      	it	cc
 800cbf8:	460b      	movcc	r3, r1
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d204      	bcs.n	800cc08 <tcp_process+0x210>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	e00d      	b.n	800cc24 <tcp_process+0x22c>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d904      	bls.n	800cc20 <tcp_process+0x228>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	e001      	b.n	800cc24 <tcp_process+0x22c>
 800cc20:	f241 131c 	movw	r3, #4380	@ 0x111c
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <tcp_process+0x24a>
 800cc34:	4b13      	ldr	r3, [pc, #76]	@ (800cc84 <tcp_process+0x28c>)
 800cc36:	f240 326d 	movw	r2, #877	@ 0x36d
 800cc3a:	491c      	ldr	r1, [pc, #112]	@ (800ccac <tcp_process+0x2b4>)
 800cc3c:	4813      	ldr	r0, [pc, #76]	@ (800cc8c <tcp_process+0x294>)
 800cc3e:	f7f3 ffc5 	bl	8000bcc <printf>
        --pcb->snd_queuelen;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc56:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d12a      	bne.n	800ccb4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc62:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <tcp_process+0x280>
 800cc6a:	4b06      	ldr	r3, [pc, #24]	@ (800cc84 <tcp_process+0x28c>)
 800cc6c:	f240 3275 	movw	r2, #885	@ 0x375
 800cc70:	490f      	ldr	r1, [pc, #60]	@ (800ccb0 <tcp_process+0x2b8>)
 800cc72:	4806      	ldr	r0, [pc, #24]	@ (800cc8c <tcp_process+0x294>)
 800cc74:	f7f3 ffaa 	bl	8000bcc <printf>
          pcb->unsent = rseg->next;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cc80:	e01c      	b.n	800ccbc <tcp_process+0x2c4>
 800cc82:	bf00      	nop
 800cc84:	08016ab4 	.word	0x08016ab4
 800cc88:	08016ce8 	.word	0x08016ce8
 800cc8c:	08016afc 	.word	0x08016afc
 800cc90:	20004adc 	.word	0x20004adc
 800cc94:	20004ad4 	.word	0x20004ad4
 800cc98:	20004ad0 	.word	0x20004ad0
 800cc9c:	08016d04 	.word	0x08016d04
 800cca0:	20004add 	.word	0x20004add
 800cca4:	2000d8fc 	.word	0x2000d8fc
 800cca8:	20004ac0 	.word	0x20004ac0
 800ccac:	08016d24 	.word	0x08016d24
 800ccb0:	08016d3c 	.word	0x08016d3c
        } else {
          pcb->unacked = rseg->next;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ccbc:	6978      	ldr	r0, [r7, #20]
 800ccbe:	f7fe fd74 	bl	800b7aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d104      	bne.n	800ccd4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ccd0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ccd2:	e006      	b.n	800cce2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00a      	beq.n	800cd02 <tcp_process+0x30a>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	6910      	ldr	r0, [r2, #16]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	4798      	blx	r3
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	77bb      	strb	r3, [r7, #30]
 800cd00:	e001      	b.n	800cd06 <tcp_process+0x30e>
 800cd02:	2300      	movs	r3, #0
 800cd04:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800cd06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cd0a:	f113 0f0d 	cmn.w	r3, #13
 800cd0e:	d102      	bne.n	800cd16 <tcp_process+0x31e>
          return ERR_ABRT;
 800cd10:	f06f 030c 	mvn.w	r3, #12
 800cd14:	e250      	b.n	800d1b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8b5b      	ldrh	r3, [r3, #26]
 800cd1a:	f043 0302 	orr.w	r3, r3, #2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cd24:	e23a      	b.n	800d19c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cd26:	4b98      	ldr	r3, [pc, #608]	@ (800cf88 <tcp_process+0x590>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f003 0310 	and.w	r3, r3, #16
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 8234 	beq.w	800d19c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd34:	4b95      	ldr	r3, [pc, #596]	@ (800cf8c <tcp_process+0x594>)
 800cd36:	6819      	ldr	r1, [r3, #0]
 800cd38:	4b95      	ldr	r3, [pc, #596]	@ (800cf90 <tcp_process+0x598>)
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4b95      	ldr	r3, [pc, #596]	@ (800cf94 <tcp_process+0x59c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd44:	4b94      	ldr	r3, [pc, #592]	@ (800cf98 <tcp_process+0x5a0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd48:	885b      	ldrh	r3, [r3, #2]
 800cd4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd4c:	4a92      	ldr	r2, [pc, #584]	@ (800cf98 <tcp_process+0x5a0>)
 800cd4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd50:	8812      	ldrh	r2, [r2, #0]
 800cd52:	b292      	uxth	r2, r2
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	4b90      	ldr	r3, [pc, #576]	@ (800cf9c <tcp_process+0x5a4>)
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4b90      	ldr	r3, [pc, #576]	@ (800cfa0 <tcp_process+0x5a8>)
 800cd5e:	4602      	mov	r2, r0
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f002 f909 	bl	800ef78 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd6c:	2b05      	cmp	r3, #5
 800cd6e:	f200 8215 	bhi.w	800d19c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f001 fec5 	bl	800eb08 <tcp_rexmit_rto>
      break;
 800cd7e:	e20d      	b.n	800d19c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cd80:	4b81      	ldr	r3, [pc, #516]	@ (800cf88 <tcp_process+0x590>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	f003 0310 	and.w	r3, r3, #16
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f000 80a1 	beq.w	800ced0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd8e:	4b7f      	ldr	r3, [pc, #508]	@ (800cf8c <tcp_process+0x594>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	db7e      	blt.n	800ce9c <tcp_process+0x4a4>
 800cd9e:	4b7b      	ldr	r3, [pc, #492]	@ (800cf8c <tcp_process+0x594>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	dc77      	bgt.n	800ce9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2204      	movs	r2, #4
 800cdb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d102      	bne.n	800cdc0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cdba:	23fa      	movs	r3, #250	@ 0xfa
 800cdbc:	77bb      	strb	r3, [r7, #30]
 800cdbe:	e01d      	b.n	800cdfc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <tcp_process+0x3e0>
 800cdca:	4b76      	ldr	r3, [pc, #472]	@ (800cfa4 <tcp_process+0x5ac>)
 800cdcc:	f240 32a9 	movw	r2, #937	@ 0x3a9
 800cdd0:	4975      	ldr	r1, [pc, #468]	@ (800cfa8 <tcp_process+0x5b0>)
 800cdd2:	4876      	ldr	r0, [pc, #472]	@ (800cfac <tcp_process+0x5b4>)
 800cdd4:	f7f3 fefa 	bl	8000bcc <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00a      	beq.n	800cdf8 <tcp_process+0x400>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6910      	ldr	r0, [r2, #16]
 800cdec:	2200      	movs	r2, #0
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4798      	blx	r3
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	77bb      	strb	r3, [r7, #30]
 800cdf6:	e001      	b.n	800cdfc <tcp_process+0x404>
 800cdf8:	23f0      	movs	r3, #240	@ 0xf0
 800cdfa:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800cdfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00a      	beq.n	800ce1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ce04:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ce08:	f113 0f0d 	cmn.w	r3, #13
 800ce0c:	d002      	beq.n	800ce14 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7fd fffc 	bl	800ae0c <tcp_abort>
            }
            return ERR_ABRT;
 800ce14:	f06f 030c 	mvn.w	r3, #12
 800ce18:	e1ce      	b.n	800d1b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fa58 	bl	800d2d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ce20:	4b63      	ldr	r3, [pc, #396]	@ (800cfb0 <tcp_process+0x5b8>)
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d005      	beq.n	800ce34 <tcp_process+0x43c>
            recv_acked--;
 800ce28:	4b61      	ldr	r3, [pc, #388]	@ (800cfb0 <tcp_process+0x5b8>)
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	4b5f      	ldr	r3, [pc, #380]	@ (800cfb0 <tcp_process+0x5b8>)
 800ce32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce38:	009a      	lsls	r2, r3, #2
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ce44:	428b      	cmp	r3, r1
 800ce46:	bf38      	it	cc
 800ce48:	460b      	movcc	r3, r1
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d204      	bcs.n	800ce58 <tcp_process+0x460>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	e00d      	b.n	800ce74 <tcp_process+0x47c>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce5c:	005b      	lsls	r3, r3, #1
 800ce5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d904      	bls.n	800ce70 <tcp_process+0x478>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	e001      	b.n	800ce74 <tcp_process+0x47c>
 800ce70:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ce7a:	4b4e      	ldr	r3, [pc, #312]	@ (800cfb4 <tcp_process+0x5bc>)
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d037      	beq.n	800cef6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	8b5b      	ldrh	r3, [r3, #26]
 800ce8a:	f043 0302 	orr.w	r3, r3, #2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2207      	movs	r2, #7
 800ce98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ce9a:	e02c      	b.n	800cef6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce9c:	4b3b      	ldr	r3, [pc, #236]	@ (800cf8c <tcp_process+0x594>)
 800ce9e:	6819      	ldr	r1, [r3, #0]
 800cea0:	4b3b      	ldr	r3, [pc, #236]	@ (800cf90 <tcp_process+0x598>)
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	461a      	mov	r2, r3
 800cea6:	4b3b      	ldr	r3, [pc, #236]	@ (800cf94 <tcp_process+0x59c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceac:	4b3a      	ldr	r3, [pc, #232]	@ (800cf98 <tcp_process+0x5a0>)
 800ceae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceb0:	885b      	ldrh	r3, [r3, #2]
 800ceb2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ceb4:	4a38      	ldr	r2, [pc, #224]	@ (800cf98 <tcp_process+0x5a0>)
 800ceb6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ceb8:	8812      	ldrh	r2, [r2, #0]
 800ceba:	b292      	uxth	r2, r2
 800cebc:	9202      	str	r2, [sp, #8]
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	4b36      	ldr	r3, [pc, #216]	@ (800cf9c <tcp_process+0x5a4>)
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	4b36      	ldr	r3, [pc, #216]	@ (800cfa0 <tcp_process+0x5a8>)
 800cec6:	4602      	mov	r2, r0
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f002 f855 	bl	800ef78 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cece:	e167      	b.n	800d1a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ced0:	4b2d      	ldr	r3, [pc, #180]	@ (800cf88 <tcp_process+0x590>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	f003 0302 	and.w	r3, r3, #2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 8161 	beq.w	800d1a0 <tcp_process+0x7a8>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee2:	1e5a      	subs	r2, r3, #1
 800cee4:	4b2b      	ldr	r3, [pc, #172]	@ (800cf94 <tcp_process+0x59c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	f040 8159 	bne.w	800d1a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 fe2c 	bl	800eb4c <tcp_rexmit>
      break;
 800cef4:	e154      	b.n	800d1a0 <tcp_process+0x7a8>
 800cef6:	e153      	b.n	800d1a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f9e9 	bl	800d2d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cefe:	4b2d      	ldr	r3, [pc, #180]	@ (800cfb4 <tcp_process+0x5bc>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	f003 0320 	and.w	r3, r3, #32
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f000 814c 	beq.w	800d1a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8b5b      	ldrh	r3, [r3, #26]
 800cf10:	f043 0302 	orr.w	r3, r3, #2
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2207      	movs	r2, #7
 800cf1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cf20:	e140      	b.n	800d1a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f9d4 	bl	800d2d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cf28:	4b22      	ldr	r3, [pc, #136]	@ (800cfb4 <tcp_process+0x5bc>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f003 0320 	and.w	r3, r3, #32
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d071      	beq.n	800d018 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf34:	4b14      	ldr	r3, [pc, #80]	@ (800cf88 <tcp_process+0x590>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	f003 0310 	and.w	r3, r3, #16
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d060      	beq.n	800d002 <tcp_process+0x60a>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf44:	4b11      	ldr	r3, [pc, #68]	@ (800cf8c <tcp_process+0x594>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d15a      	bne.n	800d002 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d156      	bne.n	800d002 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	8b5b      	ldrh	r3, [r3, #26]
 800cf58:	f043 0302 	orr.w	r3, r3, #2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7fe fdda 	bl	800bb1c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cf68:	4b13      	ldr	r3, [pc, #76]	@ (800cfb8 <tcp_process+0x5c0>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d105      	bne.n	800cf7e <tcp_process+0x586>
 800cf72:	4b11      	ldr	r3, [pc, #68]	@ (800cfb8 <tcp_process+0x5c0>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	4a0f      	ldr	r2, [pc, #60]	@ (800cfb8 <tcp_process+0x5c0>)
 800cf7a:	6013      	str	r3, [r2, #0]
 800cf7c:	e02e      	b.n	800cfdc <tcp_process+0x5e4>
 800cf7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb8 <tcp_process+0x5c0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	613b      	str	r3, [r7, #16]
 800cf84:	e027      	b.n	800cfd6 <tcp_process+0x5de>
 800cf86:	bf00      	nop
 800cf88:	20004adc 	.word	0x20004adc
 800cf8c:	20004ad4 	.word	0x20004ad4
 800cf90:	20004ada 	.word	0x20004ada
 800cf94:	20004ad0 	.word	0x20004ad0
 800cf98:	20004ac0 	.word	0x20004ac0
 800cf9c:	200054fc 	.word	0x200054fc
 800cfa0:	20005500 	.word	0x20005500
 800cfa4:	08016ab4 	.word	0x08016ab4
 800cfa8:	08016d50 	.word	0x08016d50
 800cfac:	08016afc 	.word	0x08016afc
 800cfb0:	20004ad8 	.word	0x20004ad8
 800cfb4:	20004add 	.word	0x20004add
 800cfb8:	2000d8f8 	.word	0x2000d8f8
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d104      	bne.n	800cfd0 <tcp_process+0x5d8>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	60da      	str	r2, [r3, #12]
 800cfce:	e005      	b.n	800cfdc <tcp_process+0x5e4>
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	613b      	str	r3, [r7, #16]
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1ef      	bne.n	800cfbc <tcp_process+0x5c4>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	60da      	str	r2, [r3, #12]
 800cfe2:	4b77      	ldr	r3, [pc, #476]	@ (800d1c0 <tcp_process+0x7c8>)
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	220a      	movs	r2, #10
 800cfec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cfee:	4b75      	ldr	r3, [pc, #468]	@ (800d1c4 <tcp_process+0x7cc>)
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	60da      	str	r2, [r3, #12]
 800cff6:	4a73      	ldr	r2, [pc, #460]	@ (800d1c4 <tcp_process+0x7cc>)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	f002 f97e 	bl	800f2fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d000:	e0d2      	b.n	800d1a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8b5b      	ldrh	r3, [r3, #26]
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2208      	movs	r2, #8
 800d014:	751a      	strb	r2, [r3, #20]
      break;
 800d016:	e0c7      	b.n	800d1a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d018:	4b6b      	ldr	r3, [pc, #428]	@ (800d1c8 <tcp_process+0x7d0>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 0310 	and.w	r3, r3, #16
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 80c1 	beq.w	800d1a8 <tcp_process+0x7b0>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d02a:	4b68      	ldr	r3, [pc, #416]	@ (800d1cc <tcp_process+0x7d4>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	f040 80ba 	bne.w	800d1a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f040 80b5 	bne.w	800d1a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2206      	movs	r2, #6
 800d042:	751a      	strb	r2, [r3, #20]
      break;
 800d044:	e0b0      	b.n	800d1a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f942 	bl	800d2d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d04c:	4b60      	ldr	r3, [pc, #384]	@ (800d1d0 <tcp_process+0x7d8>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 80a9 	beq.w	800d1ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	8b5b      	ldrh	r3, [r3, #26]
 800d05e:	f043 0302 	orr.w	r3, r3, #2
 800d062:	b29a      	uxth	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7fe fd57 	bl	800bb1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d06e:	4b59      	ldr	r3, [pc, #356]	@ (800d1d4 <tcp_process+0x7dc>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	429a      	cmp	r2, r3
 800d076:	d105      	bne.n	800d084 <tcp_process+0x68c>
 800d078:	4b56      	ldr	r3, [pc, #344]	@ (800d1d4 <tcp_process+0x7dc>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	4a55      	ldr	r2, [pc, #340]	@ (800d1d4 <tcp_process+0x7dc>)
 800d080:	6013      	str	r3, [r2, #0]
 800d082:	e013      	b.n	800d0ac <tcp_process+0x6b4>
 800d084:	4b53      	ldr	r3, [pc, #332]	@ (800d1d4 <tcp_process+0x7dc>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	60fb      	str	r3, [r7, #12]
 800d08a:	e00c      	b.n	800d0a6 <tcp_process+0x6ae>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	429a      	cmp	r2, r3
 800d094:	d104      	bne.n	800d0a0 <tcp_process+0x6a8>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	60da      	str	r2, [r3, #12]
 800d09e:	e005      	b.n	800d0ac <tcp_process+0x6b4>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1ef      	bne.n	800d08c <tcp_process+0x694>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	60da      	str	r2, [r3, #12]
 800d0b2:	4b43      	ldr	r3, [pc, #268]	@ (800d1c0 <tcp_process+0x7c8>)
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	220a      	movs	r2, #10
 800d0bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d0be:	4b41      	ldr	r3, [pc, #260]	@ (800d1c4 <tcp_process+0x7cc>)
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	60da      	str	r2, [r3, #12]
 800d0c6:	4a3f      	ldr	r2, [pc, #252]	@ (800d1c4 <tcp_process+0x7cc>)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	f002 f916 	bl	800f2fc <tcp_timer_needed>
      }
      break;
 800d0d0:	e06c      	b.n	800d1ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f8fc 	bl	800d2d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d0d8:	4b3b      	ldr	r3, [pc, #236]	@ (800d1c8 <tcp_process+0x7d0>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0310 	and.w	r3, r3, #16
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d065      	beq.n	800d1b0 <tcp_process+0x7b8>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0e8:	4b38      	ldr	r3, [pc, #224]	@ (800d1cc <tcp_process+0x7d4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d15f      	bne.n	800d1b0 <tcp_process+0x7b8>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d15b      	bne.n	800d1b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7fe fd0f 	bl	800bb1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d0fe:	4b35      	ldr	r3, [pc, #212]	@ (800d1d4 <tcp_process+0x7dc>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	429a      	cmp	r2, r3
 800d106:	d105      	bne.n	800d114 <tcp_process+0x71c>
 800d108:	4b32      	ldr	r3, [pc, #200]	@ (800d1d4 <tcp_process+0x7dc>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	4a31      	ldr	r2, [pc, #196]	@ (800d1d4 <tcp_process+0x7dc>)
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	e013      	b.n	800d13c <tcp_process+0x744>
 800d114:	4b2f      	ldr	r3, [pc, #188]	@ (800d1d4 <tcp_process+0x7dc>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	61bb      	str	r3, [r7, #24]
 800d11a:	e00c      	b.n	800d136 <tcp_process+0x73e>
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	429a      	cmp	r2, r3
 800d124:	d104      	bne.n	800d130 <tcp_process+0x738>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68da      	ldr	r2, [r3, #12]
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	60da      	str	r2, [r3, #12]
 800d12e:	e005      	b.n	800d13c <tcp_process+0x744>
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	61bb      	str	r3, [r7, #24]
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1ef      	bne.n	800d11c <tcp_process+0x724>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	60da      	str	r2, [r3, #12]
 800d142:	4b1f      	ldr	r3, [pc, #124]	@ (800d1c0 <tcp_process+0x7c8>)
 800d144:	2201      	movs	r2, #1
 800d146:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	220a      	movs	r2, #10
 800d14c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d14e:	4b1d      	ldr	r3, [pc, #116]	@ (800d1c4 <tcp_process+0x7cc>)
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60da      	str	r2, [r3, #12]
 800d156:	4a1b      	ldr	r2, [pc, #108]	@ (800d1c4 <tcp_process+0x7cc>)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	f002 f8ce 	bl	800f2fc <tcp_timer_needed>
      }
      break;
 800d160:	e026      	b.n	800d1b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f8b4 	bl	800d2d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d168:	4b17      	ldr	r3, [pc, #92]	@ (800d1c8 <tcp_process+0x7d0>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	f003 0310 	and.w	r3, r3, #16
 800d170:	2b00      	cmp	r3, #0
 800d172:	d01f      	beq.n	800d1b4 <tcp_process+0x7bc>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d178:	4b14      	ldr	r3, [pc, #80]	@ (800d1cc <tcp_process+0x7d4>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d119      	bne.n	800d1b4 <tcp_process+0x7bc>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d115      	bne.n	800d1b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d188:	4b11      	ldr	r3, [pc, #68]	@ (800d1d0 <tcp_process+0x7d8>)
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	f043 0310 	orr.w	r3, r3, #16
 800d190:	b2da      	uxtb	r2, r3
 800d192:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d0 <tcp_process+0x7d8>)
 800d194:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d196:	e00d      	b.n	800d1b4 <tcp_process+0x7bc>
    default:
      break;
 800d198:	bf00      	nop
 800d19a:	e00c      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d19c:	bf00      	nop
 800d19e:	e00a      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1a0:	bf00      	nop
 800d1a2:	e008      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1a4:	bf00      	nop
 800d1a6:	e006      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1a8:	bf00      	nop
 800d1aa:	e004      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1ac:	bf00      	nop
 800d1ae:	e002      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1b0:	bf00      	nop
 800d1b2:	e000      	b.n	800d1b6 <tcp_process+0x7be>
      break;
 800d1b4:	bf00      	nop
  }
  return ERR_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3724      	adds	r7, #36	@ 0x24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd90      	pop	{r4, r7, pc}
 800d1c0:	2000d8f4 	.word	0x2000d8f4
 800d1c4:	2000d908 	.word	0x2000d908
 800d1c8:	20004adc 	.word	0x20004adc
 800d1cc:	20004ad4 	.word	0x20004ad4
 800d1d0:	20004add 	.word	0x20004add
 800d1d4:	2000d8f8 	.word	0x2000d8f8

0800d1d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d1d8:	b5b0      	push	{r4, r5, r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d1e6:	e03e      	b.n	800d266 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fd f8e2 	bl	800a3c0 <pbuf_clen>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d206:	8a7a      	ldrh	r2, [r7, #18]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d906      	bls.n	800d21a <tcp_free_acked_segments+0x42>
 800d20c:	4b2a      	ldr	r3, [pc, #168]	@ (800d2b8 <tcp_free_acked_segments+0xe0>)
 800d20e:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800d212:	492a      	ldr	r1, [pc, #168]	@ (800d2bc <tcp_free_acked_segments+0xe4>)
 800d214:	482a      	ldr	r0, [pc, #168]	@ (800d2c0 <tcp_free_acked_segments+0xe8>)
 800d216:	f7f3 fcd9 	bl	8000bcc <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800d220:	8a7b      	ldrh	r3, [r7, #18]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	b29a      	uxth	r2, r3
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	891a      	ldrh	r2, [r3, #8]
 800d230:	4b24      	ldr	r3, [pc, #144]	@ (800d2c4 <tcp_free_acked_segments+0xec>)
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	4413      	add	r3, r2
 800d236:	b29a      	uxth	r2, r3
 800d238:	4b22      	ldr	r3, [pc, #136]	@ (800d2c4 <tcp_free_acked_segments+0xec>)
 800d23a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f7fe fab4 	bl	800b7aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00c      	beq.n	800d266 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d109      	bne.n	800d266 <tcp_free_acked_segments+0x8e>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d106      	bne.n	800d266 <tcp_free_acked_segments+0x8e>
 800d258:	4b17      	ldr	r3, [pc, #92]	@ (800d2b8 <tcp_free_acked_segments+0xe0>)
 800d25a:	f240 4262 	movw	r2, #1122	@ 0x462
 800d25e:	491a      	ldr	r1, [pc, #104]	@ (800d2c8 <tcp_free_acked_segments+0xf0>)
 800d260:	4817      	ldr	r0, [pc, #92]	@ (800d2c0 <tcp_free_acked_segments+0xe8>)
 800d262:	f7f3 fcb3 	bl	8000bcc <printf>
  while (seg_list != NULL &&
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d020      	beq.n	800d2ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	4618      	mov	r0, r3
 800d274:	f7fb fbed 	bl	8008a52 <lwip_htonl>
 800d278:	4604      	mov	r4, r0
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	461d      	mov	r5, r3
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	899b      	ldrh	r3, [r3, #12]
 800d286:	b29b      	uxth	r3, r3
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fb fbcd 	bl	8008a28 <lwip_htons>
 800d28e:	4603      	mov	r3, r0
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <tcp_free_acked_segments+0xc6>
 800d29a:	2301      	movs	r3, #1
 800d29c:	e000      	b.n	800d2a0 <tcp_free_acked_segments+0xc8>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	442b      	add	r3, r5
 800d2a2:	18e2      	adds	r2, r4, r3
 800d2a4:	4b09      	ldr	r3, [pc, #36]	@ (800d2cc <tcp_free_acked_segments+0xf4>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	dd9c      	ble.n	800d1e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d2ae:	68bb      	ldr	r3, [r7, #8]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d2b8:	08016ab4 	.word	0x08016ab4
 800d2bc:	08016d70 	.word	0x08016d70
 800d2c0:	08016afc 	.word	0x08016afc
 800d2c4:	20004ad8 	.word	0x20004ad8
 800d2c8:	08016d98 	.word	0x08016d98
 800d2cc:	20004ad4 	.word	0x20004ad4

0800d2d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d2d0:	b590      	push	{r4, r7, lr}
 800d2d2:	b08b      	sub	sp, #44	@ 0x2c
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d106      	bne.n	800d2f0 <tcp_receive+0x20>
 800d2e2:	4b91      	ldr	r3, [pc, #580]	@ (800d528 <tcp_receive+0x258>)
 800d2e4:	f240 427c 	movw	r2, #1148	@ 0x47c
 800d2e8:	4990      	ldr	r1, [pc, #576]	@ (800d52c <tcp_receive+0x25c>)
 800d2ea:	4891      	ldr	r0, [pc, #580]	@ (800d530 <tcp_receive+0x260>)
 800d2ec:	f7f3 fc6e 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7d1b      	ldrb	r3, [r3, #20]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d806      	bhi.n	800d306 <tcp_receive+0x36>
 800d2f8:	4b8b      	ldr	r3, [pc, #556]	@ (800d528 <tcp_receive+0x258>)
 800d2fa:	f240 427d 	movw	r2, #1149	@ 0x47d
 800d2fe:	498d      	ldr	r1, [pc, #564]	@ (800d534 <tcp_receive+0x264>)
 800d300:	488b      	ldr	r0, [pc, #556]	@ (800d530 <tcp_receive+0x260>)
 800d302:	f7f3 fc63 	bl	8000bcc <printf>

  if (flags & TCP_ACK) {
 800d306:	4b8c      	ldr	r3, [pc, #560]	@ (800d538 <tcp_receive+0x268>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	f003 0310 	and.w	r3, r3, #16
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 8259 	beq.w	800d7c6 <tcp_receive+0x4f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d31a:	461a      	mov	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d320:	4413      	add	r3, r2
 800d322:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d328:	4b84      	ldr	r3, [pc, #528]	@ (800d53c <tcp_receive+0x26c>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	db1b      	blt.n	800d36a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d336:	4b81      	ldr	r3, [pc, #516]	@ (800d53c <tcp_receive+0x26c>)
 800d338:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d106      	bne.n	800d34c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d342:	4b7f      	ldr	r3, [pc, #508]	@ (800d540 <tcp_receive+0x270>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	db0e      	blt.n	800d36a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d350:	4b7b      	ldr	r3, [pc, #492]	@ (800d540 <tcp_receive+0x270>)
 800d352:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d354:	429a      	cmp	r2, r3
 800d356:	d125      	bne.n	800d3a4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d358:	4b7a      	ldr	r3, [pc, #488]	@ (800d544 <tcp_receive+0x274>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	89db      	ldrh	r3, [r3, #14]
 800d35e:	b29a      	uxth	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d366:	429a      	cmp	r2, r3
 800d368:	d91c      	bls.n	800d3a4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d36a:	4b76      	ldr	r3, [pc, #472]	@ (800d544 <tcp_receive+0x274>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	89db      	ldrh	r3, [r3, #14]
 800d370:	b29a      	uxth	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d384:	429a      	cmp	r2, r3
 800d386:	d205      	bcs.n	800d394 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d394:	4b69      	ldr	r3, [pc, #420]	@ (800d53c <tcp_receive+0x26c>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d39c:	4b68      	ldr	r3, [pc, #416]	@ (800d540 <tcp_receive+0x270>)
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d3a4:	4b66      	ldr	r3, [pc, #408]	@ (800d540 <tcp_receive+0x270>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	dc58      	bgt.n	800d464 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d3b2:	4b65      	ldr	r3, [pc, #404]	@ (800d548 <tcp_receive+0x278>)
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d14b      	bne.n	800d452 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d3c4:	4413      	add	r3, r2
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d142      	bne.n	800d452 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	db3d      	blt.n	800d452 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3da:	4b59      	ldr	r3, [pc, #356]	@ (800d540 <tcp_receive+0x270>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d137      	bne.n	800d452 <tcp_receive+0x182>
              found_dupack = 1;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	623b      	str	r3, [r7, #32]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d3ec:	2bff      	cmp	r3, #255	@ 0xff
 800d3ee:	d007      	beq.n	800d400 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d406:	2b03      	cmp	r3, #3
 800d408:	d91b      	bls.n	800d442 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d414:	4413      	add	r3, r2
 800d416:	b29a      	uxth	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d41e:	429a      	cmp	r2, r3
 800d420:	d30a      	bcc.n	800d438 <tcp_receive+0x168>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d42c:	4413      	add	r3, r2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d436:	e004      	b.n	800d442 <tcp_receive+0x172>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d43e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d902      	bls.n	800d452 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 fbe9 	bl	800ec24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f040 815f 	bne.w	800d718 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d462:	e159      	b.n	800d718 <tcp_receive+0x448>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d464:	4b36      	ldr	r3, [pc, #216]	@ (800d540 <tcp_receive+0x270>)
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	3b01      	subs	r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	f2c0 814c 	blt.w	800d70e <tcp_receive+0x43e>
 800d476:	4b32      	ldr	r3, [pc, #200]	@ (800d540 <tcp_receive+0x270>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	f300 8144 	bgt.w	800d70e <tcp_receive+0x43e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	8b5b      	ldrh	r3, [r3, #26]
 800d48a:	f003 0304 	and.w	r3, r3, #4
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d010      	beq.n	800d4b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f023 0304 	bic.w	r3, r3, #4
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d4c2:	10db      	asrs	r3, r3, #3
 800d4c4:	b21b      	sxth	r3, r3
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4413      	add	r3, r2
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	b21a      	sxth	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d4dc:	4b18      	ldr	r3, [pc, #96]	@ (800d540 <tcp_receive+0x270>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	82bb      	strh	r3, [r7, #20]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d4f4:	4b12      	ldr	r3, [pc, #72]	@ (800d540 <tcp_receive+0x270>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7d1b      	ldrb	r3, [r3, #20]
 800d500:	2b03      	cmp	r3, #3
 800d502:	f240 8095 	bls.w	800d630 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d512:	429a      	cmp	r2, r3
 800d514:	d243      	bcs.n	800d59e <tcp_receive+0x2ce>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	8b5b      	ldrh	r3, [r3, #26]
 800d51a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d014      	beq.n	800d54c <tcp_receive+0x27c>
 800d522:	2301      	movs	r3, #1
 800d524:	e013      	b.n	800d54e <tcp_receive+0x27e>
 800d526:	bf00      	nop
 800d528:	08016ab4 	.word	0x08016ab4
 800d52c:	08016db8 	.word	0x08016db8
 800d530:	08016afc 	.word	0x08016afc
 800d534:	08016dd4 	.word	0x08016dd4
 800d538:	20004adc 	.word	0x20004adc
 800d53c:	20004ad0 	.word	0x20004ad0
 800d540:	20004ad4 	.word	0x20004ad4
 800d544:	20004ac0 	.word	0x20004ac0
 800d548:	20004ada 	.word	0x20004ada
 800d54c:	2302      	movs	r3, #2
 800d54e:	74fb      	strb	r3, [r7, #19]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d550:	7cfb      	ldrb	r3, [r7, #19]
 800d552:	b29a      	uxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d558:	fb12 f303 	smulbb	r3, r2, r3
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	8aba      	ldrh	r2, [r7, #20]
 800d560:	4293      	cmp	r3, r2
 800d562:	bf28      	it	cs
 800d564:	4613      	movcs	r3, r2
 800d566:	823b      	strh	r3, [r7, #16]
          TCP_WND_INC(pcb->cwnd, increase);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d56e:	8a3b      	ldrh	r3, [r7, #16]
 800d570:	4413      	add	r3, r2
 800d572:	b29a      	uxth	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d309      	bcc.n	800d592 <tcp_receive+0x2c2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d584:	8a3b      	ldrh	r3, [r7, #16]
 800d586:	4413      	add	r3, r2
 800d588:	b29a      	uxth	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d590:	e04e      	b.n	800d630 <tcp_receive+0x360>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d598:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d59c:	e048      	b.n	800d630 <tcp_receive+0x360>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d5a4:	8abb      	ldrh	r3, [r7, #20]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d309      	bcc.n	800d5c8 <tcp_receive+0x2f8>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d5ba:	8abb      	ldrh	r3, [r7, #20]
 800d5bc:	4413      	add	r3, r2
 800d5be:	b29a      	uxth	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d5c6:	e004      	b.n	800d5d2 <tcp_receive+0x302>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d326      	bcc.n	800d630 <tcp_receive+0x360>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d602:	4413      	add	r3, r2
 800d604:	b29a      	uxth	r2, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d30a      	bcc.n	800d626 <tcp_receive+0x356>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d61a:	4413      	add	r3, r2
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d624:	e004      	b.n	800d630 <tcp_receive+0x360>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d62c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d638:	4a91      	ldr	r2, [pc, #580]	@ (800d880 <tcp_receive+0x5b0>)
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff fdcc 	bl	800d1d8 <tcp_free_acked_segments>
 800d640:	4602      	mov	r2, r0
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d64e:	4a8d      	ldr	r2, [pc, #564]	@ (800d884 <tcp_receive+0x5b4>)
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff fdc1 	bl	800d1d8 <tcp_free_acked_segments>
 800d656:	4602      	mov	r2, r0
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <tcp_receive+0x39e>
        pcb->rtime = -1;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d66a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d66c:	e002      	b.n	800d674 <tcp_receive+0x3a4>
      } else {
        pcb->rtime = 0;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d103      	bne.n	800d68a <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d690:	4b7d      	ldr	r3, [pc, #500]	@ (800d888 <tcp_receive+0x5b8>)
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	4413      	add	r3, r2
 800d696:	b29a      	uxth	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	8b5b      	ldrh	r3, [r3, #26]
 800d6a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d035      	beq.n	800d716 <tcp_receive+0x446>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d118      	bne.n	800d6e4 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00c      	beq.n	800d6d4 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fb f9c3 	bl	8008a52 <lwip_htonl>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dc20      	bgt.n	800d716 <tcp_receive+0x446>
            tcp_clear_flags(pcb, TF_RTO);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	8b5b      	ldrh	r3, [r3, #26]
 800d6d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d6e2:	e018      	b.n	800d716 <tcp_receive+0x446>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fb f9ae 	bl	8008a52 <lwip_htonl>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	1ae3      	subs	r3, r4, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	dc0b      	bgt.n	800d716 <tcp_receive+0x446>
          tcp_clear_flags(pcb, TF_RTO);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	8b5b      	ldrh	r3, [r3, #26]
 800d702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d706:	b29a      	uxth	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d70c:	e003      	b.n	800d716 <tcp_receive+0x446>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 fc84 	bl	800f01c <tcp_send_empty_ack>
 800d714:	e000      	b.n	800d718 <tcp_receive+0x448>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d716:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d052      	beq.n	800d7c6 <tcp_receive+0x4f6>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d724:	4b59      	ldr	r3, [pc, #356]	@ (800d88c <tcp_receive+0x5bc>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da4b      	bge.n	800d7c6 <tcp_receive+0x4f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d72e:	4b58      	ldr	r3, [pc, #352]	@ (800d890 <tcp_receive+0x5c0>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	b29a      	uxth	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d738:	b29b      	uxth	r3, r3
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d740:	8bfa      	ldrh	r2, [r7, #30]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d748:	10db      	asrs	r3, r3, #3
 800d74a:	b21b      	sxth	r3, r3
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	b29b      	uxth	r3, r3
 800d752:	83fb      	strh	r3, [r7, #30]
      pcb->sa = (s16_t)(pcb->sa + m);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	8bfb      	ldrh	r3, [r7, #30]
 800d75e:	4413      	add	r3, r2
 800d760:	b29b      	uxth	r3, r3
 800d762:	b21a      	sxth	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d768:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	da03      	bge.n	800d778 <tcp_receive+0x4a8>
        m = (s16_t) - m;
 800d770:	8bfb      	ldrh	r3, [r7, #30]
 800d772:	425b      	negs	r3, r3
 800d774:	b29b      	uxth	r3, r3
 800d776:	83fb      	strh	r3, [r7, #30]
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d778:	8bfa      	ldrh	r2, [r7, #30]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d780:	109b      	asrs	r3, r3, #2
 800d782:	b21b      	sxth	r3, r3
 800d784:	b29b      	uxth	r3, r3
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	b29b      	uxth	r3, r3
 800d78a:	83fb      	strh	r3, [r7, #30]
      pcb->sv = (s16_t)(pcb->sv + m);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d792:	b29a      	uxth	r2, r3
 800d794:	8bfb      	ldrh	r3, [r7, #30]
 800d796:	4413      	add	r3, r2
 800d798:	b29b      	uxth	r3, r3
 800d79a:	b21a      	sxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d7a6:	10db      	asrs	r3, r3, #3
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	b21a      	sxth	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d7c6:	4b33      	ldr	r3, [pc, #204]	@ (800d894 <tcp_receive+0x5c4>)
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 81c6 	beq.w	800db5c <tcp_receive+0x88c>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7d1b      	ldrb	r3, [r3, #20]
 800d7d4:	2b06      	cmp	r3, #6
 800d7d6:	f200 81c1 	bhi.w	800db5c <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7de:	4b2e      	ldr	r3, [pc, #184]	@ (800d898 <tcp_receive+0x5c8>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f2c0 8086 	blt.w	800d8f8 <tcp_receive+0x628>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7f0:	4b28      	ldr	r3, [pc, #160]	@ (800d894 <tcp_receive+0x5c4>)
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	4b28      	ldr	r3, [pc, #160]	@ (800d898 <tcp_receive+0x5c8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	440b      	add	r3, r1
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	3301      	adds	r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	dc79      	bgt.n	800d8f8 <tcp_receive+0x628>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d804:	4b25      	ldr	r3, [pc, #148]	@ (800d89c <tcp_receive+0x5cc>)
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	61bb      	str	r3, [r7, #24]
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d80e:	4b22      	ldr	r3, [pc, #136]	@ (800d898 <tcp_receive+0x5c8>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	60fb      	str	r3, [r7, #12]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d816:	4b21      	ldr	r3, [pc, #132]	@ (800d89c <tcp_receive+0x5cc>)
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <tcp_receive+0x55c>
 800d81e:	4b20      	ldr	r3, [pc, #128]	@ (800d8a0 <tcp_receive+0x5d0>)
 800d820:	f240 5295 	movw	r2, #1429	@ 0x595
 800d824:	491f      	ldr	r1, [pc, #124]	@ (800d8a4 <tcp_receive+0x5d4>)
 800d826:	4820      	ldr	r0, [pc, #128]	@ (800d8a8 <tcp_receive+0x5d8>)
 800d828:	f7f3 f9d0 	bl	8000bcc <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d832:	4293      	cmp	r3, r2
 800d834:	d906      	bls.n	800d844 <tcp_receive+0x574>
 800d836:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a0 <tcp_receive+0x5d0>)
 800d838:	f240 5296 	movw	r2, #1430	@ 0x596
 800d83c:	491b      	ldr	r1, [pc, #108]	@ (800d8ac <tcp_receive+0x5dc>)
 800d83e:	481a      	ldr	r0, [pc, #104]	@ (800d8a8 <tcp_receive+0x5d8>)
 800d840:	f7f3 f9c4 	bl	8000bcc <printf>
      off = (u16_t)off32;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	82fb      	strh	r3, [r7, #22]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d848:	4b14      	ldr	r3, [pc, #80]	@ (800d89c <tcp_receive+0x5cc>)
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	891b      	ldrh	r3, [r3, #8]
 800d84e:	8afa      	ldrh	r2, [r7, #22]
 800d850:	429a      	cmp	r2, r3
 800d852:	d906      	bls.n	800d862 <tcp_receive+0x592>
 800d854:	4b12      	ldr	r3, [pc, #72]	@ (800d8a0 <tcp_receive+0x5d0>)
 800d856:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 800d85a:	4915      	ldr	r1, [pc, #84]	@ (800d8b0 <tcp_receive+0x5e0>)
 800d85c:	4812      	ldr	r0, [pc, #72]	@ (800d8a8 <tcp_receive+0x5d8>)
 800d85e:	f7f3 f9b5 	bl	8000bcc <printf>
      inseg.len -= off;
 800d862:	4b0e      	ldr	r3, [pc, #56]	@ (800d89c <tcp_receive+0x5cc>)
 800d864:	891a      	ldrh	r2, [r3, #8]
 800d866:	8afb      	ldrh	r3, [r7, #22]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	4b0b      	ldr	r3, [pc, #44]	@ (800d89c <tcp_receive+0x5cc>)
 800d86e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d870:	4b0a      	ldr	r3, [pc, #40]	@ (800d89c <tcp_receive+0x5cc>)
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	891a      	ldrh	r2, [r3, #8]
 800d876:	8afb      	ldrh	r3, [r7, #22]
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	817b      	strh	r3, [r7, #10]
      while (p->len < off) {
 800d87c:	e028      	b.n	800d8d0 <tcp_receive+0x600>
 800d87e:	bf00      	nop
 800d880:	08016df0 	.word	0x08016df0
 800d884:	08016df8 	.word	0x08016df8
 800d888:	20004ad8 	.word	0x20004ad8
 800d88c:	20004ad4 	.word	0x20004ad4
 800d890:	2000d8fc 	.word	0x2000d8fc
 800d894:	20004ada 	.word	0x20004ada
 800d898:	20004ad0 	.word	0x20004ad0
 800d89c:	20004aac 	.word	0x20004aac
 800d8a0:	08016ab4 	.word	0x08016ab4
 800d8a4:	08016e00 	.word	0x08016e00
 800d8a8:	08016afc 	.word	0x08016afc
 800d8ac:	08016e10 	.word	0x08016e10
 800d8b0:	08016e20 	.word	0x08016e20
        off -= p->len;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	82fb      	strh	r3, [r7, #22]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	897a      	ldrh	r2, [r7, #10]
 800d8c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	61bb      	str	r3, [r7, #24]
      while (p->len < off) {
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	895b      	ldrh	r3, [r3, #10]
 800d8d4:	8afa      	ldrh	r2, [r7, #22]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d8ec      	bhi.n	800d8b4 <tcp_receive+0x5e4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d8da:	8afb      	ldrh	r3, [r7, #22]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	69b8      	ldr	r0, [r7, #24]
 800d8e0:	f7fc fc64 	bl	800a1ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8e8:	4a93      	ldr	r2, [pc, #588]	@ (800db38 <tcp_receive+0x868>)
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	4b93      	ldr	r3, [pc, #588]	@ (800db3c <tcp_receive+0x86c>)
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	4a91      	ldr	r2, [pc, #580]	@ (800db38 <tcp_receive+0x868>)
 800d8f2:	6812      	ldr	r2, [r2, #0]
 800d8f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d8f6:	e00d      	b.n	800d914 <tcp_receive+0x644>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d8f8:	4b8f      	ldr	r3, [pc, #572]	@ (800db38 <tcp_receive+0x868>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	2b00      	cmp	r3, #0
 800d904:	da06      	bge.n	800d914 <tcp_receive+0x644>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	8b5b      	ldrh	r3, [r3, #26]
 800d90a:	f043 0302 	orr.w	r3, r3, #2
 800d90e:	b29a      	uxth	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d914:	4b88      	ldr	r3, [pc, #544]	@ (800db38 <tcp_receive+0x868>)
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d91c:	1ad3      	subs	r3, r2, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f2c0 8105 	blt.w	800db2e <tcp_receive+0x85e>
 800d924:	4b84      	ldr	r3, [pc, #528]	@ (800db38 <tcp_receive+0x868>)
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d930:	440b      	add	r3, r1
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	3301      	adds	r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	f300 80f9 	bgt.w	800db2e <tcp_receive+0x85e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d940:	4b7d      	ldr	r3, [pc, #500]	@ (800db38 <tcp_receive+0x868>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	429a      	cmp	r2, r3
 800d946:	f040 80ee 	bne.w	800db26 <tcp_receive+0x856>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d94a:	4b7c      	ldr	r3, [pc, #496]	@ (800db3c <tcp_receive+0x86c>)
 800d94c:	891c      	ldrh	r4, [r3, #8]
 800d94e:	4b7b      	ldr	r3, [pc, #492]	@ (800db3c <tcp_receive+0x86c>)
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	899b      	ldrh	r3, [r3, #12]
 800d954:	b29b      	uxth	r3, r3
 800d956:	4618      	mov	r0, r3
 800d958:	f7fb f866 	bl	8008a28 <lwip_htons>
 800d95c:	4603      	mov	r3, r0
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f003 0303 	and.w	r3, r3, #3
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <tcp_receive+0x69c>
 800d968:	2301      	movs	r3, #1
 800d96a:	e000      	b.n	800d96e <tcp_receive+0x69e>
 800d96c:	2300      	movs	r3, #0
 800d96e:	4423      	add	r3, r4
 800d970:	b29a      	uxth	r2, r3
 800d972:	4b73      	ldr	r3, [pc, #460]	@ (800db40 <tcp_receive+0x870>)
 800d974:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d97a:	4b71      	ldr	r3, [pc, #452]	@ (800db40 <tcp_receive+0x870>)
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d274      	bcs.n	800da6c <tcp_receive+0x79c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d982:	4b6e      	ldr	r3, [pc, #440]	@ (800db3c <tcp_receive+0x86c>)
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	899b      	ldrh	r3, [r3, #12]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fb f84c 	bl	8008a28 <lwip_htons>
 800d990:	4603      	mov	r3, r0
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d01e      	beq.n	800d9da <tcp_receive+0x70a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d99c:	4b67      	ldr	r3, [pc, #412]	@ (800db3c <tcp_receive+0x86c>)
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	899b      	ldrh	r3, [r3, #12]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	b21b      	sxth	r3, r3
 800d9a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d9aa:	b21c      	sxth	r4, r3
 800d9ac:	4b63      	ldr	r3, [pc, #396]	@ (800db3c <tcp_receive+0x86c>)
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	899b      	ldrh	r3, [r3, #12]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fb f837 	bl	8008a28 <lwip_htons>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fb f82f 	bl	8008a28 <lwip_htons>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	4323      	orrs	r3, r4
 800d9d0:	b21a      	sxth	r2, r3
 800d9d2:	4b5a      	ldr	r3, [pc, #360]	@ (800db3c <tcp_receive+0x86c>)
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	b292      	uxth	r2, r2
 800d9d8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d9de:	4b57      	ldr	r3, [pc, #348]	@ (800db3c <tcp_receive+0x86c>)
 800d9e0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d9e2:	4b56      	ldr	r3, [pc, #344]	@ (800db3c <tcp_receive+0x86c>)
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	899b      	ldrh	r3, [r3, #12]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fb f81c 	bl	8008a28 <lwip_htons>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d005      	beq.n	800da08 <tcp_receive+0x738>
            inseg.len -= 1;
 800d9fc:	4b4f      	ldr	r3, [pc, #316]	@ (800db3c <tcp_receive+0x86c>)
 800d9fe:	891b      	ldrh	r3, [r3, #8]
 800da00:	3b01      	subs	r3, #1
 800da02:	b29a      	uxth	r2, r3
 800da04:	4b4d      	ldr	r3, [pc, #308]	@ (800db3c <tcp_receive+0x86c>)
 800da06:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800da08:	4b4c      	ldr	r3, [pc, #304]	@ (800db3c <tcp_receive+0x86c>)
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	4a4b      	ldr	r2, [pc, #300]	@ (800db3c <tcp_receive+0x86c>)
 800da0e:	8912      	ldrh	r2, [r2, #8]
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f7fc faca 	bl	8009fac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800da18:	4b48      	ldr	r3, [pc, #288]	@ (800db3c <tcp_receive+0x86c>)
 800da1a:	891c      	ldrh	r4, [r3, #8]
 800da1c:	4b47      	ldr	r3, [pc, #284]	@ (800db3c <tcp_receive+0x86c>)
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	899b      	ldrh	r3, [r3, #12]
 800da22:	b29b      	uxth	r3, r3
 800da24:	4618      	mov	r0, r3
 800da26:	f7fa ffff 	bl	8008a28 <lwip_htons>
 800da2a:	4603      	mov	r3, r0
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <tcp_receive+0x76a>
 800da36:	2301      	movs	r3, #1
 800da38:	e000      	b.n	800da3c <tcp_receive+0x76c>
 800da3a:	2300      	movs	r3, #0
 800da3c:	4423      	add	r3, r4
 800da3e:	b29a      	uxth	r2, r3
 800da40:	4b3f      	ldr	r3, [pc, #252]	@ (800db40 <tcp_receive+0x870>)
 800da42:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da44:	4b3e      	ldr	r3, [pc, #248]	@ (800db40 <tcp_receive+0x870>)
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	461a      	mov	r2, r3
 800da4a:	4b3b      	ldr	r3, [pc, #236]	@ (800db38 <tcp_receive+0x868>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	441a      	add	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800da58:	440b      	add	r3, r1
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d006      	beq.n	800da6c <tcp_receive+0x79c>
 800da5e:	4b39      	ldr	r3, [pc, #228]	@ (800db44 <tcp_receive+0x874>)
 800da60:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800da64:	4938      	ldr	r1, [pc, #224]	@ (800db48 <tcp_receive+0x878>)
 800da66:	4839      	ldr	r0, [pc, #228]	@ (800db4c <tcp_receive+0x87c>)
 800da68:	f7f3 f8b0 	bl	8000bcc <printf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800da6c:	4b34      	ldr	r3, [pc, #208]	@ (800db40 <tcp_receive+0x870>)
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	461a      	mov	r2, r3
 800da72:	4b31      	ldr	r3, [pc, #196]	@ (800db38 <tcp_receive+0x868>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	441a      	add	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da80:	4b2f      	ldr	r3, [pc, #188]	@ (800db40 <tcp_receive+0x870>)
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d206      	bcs.n	800da96 <tcp_receive+0x7c6>
 800da88:	4b2e      	ldr	r3, [pc, #184]	@ (800db44 <tcp_receive+0x874>)
 800da8a:	f44f 62c1 	mov.w	r2, #1544	@ 0x608
 800da8e:	4930      	ldr	r1, [pc, #192]	@ (800db50 <tcp_receive+0x880>)
 800da90:	482e      	ldr	r0, [pc, #184]	@ (800db4c <tcp_receive+0x87c>)
 800da92:	f7f3 f89b 	bl	8000bcc <printf>
        pcb->rcv_wnd -= tcplen;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da9a:	4b29      	ldr	r3, [pc, #164]	@ (800db40 <tcp_receive+0x870>)
 800da9c:	881b      	ldrh	r3, [r3, #0]
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fd f9bc 	bl	800ae24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800daac:	4b23      	ldr	r3, [pc, #140]	@ (800db3c <tcp_receive+0x86c>)
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	891b      	ldrh	r3, [r3, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d006      	beq.n	800dac4 <tcp_receive+0x7f4>
          recv_data = inseg.p;
 800dab6:	4b21      	ldr	r3, [pc, #132]	@ (800db3c <tcp_receive+0x86c>)
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	4a26      	ldr	r2, [pc, #152]	@ (800db54 <tcp_receive+0x884>)
 800dabc:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dabe:	4b1f      	ldr	r3, [pc, #124]	@ (800db3c <tcp_receive+0x86c>)
 800dac0:	2200      	movs	r2, #0
 800dac2:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dac4:	4b1d      	ldr	r3, [pc, #116]	@ (800db3c <tcp_receive+0x86c>)
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fa ffab 	bl	8008a28 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d006      	beq.n	800daec <tcp_receive+0x81c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dade:	4b1e      	ldr	r3, [pc, #120]	@ (800db58 <tcp_receive+0x888>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	f043 0320 	orr.w	r3, r3, #32
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	4b1b      	ldr	r3, [pc, #108]	@ (800db58 <tcp_receive+0x888>)
 800daea:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	8b5b      	ldrh	r3, [r3, #26]
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00e      	beq.n	800db16 <tcp_receive+0x846>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	8b5b      	ldrh	r3, [r3, #26]
 800dafc:	f023 0301 	bic.w	r3, r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	835a      	strh	r2, [r3, #26]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	8b5b      	ldrh	r3, [r3, #26]
 800db0a:	f043 0302 	orr.w	r3, r3, #2
 800db0e:	b29a      	uxth	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db14:	e00f      	b.n	800db36 <tcp_receive+0x866>
        tcp_ack(pcb);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8b5b      	ldrh	r3, [r3, #26]
 800db1a:	f043 0301 	orr.w	r3, r3, #1
 800db1e:	b29a      	uxth	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db24:	e007      	b.n	800db36 <tcp_receive+0x866>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 fa78 	bl	800f01c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800db2c:	e003      	b.n	800db36 <tcp_receive+0x866>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f001 fa74 	bl	800f01c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800db34:	e02c      	b.n	800db90 <tcp_receive+0x8c0>
 800db36:	e02b      	b.n	800db90 <tcp_receive+0x8c0>
 800db38:	20004ad0 	.word	0x20004ad0
 800db3c:	20004aac 	.word	0x20004aac
 800db40:	20004ada 	.word	0x20004ada
 800db44:	08016ab4 	.word	0x08016ab4
 800db48:	08016e30 	.word	0x08016e30
 800db4c:	08016afc 	.word	0x08016afc
 800db50:	08016e68 	.word	0x08016e68
 800db54:	20004ae0 	.word	0x20004ae0
 800db58:	20004add 	.word	0x20004add
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800db5c:	4b0e      	ldr	r3, [pc, #56]	@ (800db98 <tcp_receive+0x8c8>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	db0a      	blt.n	800db80 <tcp_receive+0x8b0>
 800db6a:	4b0b      	ldr	r3, [pc, #44]	@ (800db98 <tcp_receive+0x8c8>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db72:	6879      	ldr	r1, [r7, #4]
 800db74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800db76:	440b      	add	r3, r1
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	3301      	adds	r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd07      	ble.n	800db90 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	8b5b      	ldrh	r3, [r3, #26]
 800db84:	f043 0302 	orr.w	r3, r3, #2
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800db8e:	e7ff      	b.n	800db90 <tcp_receive+0x8c0>
 800db90:	bf00      	nop
 800db92:	372c      	adds	r7, #44	@ 0x2c
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}
 800db98:	20004ad0 	.word	0x20004ad0

0800db9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dba2:	4b15      	ldr	r3, [pc, #84]	@ (800dbf8 <tcp_get_next_optbyte+0x5c>)
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	1c5a      	adds	r2, r3, #1
 800dba8:	b291      	uxth	r1, r2
 800dbaa:	4a13      	ldr	r2, [pc, #76]	@ (800dbf8 <tcp_get_next_optbyte+0x5c>)
 800dbac:	8011      	strh	r1, [r2, #0]
 800dbae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dbb0:	4b12      	ldr	r3, [pc, #72]	@ (800dbfc <tcp_get_next_optbyte+0x60>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d004      	beq.n	800dbc2 <tcp_get_next_optbyte+0x26>
 800dbb8:	4b11      	ldr	r3, [pc, #68]	@ (800dc00 <tcp_get_next_optbyte+0x64>)
 800dbba:	881b      	ldrh	r3, [r3, #0]
 800dbbc:	88fa      	ldrh	r2, [r7, #6]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d208      	bcs.n	800dbd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dbc2:	4b10      	ldr	r3, [pc, #64]	@ (800dc04 <tcp_get_next_optbyte+0x68>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	3314      	adds	r3, #20
 800dbc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dbca:	88fb      	ldrh	r3, [r7, #6]
 800dbcc:	683a      	ldr	r2, [r7, #0]
 800dbce:	4413      	add	r3, r2
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	e00b      	b.n	800dbec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dbd4:	88fb      	ldrh	r3, [r7, #6]
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	4b09      	ldr	r3, [pc, #36]	@ (800dc00 <tcp_get_next_optbyte+0x64>)
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dbe2:	4b06      	ldr	r3, [pc, #24]	@ (800dbfc <tcp_get_next_optbyte+0x60>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	797b      	ldrb	r3, [r7, #5]
 800dbe8:	4413      	add	r3, r2
 800dbea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	20004acc 	.word	0x20004acc
 800dbfc:	20004ac8 	.word	0x20004ac8
 800dc00:	20004ac6 	.word	0x20004ac6
 800dc04:	20004ac0 	.word	0x20004ac0

0800dc08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d106      	bne.n	800dc24 <tcp_parseopt+0x1c>
 800dc16:	4b33      	ldr	r3, [pc, #204]	@ (800dce4 <tcp_parseopt+0xdc>)
 800dc18:	f240 727e 	movw	r2, #1918	@ 0x77e
 800dc1c:	4932      	ldr	r1, [pc, #200]	@ (800dce8 <tcp_parseopt+0xe0>)
 800dc1e:	4833      	ldr	r0, [pc, #204]	@ (800dcec <tcp_parseopt+0xe4>)
 800dc20:	f7f2 ffd4 	bl	8000bcc <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dc24:	4b32      	ldr	r3, [pc, #200]	@ (800dcf0 <tcp_parseopt+0xe8>)
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d057      	beq.n	800dcdc <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc2c:	4b31      	ldr	r3, [pc, #196]	@ (800dcf4 <tcp_parseopt+0xec>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	801a      	strh	r2, [r3, #0]
 800dc32:	e047      	b.n	800dcc4 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800dc34:	f7ff ffb2 	bl	800db9c <tcp_get_next_optbyte>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d006      	beq.n	800dc50 <tcp_parseopt+0x48>
 800dc42:	2b02      	cmp	r3, #2
 800dc44:	dc2b      	bgt.n	800dc9e <tcp_parseopt+0x96>
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d043      	beq.n	800dcd2 <tcp_parseopt+0xca>
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d039      	beq.n	800dcc2 <tcp_parseopt+0xba>
 800dc4e:	e026      	b.n	800dc9e <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dc50:	f7ff ffa4 	bl	800db9c <tcp_get_next_optbyte>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	d13d      	bne.n	800dcd6 <tcp_parseopt+0xce>
 800dc5a:	4b26      	ldr	r3, [pc, #152]	@ (800dcf4 <tcp_parseopt+0xec>)
 800dc5c:	881b      	ldrh	r3, [r3, #0]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	4a23      	ldr	r2, [pc, #140]	@ (800dcf0 <tcp_parseopt+0xe8>)
 800dc62:	8812      	ldrh	r2, [r2, #0]
 800dc64:	4293      	cmp	r3, r2
 800dc66:	da36      	bge.n	800dcd6 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dc68:	f7ff ff98 	bl	800db9c <tcp_get_next_optbyte>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	021b      	lsls	r3, r3, #8
 800dc70:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dc72:	f7ff ff93 	bl	800db9c <tcp_get_next_optbyte>
 800dc76:	4603      	mov	r3, r0
 800dc78:	461a      	mov	r2, r3
 800dc7a:	89bb      	ldrh	r3, [r7, #12]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dc80:	89bb      	ldrh	r3, [r7, #12]
 800dc82:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d804      	bhi.n	800dc94 <tcp_parseopt+0x8c>
 800dc8a:	89bb      	ldrh	r3, [r7, #12]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <tcp_parseopt+0x8c>
 800dc90:	89ba      	ldrh	r2, [r7, #12]
 800dc92:	e001      	b.n	800dc98 <tcp_parseopt+0x90>
 800dc94:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dc9c:	e012      	b.n	800dcc4 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dc9e:	f7ff ff7d 	bl	800db9c <tcp_get_next_optbyte>
 800dca2:	4603      	mov	r3, r0
 800dca4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dca6:	7afb      	ldrb	r3, [r7, #11]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d916      	bls.n	800dcda <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dcac:	7afb      	ldrb	r3, [r7, #11]
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	4b10      	ldr	r3, [pc, #64]	@ (800dcf4 <tcp_parseopt+0xec>)
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	3b02      	subs	r3, #2
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf4 <tcp_parseopt+0xec>)
 800dcbe:	801a      	strh	r2, [r3, #0]
 800dcc0:	e000      	b.n	800dcc4 <tcp_parseopt+0xbc>
          break;
 800dcc2:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dcc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf4 <tcp_parseopt+0xec>)
 800dcc6:	881a      	ldrh	r2, [r3, #0]
 800dcc8:	4b09      	ldr	r3, [pc, #36]	@ (800dcf0 <tcp_parseopt+0xe8>)
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d3b1      	bcc.n	800dc34 <tcp_parseopt+0x2c>
 800dcd0:	e004      	b.n	800dcdc <tcp_parseopt+0xd4>
          return;
 800dcd2:	bf00      	nop
 800dcd4:	e002      	b.n	800dcdc <tcp_parseopt+0xd4>
            return;
 800dcd6:	bf00      	nop
 800dcd8:	e000      	b.n	800dcdc <tcp_parseopt+0xd4>
            return;
 800dcda:	bf00      	nop
      }
    }
  }
}
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	08016ab4 	.word	0x08016ab4
 800dce8:	08016e88 	.word	0x08016e88
 800dcec:	08016afc 	.word	0x08016afc
 800dcf0:	20004ac4 	.word	0x20004ac4
 800dcf4:	20004acc 	.word	0x20004acc

0800dcf8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dcfc:	4b05      	ldr	r3, [pc, #20]	@ (800dd14 <tcp_trigger_input_pcb_close+0x1c>)
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	f043 0310 	orr.w	r3, r3, #16
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	4b03      	ldr	r3, [pc, #12]	@ (800dd14 <tcp_trigger_input_pcb_close+0x1c>)
 800dd08:	701a      	strb	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	20004add 	.word	0x20004add

0800dd18 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00a      	beq.n	800dd40 <tcp_route+0x28>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	7a1b      	ldrb	r3, [r3, #8]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d006      	beq.n	800dd40 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	7a1b      	ldrb	r3, [r3, #8]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fb ff8a 	bl	8009c50 <netif_get_by_index>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	e003      	b.n	800dd48 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f005 f8a5 	bl	8012e90 <ip4_route>
 800dd46:	4603      	mov	r3, r0
  }
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b087      	sub	sp, #28
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <tcp_create_segment+0x22>
 800dd66:	4b45      	ldr	r3, [pc, #276]	@ (800de7c <tcp_create_segment+0x12c>)
 800dd68:	22a3      	movs	r2, #163	@ 0xa3
 800dd6a:	4945      	ldr	r1, [pc, #276]	@ (800de80 <tcp_create_segment+0x130>)
 800dd6c:	4845      	ldr	r0, [pc, #276]	@ (800de84 <tcp_create_segment+0x134>)
 800dd6e:	f7f2 ff2d 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d105      	bne.n	800dd84 <tcp_create_segment+0x34>
 800dd78:	4b40      	ldr	r3, [pc, #256]	@ (800de7c <tcp_create_segment+0x12c>)
 800dd7a:	22a4      	movs	r2, #164	@ 0xa4
 800dd7c:	4942      	ldr	r1, [pc, #264]	@ (800de88 <tcp_create_segment+0x138>)
 800dd7e:	4841      	ldr	r0, [pc, #260]	@ (800de84 <tcp_create_segment+0x134>)
 800dd80:	f7f2 ff24 	bl	8000bcc <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0304 	and.w	r3, r3, #4
 800dd90:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dd92:	2003      	movs	r0, #3
 800dd94:	f7fb fc50 	bl	8009638 <memp_malloc>
 800dd98:	6138      	str	r0, [r7, #16]
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d104      	bne.n	800ddaa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dda0:	68b8      	ldr	r0, [r7, #8]
 800dda2:	f7fc fa85 	bl	800a2b0 <pbuf_free>
    return NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	e063      	b.n	800de72 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ddb0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	68ba      	ldr	r2, [r7, #8]
 800ddbc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	891a      	ldrh	r2, [r3, #8]
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d205      	bcs.n	800ddd6 <tcp_create_segment+0x86>
 800ddca:	4b2c      	ldr	r3, [pc, #176]	@ (800de7c <tcp_create_segment+0x12c>)
 800ddcc:	22b0      	movs	r2, #176	@ 0xb0
 800ddce:	492f      	ldr	r1, [pc, #188]	@ (800de8c <tcp_create_segment+0x13c>)
 800ddd0:	482c      	ldr	r0, [pc, #176]	@ (800de84 <tcp_create_segment+0x134>)
 800ddd2:	f7f2 fefb 	bl	8000bcc <printf>
  seg->len = p->tot_len - optlen;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	891a      	ldrh	r2, [r3, #8]
 800ddda:	7dfb      	ldrb	r3, [r7, #23]
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	1ad3      	subs	r3, r2, r3
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2200      	movs	r2, #0
 800ddea:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ddec:	2114      	movs	r1, #20
 800ddee:	68b8      	ldr	r0, [r7, #8]
 800ddf0:	f7fc f9cc 	bl	800a18c <pbuf_add_header>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ddfa:	6938      	ldr	r0, [r7, #16]
 800ddfc:	f7fd fcd5 	bl	800b7aa <tcp_seg_free>
    return NULL;
 800de00:	2300      	movs	r3, #0
 800de02:	e036      	b.n	800de72 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	685a      	ldr	r2, [r3, #4]
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8ada      	ldrh	r2, [r3, #22]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	691c      	ldr	r4, [r3, #16]
 800de16:	4610      	mov	r0, r2
 800de18:	f7fa fe06 	bl	8008a28 <lwip_htons>
 800de1c:	4603      	mov	r3, r0
 800de1e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	8b1a      	ldrh	r2, [r3, #24]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	691c      	ldr	r4, [r3, #16]
 800de28:	4610      	mov	r0, r2
 800de2a:	f7fa fdfd 	bl	8008a28 <lwip_htons>
 800de2e:	4603      	mov	r3, r0
 800de30:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	691c      	ldr	r4, [r3, #16]
 800de36:	6838      	ldr	r0, [r7, #0]
 800de38:	f7fa fe0b 	bl	8008a52 <lwip_htonl>
 800de3c:	4603      	mov	r3, r0
 800de3e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800de40:	7dfb      	ldrb	r3, [r7, #23]
 800de42:	089b      	lsrs	r3, r3, #2
 800de44:	b2db      	uxtb	r3, r3
 800de46:	3305      	adds	r3, #5
 800de48:	b29b      	uxth	r3, r3
 800de4a:	031b      	lsls	r3, r3, #12
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	b29b      	uxth	r3, r3
 800de52:	4313      	orrs	r3, r2
 800de54:	b29a      	uxth	r2, r3
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	691c      	ldr	r4, [r3, #16]
 800de5a:	4610      	mov	r0, r2
 800de5c:	f7fa fde4 	bl	8008a28 <lwip_htons>
 800de60:	4603      	mov	r3, r0
 800de62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	2200      	movs	r2, #0
 800de6a:	749a      	strb	r2, [r3, #18]
 800de6c:	2200      	movs	r2, #0
 800de6e:	74da      	strb	r2, [r3, #19]
  return seg;
 800de70:	693b      	ldr	r3, [r7, #16]
}
 800de72:	4618      	mov	r0, r3
 800de74:	371c      	adds	r7, #28
 800de76:	46bd      	mov	sp, r7
 800de78:	bd90      	pop	{r4, r7, pc}
 800de7a:	bf00      	nop
 800de7c:	08016ea4 	.word	0x08016ea4
 800de80:	08016ed4 	.word	0x08016ed4
 800de84:	08016ef4 	.word	0x08016ef4
 800de88:	08016f1c 	.word	0x08016f1c
 800de8c:	08016f40 	.word	0x08016f40

0800de90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800de90:	b590      	push	{r4, r7, lr}
 800de92:	b08d      	sub	sp, #52	@ 0x34
 800de94:	af02      	add	r7, sp, #8
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800de9c:	2300      	movs	r3, #0
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	623b      	str	r3, [r7, #32]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <tcp_split_unsent_seg+0x2c>
 800deae:	4b9b      	ldr	r3, [pc, #620]	@ (800e11c <tcp_split_unsent_seg+0x28c>)
 800deb0:	f240 324b 	movw	r2, #843	@ 0x34b
 800deb4:	499a      	ldr	r1, [pc, #616]	@ (800e120 <tcp_split_unsent_seg+0x290>)
 800deb6:	489b      	ldr	r0, [pc, #620]	@ (800e124 <tcp_split_unsent_seg+0x294>)
 800deb8:	f7f2 fe88 	bl	8000bcc <printf>

  useg = pcb->unsent;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dec0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dec8:	f04f 33ff 	mov.w	r3, #4294967295
 800decc:	e122      	b.n	800e114 <tcp_split_unsent_seg+0x284>
  }

  if (split == 0) {
 800dece:	887b      	ldrh	r3, [r7, #2]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d109      	bne.n	800dee8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ded4:	4b91      	ldr	r3, [pc, #580]	@ (800e11c <tcp_split_unsent_seg+0x28c>)
 800ded6:	f240 3253 	movw	r2, #851	@ 0x353
 800deda:	4993      	ldr	r1, [pc, #588]	@ (800e128 <tcp_split_unsent_seg+0x298>)
 800dedc:	4891      	ldr	r0, [pc, #580]	@ (800e124 <tcp_split_unsent_seg+0x294>)
 800dede:	f7f2 fe75 	bl	8000bcc <printf>
    return ERR_VAL;
 800dee2:	f06f 0305 	mvn.w	r3, #5
 800dee6:	e115      	b.n	800e114 <tcp_split_unsent_seg+0x284>
  }

  if (useg->len <= split) {
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	891b      	ldrh	r3, [r3, #8]
 800deec:	887a      	ldrh	r2, [r7, #2]
 800deee:	429a      	cmp	r2, r3
 800def0:	d301      	bcc.n	800def6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	e10e      	b.n	800e114 <tcp_split_unsent_seg+0x284>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800defa:	887a      	ldrh	r2, [r7, #2]
 800defc:	429a      	cmp	r2, r3
 800defe:	d906      	bls.n	800df0e <tcp_split_unsent_seg+0x7e>
 800df00:	4b86      	ldr	r3, [pc, #536]	@ (800e11c <tcp_split_unsent_seg+0x28c>)
 800df02:	f240 325b 	movw	r2, #859	@ 0x35b
 800df06:	4989      	ldr	r1, [pc, #548]	@ (800e12c <tcp_split_unsent_seg+0x29c>)
 800df08:	4886      	ldr	r0, [pc, #536]	@ (800e124 <tcp_split_unsent_seg+0x294>)
 800df0a:	f7f2 fe5f 	bl	8000bcc <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	891b      	ldrh	r3, [r3, #8]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d106      	bne.n	800df24 <tcp_split_unsent_seg+0x94>
 800df16:	4b81      	ldr	r3, [pc, #516]	@ (800e11c <tcp_split_unsent_seg+0x28c>)
 800df18:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800df1c:	4984      	ldr	r1, [pc, #528]	@ (800e130 <tcp_split_unsent_seg+0x2a0>)
 800df1e:	4881      	ldr	r0, [pc, #516]	@ (800e124 <tcp_split_unsent_seg+0x294>)
 800df20:	f7f2 fe54 	bl	8000bcc <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	7b1b      	ldrb	r3, [r3, #12]
 800df28:	74fb      	strb	r3, [r7, #19]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df2a:	7cfb      	ldrb	r3, [r7, #19]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	74bb      	strb	r3, [r7, #18]
  remainder = useg->len - split;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	891a      	ldrh	r2, [r3, #8]
 800df3a:	887b      	ldrh	r3, [r7, #2]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	823b      	strh	r3, [r7, #16]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800df40:	7cbb      	ldrb	r3, [r7, #18]
 800df42:	b29a      	uxth	r2, r3
 800df44:	8a3b      	ldrh	r3, [r7, #16]
 800df46:	4413      	add	r3, r2
 800df48:	b29b      	uxth	r3, r3
 800df4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800df4e:	4619      	mov	r1, r3
 800df50:	2036      	movs	r0, #54	@ 0x36
 800df52:	f7fb fecd 	bl	8009cf0 <pbuf_alloc>
 800df56:	6238      	str	r0, [r7, #32]
  if (p == NULL) {
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 80c5 	beq.w	800e0ea <tcp_split_unsent_seg+0x25a>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	891a      	ldrh	r2, [r3, #8]
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	891b      	ldrh	r3, [r3, #8]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	887b      	ldrh	r3, [r7, #2]
 800df70:	4413      	add	r3, r2
 800df72:	81fb      	strh	r3, [r7, #14]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	6858      	ldr	r0, [r3, #4]
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	7cbb      	ldrb	r3, [r7, #18]
 800df7e:	18d1      	adds	r1, r2, r3
 800df80:	89fb      	ldrh	r3, [r7, #14]
 800df82:	8a3a      	ldrh	r2, [r7, #16]
 800df84:	f7fc fbc6 	bl	800a714 <pbuf_copy_partial>
 800df88:	4603      	mov	r3, r0
 800df8a:	461a      	mov	r2, r3
 800df8c:	8a3b      	ldrh	r3, [r7, #16]
 800df8e:	4293      	cmp	r3, r2
 800df90:	f040 80ad 	bne.w	800e0ee <tcp_split_unsent_seg+0x25e>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	899b      	ldrh	r3, [r3, #12]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fa fd43 	bl	8008a28 <lwip_htons>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dfaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dfae:	2300      	movs	r3, #0
 800dfb0:	76fb      	strb	r3, [r7, #27]

  if (split_flags & TCP_PSH) {
 800dfb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfb6:	f003 0308 	and.w	r3, r3, #8
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d009      	beq.n	800dfd2 <tcp_split_unsent_seg+0x142>
    split_flags &= ~TCP_PSH;
 800dfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfc2:	f023 0308 	bic.w	r3, r3, #8
 800dfc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    remainder_flags |= TCP_PSH;
 800dfca:	7efb      	ldrb	r3, [r7, #27]
 800dfcc:	f043 0308 	orr.w	r3, r3, #8
 800dfd0:	76fb      	strb	r3, [r7, #27]
  }
  if (split_flags & TCP_FIN) {
 800dfd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d009      	beq.n	800dff2 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_FIN;
 800dfde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfe2:	f023 0301 	bic.w	r3, r3, #1
 800dfe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    remainder_flags |= TCP_FIN;
 800dfea:	7efb      	ldrb	r3, [r7, #27]
 800dfec:	f043 0301 	orr.w	r3, r3, #1
 800dff0:	76fb      	strb	r3, [r7, #27]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fa fd2a 	bl	8008a52 <lwip_htonl>
 800dffe:	4602      	mov	r2, r0
 800e000:	887b      	ldrh	r3, [r7, #2]
 800e002:	18d1      	adds	r1, r2, r3
 800e004:	7efa      	ldrb	r2, [r7, #27]
 800e006:	7cfb      	ldrb	r3, [r7, #19]
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	460b      	mov	r3, r1
 800e00c:	6a39      	ldr	r1, [r7, #32]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff fe9e 	bl	800dd50 <tcp_create_segment>
 800e014:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <tcp_split_unsent_seg+0x192>
    p = NULL; /* Freed by tcp_create_segment */
 800e01c:	2300      	movs	r3, #0
 800e01e:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 800e020:	e066      	b.n	800e0f0 <tcp_split_unsent_seg+0x260>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	4618      	mov	r0, r3
 800e028:	f7fc f9ca 	bl	800a3c0 <pbuf_clen>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e036:	1a9b      	subs	r3, r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	6858      	ldr	r0, [r3, #4]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	891a      	ldrh	r2, [r3, #8]
 800e04a:	8a3b      	ldrh	r3, [r7, #16]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	b29b      	uxth	r3, r3
 800e050:	4619      	mov	r1, r3
 800e052:	f7fb ffab 	bl	8009fac <pbuf_realloc>
  useg->len -= remainder;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	891a      	ldrh	r2, [r3, #8]
 800e05a:	8a3b      	ldrh	r3, [r7, #16]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	b29a      	uxth	r2, r3
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	899b      	ldrh	r3, [r3, #12]
 800e06a:	b29c      	uxth	r4, r3
 800e06c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e070:	b29b      	uxth	r3, r3
 800e072:	4618      	mov	r0, r3
 800e074:	f7fa fcd8 	bl	8008a28 <lwip_htons>
 800e078:	4603      	mov	r3, r0
 800e07a:	461a      	mov	r2, r3
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	4322      	orrs	r2, r4
 800e082:	b292      	uxth	r2, r2
 800e084:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2200      	movs	r2, #0
 800e08a:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc f995 	bl	800a3c0 <pbuf_clen>
 800e096:	4603      	mov	r3, r0
 800e098:	461a      	mov	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e0a0:	4413      	add	r3, r2
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fc f986 	bl	800a3c0 <pbuf_clen>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e0be:	4413      	add	r3, r2
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	69fa      	ldr	r2, [r7, #28]
 800e0d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d103      	bne.n	800e0e6 <tcp_split_unsent_seg+0x256>
    pcb->unsent_oversize = 0;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e014      	b.n	800e114 <tcp_split_unsent_seg+0x284>
    goto memerr;
 800e0ea:	bf00      	nop
 800e0ec:	e000      	b.n	800e0f0 <tcp_split_unsent_seg+0x260>
    goto memerr;
 800e0ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d006      	beq.n	800e104 <tcp_split_unsent_seg+0x274>
 800e0f6:	4b09      	ldr	r3, [pc, #36]	@ (800e11c <tcp_split_unsent_seg+0x28c>)
 800e0f8:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e0fc:	490d      	ldr	r1, [pc, #52]	@ (800e134 <tcp_split_unsent_seg+0x2a4>)
 800e0fe:	4809      	ldr	r0, [pc, #36]	@ (800e124 <tcp_split_unsent_seg+0x294>)
 800e100:	f7f2 fd64 	bl	8000bcc <printf>
  if (p != NULL) {
 800e104:	6a3b      	ldr	r3, [r7, #32]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <tcp_split_unsent_seg+0x280>
    pbuf_free(p);
 800e10a:	6a38      	ldr	r0, [r7, #32]
 800e10c:	f7fc f8d0 	bl	800a2b0 <pbuf_free>
  }

  return ERR_MEM;
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e114:	4618      	mov	r0, r3
 800e116:	372c      	adds	r7, #44	@ 0x2c
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd90      	pop	{r4, r7, pc}
 800e11c:	08016ea4 	.word	0x08016ea4
 800e120:	08017290 	.word	0x08017290
 800e124:	08016ef4 	.word	0x08016ef4
 800e128:	080172b4 	.word	0x080172b4
 800e12c:	080172d8 	.word	0x080172d8
 800e130:	080172e8 	.word	0x080172e8
 800e134:	080172f8 	.word	0x080172f8

0800e138 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <tcp_send_fin+0x1c>
 800e146:	4b21      	ldr	r3, [pc, #132]	@ (800e1cc <tcp_send_fin+0x94>)
 800e148:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800e14c:	4920      	ldr	r1, [pc, #128]	@ (800e1d0 <tcp_send_fin+0x98>)
 800e14e:	4821      	ldr	r0, [pc, #132]	@ (800e1d4 <tcp_send_fin+0x9c>)
 800e150:	f7f2 fd3c 	bl	8000bcc <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d02e      	beq.n	800e1ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	e002      	b.n	800e16a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1f8      	bne.n	800e164 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	899b      	ldrh	r3, [r3, #12]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fa fc54 	bl	8008a28 <lwip_htons>
 800e180:	4603      	mov	r3, r0
 800e182:	b2db      	uxtb	r3, r3
 800e184:	f003 0307 	and.w	r3, r3, #7
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d116      	bne.n	800e1ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	899b      	ldrh	r3, [r3, #12]
 800e192:	b29c      	uxth	r4, r3
 800e194:	2001      	movs	r0, #1
 800e196:	f7fa fc47 	bl	8008a28 <lwip_htons>
 800e19a:	4603      	mov	r3, r0
 800e19c:	461a      	mov	r2, r3
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	691b      	ldr	r3, [r3, #16]
 800e1a2:	4322      	orrs	r2, r4
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	8b5b      	ldrh	r3, [r3, #26]
 800e1ac:	f043 0320 	orr.w	r3, r3, #32
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e004      	b.n	800e1c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 f80b 	bl	800e1d8 <tcp_enqueue_flags>
 800e1c2:	4603      	mov	r3, r0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd90      	pop	{r4, r7, pc}
 800e1cc:	08016ea4 	.word	0x08016ea4
 800e1d0:	08017304 	.word	0x08017304
 800e1d4:	08016ef4 	.word	0x08016ef4

0800e1d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	f003 0303 	and.w	r3, r3, #3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <tcp_enqueue_flags+0x2c>
 800e1f6:	4b67      	ldr	r3, [pc, #412]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e1f8:	f240 4212 	movw	r2, #1042	@ 0x412
 800e1fc:	4966      	ldr	r1, [pc, #408]	@ (800e398 <tcp_enqueue_flags+0x1c0>)
 800e1fe:	4867      	ldr	r0, [pc, #412]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e200:	f7f2 fce4 	bl	8000bcc <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <tcp_enqueue_flags+0x40>
 800e20a:	4b62      	ldr	r3, [pc, #392]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e20c:	f240 4214 	movw	r2, #1044	@ 0x414
 800e210:	4963      	ldr	r1, [pc, #396]	@ (800e3a0 <tcp_enqueue_flags+0x1c8>)
 800e212:	4862      	ldr	r0, [pc, #392]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e214:	f7f2 fcda 	bl	8000bcc <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e218:	78fb      	ldrb	r3, [r7, #3]
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e222:	2301      	movs	r3, #1
 800e224:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e232:	7dbb      	ldrb	r3, [r7, #22]
 800e234:	b29b      	uxth	r3, r3
 800e236:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e23a:	4619      	mov	r1, r3
 800e23c:	2036      	movs	r0, #54	@ 0x36
 800e23e:	f7fb fd57 	bl	8009cf0 <pbuf_alloc>
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d109      	bne.n	800e25e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8b5b      	ldrh	r3, [r3, #26]
 800e24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e252:	b29a      	uxth	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e258:	f04f 33ff 	mov.w	r3, #4294967295
 800e25c:	e095      	b.n	800e38a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	895a      	ldrh	r2, [r3, #10]
 800e262:	7dbb      	ldrb	r3, [r7, #22]
 800e264:	b29b      	uxth	r3, r3
 800e266:	429a      	cmp	r2, r3
 800e268:	d206      	bcs.n	800e278 <tcp_enqueue_flags+0xa0>
 800e26a:	4b4a      	ldr	r3, [pc, #296]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e26c:	f240 423a 	movw	r2, #1082	@ 0x43a
 800e270:	494c      	ldr	r1, [pc, #304]	@ (800e3a4 <tcp_enqueue_flags+0x1cc>)
 800e272:	484a      	ldr	r0, [pc, #296]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e274:	f7f2 fcaa 	bl	8000bcc <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e27c:	78fa      	ldrb	r2, [r7, #3]
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	460b      	mov	r3, r1
 800e284:	68f9      	ldr	r1, [r7, #12]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff fd62 	bl	800dd50 <tcp_create_segment>
 800e28c:	60b8      	str	r0, [r7, #8]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d109      	bne.n	800e2a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	8b5b      	ldrh	r3, [r3, #26]
 800e298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	e070      	b.n	800e38a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	f003 0303 	and.w	r3, r3, #3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d006      	beq.n	800e2c2 <tcp_enqueue_flags+0xea>
 800e2b4:	4b37      	ldr	r3, [pc, #220]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e2b6:	f240 4243 	movw	r2, #1091	@ 0x443
 800e2ba:	493b      	ldr	r1, [pc, #236]	@ (800e3a8 <tcp_enqueue_flags+0x1d0>)
 800e2bc:	4837      	ldr	r0, [pc, #220]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e2be:	f7f2 fc85 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	891b      	ldrh	r3, [r3, #8]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d006      	beq.n	800e2d8 <tcp_enqueue_flags+0x100>
 800e2ca:	4b32      	ldr	r3, [pc, #200]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e2cc:	f240 4244 	movw	r2, #1092	@ 0x444
 800e2d0:	4936      	ldr	r1, [pc, #216]	@ (800e3ac <tcp_enqueue_flags+0x1d4>)
 800e2d2:	4832      	ldr	r0, [pc, #200]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e2d4:	f7f2 fc7a 	bl	8000bcc <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d103      	bne.n	800e2e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e2e6:	e00d      	b.n	800e304 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2ec:	613b      	str	r3, [r7, #16]
 800e2ee:	e002      	b.n	800e2f6 <tcp_enqueue_flags+0x11e>
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1f8      	bne.n	800e2f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e30c:	78fb      	ldrb	r3, [r7, #3]
 800e30e:	f003 0302 	and.w	r3, r3, #2
 800e312:	2b00      	cmp	r3, #0
 800e314:	d104      	bne.n	800e320 <tcp_enqueue_flags+0x148>
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e32a:	78fb      	ldrb	r3, [r7, #3]
 800e32c:	f003 0301 	and.w	r3, r3, #1
 800e330:	2b00      	cmp	r3, #0
 800e332:	d006      	beq.n	800e342 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	8b5b      	ldrh	r3, [r3, #26]
 800e338:	f043 0320 	orr.w	r3, r3, #32
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	4618      	mov	r0, r3
 800e348:	f7fc f83a 	bl	800a3c0 <pbuf_clen>
 800e34c:	4603      	mov	r3, r0
 800e34e:	461a      	mov	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e356:	4413      	add	r3, r2
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00e      	beq.n	800e388 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <tcp_enqueue_flags+0x1b0>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e376:	2b00      	cmp	r3, #0
 800e378:	d106      	bne.n	800e388 <tcp_enqueue_flags+0x1b0>
 800e37a:	4b06      	ldr	r3, [pc, #24]	@ (800e394 <tcp_enqueue_flags+0x1bc>)
 800e37c:	f240 4266 	movw	r2, #1126	@ 0x466
 800e380:	490b      	ldr	r1, [pc, #44]	@ (800e3b0 <tcp_enqueue_flags+0x1d8>)
 800e382:	4806      	ldr	r0, [pc, #24]	@ (800e39c <tcp_enqueue_flags+0x1c4>)
 800e384:	f7f2 fc22 	bl	8000bcc <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	08016ea4 	.word	0x08016ea4
 800e398:	08017320 	.word	0x08017320
 800e39c:	08016ef4 	.word	0x08016ef4
 800e3a0:	08017378 	.word	0x08017378
 800e3a4:	08017398 	.word	0x08017398
 800e3a8:	080173d4 	.word	0x080173d4
 800e3ac:	080173ec 	.word	0x080173ec
 800e3b0:	08017418 	.word	0x08017418

0800e3b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b08a      	sub	sp, #40	@ 0x28
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <tcp_output+0x1c>
 800e3c2:	4b8a      	ldr	r3, [pc, #552]	@ (800e5ec <tcp_output+0x238>)
 800e3c4:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800e3c8:	4989      	ldr	r1, [pc, #548]	@ (800e5f0 <tcp_output+0x23c>)
 800e3ca:	488a      	ldr	r0, [pc, #552]	@ (800e5f4 <tcp_output+0x240>)
 800e3cc:	f7f2 fbfe 	bl	8000bcc <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	7d1b      	ldrb	r3, [r3, #20]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d106      	bne.n	800e3e6 <tcp_output+0x32>
 800e3d8:	4b84      	ldr	r3, [pc, #528]	@ (800e5ec <tcp_output+0x238>)
 800e3da:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 800e3de:	4986      	ldr	r1, [pc, #536]	@ (800e5f8 <tcp_output+0x244>)
 800e3e0:	4884      	ldr	r0, [pc, #528]	@ (800e5f4 <tcp_output+0x240>)
 800e3e2:	f7f2 fbf3 	bl	8000bcc <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e3e6:	4b85      	ldr	r3, [pc, #532]	@ (800e5fc <tcp_output+0x248>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d101      	bne.n	800e3f4 <tcp_output+0x40>
    return ERR_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e1d1      	b.n	800e798 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e400:	4293      	cmp	r3, r2
 800e402:	bf28      	it	cs
 800e404:	4613      	movcs	r3, r2
 800e406:	b29b      	uxth	r3, r3
 800e408:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e40e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10b      	bne.n	800e42e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	8b5b      	ldrh	r3, [r3, #26]
 800e41a:	f003 0302 	and.w	r3, r3, #2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 81ad 	beq.w	800e77e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fdf9 	bl	800f01c <tcp_send_empty_ack>
 800e42a:	4603      	mov	r3, r0
 800e42c:	e1b4      	b.n	800e798 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	3304      	adds	r3, #4
 800e434:	461a      	mov	r2, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff fc6e 	bl	800dd18 <tcp_route>
 800e43c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <tcp_output+0x96>
    return ERR_RTE;
 800e444:	f06f 0303 	mvn.w	r3, #3
 800e448:	e1a6      	b.n	800e798 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d003      	beq.n	800e458 <tcp_output+0xa4>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d111      	bne.n	800e47c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d002      	beq.n	800e464 <tcp_output+0xb0>
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	3304      	adds	r3, #4
 800e462:	e000      	b.n	800e466 <tcp_output+0xb2>
 800e464:	2300      	movs	r3, #0
 800e466:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d102      	bne.n	800e474 <tcp_output+0xc0>
      return ERR_RTE;
 800e46e:	f06f 0303 	mvn.w	r3, #3
 800e472:	e191      	b.n	800e798 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	4618      	mov	r0, r3
 800e484:	f7fa fae5 	bl	8008a52 <lwip_htonl>
 800e488:	4602      	mov	r2, r0
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e492:	8912      	ldrh	r2, [r2, #8]
 800e494:	4413      	add	r3, r2
 800e496:	69ba      	ldr	r2, [r7, #24]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d227      	bcs.n	800e4ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d114      	bne.n	800e4d4 <tcp_output+0x120>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d110      	bne.n	800e4d4 <tcp_output+0x120>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10b      	bne.n	800e4d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8b5b      	ldrh	r3, [r3, #26]
 800e4d8:	f003 0302 	and.w	r3, r3, #2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f000 8150 	beq.w	800e782 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fd9a 	bl	800f01c <tcp_send_empty_ack>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	e155      	b.n	800e798 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 811f 	beq.w	800e740 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 800e502:	e002      	b.n	800e50a <tcp_output+0x156>
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	623b      	str	r3, [r7, #32]
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1f8      	bne.n	800e504 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e512:	e115      	b.n	800e740 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	899b      	ldrh	r3, [r3, #12]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fa fa83 	bl	8008a28 <lwip_htons>
 800e522:	4603      	mov	r3, r0
 800e524:	b2db      	uxtb	r3, r3
 800e526:	f003 0304 	and.w	r3, r3, #4
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d006      	beq.n	800e53c <tcp_output+0x188>
 800e52e:	4b2f      	ldr	r3, [pc, #188]	@ (800e5ec <tcp_output+0x238>)
 800e530:	f240 5237 	movw	r2, #1335	@ 0x537
 800e534:	4932      	ldr	r1, [pc, #200]	@ (800e600 <tcp_output+0x24c>)
 800e536:	482f      	ldr	r0, [pc, #188]	@ (800e5f4 <tcp_output+0x240>)
 800e538:	f7f2 fb48 	bl	8000bcc <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01f      	beq.n	800e584 <tcp_output+0x1d0>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	8b5b      	ldrh	r3, [r3, #26]
 800e548:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d119      	bne.n	800e584 <tcp_output+0x1d0>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <tcp_output+0x1bc>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d110      	bne.n	800e584 <tcp_output+0x1d0>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e566:	891a      	ldrh	r2, [r3, #8]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d209      	bcs.n	800e584 <tcp_output+0x1d0>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e576:	2b00      	cmp	r3, #0
 800e578:	d004      	beq.n	800e584 <tcp_output+0x1d0>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e580:	2b07      	cmp	r3, #7
 800e582:	d901      	bls.n	800e588 <tcp_output+0x1d4>
 800e584:	2301      	movs	r3, #1
 800e586:	e000      	b.n	800e58a <tcp_output+0x1d6>
 800e588:	2300      	movs	r3, #0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	8b5b      	ldrh	r3, [r3, #26]
 800e592:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e596:	2b00      	cmp	r3, #0
 800e598:	f000 80e7 	beq.w	800e76a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7d1b      	ldrb	r3, [r3, #20]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d00d      	beq.n	800e5c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a6:	691b      	ldr	r3, [r3, #16]
 800e5a8:	899b      	ldrh	r3, [r3, #12]
 800e5aa:	b29c      	uxth	r4, r3
 800e5ac:	2010      	movs	r0, #16
 800e5ae:	f7fa fa3b 	bl	8008a28 <lwip_htons>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	4322      	orrs	r2, r4
 800e5bc:	b292      	uxth	r2, r2
 800e5be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	6879      	ldr	r1, [r7, #4]
 800e5c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e5c6:	f000 f90b 	bl	800e7e0 <tcp_output_segment>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d016      	beq.n	800e604 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	8b5b      	ldrh	r3, [r3, #26]
 800e5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	835a      	strh	r2, [r3, #26]
      return err;
 800e5e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5e8:	e0d6      	b.n	800e798 <tcp_output+0x3e4>
 800e5ea:	bf00      	nop
 800e5ec:	08016ea4 	.word	0x08016ea4
 800e5f0:	08017440 	.word	0x08017440
 800e5f4:	08016ef4 	.word	0x08016ef4
 800e5f8:	08017458 	.word	0x08017458
 800e5fc:	2000d90c 	.word	0x2000d90c
 800e600:	08017480 	.word	0x08017480
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	2200      	movs	r2, #0
 800e608:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	7d1b      	ldrb	r3, [r3, #20]
 800e616:	2b02      	cmp	r3, #2
 800e618:	d006      	beq.n	800e628 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	8b5b      	ldrh	r3, [r3, #26]
 800e61e:	f023 0303 	bic.w	r3, r3, #3
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fa fa0f 	bl	8008a52 <lwip_htonl>
 800e634:	4604      	mov	r4, r0
 800e636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e638:	891b      	ldrh	r3, [r3, #8]
 800e63a:	461d      	mov	r5, r3
 800e63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	899b      	ldrh	r3, [r3, #12]
 800e642:	b29b      	uxth	r3, r3
 800e644:	4618      	mov	r0, r3
 800e646:	f7fa f9ef 	bl	8008a28 <lwip_htons>
 800e64a:	4603      	mov	r3, r0
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	f003 0303 	and.w	r3, r3, #3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <tcp_output+0x2a6>
 800e656:	2301      	movs	r3, #1
 800e658:	e000      	b.n	800e65c <tcp_output+0x2a8>
 800e65a:	2300      	movs	r3, #0
 800e65c:	442b      	add	r3, r5
 800e65e:	4423      	add	r3, r4
 800e660:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da02      	bge.n	800e674 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e676:	891b      	ldrh	r3, [r3, #8]
 800e678:	461c      	mov	r4, r3
 800e67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	899b      	ldrh	r3, [r3, #12]
 800e680:	b29b      	uxth	r3, r3
 800e682:	4618      	mov	r0, r3
 800e684:	f7fa f9d0 	bl	8008a28 <lwip_htons>
 800e688:	4603      	mov	r3, r0
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	f003 0303 	and.w	r3, r3, #3
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <tcp_output+0x2e4>
 800e694:	2301      	movs	r3, #1
 800e696:	e000      	b.n	800e69a <tcp_output+0x2e6>
 800e698:	2300      	movs	r3, #0
 800e69a:	4423      	add	r3, r4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d049      	beq.n	800e734 <tcp_output+0x380>
      seg->next = NULL;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d105      	bne.n	800e6ba <tcp_output+0x306>
        pcb->unacked = seg;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6b2:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b6:	623b      	str	r3, [r7, #32]
 800e6b8:	e03f      	b.n	800e73a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fa f9c6 	bl	8008a52 <lwip_htonl>
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fa f9bf 	bl	8008a52 <lwip_htonl>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	1ae3      	subs	r3, r4, r3
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	da24      	bge.n	800e726 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	3370      	adds	r3, #112	@ 0x70
 800e6e0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e6e2:	e002      	b.n	800e6ea <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d011      	beq.n	800e716 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7fa f9a9 	bl	8008a52 <lwip_htonl>
 800e700:	4604      	mov	r4, r0
 800e702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fa f9a2 	bl	8008a52 <lwip_htonl>
 800e70e:	4603      	mov	r3, r0
 800e710:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e712:	2b00      	cmp	r3, #0
 800e714:	dbe6      	blt.n	800e6e4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	e009      	b.n	800e73a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e726:	6a3b      	ldr	r3, [r7, #32]
 800e728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e72a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	623b      	str	r3, [r7, #32]
 800e732:	e002      	b.n	800e73a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e736:	f7fd f838 	bl	800b7aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e73e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e742:	2b00      	cmp	r3, #0
 800e744:	d012      	beq.n	800e76c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	691b      	ldr	r3, [r3, #16]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7fa f980 	bl	8008a52 <lwip_htonl>
 800e752:	4602      	mov	r2, r0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e758:	1ad3      	subs	r3, r2, r3
 800e75a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e75c:	8912      	ldrh	r2, [r2, #8]
 800e75e:	4413      	add	r3, r2
  while (seg != NULL &&
 800e760:	69ba      	ldr	r2, [r7, #24]
 800e762:	429a      	cmp	r2, r3
 800e764:	f4bf aed6 	bcs.w	800e514 <tcp_output+0x160>
 800e768:	e000      	b.n	800e76c <tcp_output+0x3b8>
      break;
 800e76a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d108      	bne.n	800e786 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e77c:	e004      	b.n	800e788 <tcp_output+0x3d4>
    goto output_done;
 800e77e:	bf00      	nop
 800e780:	e002      	b.n	800e788 <tcp_output+0x3d4>
    goto output_done;
 800e782:	bf00      	nop
 800e784:	e000      	b.n	800e788 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e786:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8b5b      	ldrh	r3, [r3, #26]
 800e78c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e790:	b29a      	uxth	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3728      	adds	r7, #40	@ 0x28
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bdb0      	pop	{r4, r5, r7, pc}

0800e7a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d106      	bne.n	800e7bc <tcp_output_segment_busy+0x1c>
 800e7ae:	4b09      	ldr	r3, [pc, #36]	@ (800e7d4 <tcp_output_segment_busy+0x34>)
 800e7b0:	f240 529b 	movw	r2, #1435	@ 0x59b
 800e7b4:	4908      	ldr	r1, [pc, #32]	@ (800e7d8 <tcp_output_segment_busy+0x38>)
 800e7b6:	4809      	ldr	r0, [pc, #36]	@ (800e7dc <tcp_output_segment_busy+0x3c>)
 800e7b8:	f7f2 fa08 	bl	8000bcc <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	7b9b      	ldrb	r3, [r3, #14]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d001      	beq.n	800e7ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e000      	b.n	800e7cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	08016ea4 	.word	0x08016ea4
 800e7d8:	08017498 	.word	0x08017498
 800e7dc:	08016ef4 	.word	0x08016ef4

0800e7e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e7e0:	b5b0      	push	{r4, r5, r7, lr}
 800e7e2:	b08c      	sub	sp, #48	@ 0x30
 800e7e4:	af04      	add	r7, sp, #16
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d106      	bne.n	800e800 <tcp_output_segment+0x20>
 800e7f2:	4b6d      	ldr	r3, [pc, #436]	@ (800e9a8 <tcp_output_segment+0x1c8>)
 800e7f4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e7f8:	496c      	ldr	r1, [pc, #432]	@ (800e9ac <tcp_output_segment+0x1cc>)
 800e7fa:	486d      	ldr	r0, [pc, #436]	@ (800e9b0 <tcp_output_segment+0x1d0>)
 800e7fc:	f7f2 f9e6 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d106      	bne.n	800e814 <tcp_output_segment+0x34>
 800e806:	4b68      	ldr	r3, [pc, #416]	@ (800e9a8 <tcp_output_segment+0x1c8>)
 800e808:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e80c:	4969      	ldr	r1, [pc, #420]	@ (800e9b4 <tcp_output_segment+0x1d4>)
 800e80e:	4868      	ldr	r0, [pc, #416]	@ (800e9b0 <tcp_output_segment+0x1d0>)
 800e810:	f7f2 f9dc 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <tcp_output_segment+0x48>
 800e81a:	4b63      	ldr	r3, [pc, #396]	@ (800e9a8 <tcp_output_segment+0x1c8>)
 800e81c:	f240 52bb 	movw	r2, #1467	@ 0x5bb
 800e820:	4965      	ldr	r1, [pc, #404]	@ (800e9b8 <tcp_output_segment+0x1d8>)
 800e822:	4863      	ldr	r0, [pc, #396]	@ (800e9b0 <tcp_output_segment+0x1d0>)
 800e824:	f7f2 f9d2 	bl	8000bcc <printf>

  if (tcp_output_segment_busy(seg)) {
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f7ff ffb9 	bl	800e7a0 <tcp_output_segment_busy>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	e0b3      	b.n	800e9a0 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	691c      	ldr	r4, [r3, #16]
 800e840:	4610      	mov	r0, r2
 800e842:	f7fa f906 	bl	8008a52 <lwip_htonl>
 800e846:	4603      	mov	r3, r0
 800e848:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	691c      	ldr	r4, [r3, #16]
 800e852:	4610      	mov	r0, r2
 800e854:	f7fa f8e8 	bl	8008a28 <lwip_htons>
 800e858:	4603      	mov	r3, r0
 800e85a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e860:	68ba      	ldr	r2, [r7, #8]
 800e862:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e864:	441a      	add	r2, r3
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	3314      	adds	r3, #20
 800e870:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	7b1b      	ldrb	r3, [r3, #12]
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d015      	beq.n	800e8aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	3304      	adds	r3, #4
 800e882:	461a      	mov	r2, r3
 800e884:	6879      	ldr	r1, [r7, #4]
 800e886:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800e88a:	f7fd fa35 	bl	800bcf8 <tcp_eff_send_mss_netif>
 800e88e:	4603      	mov	r3, r0
 800e890:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e892:	8b7b      	ldrh	r3, [r7, #26]
 800e894:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e898:	4618      	mov	r0, r3
 800e89a:	f7fa f8da 	bl	8008a52 <lwip_htonl>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	da02      	bge.n	800e8ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10c      	bne.n	800e8dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e8c2:	4b3e      	ldr	r3, [pc, #248]	@ (800e9bc <tcp_output_segment+0x1dc>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fa f8be 	bl	8008a52 <lwip_htonl>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	691a      	ldr	r2, [r3, #16]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	8959      	ldrh	r1, [r3, #10]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	8b3a      	ldrh	r2, [r7, #24]
 800e8f6:	1a8a      	subs	r2, r1, r2
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	8919      	ldrh	r1, [r3, #8]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	8b3a      	ldrh	r2, [r7, #24]
 800e908:	1a8a      	subs	r2, r1, r2
 800e90a:	b292      	uxth	r2, r2
 800e90c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	68fa      	ldr	r2, [r7, #12]
 800e914:	6912      	ldr	r2, [r2, #16]
 800e916:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	2200      	movs	r2, #0
 800e91e:	741a      	strb	r2, [r3, #16]
 800e920:	2200      	movs	r2, #0
 800e922:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	691a      	ldr	r2, [r3, #16]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	7b1b      	ldrb	r3, [r3, #12]
 800e92c:	f003 0301 	and.w	r3, r3, #1
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <tcp_output_segment+0x158>
 800e934:	2318      	movs	r3, #24
 800e936:	e000      	b.n	800e93a <tcp_output_segment+0x15a>
 800e938:	2314      	movs	r3, #20
 800e93a:	4413      	add	r3, r2
 800e93c:	69fa      	ldr	r2, [r7, #28]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d006      	beq.n	800e950 <tcp_output_segment+0x170>
 800e942:	4b19      	ldr	r3, [pc, #100]	@ (800e9a8 <tcp_output_segment+0x1c8>)
 800e944:	f240 621d 	movw	r2, #1565	@ 0x61d
 800e948:	491d      	ldr	r1, [pc, #116]	@ (800e9c0 <tcp_output_segment+0x1e0>)
 800e94a:	4819      	ldr	r0, [pc, #100]	@ (800e9b0 <tcp_output_segment+0x1d0>)
 800e94c:	f7f2 f93e 	bl	8000bcc <printf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e958:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e95a:	68bd      	ldr	r5, [r7, #8]
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	6914      	ldr	r4, [r2, #16]
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	462b      	mov	r3, r5
 800e968:	460a      	mov	r2, r1
 800e96a:	2106      	movs	r1, #6
 800e96c:	f7fa f98e 	bl	8008c8c <ip_chksum_pseudo>
 800e970:	4603      	mov	r3, r0
 800e972:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6858      	ldr	r0, [r3, #4]
 800e978:	68b9      	ldr	r1, [r7, #8]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	1d1c      	adds	r4, r3, #4
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	7add      	ldrb	r5, [r3, #11]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	7a9b      	ldrb	r3, [r3, #10]
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	9202      	str	r2, [sp, #8]
 800e98a:	2206      	movs	r2, #6
 800e98c:	9201      	str	r2, [sp, #4]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	462b      	mov	r3, r5
 800e992:	4622      	mov	r2, r4
 800e994:	f004 fc64 	bl	8013260 <ip4_output_if>
 800e998:	4603      	mov	r3, r0
 800e99a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e99c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3720      	adds	r7, #32
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e9a8:	08016ea4 	.word	0x08016ea4
 800e9ac:	080174c0 	.word	0x080174c0
 800e9b0:	08016ef4 	.word	0x08016ef4
 800e9b4:	080174e0 	.word	0x080174e0
 800e9b8:	08017500 	.word	0x08017500
 800e9bc:	2000d8fc 	.word	0x2000d8fc
 800e9c0:	08017524 	.word	0x08017524

0800e9c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e9c4:	b5b0      	push	{r4, r5, r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d106      	bne.n	800e9e0 <tcp_rexmit_rto_prepare+0x1c>
 800e9d2:	4b36      	ldr	r3, [pc, #216]	@ (800eaac <tcp_rexmit_rto_prepare+0xe8>)
 800e9d4:	f240 6264 	movw	r2, #1636	@ 0x664
 800e9d8:	4935      	ldr	r1, [pc, #212]	@ (800eab0 <tcp_rexmit_rto_prepare+0xec>)
 800e9da:	4836      	ldr	r0, [pc, #216]	@ (800eab4 <tcp_rexmit_rto_prepare+0xf0>)
 800e9dc:	f7f2 f8f6 	bl	8000bcc <printf>

  if (pcb->unacked == NULL) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d102      	bne.n	800e9ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e9e8:	f06f 0305 	mvn.w	r3, #5
 800e9ec:	e059      	b.n	800eaa2 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	e00b      	b.n	800ea0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fed2 	bl	800e7a0 <tcp_output_segment_busy>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d002      	beq.n	800ea08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ea02:	f06f 0305 	mvn.w	r3, #5
 800ea06:	e04c      	b.n	800eaa2 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	60fb      	str	r3, [r7, #12]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1ef      	bne.n	800e9f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f7ff fec2 	bl	800e7a0 <tcp_output_segment_busy>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d002      	beq.n	800ea28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ea22:	f06f 0305 	mvn.w	r3, #5
 800ea26:	e03c      	b.n	800eaa2 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d104      	bne.n	800ea42 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	895a      	ldrh	r2, [r3, #10]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8b5b      	ldrh	r3, [r3, #26]
 800ea54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7f9 fff4 	bl	8008a52 <lwip_htonl>
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	891b      	ldrh	r3, [r3, #8]
 800ea70:	461d      	mov	r5, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	899b      	ldrh	r3, [r3, #12]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f9 ffd4 	bl	8008a28 <lwip_htons>
 800ea80:	4603      	mov	r3, r0
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0303 	and.w	r3, r3, #3
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d001      	beq.n	800ea90 <tcp_rexmit_rto_prepare+0xcc>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e000      	b.n	800ea92 <tcp_rexmit_rto_prepare+0xce>
 800ea90:	2300      	movs	r3, #0
 800ea92:	442b      	add	r3, r5
 800ea94:	18e2      	adds	r2, r4, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bdb0      	pop	{r4, r5, r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	08016ea4 	.word	0x08016ea4
 800eab0:	08017538 	.word	0x08017538
 800eab4:	08016ef4 	.word	0x08016ef4

0800eab8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <tcp_rexmit_rto_commit+0x1c>
 800eac6:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <tcp_rexmit_rto_commit+0x44>)
 800eac8:	f240 6299 	movw	r2, #1689	@ 0x699
 800eacc:	490c      	ldr	r1, [pc, #48]	@ (800eb00 <tcp_rexmit_rto_commit+0x48>)
 800eace:	480d      	ldr	r0, [pc, #52]	@ (800eb04 <tcp_rexmit_rto_commit+0x4c>)
 800ead0:	f7f2 f87c 	bl	8000bcc <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eada:	2bff      	cmp	r3, #255	@ 0xff
 800eadc:	d007      	beq.n	800eaee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eae4:	3301      	adds	r3, #1
 800eae6:	b2da      	uxtb	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff fc60 	bl	800e3b4 <tcp_output>
}
 800eaf4:	bf00      	nop
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	08016ea4 	.word	0x08016ea4
 800eb00:	0801755c 	.word	0x0801755c
 800eb04:	08016ef4 	.word	0x08016ef4

0800eb08 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d106      	bne.n	800eb24 <tcp_rexmit_rto+0x1c>
 800eb16:	4b0a      	ldr	r3, [pc, #40]	@ (800eb40 <tcp_rexmit_rto+0x38>)
 800eb18:	f240 62ae 	movw	r2, #1710	@ 0x6ae
 800eb1c:	4909      	ldr	r1, [pc, #36]	@ (800eb44 <tcp_rexmit_rto+0x3c>)
 800eb1e:	480a      	ldr	r0, [pc, #40]	@ (800eb48 <tcp_rexmit_rto+0x40>)
 800eb20:	f7f2 f854 	bl	8000bcc <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ff4d 	bl	800e9c4 <tcp_rexmit_rto_prepare>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f7ff ffc1 	bl	800eab8 <tcp_rexmit_rto_commit>
  }
}
 800eb36:	bf00      	nop
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	08016ea4 	.word	0x08016ea4
 800eb44:	08017580 	.word	0x08017580
 800eb48:	08016ef4 	.word	0x08016ef4

0800eb4c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800eb4c:	b590      	push	{r4, r7, lr}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <tcp_rexmit+0x1c>
 800eb5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ec18 <tcp_rexmit+0xcc>)
 800eb5c:	f240 62c2 	movw	r2, #1730	@ 0x6c2
 800eb60:	492e      	ldr	r1, [pc, #184]	@ (800ec1c <tcp_rexmit+0xd0>)
 800eb62:	482f      	ldr	r0, [pc, #188]	@ (800ec20 <tcp_rexmit+0xd4>)
 800eb64:	f7f2 f832 	bl	8000bcc <printf>

  if (pcb->unacked == NULL) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800eb70:	f06f 0305 	mvn.w	r3, #5
 800eb74:	e04c      	b.n	800ec10 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb7a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800eb7c:	68b8      	ldr	r0, [r7, #8]
 800eb7e:	f7ff fe0f 	bl	800e7a0 <tcp_output_segment_busy>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800eb88:	f06f 0305 	mvn.w	r3, #5
 800eb8c:	e040      	b.n	800ec10 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	336c      	adds	r3, #108	@ 0x6c
 800eb9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eb9c:	e002      	b.n	800eba4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d011      	beq.n	800ebd0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	691b      	ldr	r3, [r3, #16]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7f9 ff4c 	bl	8008a52 <lwip_htonl>
 800ebba:	4604      	mov	r4, r0
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	691b      	ldr	r3, [r3, #16]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7f9 ff45 	bl	8008a52 <lwip_htonl>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dbe6      	blt.n	800eb9e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d103      	bne.n	800ebee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ebf4:	2bff      	cmp	r3, #255	@ 0xff
 800ebf6:	d007      	beq.n	800ec08 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ebfe:	3301      	adds	r3, #1
 800ec00:	b2da      	uxtb	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3714      	adds	r7, #20
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd90      	pop	{r4, r7, pc}
 800ec18:	08016ea4 	.word	0x08016ea4
 800ec1c:	0801759c 	.word	0x0801759c
 800ec20:	08016ef4 	.word	0x08016ef4

0800ec24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d106      	bne.n	800ec40 <tcp_rexmit_fast+0x1c>
 800ec32:	4b2a      	ldr	r3, [pc, #168]	@ (800ecdc <tcp_rexmit_fast+0xb8>)
 800ec34:	f240 62fa 	movw	r2, #1786	@ 0x6fa
 800ec38:	4929      	ldr	r1, [pc, #164]	@ (800ece0 <tcp_rexmit_fast+0xbc>)
 800ec3a:	482a      	ldr	r0, [pc, #168]	@ (800ece4 <tcp_rexmit_fast+0xc0>)
 800ec3c:	f7f1 ffc6 	bl	8000bcc <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d044      	beq.n	800ecd2 <tcp_rexmit_fast+0xae>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	8b5b      	ldrh	r3, [r3, #26]
 800ec4c:	f003 0304 	and.w	r3, r3, #4
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d13e      	bne.n	800ecd2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ff79 	bl	800eb4c <tcp_rexmit>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d138      	bne.n	800ecd2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	bf28      	it	cs
 800ec70:	4613      	movcs	r3, r2
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	0fda      	lsrs	r2, r3, #31
 800ec76:	4413      	add	r3, r2
 800ec78:	105b      	asrs	r3, r3, #1
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ec88:	461a      	mov	r2, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec8e:	005b      	lsls	r3, r3, #1
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d206      	bcs.n	800eca2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ecac:	4619      	mov	r1, r3
 800ecae:	0049      	lsls	r1, r1, #1
 800ecb0:	440b      	add	r3, r1
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4413      	add	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	8b5b      	ldrh	r3, [r3, #26]
 800ecc2:	f043 0304 	orr.w	r3, r3, #4
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08016ea4 	.word	0x08016ea4
 800ece0:	080175b4 	.word	0x080175b4
 800ece4:	08016ef4 	.word	0x08016ef4

0800ece8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	817b      	strh	r3, [r7, #10]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ecfa:	897a      	ldrh	r2, [r7, #10]
 800ecfc:	893b      	ldrh	r3, [r7, #8]
 800ecfe:	4413      	add	r3, r2
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	3314      	adds	r3, #20
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	2022      	movs	r0, #34	@ 0x22
 800ed0e:	f7fa ffef 	bl	8009cf0 <pbuf_alloc>
 800ed12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d04d      	beq.n	800edb6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ed1a:	897b      	ldrh	r3, [r7, #10]
 800ed1c:	3313      	adds	r3, #19
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	8952      	ldrh	r2, [r2, #10]
 800ed22:	4293      	cmp	r3, r2
 800ed24:	db06      	blt.n	800ed34 <tcp_output_alloc_header_common+0x4c>
 800ed26:	4b26      	ldr	r3, [pc, #152]	@ (800edc0 <tcp_output_alloc_header_common+0xd8>)
 800ed28:	f240 7224 	movw	r2, #1828	@ 0x724
 800ed2c:	4925      	ldr	r1, [pc, #148]	@ (800edc4 <tcp_output_alloc_header_common+0xdc>)
 800ed2e:	4826      	ldr	r0, [pc, #152]	@ (800edc8 <tcp_output_alloc_header_common+0xe0>)
 800ed30:	f7f1 ff4c 	bl	8000bcc <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ed3a:	8c3b      	ldrh	r3, [r7, #32]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7f9 fe73 	bl	8008a28 <lwip_htons>
 800ed42:	4603      	mov	r3, r0
 800ed44:	461a      	mov	r2, r3
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ed4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f9 fe6b 	bl	8008a28 <lwip_htons>
 800ed52:	4603      	mov	r3, r0
 800ed54:	461a      	mov	r2, r3
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7f9 fe76 	bl	8008a52 <lwip_htonl>
 800ed66:	4602      	mov	r2, r0
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ed6c:	897b      	ldrh	r3, [r7, #10]
 800ed6e:	089b      	lsrs	r3, r3, #2
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	3305      	adds	r3, #5
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	031b      	lsls	r3, r3, #12
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4313      	orrs	r3, r2
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f9 fe4f 	bl	8008a28 <lwip_htons>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ed92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7f9 fe47 	bl	8008a28 <lwip_htons>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	2200      	movs	r2, #0
 800eda6:	741a      	strb	r2, [r3, #16]
 800eda8:	2200      	movs	r2, #0
 800edaa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	2200      	movs	r2, #0
 800edb0:	749a      	strb	r2, [r3, #18]
 800edb2:	2200      	movs	r2, #0
 800edb4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800edb6:	697b      	ldr	r3, [r7, #20]
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	08016ea4 	.word	0x08016ea4
 800edc4:	080175d4 	.word	0x080175d4
 800edc8:	08016ef4 	.word	0x08016ef4

0800edcc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800edcc:	b5b0      	push	{r4, r5, r7, lr}
 800edce:	b08a      	sub	sp, #40	@ 0x28
 800edd0:	af04      	add	r7, sp, #16
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	607b      	str	r3, [r7, #4]
 800edd6:	460b      	mov	r3, r1
 800edd8:	817b      	strh	r3, [r7, #10]
 800edda:	4613      	mov	r3, r2
 800eddc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d106      	bne.n	800edf2 <tcp_output_alloc_header+0x26>
 800ede4:	4b15      	ldr	r3, [pc, #84]	@ (800ee3c <tcp_output_alloc_header+0x70>)
 800ede6:	f240 7243 	movw	r2, #1859	@ 0x743
 800edea:	4915      	ldr	r1, [pc, #84]	@ (800ee40 <tcp_output_alloc_header+0x74>)
 800edec:	4815      	ldr	r0, [pc, #84]	@ (800ee44 <tcp_output_alloc_header+0x78>)
 800edee:	f7f1 feed 	bl	8000bcc <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	8adb      	ldrh	r3, [r3, #22]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	8b12      	ldrh	r2, [r2, #24]
 800edfe:	68f9      	ldr	r1, [r7, #12]
 800ee00:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ee02:	893d      	ldrh	r5, [r7, #8]
 800ee04:	897c      	ldrh	r4, [r7, #10]
 800ee06:	9103      	str	r1, [sp, #12]
 800ee08:	2110      	movs	r1, #16
 800ee0a:	9102      	str	r1, [sp, #8]
 800ee0c:	9201      	str	r2, [sp, #4]
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	462a      	mov	r2, r5
 800ee14:	4621      	mov	r1, r4
 800ee16:	f7ff ff67 	bl	800ece8 <tcp_output_alloc_header_common>
 800ee1a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d006      	beq.n	800ee30 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ee2a:	441a      	add	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ee30:	697b      	ldr	r3, [r7, #20]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bdb0      	pop	{r4, r5, r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	08016ea4 	.word	0x08016ea4
 800ee40:	08017604 	.word	0x08017604
 800ee44:	08016ef4 	.word	0x08016ef4

0800ee48 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b088      	sub	sp, #32
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4611      	mov	r1, r2
 800ee54:	461a      	mov	r2, r3
 800ee56:	460b      	mov	r3, r1
 800ee58:	71fb      	strb	r3, [r7, #7]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d106      	bne.n	800ee76 <tcp_output_fill_options+0x2e>
 800ee68:	4b12      	ldr	r3, [pc, #72]	@ (800eeb4 <tcp_output_fill_options+0x6c>)
 800ee6a:	f240 7257 	movw	r2, #1879	@ 0x757
 800ee6e:	4912      	ldr	r1, [pc, #72]	@ (800eeb8 <tcp_output_fill_options+0x70>)
 800ee70:	4812      	ldr	r0, [pc, #72]	@ (800eebc <tcp_output_fill_options+0x74>)
 800ee72:	f7f1 feab 	bl	8000bcc <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	3314      	adds	r3, #20
 800ee80:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ee82:	8bfb      	ldrh	r3, [r7, #30]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	461a      	mov	r2, r3
 800ee88:	79fb      	ldrb	r3, [r7, #7]
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	f003 0304 	and.w	r3, r3, #4
 800ee90:	4413      	add	r3, r2
 800ee92:	3314      	adds	r3, #20
 800ee94:	69ba      	ldr	r2, [r7, #24]
 800ee96:	4413      	add	r3, r2
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d006      	beq.n	800eeac <tcp_output_fill_options+0x64>
 800ee9e:	4b05      	ldr	r3, [pc, #20]	@ (800eeb4 <tcp_output_fill_options+0x6c>)
 800eea0:	f240 7276 	movw	r2, #1910	@ 0x776
 800eea4:	4906      	ldr	r1, [pc, #24]	@ (800eec0 <tcp_output_fill_options+0x78>)
 800eea6:	4805      	ldr	r0, [pc, #20]	@ (800eebc <tcp_output_fill_options+0x74>)
 800eea8:	f7f1 fe90 	bl	8000bcc <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800eeac:	bf00      	nop
 800eeae:	3720      	adds	r7, #32
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	08016ea4 	.word	0x08016ea4
 800eeb8:	0801762c 	.word	0x0801762c
 800eebc:	08016ef4 	.word	0x08016ef4
 800eec0:	08017524 	.word	0x08017524

0800eec4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08c      	sub	sp, #48	@ 0x30
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d106      	bne.n	800eee6 <tcp_output_control_segment+0x22>
 800eed8:	4b24      	ldr	r3, [pc, #144]	@ (800ef6c <tcp_output_control_segment+0xa8>)
 800eeda:	f44f 62f1 	mov.w	r2, #1928	@ 0x788
 800eede:	4924      	ldr	r1, [pc, #144]	@ (800ef70 <tcp_output_control_segment+0xac>)
 800eee0:	4824      	ldr	r0, [pc, #144]	@ (800ef74 <tcp_output_control_segment+0xb0>)
 800eee2:	f7f1 fe73 	bl	8000bcc <printf>

  netif = tcp_route(pcb, src, dst);
 800eee6:	683a      	ldr	r2, [r7, #0]
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7fe ff14 	bl	800dd18 <tcp_route>
 800eef0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d102      	bne.n	800eefe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eef8:	23fc      	movs	r3, #252	@ 0xfc
 800eefa:	77fb      	strb	r3, [r7, #31]
 800eefc:	e02c      	b.n	800ef58 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	891a      	ldrh	r2, [r3, #8]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	9300      	str	r3, [sp, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2106      	movs	r1, #6
 800ef10:	68b8      	ldr	r0, [r7, #8]
 800ef12:	f7f9 febb 	bl	8008c8c <ip_chksum_pseudo>
 800ef16:	4603      	mov	r3, r0
 800ef18:	461a      	mov	r2, r3
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d006      	beq.n	800ef32 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	7adb      	ldrb	r3, [r3, #11]
 800ef28:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	7a9b      	ldrb	r3, [r3, #10]
 800ef2e:	777b      	strb	r3, [r7, #29]
 800ef30:	e003      	b.n	800ef3a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ef32:	23ff      	movs	r3, #255	@ 0xff
 800ef34:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ef3a:	7fba      	ldrb	r2, [r7, #30]
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	9302      	str	r3, [sp, #8]
 800ef40:	2306      	movs	r3, #6
 800ef42:	9301      	str	r3, [sp, #4]
 800ef44:	7f7b      	ldrb	r3, [r7, #29]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	6879      	ldr	r1, [r7, #4]
 800ef4e:	68b8      	ldr	r0, [r7, #8]
 800ef50:	f004 f986 	bl	8013260 <ip4_output_if>
 800ef54:	4603      	mov	r3, r0
 800ef56:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ef58:	68b8      	ldr	r0, [r7, #8]
 800ef5a:	f7fb f9a9 	bl	800a2b0 <pbuf_free>
  return err;
 800ef5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3720      	adds	r7, #32
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	08016ea4 	.word	0x08016ea4
 800ef70:	08017654 	.word	0x08017654
 800ef74:	08016ef4 	.word	0x08016ef4

0800ef78 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ef78:	b590      	push	{r4, r7, lr}
 800ef7a:	b08b      	sub	sp, #44	@ 0x2c
 800ef7c:	af04      	add	r7, sp, #16
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
 800ef84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d106      	bne.n	800ef9a <tcp_rst+0x22>
 800ef8c:	4b1f      	ldr	r3, [pc, #124]	@ (800f00c <tcp_rst+0x94>)
 800ef8e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ef92:	491f      	ldr	r1, [pc, #124]	@ (800f010 <tcp_rst+0x98>)
 800ef94:	481f      	ldr	r0, [pc, #124]	@ (800f014 <tcp_rst+0x9c>)
 800ef96:	f7f1 fe19 	bl	8000bcc <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ef9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d106      	bne.n	800efae <tcp_rst+0x36>
 800efa0:	4b1a      	ldr	r3, [pc, #104]	@ (800f00c <tcp_rst+0x94>)
 800efa2:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800efa6:	491c      	ldr	r1, [pc, #112]	@ (800f018 <tcp_rst+0xa0>)
 800efa8:	481a      	ldr	r0, [pc, #104]	@ (800f014 <tcp_rst+0x9c>)
 800efaa:	f7f1 fe0f 	bl	8000bcc <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800efae:	2300      	movs	r3, #0
 800efb0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800efb2:	f646 030b 	movw	r3, #26635	@ 0x680b
 800efb6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	b29c      	uxth	r4, r3
 800efbc:	68b8      	ldr	r0, [r7, #8]
 800efbe:	f7f9 fd48 	bl	8008a52 <lwip_htonl>
 800efc2:	4602      	mov	r2, r0
 800efc4:	8abb      	ldrh	r3, [r7, #20]
 800efc6:	9303      	str	r3, [sp, #12]
 800efc8:	2314      	movs	r3, #20
 800efca:	9302      	str	r3, [sp, #8]
 800efcc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	4613      	mov	r3, r2
 800efd6:	2200      	movs	r2, #0
 800efd8:	4621      	mov	r1, r4
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff fe84 	bl	800ece8 <tcp_output_alloc_header_common>
 800efe0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00c      	beq.n	800f002 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800efe8:	2300      	movs	r3, #0
 800efea:	2200      	movs	r2, #0
 800efec:	6939      	ldr	r1, [r7, #16]
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff ff2a 	bl	800ee48 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	6939      	ldr	r1, [r7, #16]
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff ff62 	bl	800eec4 <tcp_output_control_segment>
 800f000:	e000      	b.n	800f004 <tcp_rst+0x8c>
    return;
 800f002:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	bd90      	pop	{r4, r7, pc}
 800f00a:	bf00      	nop
 800f00c:	08016ea4 	.word	0x08016ea4
 800f010:	08017680 	.word	0x08017680
 800f014:	08016ef4 	.word	0x08016ef4
 800f018:	0801769c 	.word	0x0801769c

0800f01c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <tcp_send_empty_ack+0x24>
 800f032:	4b28      	ldr	r3, [pc, #160]	@ (800f0d4 <tcp_send_empty_ack+0xb8>)
 800f034:	f240 72eb 	movw	r2, #2027	@ 0x7eb
 800f038:	4927      	ldr	r1, [pc, #156]	@ (800f0d8 <tcp_send_empty_ack+0xbc>)
 800f03a:	4828      	ldr	r0, [pc, #160]	@ (800f0dc <tcp_send_empty_ack+0xc0>)
 800f03c:	f7f1 fdc6 	bl	8000bcc <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f040:	7dfb      	ldrb	r3, [r7, #23]
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	b2db      	uxtb	r3, r3
 800f046:	f003 0304 	and.w	r3, r3, #4
 800f04a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f04c:	7d7b      	ldrb	r3, [r7, #21]
 800f04e:	b29c      	uxth	r4, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f054:	4618      	mov	r0, r3
 800f056:	f7f9 fcfc 	bl	8008a52 <lwip_htonl>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2200      	movs	r2, #0
 800f05e:	4621      	mov	r1, r4
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7ff feb3 	bl	800edcc <tcp_output_alloc_header>
 800f066:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d109      	bne.n	800f082 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	8b5b      	ldrh	r3, [r3, #26]
 800f072:	f043 0303 	orr.w	r3, r3, #3
 800f076:	b29a      	uxth	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f07c:	f06f 0301 	mvn.w	r3, #1
 800f080:	e023      	b.n	800f0ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f082:	7dbb      	ldrb	r3, [r7, #22]
 800f084:	7dfa      	ldrb	r2, [r7, #23]
 800f086:	6939      	ldr	r1, [r7, #16]
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7ff fedd 	bl	800ee48 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3304      	adds	r3, #4
 800f094:	6939      	ldr	r1, [r7, #16]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff ff14 	bl	800eec4 <tcp_output_control_segment>
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d007      	beq.n	800f0b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	8b5b      	ldrh	r3, [r3, #26]
 800f0ac:	f043 0303 	orr.w	r3, r3, #3
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	835a      	strh	r2, [r3, #26]
 800f0b6:	e006      	b.n	800f0c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd90      	pop	{r4, r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	08016ea4 	.word	0x08016ea4
 800f0d8:	080176b8 	.word	0x080176b8
 800f0dc:	08016ef4 	.word	0x08016ef4

0800f0e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f0e0:	b590      	push	{r4, r7, lr}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d106      	bne.n	800f100 <tcp_keepalive+0x20>
 800f0f2:	4b18      	ldr	r3, [pc, #96]	@ (800f154 <tcp_keepalive+0x74>)
 800f0f4:	f640 0225 	movw	r2, #2085	@ 0x825
 800f0f8:	4917      	ldr	r1, [pc, #92]	@ (800f158 <tcp_keepalive+0x78>)
 800f0fa:	4818      	ldr	r0, [pc, #96]	@ (800f15c <tcp_keepalive+0x7c>)
 800f0fc:	f7f1 fd66 	bl	8000bcc <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f100:	7abb      	ldrb	r3, [r7, #10]
 800f102:	b29c      	uxth	r4, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f108:	3b01      	subs	r3, #1
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f9 fca1 	bl	8008a52 <lwip_htonl>
 800f110:	4603      	mov	r3, r0
 800f112:	2200      	movs	r2, #0
 800f114:	4621      	mov	r1, r4
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff fe58 	bl	800edcc <tcp_output_alloc_header>
 800f11c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f124:	f04f 33ff 	mov.w	r3, #4294967295
 800f128:	e010      	b.n	800f14c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f12a:	2300      	movs	r3, #0
 800f12c:	2200      	movs	r2, #0
 800f12e:	68f9      	ldr	r1, [r7, #12]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff fe89 	bl	800ee48 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3304      	adds	r3, #4
 800f13c:	68f9      	ldr	r1, [r7, #12]
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff fec0 	bl	800eec4 <tcp_output_control_segment>
 800f144:	4603      	mov	r3, r0
 800f146:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f148:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	bd90      	pop	{r4, r7, pc}
 800f154:	08016ea4 	.word	0x08016ea4
 800f158:	080176d8 	.word	0x080176d8
 800f15c:	08016ef4 	.word	0x08016ef4

0800f160 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f160:	b590      	push	{r4, r7, lr}
 800f162:	b08b      	sub	sp, #44	@ 0x2c
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f168:	2300      	movs	r3, #0
 800f16a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d106      	bne.n	800f180 <tcp_zero_window_probe+0x20>
 800f172:	4b4d      	ldr	r3, [pc, #308]	@ (800f2a8 <tcp_zero_window_probe+0x148>)
 800f174:	f44f 6205 	mov.w	r2, #2128	@ 0x850
 800f178:	494c      	ldr	r1, [pc, #304]	@ (800f2ac <tcp_zero_window_probe+0x14c>)
 800f17a:	484d      	ldr	r0, [pc, #308]	@ (800f2b0 <tcp_zero_window_probe+0x150>)
 800f17c:	f7f1 fd26 	bl	8000bcc <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f184:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 800f186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	e087      	b.n	800f2a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800f196:	2bff      	cmp	r3, #255	@ 0xff
 800f198:	d007      	beq.n	800f1aa <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	899b      	ldrh	r3, [r3, #12]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7f9 fc38 	bl	8008a28 <lwip_htons>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	f003 0301 	and.w	r3, r3, #1
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <tcp_zero_window_probe+0x70>
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c6:	891b      	ldrh	r3, [r3, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d101      	bne.n	800f1d0 <tcp_zero_window_probe+0x70>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	e000      	b.n	800f1d2 <tcp_zero_window_probe+0x72>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f1d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	bf0c      	ite	eq
 800f1de:	2301      	moveq	r3, #1
 800f1e0:	2300      	movne	r3, #0
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f1e6:	7cfb      	ldrb	r3, [r7, #19]
 800f1e8:	b299      	uxth	r1, r3
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	8c3a      	ldrh	r2, [r7, #32]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7ff fdea 	bl	800edcc <tcp_output_alloc_header>
 800f1f8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d102      	bne.n	800f206 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f200:	f04f 33ff 	mov.w	r3, #4294967295
 800f204:	e04c      	b.n	800f2a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 800f20c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f210:	2b00      	cmp	r3, #0
 800f212:	d011      	beq.n	800f238 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f214:	69bb      	ldr	r3, [r7, #24]
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b21b      	sxth	r3, r3
 800f21c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f220:	b21c      	sxth	r4, r3
 800f222:	2011      	movs	r0, #17
 800f224:	f7f9 fc00 	bl	8008a28 <lwip_htons>
 800f228:	4603      	mov	r3, r0
 800f22a:	b21b      	sxth	r3, r3
 800f22c:	4323      	orrs	r3, r4
 800f22e:	b21b      	sxth	r3, r3
 800f230:	b29a      	uxth	r2, r3
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	819a      	strh	r2, [r3, #12]
 800f236:	e010      	b.n	800f25a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	3314      	adds	r3, #20
 800f23e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f242:	6858      	ldr	r0, [r3, #4]
 800f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	891a      	ldrh	r2, [r3, #8]
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24c:	891b      	ldrh	r3, [r3, #8]
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	b29b      	uxth	r3, r3
 800f252:	2201      	movs	r2, #1
 800f254:	6979      	ldr	r1, [r7, #20]
 800f256:	f7fb fa5d 	bl	800a714 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	f7f9 fbf6 	bl	8008a52 <lwip_htonl>
 800f266:	4603      	mov	r3, r0
 800f268:	3301      	adds	r3, #1
 800f26a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	da02      	bge.n	800f27e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 800f27e:	2300      	movs	r3, #0
 800f280:	2200      	movs	r2, #0
 800f282:	69f9      	ldr	r1, [r7, #28]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff fddf 	bl	800ee48 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3304      	adds	r3, #4
 800f290:	69f9      	ldr	r1, [r7, #28]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff fe16 	bl	800eec4 <tcp_output_control_segment>
 800f298:	4603      	mov	r3, r0
 800f29a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f29c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	372c      	adds	r7, #44	@ 0x2c
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd90      	pop	{r4, r7, pc}
 800f2a8:	08016ea4 	.word	0x08016ea4
 800f2ac:	080176f4 	.word	0x080176f4
 800f2b0:	08016ef4 	.word	0x08016ef4

0800f2b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f2bc:	f7fb fb0c 	bl	800a8d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ec <tcpip_tcp_timer+0x38>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d103      	bne.n	800f2d0 <tcpip_tcp_timer+0x1c>
 800f2c8:	4b09      	ldr	r3, [pc, #36]	@ (800f2f0 <tcpip_tcp_timer+0x3c>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d005      	beq.n	800f2dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4908      	ldr	r1, [pc, #32]	@ (800f2f4 <tcpip_tcp_timer+0x40>)
 800f2d4:	20fa      	movs	r0, #250	@ 0xfa
 800f2d6:	f000 f8f3 	bl	800f4c0 <sys_timeout>
 800f2da:	e003      	b.n	800f2e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f2dc:	4b06      	ldr	r3, [pc, #24]	@ (800f2f8 <tcpip_tcp_timer+0x44>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	601a      	str	r2, [r3, #0]
  }
}
 800f2e2:	bf00      	nop
 800f2e4:	bf00      	nop
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	2000d8f8 	.word	0x2000d8f8
 800f2f0:	2000d908 	.word	0x2000d908
 800f2f4:	0800f2b5 	.word	0x0800f2b5
 800f2f8:	20004aec 	.word	0x20004aec

0800f2fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f300:	4b0a      	ldr	r3, [pc, #40]	@ (800f32c <tcp_timer_needed+0x30>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d10f      	bne.n	800f328 <tcp_timer_needed+0x2c>
 800f308:	4b09      	ldr	r3, [pc, #36]	@ (800f330 <tcp_timer_needed+0x34>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <tcp_timer_needed+0x1c>
 800f310:	4b08      	ldr	r3, [pc, #32]	@ (800f334 <tcp_timer_needed+0x38>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d007      	beq.n	800f328 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f318:	4b04      	ldr	r3, [pc, #16]	@ (800f32c <tcp_timer_needed+0x30>)
 800f31a:	2201      	movs	r2, #1
 800f31c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f31e:	2200      	movs	r2, #0
 800f320:	4905      	ldr	r1, [pc, #20]	@ (800f338 <tcp_timer_needed+0x3c>)
 800f322:	20fa      	movs	r0, #250	@ 0xfa
 800f324:	f000 f8cc 	bl	800f4c0 <sys_timeout>
  }
}
 800f328:	bf00      	nop
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	20004aec 	.word	0x20004aec
 800f330:	2000d8f8 	.word	0x2000d8f8
 800f334:	2000d908 	.word	0x2000d908
 800f338:	0800f2b5 	.word	0x0800f2b5

0800f33c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f348:	200a      	movs	r0, #10
 800f34a:	f7fa f975 	bl	8009638 <memp_malloc>
 800f34e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d109      	bne.n	800f36a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d151      	bne.n	800f400 <sys_timeout_abs+0xc4>
 800f35c:	4b2a      	ldr	r3, [pc, #168]	@ (800f408 <sys_timeout_abs+0xcc>)
 800f35e:	22be      	movs	r2, #190	@ 0xbe
 800f360:	492a      	ldr	r1, [pc, #168]	@ (800f40c <sys_timeout_abs+0xd0>)
 800f362:	482b      	ldr	r0, [pc, #172]	@ (800f410 <sys_timeout_abs+0xd4>)
 800f364:	f7f1 fc32 	bl	8000bcc <printf>
    return;
 800f368:	e04a      	b.n	800f400 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	2200      	movs	r2, #0
 800f36e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	68ba      	ldr	r2, [r7, #8]
 800f374:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f382:	4b24      	ldr	r3, [pc, #144]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d103      	bne.n	800f392 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f38a:	4a22      	ldr	r2, [pc, #136]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	6013      	str	r3, [r2, #0]
    return;
 800f390:	e037      	b.n	800f402 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	4b1f      	ldr	r3, [pc, #124]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	1ad3      	subs	r3, r2, r3
 800f39e:	0fdb      	lsrs	r3, r3, #31
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d007      	beq.n	800f3ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f3b2:	4a18      	ldr	r2, [pc, #96]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6013      	str	r3, [r2, #0]
 800f3b8:	e023      	b.n	800f402 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f3ba:	4b16      	ldr	r3, [pc, #88]	@ (800f414 <sys_timeout_abs+0xd8>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	617b      	str	r3, [r7, #20]
 800f3c0:	e01a      	b.n	800f3f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00b      	beq.n	800f3e2 <sys_timeout_abs+0xa6>
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	1ad3      	subs	r3, r2, r3
 800f3d6:	0fdb      	lsrs	r3, r3, #31
 800f3d8:	f003 0301 	and.w	r3, r3, #1
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d007      	beq.n	800f3f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	693a      	ldr	r2, [r7, #16]
 800f3ee:	601a      	str	r2, [r3, #0]
        break;
 800f3f0:	e007      	b.n	800f402 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	617b      	str	r3, [r7, #20]
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d1e1      	bne.n	800f3c2 <sys_timeout_abs+0x86>
 800f3fe:	e000      	b.n	800f402 <sys_timeout_abs+0xc6>
    return;
 800f400:	bf00      	nop
      }
    }
  }
}
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08017718 	.word	0x08017718
 800f40c:	08017748 	.word	0x08017748
 800f410:	08017788 	.word	0x08017788
 800f414:	20004ae4 	.word	0x20004ae4

0800f418 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	4798      	blx	r3

  now = sys_now();
 800f42a:	f7f5 f932 	bl	8004692 <sys_now>
 800f42e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	4b0f      	ldr	r3, [pc, #60]	@ (800f474 <lwip_cyclic_timer+0x5c>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4413      	add	r3, r2
 800f43a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	0fdb      	lsrs	r3, r3, #31
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d009      	beq.n	800f462 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	4413      	add	r3, r2
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	4907      	ldr	r1, [pc, #28]	@ (800f478 <lwip_cyclic_timer+0x60>)
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff ff6e 	bl	800f33c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f460:	e004      	b.n	800f46c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	4904      	ldr	r1, [pc, #16]	@ (800f478 <lwip_cyclic_timer+0x60>)
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f7ff ff68 	bl	800f33c <sys_timeout_abs>
}
 800f46c:	bf00      	nop
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	20004ae8 	.word	0x20004ae8
 800f478:	0800f419 	.word	0x0800f419

0800f47c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f482:	2301      	movs	r3, #1
 800f484:	607b      	str	r3, [r7, #4]
 800f486:	e00e      	b.n	800f4a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f488:	4a0b      	ldr	r2, [pc, #44]	@ (800f4b8 <sys_timeouts_init+0x3c>)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	00db      	lsls	r3, r3, #3
 800f494:	4a08      	ldr	r2, [pc, #32]	@ (800f4b8 <sys_timeouts_init+0x3c>)
 800f496:	4413      	add	r3, r2
 800f498:	461a      	mov	r2, r3
 800f49a:	4908      	ldr	r1, [pc, #32]	@ (800f4bc <sys_timeouts_init+0x40>)
 800f49c:	f000 f810 	bl	800f4c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	607b      	str	r3, [r7, #4]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d9ed      	bls.n	800f488 <sys_timeouts_init+0xc>
  }
}
 800f4ac:	bf00      	nop
 800f4ae:	bf00      	nop
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	080186cc 	.word	0x080186cc
 800f4bc:	0800f419 	.word	0x0800f419

0800f4c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4d2:	d306      	bcc.n	800f4e2 <sys_timeout+0x22>
 800f4d4:	4b0a      	ldr	r3, [pc, #40]	@ (800f500 <sys_timeout+0x40>)
 800f4d6:	f240 1229 	movw	r2, #297	@ 0x129
 800f4da:	490a      	ldr	r1, [pc, #40]	@ (800f504 <sys_timeout+0x44>)
 800f4dc:	480a      	ldr	r0, [pc, #40]	@ (800f508 <sys_timeout+0x48>)
 800f4de:	f7f1 fb75 	bl	8000bcc <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f4e2:	f7f5 f8d6 	bl	8004692 <sys_now>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	68b9      	ldr	r1, [r7, #8]
 800f4f2:	6978      	ldr	r0, [r7, #20]
 800f4f4:	f7ff ff22 	bl	800f33c <sys_timeout_abs>
#endif
}
 800f4f8:	bf00      	nop
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	08017718 	.word	0x08017718
 800f504:	080177b0 	.word	0x080177b0
 800f508:	08017788 	.word	0x08017788

0800f50c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f512:	f7f5 f8be 	bl	8004692 <sys_now>
 800f516:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f518:	4b17      	ldr	r3, [pc, #92]	@ (800f578 <sys_check_timeouts+0x6c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d022      	beq.n	800f56a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	0fdb      	lsrs	r3, r3, #31
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	b2db      	uxtb	r3, r3
 800f534:	2b00      	cmp	r3, #0
 800f536:	d11a      	bne.n	800f56e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4a0e      	ldr	r2, [pc, #56]	@ (800f578 <sys_check_timeouts+0x6c>)
 800f53e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	4a0a      	ldr	r2, [pc, #40]	@ (800f57c <sys_check_timeouts+0x70>)
 800f552:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f554:	68b9      	ldr	r1, [r7, #8]
 800f556:	200a      	movs	r0, #10
 800f558:	f7fa f8b2 	bl	80096c0 <memp_free>
    if (handler != NULL) {
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d0da      	beq.n	800f518 <sys_check_timeouts+0xc>
      handler(arg);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6838      	ldr	r0, [r7, #0]
 800f566:	4798      	blx	r3
  do {
 800f568:	e7d6      	b.n	800f518 <sys_check_timeouts+0xc>
      return;
 800f56a:	bf00      	nop
 800f56c:	e000      	b.n	800f570 <sys_check_timeouts+0x64>
      return;
 800f56e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	20004ae4 	.word	0x20004ae4
 800f57c:	20004ae8 	.word	0x20004ae8

0800f580 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b082      	sub	sp, #8
 800f584:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f586:	4b16      	ldr	r3, [pc, #88]	@ (800f5e0 <sys_timeouts_sleeptime+0x60>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d102      	bne.n	800f594 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f58e:	f04f 33ff 	mov.w	r3, #4294967295
 800f592:	e020      	b.n	800f5d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f594:	f7f5 f87d 	bl	8004692 <sys_now>
 800f598:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f59a:	4b11      	ldr	r3, [pc, #68]	@ (800f5e0 <sys_timeouts_sleeptime+0x60>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	0fdb      	lsrs	r3, r3, #31
 800f5a6:	f003 0301 	and.w	r3, r3, #1
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d001      	beq.n	800f5b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	e010      	b.n	800f5d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e0 <sys_timeouts_sleeptime+0x60>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	685a      	ldr	r2, [r3, #4]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da06      	bge.n	800f5d4 <sys_timeouts_sleeptime+0x54>
 800f5c6:	4b07      	ldr	r3, [pc, #28]	@ (800f5e4 <sys_timeouts_sleeptime+0x64>)
 800f5c8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f5cc:	4906      	ldr	r1, [pc, #24]	@ (800f5e8 <sys_timeouts_sleeptime+0x68>)
 800f5ce:	4807      	ldr	r0, [pc, #28]	@ (800f5ec <sys_timeouts_sleeptime+0x6c>)
 800f5d0:	f7f1 fafc 	bl	8000bcc <printf>
    return ret;
 800f5d4:	683b      	ldr	r3, [r7, #0]
  }
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	20004ae4 	.word	0x20004ae4
 800f5e4:	08017718 	.word	0x08017718
 800f5e8:	080177e8 	.word	0x080177e8
 800f5ec:	08017788 	.word	0x08017788

0800f5f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f5f4:	f004 ffbe 	bl	8014574 <rand>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f600:	b29b      	uxth	r3, r3
 800f602:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f606:	b29a      	uxth	r2, r3
 800f608:	4b01      	ldr	r3, [pc, #4]	@ (800f610 <udp_init+0x20>)
 800f60a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f60c:	bf00      	nop
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	20000018 	.word	0x20000018

0800f614 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f61e:	4b17      	ldr	r3, [pc, #92]	@ (800f67c <udp_new_port+0x68>)
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	1c5a      	adds	r2, r3, #1
 800f624:	b291      	uxth	r1, r2
 800f626:	4a15      	ldr	r2, [pc, #84]	@ (800f67c <udp_new_port+0x68>)
 800f628:	8011      	strh	r1, [r2, #0]
 800f62a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f62e:	4293      	cmp	r3, r2
 800f630:	d103      	bne.n	800f63a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f632:	4b12      	ldr	r3, [pc, #72]	@ (800f67c <udp_new_port+0x68>)
 800f634:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f638:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f63a:	4b11      	ldr	r3, [pc, #68]	@ (800f680 <udp_new_port+0x6c>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	e011      	b.n	800f666 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	8a5a      	ldrh	r2, [r3, #18]
 800f646:	4b0d      	ldr	r3, [pc, #52]	@ (800f67c <udp_new_port+0x68>)
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d108      	bne.n	800f660 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f64e:	88fb      	ldrh	r3, [r7, #6]
 800f650:	3301      	adds	r3, #1
 800f652:	80fb      	strh	r3, [r7, #6]
 800f654:	88fb      	ldrh	r3, [r7, #6]
 800f656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f65a:	d3e0      	bcc.n	800f61e <udp_new_port+0xa>
        return 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	e007      	b.n	800f670 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	603b      	str	r3, [r7, #0]
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1ea      	bne.n	800f642 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f66c:	4b03      	ldr	r3, [pc, #12]	@ (800f67c <udp_new_port+0x68>)
 800f66e:	881b      	ldrh	r3, [r3, #0]
}
 800f670:	4618      	mov	r0, r3
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr
 800f67c:	20000018 	.word	0x20000018
 800f680:	2000d910 	.word	0x2000d910

0800f684 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	4613      	mov	r3, r2
 800f690:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d105      	bne.n	800f6a4 <udp_input_local_match+0x20>
 800f698:	4b27      	ldr	r3, [pc, #156]	@ (800f738 <udp_input_local_match+0xb4>)
 800f69a:	2287      	movs	r2, #135	@ 0x87
 800f69c:	4927      	ldr	r1, [pc, #156]	@ (800f73c <udp_input_local_match+0xb8>)
 800f69e:	4828      	ldr	r0, [pc, #160]	@ (800f740 <udp_input_local_match+0xbc>)
 800f6a0:	f7f1 fa94 	bl	8000bcc <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d105      	bne.n	800f6b6 <udp_input_local_match+0x32>
 800f6aa:	4b23      	ldr	r3, [pc, #140]	@ (800f738 <udp_input_local_match+0xb4>)
 800f6ac:	2288      	movs	r2, #136	@ 0x88
 800f6ae:	4925      	ldr	r1, [pc, #148]	@ (800f744 <udp_input_local_match+0xc0>)
 800f6b0:	4823      	ldr	r0, [pc, #140]	@ (800f740 <udp_input_local_match+0xbc>)
 800f6b2:	f7f1 fa8b 	bl	8000bcc <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	7a1b      	ldrb	r3, [r3, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00b      	beq.n	800f6d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	7a1a      	ldrb	r2, [r3, #8]
 800f6c2:	4b21      	ldr	r3, [pc, #132]	@ (800f748 <udp_input_local_match+0xc4>)
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d001      	beq.n	800f6d6 <udp_input_local_match+0x52>
    return 0;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	e02b      	b.n	800f72e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d018      	beq.n	800f70e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d013      	beq.n	800f70a <udp_input_local_match+0x86>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00f      	beq.n	800f70a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f6ea:	4b17      	ldr	r3, [pc, #92]	@ (800f748 <udp_input_local_match+0xc4>)
 800f6ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f2:	d00a      	beq.n	800f70a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	4b13      	ldr	r3, [pc, #76]	@ (800f748 <udp_input_local_match+0xc4>)
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	405a      	eors	r2, r3
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	3308      	adds	r3, #8
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f706:	2b00      	cmp	r3, #0
 800f708:	d110      	bne.n	800f72c <udp_input_local_match+0xa8>
          return 1;
 800f70a:	2301      	movs	r3, #1
 800f70c:	e00f      	b.n	800f72e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d009      	beq.n	800f728 <udp_input_local_match+0xa4>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d005      	beq.n	800f728 <udp_input_local_match+0xa4>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <udp_input_local_match+0xc4>)
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	429a      	cmp	r2, r3
 800f726:	d101      	bne.n	800f72c <udp_input_local_match+0xa8>
        return 1;
 800f728:	2301      	movs	r3, #1
 800f72a:	e000      	b.n	800f72e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	080177fc 	.word	0x080177fc
 800f73c:	08017828 	.word	0x08017828
 800f740:	0801784c 	.word	0x0801784c
 800f744:	08017874 	.word	0x08017874
 800f748:	200054ec 	.word	0x200054ec

0800f74c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f74c:	b590      	push	{r4, r7, lr}
 800f74e:	b08d      	sub	sp, #52	@ 0x34
 800f750:	af02      	add	r7, sp, #8
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d105      	bne.n	800f76c <udp_input+0x20>
 800f760:	4b87      	ldr	r3, [pc, #540]	@ (800f980 <udp_input+0x234>)
 800f762:	22cf      	movs	r2, #207	@ 0xcf
 800f764:	4987      	ldr	r1, [pc, #540]	@ (800f984 <udp_input+0x238>)
 800f766:	4888      	ldr	r0, [pc, #544]	@ (800f988 <udp_input+0x23c>)
 800f768:	f7f1 fa30 	bl	8000bcc <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d105      	bne.n	800f77e <udp_input+0x32>
 800f772:	4b83      	ldr	r3, [pc, #524]	@ (800f980 <udp_input+0x234>)
 800f774:	22d0      	movs	r2, #208	@ 0xd0
 800f776:	4985      	ldr	r1, [pc, #532]	@ (800f98c <udp_input+0x240>)
 800f778:	4883      	ldr	r0, [pc, #524]	@ (800f988 <udp_input+0x23c>)
 800f77a:	f7f1 fa27 	bl	8000bcc <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	895b      	ldrh	r3, [r3, #10]
 800f782:	2b07      	cmp	r3, #7
 800f784:	d803      	bhi.n	800f78e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7fa fd92 	bl	800a2b0 <pbuf_free>
    goto end;
 800f78c:	e0f0      	b.n	800f970 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f794:	4b7e      	ldr	r3, [pc, #504]	@ (800f990 <udp_input+0x244>)
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	4a7d      	ldr	r2, [pc, #500]	@ (800f990 <udp_input+0x244>)
 800f79a:	6812      	ldr	r2, [r2, #0]
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f003 fe9c 	bl	80134dc <ip4_addr_isbroadcast_u32>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7f9 f93a 	bl	8008a28 <lwip_htons>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	885b      	ldrh	r3, [r3, #2]
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7f9 f932 	bl	8008a28 <lwip_htons>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d4:	4b6f      	ldr	r3, [pc, #444]	@ (800f994 <udp_input+0x248>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	61fb      	str	r3, [r7, #28]
 800f7da:	e054      	b.n	800f886 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	8a5b      	ldrh	r3, [r3, #18]
 800f7e0:	89fa      	ldrh	r2, [r7, #14]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d14a      	bne.n	800f87c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f7e6:	7cfb      	ldrb	r3, [r7, #19]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	69f8      	ldr	r0, [r7, #28]
 800f7ee:	f7ff ff49 	bl	800f684 <udp_input_local_match>
 800f7f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d041      	beq.n	800f87c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	7c1b      	ldrb	r3, [r3, #16]
 800f7fc:	f003 0304 	and.w	r3, r3, #4
 800f800:	2b00      	cmp	r3, #0
 800f802:	d11d      	bne.n	800f840 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f806:	2b00      	cmp	r3, #0
 800f808:	d102      	bne.n	800f810 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f80e:	e017      	b.n	800f840 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f810:	7cfb      	ldrb	r3, [r7, #19]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d014      	beq.n	800f840 <udp_input+0xf4>
 800f816:	4b5e      	ldr	r3, [pc, #376]	@ (800f990 <udp_input+0x244>)
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d10f      	bne.n	800f840 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	3304      	adds	r3, #4
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d008      	beq.n	800f840 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	3304      	adds	r3, #4
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d101      	bne.n	800f840 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	8a9b      	ldrh	r3, [r3, #20]
 800f844:	8a3a      	ldrh	r2, [r7, #16]
 800f846:	429a      	cmp	r2, r3
 800f848:	d118      	bne.n	800f87c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d005      	beq.n	800f85e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	4b4e      	ldr	r3, [pc, #312]	@ (800f990 <udp_input+0x244>)
 800f858:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d10e      	bne.n	800f87c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d014      	beq.n	800f88e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	68da      	ldr	r2, [r3, #12]
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f86c:	4b49      	ldr	r3, [pc, #292]	@ (800f994 <udp_input+0x248>)
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f874:	4a47      	ldr	r2, [pc, #284]	@ (800f994 <udp_input+0x248>)
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f87a:	e008      	b.n	800f88e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	61fb      	str	r3, [r7, #28]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1a7      	bne.n	800f7dc <udp_input+0x90>
 800f88c:	e000      	b.n	800f890 <udp_input+0x144>
        break;
 800f88e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <udp_input+0x15a>
    for_us = 1;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	76fb      	strb	r3, [r7, #27]
 800f8a4:	e00a      	b.n	800f8bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	4b38      	ldr	r3, [pc, #224]	@ (800f990 <udp_input+0x244>)
 800f8ae:	695b      	ldr	r3, [r3, #20]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	bf0c      	ite	eq
 800f8b4:	2301      	moveq	r3, #1
 800f8b6:	2300      	movne	r3, #0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f8bc:	7efb      	ldrb	r3, [r7, #27]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d052      	beq.n	800f968 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	88db      	ldrh	r3, [r3, #6]
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00b      	beq.n	800f8e4 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	891a      	ldrh	r2, [r3, #8]
 800f8d0:	4b31      	ldr	r3, [pc, #196]	@ (800f998 <udp_input+0x24c>)
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	4b31      	ldr	r3, [pc, #196]	@ (800f99c <udp_input+0x250>)
 800f8d6:	2111      	movs	r1, #17
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7f9 f9d7 	bl	8008c8c <ip_chksum_pseudo>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d146      	bne.n	800f972 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f8e4:	2108      	movs	r1, #8
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7fa fc60 	bl	800a1ac <pbuf_remove_header>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00a      	beq.n	800f908 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f8f2:	4b23      	ldr	r3, [pc, #140]	@ (800f980 <udp_input+0x234>)
 800f8f4:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f8f8:	4929      	ldr	r1, [pc, #164]	@ (800f9a0 <udp_input+0x254>)
 800f8fa:	4823      	ldr	r0, [pc, #140]	@ (800f988 <udp_input+0x23c>)
 800f8fc:	f7f1 f966 	bl	8000bcc <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fa fcd5 	bl	800a2b0 <pbuf_free>
      goto end;
 800f906:	e033      	b.n	800f970 <udp_input+0x224>
    }

    if (pcb != NULL) {
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d012      	beq.n	800f934 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	699b      	ldr	r3, [r3, #24]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00a      	beq.n	800f92c <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	699c      	ldr	r4, [r3, #24]
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	69d8      	ldr	r0, [r3, #28]
 800f91e:	8a3b      	ldrh	r3, [r7, #16]
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	4b1e      	ldr	r3, [pc, #120]	@ (800f99c <udp_input+0x250>)
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	69f9      	ldr	r1, [r7, #28]
 800f928:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f92a:	e026      	b.n	800f97a <udp_input+0x22e>
        pbuf_free(p);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7fa fcbf 	bl	800a2b0 <pbuf_free>
        goto end;
 800f932:	e01d      	b.n	800f970 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f934:	7cfb      	ldrb	r3, [r7, #19]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d112      	bne.n	800f960 <udp_input+0x214>
 800f93a:	4b15      	ldr	r3, [pc, #84]	@ (800f990 <udp_input+0x244>)
 800f93c:	695b      	ldr	r3, [r3, #20]
 800f93e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f942:	2be0      	cmp	r3, #224	@ 0xe0
 800f944:	d00c      	beq.n	800f960 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f946:	4b12      	ldr	r3, [pc, #72]	@ (800f990 <udp_input+0x244>)
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	3308      	adds	r3, #8
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	b21b      	sxth	r3, r3
 800f950:	4619      	mov	r1, r3
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7fa fc99 	bl	800a28a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f958:	2103      	movs	r1, #3
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f003 f9f4 	bl	8012d48 <icmp_dest_unreach>
      pbuf_free(p);
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7fa fca5 	bl	800a2b0 <pbuf_free>
  return;
 800f966:	e008      	b.n	800f97a <udp_input+0x22e>
    pbuf_free(p);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7fa fca1 	bl	800a2b0 <pbuf_free>
  return;
 800f96e:	e004      	b.n	800f97a <udp_input+0x22e>
 800f970:	e003      	b.n	800f97a <udp_input+0x22e>
            goto chkerr;
 800f972:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7fa fc9b 	bl	800a2b0 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f97a:	372c      	adds	r7, #44	@ 0x2c
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd90      	pop	{r4, r7, pc}
 800f980:	080177fc 	.word	0x080177fc
 800f984:	0801789c 	.word	0x0801789c
 800f988:	0801784c 	.word	0x0801784c
 800f98c:	080178b4 	.word	0x080178b4
 800f990:	200054ec 	.word	0x200054ec
 800f994:	2000d910 	.word	0x2000d910
 800f998:	20005500 	.word	0x20005500
 800f99c:	200054fc 	.word	0x200054fc
 800f9a0:	080178d0 	.word	0x080178d0

0800f9a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d105      	bne.n	800f9c4 <udp_sendto_if+0x20>
 800f9b8:	4826      	ldr	r0, [pc, #152]	@ (800fa54 <udp_sendto_if+0xb0>)
 800f9ba:	f7f1 f907 	bl	8000bcc <printf>
 800f9be:	f06f 030f 	mvn.w	r3, #15
 800f9c2:	e043      	b.n	800fa4c <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d105      	bne.n	800f9d6 <udp_sendto_if+0x32>
 800f9ca:	4823      	ldr	r0, [pc, #140]	@ (800fa58 <udp_sendto_if+0xb4>)
 800f9cc:	f7f1 f8fe 	bl	8000bcc <printf>
 800f9d0:	f06f 030f 	mvn.w	r3, #15
 800f9d4:	e03a      	b.n	800fa4c <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <udp_sendto_if+0x44>
 800f9dc:	481f      	ldr	r0, [pc, #124]	@ (800fa5c <udp_sendto_if+0xb8>)
 800f9de:	f7f1 f8f5 	bl	8000bcc <printf>
 800f9e2:	f06f 030f 	mvn.w	r3, #15
 800f9e6:	e031      	b.n	800fa4c <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d105      	bne.n	800f9fa <udp_sendto_if+0x56>
 800f9ee:	481c      	ldr	r0, [pc, #112]	@ (800fa60 <udp_sendto_if+0xbc>)
 800f9f0:	f7f1 f8ec 	bl	8000bcc <printf>
 800f9f4:	f06f 030f 	mvn.w	r3, #15
 800f9f8:	e028      	b.n	800fa4c <udp_sendto_if+0xa8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <udp_sendto_if+0x70>
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d005      	beq.n	800fa14 <udp_sendto_if+0x70>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa10:	2be0      	cmp	r3, #224	@ 0xe0
 800fa12:	d103      	bne.n	800fa1c <udp_sendto_if+0x78>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	3304      	adds	r3, #4
 800fa18:	617b      	str	r3, [r7, #20]
 800fa1a:	e00b      	b.n	800fa34 <udp_sendto_if+0x90>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	3304      	adds	r3, #4
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d002      	beq.n	800fa30 <udp_sendto_if+0x8c>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fa2a:	f06f 0303 	mvn.w	r3, #3
 800fa2e:	e00d      	b.n	800fa4c <udp_sendto_if+0xa8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fa34:	887a      	ldrh	r2, [r7, #2]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	9301      	str	r3, [sp, #4]
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	68b9      	ldr	r1, [r7, #8]
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f000 f80d 	bl	800fa64 <udp_sendto_if_src>
 800fa4a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3718      	adds	r7, #24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	0801796c 	.word	0x0801796c
 800fa58:	08017988 	.word	0x08017988
 800fa5c:	080179a4 	.word	0x080179a4
 800fa60:	080179c4 	.word	0x080179c4

0800fa64 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08e      	sub	sp, #56	@ 0x38
 800fa68:	af04      	add	r7, sp, #16
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	607a      	str	r2, [r7, #4]
 800fa70:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d105      	bne.n	800fa84 <udp_sendto_if_src+0x20>
 800fa78:	4868      	ldr	r0, [pc, #416]	@ (800fc1c <udp_sendto_if_src+0x1b8>)
 800fa7a:	f7f1 f8a7 	bl	8000bcc <printf>
 800fa7e:	f06f 030f 	mvn.w	r3, #15
 800fa82:	e0c6      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d105      	bne.n	800fa96 <udp_sendto_if_src+0x32>
 800fa8a:	4865      	ldr	r0, [pc, #404]	@ (800fc20 <udp_sendto_if_src+0x1bc>)
 800fa8c:	f7f1 f89e 	bl	8000bcc <printf>
 800fa90:	f06f 030f 	mvn.w	r3, #15
 800fa94:	e0bd      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d105      	bne.n	800faa8 <udp_sendto_if_src+0x44>
 800fa9c:	4861      	ldr	r0, [pc, #388]	@ (800fc24 <udp_sendto_if_src+0x1c0>)
 800fa9e:	f7f1 f895 	bl	8000bcc <printf>
 800faa2:	f06f 030f 	mvn.w	r3, #15
 800faa6:	e0b4      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800faa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d105      	bne.n	800faba <udp_sendto_if_src+0x56>
 800faae:	485e      	ldr	r0, [pc, #376]	@ (800fc28 <udp_sendto_if_src+0x1c4>)
 800fab0:	f7f1 f88c 	bl	8000bcc <printf>
 800fab4:	f06f 030f 	mvn.w	r3, #15
 800fab8:	e0ab      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800faba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d105      	bne.n	800facc <udp_sendto_if_src+0x68>
 800fac0:	485a      	ldr	r0, [pc, #360]	@ (800fc2c <udp_sendto_if_src+0x1c8>)
 800fac2:	f7f1 f883 	bl	8000bcc <printf>
 800fac6:	f06f 030f 	mvn.w	r3, #15
 800faca:	e0a2      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	8a5b      	ldrh	r3, [r3, #18]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10f      	bne.n	800faf4 <udp_sendto_if_src+0x90>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fad4:	68f9      	ldr	r1, [r7, #12]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	8a5b      	ldrh	r3, [r3, #18]
 800fada:	461a      	mov	r2, r3
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f000 f8ad 	bl	800fc3c <udp_bind>
 800fae2:	4603      	mov	r3, r0
 800fae4:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 800fae6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <udp_sendto_if_src+0x90>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800faee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800faf2:	e08e      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	891b      	ldrh	r3, [r3, #8]
 800faf8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d902      	bls.n	800fb06 <udp_sendto_if_src+0xa2>
    return ERR_MEM;
 800fb00:	f04f 33ff 	mov.w	r3, #4294967295
 800fb04:	e085      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fb06:	2108      	movs	r1, #8
 800fb08:	68b8      	ldr	r0, [r7, #8]
 800fb0a:	f7fa fb3f 	bl	800a18c <pbuf_add_header>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d015      	beq.n	800fb40 <udp_sendto_if_src+0xdc>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fb14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fb18:	2108      	movs	r1, #8
 800fb1a:	2022      	movs	r0, #34	@ 0x22
 800fb1c:	f7fa f8e8 	bl	8009cf0 <pbuf_alloc>
 800fb20:	6238      	str	r0, [r7, #32]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fb22:	6a3b      	ldr	r3, [r7, #32]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d102      	bne.n	800fb2e <udp_sendto_if_src+0xca>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fb28:	f04f 33ff 	mov.w	r3, #4294967295
 800fb2c:	e071      	b.n	800fc12 <udp_sendto_if_src+0x1ae>
    }
    if (p->tot_len != 0) {
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	891b      	ldrh	r3, [r3, #8]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d006      	beq.n	800fb44 <udp_sendto_if_src+0xe0>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fb36:	68b9      	ldr	r1, [r7, #8]
 800fb38:	6a38      	ldr	r0, [r7, #32]
 800fb3a:	f7fa fccd 	bl	800a4d8 <pbuf_chain>
 800fb3e:	e001      	b.n	800fb44 <udp_sendto_if_src+0xe0>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	895b      	ldrh	r3, [r3, #10]
 800fb48:	2b07      	cmp	r3, #7
 800fb4a:	d806      	bhi.n	800fb5a <udp_sendto_if_src+0xf6>
 800fb4c:	4b38      	ldr	r3, [pc, #224]	@ (800fc30 <udp_sendto_if_src+0x1cc>)
 800fb4e:	f240 320d 	movw	r2, #781	@ 0x30d
 800fb52:	4938      	ldr	r1, [pc, #224]	@ (800fc34 <udp_sendto_if_src+0x1d0>)
 800fb54:	4838      	ldr	r0, [pc, #224]	@ (800fc38 <udp_sendto_if_src+0x1d4>)
 800fb56:	f7f1 f839 	bl	8000bcc <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	61bb      	str	r3, [r7, #24]
  udphdr->src = lwip_htons(pcb->local_port);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	8a5b      	ldrh	r3, [r3, #18]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f8 ff5f 	bl	8008a28 <lwip_htons>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fb72:	887b      	ldrh	r3, [r7, #2]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7f8 ff57 	bl	8008a28 <lwip_htons>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	2200      	movs	r2, #0
 800fb86:	719a      	strb	r2, [r3, #6]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fb8c:	6a3b      	ldr	r3, [r7, #32]
 800fb8e:	891b      	ldrh	r3, [r3, #8]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7f8 ff49 	bl	8008a28 <lwip_htons>
 800fb96:	4603      	mov	r3, r0
 800fb98:	461a      	mov	r2, r3
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	7c1b      	ldrb	r3, [r3, #16]
 800fba2:	f003 0301 	and.w	r3, r3, #1
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d113      	bne.n	800fbd2 <udp_sendto_if_src+0x16e>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800fbaa:	6a3b      	ldr	r3, [r7, #32]
 800fbac:	891a      	ldrh	r2, [r3, #8]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbb4:	2111      	movs	r1, #17
 800fbb6:	6a38      	ldr	r0, [r7, #32]
 800fbb8:	f7f9 f868 	bl	8008c8c <ip_chksum_pseudo>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800fbc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d102      	bne.n	800fbcc <udp_sendto_if_src+0x168>
          udpchksum = 0xffff;
 800fbc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbca:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        udphdr->chksum = udpchksum;
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800fbd0:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fbd2:	2311      	movs	r3, #17
 800fbd4:	75fb      	strb	r3, [r7, #23]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	7adb      	ldrb	r3, [r3, #11]
 800fbda:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	7a9b      	ldrb	r3, [r3, #10]
 800fbe0:	7db9      	ldrb	r1, [r7, #22]
 800fbe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbe4:	9202      	str	r2, [sp, #8]
 800fbe6:	7dfa      	ldrb	r2, [r7, #23]
 800fbe8:	9201      	str	r2, [sp, #4]
 800fbea:	9300      	str	r3, [sp, #0]
 800fbec:	460b      	mov	r3, r1
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fbf2:	6a38      	ldr	r0, [r7, #32]
 800fbf4:	f003 fb5e 	bl	80132b4 <ip4_output_if_src>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	77fb      	strb	r3, [r7, #31]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fbfc:	6a3a      	ldr	r2, [r7, #32]
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d004      	beq.n	800fc0e <udp_sendto_if_src+0x1aa>
    /* free the header pbuf */
    pbuf_free(q);
 800fc04:	6a38      	ldr	r0, [r7, #32]
 800fc06:	f7fa fb53 	bl	800a2b0 <pbuf_free>
    q = NULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	623b      	str	r3, [r7, #32]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fc0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3728      	adds	r7, #40	@ 0x28
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	080179e4 	.word	0x080179e4
 800fc20:	08017a04 	.word	0x08017a04
 800fc24:	08017a24 	.word	0x08017a24
 800fc28:	08017a48 	.word	0x08017a48
 800fc2c:	08017a6c 	.word	0x08017a6c
 800fc30:	080177fc 	.word	0x080177fc
 800fc34:	08017a90 	.word	0x08017a90
 800fc38:	0801784c 	.word	0x0801784c

0800fc3c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	4613      	mov	r3, r2
 800fc48:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fc50:	4b37      	ldr	r3, [pc, #220]	@ (800fd30 <udp_bind+0xf4>)
 800fc52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d105      	bne.n	800fc66 <udp_bind+0x2a>
 800fc5a:	4836      	ldr	r0, [pc, #216]	@ (800fd34 <udp_bind+0xf8>)
 800fc5c:	f7f0 ffb6 	bl	8000bcc <printf>
 800fc60:	f06f 030f 	mvn.w	r3, #15
 800fc64:	e060      	b.n	800fd28 <udp_bind+0xec>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fc66:	2300      	movs	r3, #0
 800fc68:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fc6a:	4b33      	ldr	r3, [pc, #204]	@ (800fd38 <udp_bind+0xfc>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	e009      	b.n	800fc86 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d102      	bne.n	800fc80 <udp_bind+0x44>
      rebind = 1;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	74fb      	strb	r3, [r7, #19]
      break;
 800fc7e:	e005      	b.n	800fc8c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	617b      	str	r3, [r7, #20]
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1f2      	bne.n	800fc72 <udp_bind+0x36>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fc8c:	88fb      	ldrh	r3, [r7, #6]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d109      	bne.n	800fca6 <udp_bind+0x6a>
    port = udp_new_port();
 800fc92:	f7ff fcbf 	bl	800f614 <udp_new_port>
 800fc96:	4603      	mov	r3, r0
 800fc98:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fc9a:	88fb      	ldrh	r3, [r7, #6]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d12c      	bne.n	800fcfa <udp_bind+0xbe>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fca0:	f06f 0307 	mvn.w	r3, #7
 800fca4:	e040      	b.n	800fd28 <udp_bind+0xec>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fca6:	4b24      	ldr	r3, [pc, #144]	@ (800fd38 <udp_bind+0xfc>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	617b      	str	r3, [r7, #20]
 800fcac:	e022      	b.n	800fcf4 <udp_bind+0xb8>
      if (pcb != ipcb) {
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d01b      	beq.n	800fcee <udp_bind+0xb2>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	8a5b      	ldrh	r3, [r3, #18]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d116      	bne.n	800fcee <udp_bind+0xb2>
              (((IP_GET_TYPE(&ipcb->local_ip) == IP_GET_TYPE(ipaddr)) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) ||
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d00d      	beq.n	800fce8 <udp_bind+0xac>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) ||
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d00a      	beq.n	800fce8 <udp_bind+0xac>
              ip_addr_isany(ipaddr) ||
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d006      	beq.n	800fce8 <udp_bind+0xac>
              ip_addr_isany(&ipcb->local_ip))) ||
 800fcda:	697b      	ldr	r3, [r7, #20]
              (IP_GET_TYPE(&ipcb->local_ip) == IPADDR_TYPE_ANY) ||
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d003      	beq.n	800fce8 <udp_bind+0xac>
              ip_addr_isany(&ipcb->local_ip))) ||
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d102      	bne.n	800fcee <udp_bind+0xb2>
              (IP_GET_TYPE(ipaddr) == IPADDR_TYPE_ANY))) {
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fce8:	f06f 0307 	mvn.w	r3, #7
 800fcec:	e01c      	b.n	800fd28 <udp_bind+0xec>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	68db      	ldr	r3, [r3, #12]
 800fcf2:	617b      	str	r3, [r7, #20]
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d1d9      	bne.n	800fcae <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <udp_bind+0xca>
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	e000      	b.n	800fd08 <udp_bind+0xcc>
 800fd06:	2300      	movs	r3, #0
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	88fa      	ldrh	r2, [r7, #6]
 800fd10:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800fd12:	7cfb      	ldrb	r3, [r7, #19]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d106      	bne.n	800fd26 <udp_bind+0xea>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800fd18:	4b07      	ldr	r3, [pc, #28]	@ (800fd38 <udp_bind+0xfc>)
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800fd20:	4a05      	ldr	r2, [pc, #20]	@ (800fd38 <udp_bind+0xfc>)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	080186f4 	.word	0x080186f4
 800fd34:	08017ac0 	.word	0x08017ac0
 800fd38:	2000d910 	.word	0x2000d910

0800fd3c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b086      	sub	sp, #24
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	4613      	mov	r3, r2
 800fd48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d105      	bne.n	800fd5c <udp_connect+0x20>
 800fd50:	4828      	ldr	r0, [pc, #160]	@ (800fdf4 <udp_connect+0xb8>)
 800fd52:	f7f0 ff3b 	bl	8000bcc <printf>
 800fd56:	f06f 030f 	mvn.w	r3, #15
 800fd5a:	e047      	b.n	800fdec <udp_connect+0xb0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d105      	bne.n	800fd6e <udp_connect+0x32>
 800fd62:	4825      	ldr	r0, [pc, #148]	@ (800fdf8 <udp_connect+0xbc>)
 800fd64:	f7f0 ff32 	bl	8000bcc <printf>
 800fd68:	f06f 030f 	mvn.w	r3, #15
 800fd6c:	e03e      	b.n	800fdec <udp_connect+0xb0>

  if (pcb->local_port == 0) {
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	8a5b      	ldrh	r3, [r3, #18]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d10f      	bne.n	800fd96 <udp_connect+0x5a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fd76:	68f9      	ldr	r1, [r7, #12]
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	8a5b      	ldrh	r3, [r3, #18]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f7ff ff5c 	bl	800fc3c <udp_bind>
 800fd84:	4603      	mov	r3, r0
 800fd86:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800fd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <udp_connect+0x5a>
      return err;
 800fd90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd94:	e02a      	b.n	800fdec <udp_connect+0xb0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <udp_connect+0x66>
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	e000      	b.n	800fda4 <udp_connect+0x68>
 800fda2:	2300      	movs	r3, #0
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	88fa      	ldrh	r2, [r7, #6]
 800fdac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7c1b      	ldrb	r3, [r3, #16]
 800fdb2:	f043 0304 	orr.w	r3, r3, #4
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fdbc:	4b0f      	ldr	r3, [pc, #60]	@ (800fdfc <udp_connect+0xc0>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	613b      	str	r3, [r7, #16]
 800fdc2:	e008      	b.n	800fdd6 <udp_connect+0x9a>
    if (pcb == ipcb) {
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d101      	bne.n	800fdd0 <udp_connect+0x94>
      /* already on the list, just return */
      return ERR_OK;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	e00d      	b.n	800fdec <udp_connect+0xb0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	613b      	str	r3, [r7, #16]
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1f3      	bne.n	800fdc4 <udp_connect+0x88>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800fddc:	4b07      	ldr	r3, [pc, #28]	@ (800fdfc <udp_connect+0xc0>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800fde4:	4a05      	ldr	r2, [pc, #20]	@ (800fdfc <udp_connect+0xc0>)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3718      	adds	r7, #24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	08017ad8 	.word	0x08017ad8
 800fdf8:	08017af4 	.word	0x08017af4
 800fdfc:	2000d910 	.word	0x2000d910

0800fe00 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d103      	bne.n	800fe1a <udp_recv+0x1a>
 800fe12:	4806      	ldr	r0, [pc, #24]	@ (800fe2c <udp_recv+0x2c>)
 800fe14:	f7f0 feda 	bl	8000bcc <printf>
 800fe18:	e005      	b.n	800fe26 <udp_recv+0x26>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	61da      	str	r2, [r3, #28]
}
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	08017b2c 	.word	0x08017b2c

0800fe30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d103      	bne.n	800fe46 <udp_remove+0x16>
 800fe3e:	4817      	ldr	r0, [pc, #92]	@ (800fe9c <udp_remove+0x6c>)
 800fe40:	f7f0 fec4 	bl	8000bcc <printf>
 800fe44:	e026      	b.n	800fe94 <udp_remove+0x64>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800fe46:	4b16      	ldr	r3, [pc, #88]	@ (800fea0 <udp_remove+0x70>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d105      	bne.n	800fe5c <udp_remove+0x2c>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800fe50:	4b13      	ldr	r3, [pc, #76]	@ (800fea0 <udp_remove+0x70>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	4a12      	ldr	r2, [pc, #72]	@ (800fea0 <udp_remove+0x70>)
 800fe58:	6013      	str	r3, [r2, #0]
 800fe5a:	e017      	b.n	800fe8c <udp_remove+0x5c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fe5c:	4b10      	ldr	r3, [pc, #64]	@ (800fea0 <udp_remove+0x70>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	e010      	b.n	800fe86 <udp_remove+0x56>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d009      	beq.n	800fe80 <udp_remove+0x50>
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d104      	bne.n	800fe80 <udp_remove+0x50>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	60da      	str	r2, [r3, #12]
        break;
 800fe7e:	e005      	b.n	800fe8c <udp_remove+0x5c>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	60fb      	str	r3, [r7, #12]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1eb      	bne.n	800fe64 <udp_remove+0x34>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f7f9 fc16 	bl	80096c0 <memp_free>
}
 800fe94:	3710      	adds	r7, #16
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	08017b44 	.word	0x08017b44
 800fea0:	2000d910 	.word	0x2000d910

0800fea4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800feaa:	2000      	movs	r0, #0
 800feac:	f7f9 fbc4 	bl	8009638 <memp_malloc>
 800feb0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d007      	beq.n	800fec8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800feb8:	2220      	movs	r2, #32
 800feba:	2100      	movs	r1, #0
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f004 fcac 	bl	801481a <memset>
    pcb->ttl = UDP_TTL;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	22ff      	movs	r2, #255	@ 0xff
 800fec6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fec8:	687b      	ldr	r3, [r7, #4]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
	...

0800fed4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d01e      	beq.n	800ff22 <udp_netif_ip_addr_changed+0x4e>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d01a      	beq.n	800ff22 <udp_netif_ip_addr_changed+0x4e>
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d017      	beq.n	800ff22 <udp_netif_ip_addr_changed+0x4e>
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d013      	beq.n	800ff22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fefa:	4b0d      	ldr	r3, [pc, #52]	@ (800ff30 <udp_netif_ip_addr_changed+0x5c>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e00c      	b.n	800ff1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d103      	bne.n	800ff16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	60fb      	str	r3, [r7, #12]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1ef      	bne.n	800ff02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ff22:	bf00      	nop
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	2000d910 	.word	0x2000d910

0800ff34 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800ff38:	4b20      	ldr	r3, [pc, #128]	@ (800ffbc <dhcp_inc_pcb_refcount+0x88>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d133      	bne.n	800ffa8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ff40:	4b1f      	ldr	r3, [pc, #124]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d005      	beq.n	800ff54 <dhcp_inc_pcb_refcount+0x20>
 800ff48:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc4 <dhcp_inc_pcb_refcount+0x90>)
 800ff4a:	22ea      	movs	r2, #234	@ 0xea
 800ff4c:	491e      	ldr	r1, [pc, #120]	@ (800ffc8 <dhcp_inc_pcb_refcount+0x94>)
 800ff4e:	481f      	ldr	r0, [pc, #124]	@ (800ffcc <dhcp_inc_pcb_refcount+0x98>)
 800ff50:	f7f0 fe3c 	bl	8000bcc <printf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800ff54:	f7ff ffa6 	bl	800fea4 <udp_new>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	4a19      	ldr	r2, [pc, #100]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff5c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800ff5e:	4b18      	ldr	r3, [pc, #96]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d102      	bne.n	800ff6c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800ff66:	f04f 33ff 	mov.w	r3, #4294967295
 800ff6a:	e024      	b.n	800ffb6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800ff6c:	4b14      	ldr	r3, [pc, #80]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	7a5a      	ldrb	r2, [r3, #9]
 800ff72:	4b13      	ldr	r3, [pc, #76]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f042 0220 	orr.w	r2, r2, #32
 800ff7a:	b2d2      	uxtb	r2, r2
 800ff7c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800ff7e:	4b10      	ldr	r3, [pc, #64]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2244      	movs	r2, #68	@ 0x44
 800ff84:	4912      	ldr	r1, [pc, #72]	@ (800ffd0 <dhcp_inc_pcb_refcount+0x9c>)
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fe58 	bl	800fc3c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800ff8c:	4b0c      	ldr	r3, [pc, #48]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2243      	movs	r2, #67	@ 0x43
 800ff92:	490f      	ldr	r1, [pc, #60]	@ (800ffd0 <dhcp_inc_pcb_refcount+0x9c>)
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff fed1 	bl	800fd3c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ff9a:	4b09      	ldr	r3, [pc, #36]	@ (800ffc0 <dhcp_inc_pcb_refcount+0x8c>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	490c      	ldr	r1, [pc, #48]	@ (800ffd4 <dhcp_inc_pcb_refcount+0xa0>)
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7ff ff2c 	bl	800fe00 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ffa8:	4b04      	ldr	r3, [pc, #16]	@ (800ffbc <dhcp_inc_pcb_refcount+0x88>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	3301      	adds	r3, #1
 800ffae:	b2da      	uxtb	r2, r3
 800ffb0:	4b02      	ldr	r3, [pc, #8]	@ (800ffbc <dhcp_inc_pcb_refcount+0x88>)
 800ffb2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	20004af4 	.word	0x20004af4
 800ffc0:	20004af0 	.word	0x20004af0
 800ffc4:	08017b5c 	.word	0x08017b5c
 800ffc8:	08017b90 	.word	0x08017b90
 800ffcc:	08017bb8 	.word	0x08017bb8
 800ffd0:	080186f4 	.word	0x080186f4
 800ffd4:	08011851 	.word	0x08011851

0800ffd8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ffdc:	4b0f      	ldr	r3, [pc, #60]	@ (801001c <dhcp_dec_pcb_refcount+0x44>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d106      	bne.n	800fff2 <dhcp_dec_pcb_refcount+0x1a>
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	@ (8010020 <dhcp_dec_pcb_refcount+0x48>)
 800ffe6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ffea:	490e      	ldr	r1, [pc, #56]	@ (8010024 <dhcp_dec_pcb_refcount+0x4c>)
 800ffec:	480e      	ldr	r0, [pc, #56]	@ (8010028 <dhcp_dec_pcb_refcount+0x50>)
 800ffee:	f7f0 fded 	bl	8000bcc <printf>
  dhcp_pcb_refcount--;
 800fff2:	4b0a      	ldr	r3, [pc, #40]	@ (801001c <dhcp_dec_pcb_refcount+0x44>)
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	b2da      	uxtb	r2, r3
 800fffa:	4b08      	ldr	r3, [pc, #32]	@ (801001c <dhcp_dec_pcb_refcount+0x44>)
 800fffc:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fffe:	4b07      	ldr	r3, [pc, #28]	@ (801001c <dhcp_dec_pcb_refcount+0x44>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d107      	bne.n	8010016 <dhcp_dec_pcb_refcount+0x3e>
    udp_remove(dhcp_pcb);
 8010006:	4b09      	ldr	r3, [pc, #36]	@ (801002c <dhcp_dec_pcb_refcount+0x54>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4618      	mov	r0, r3
 801000c:	f7ff ff10 	bl	800fe30 <udp_remove>
    dhcp_pcb = NULL;
 8010010:	4b06      	ldr	r3, [pc, #24]	@ (801002c <dhcp_dec_pcb_refcount+0x54>)
 8010012:	2200      	movs	r2, #0
 8010014:	601a      	str	r2, [r3, #0]
  }
}
 8010016:	bf00      	nop
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	20004af4 	.word	0x20004af4
 8010020:	08017b5c 	.word	0x08017b5c
 8010024:	08017be0 	.word	0x08017be0
 8010028:	08017bb8 	.word	0x08017bb8
 801002c:	20004af0 	.word	0x20004af0

08010030 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801003c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801003e:	210c      	movs	r1, #12
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f001 f841 	bl	80110c8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010046:	4b06      	ldr	r3, [pc, #24]	@ (8010060 <dhcp_handle_nak+0x30>)
 8010048:	4a05      	ldr	r2, [pc, #20]	@ (8010060 <dhcp_handle_nak+0x30>)
 801004a:	4905      	ldr	r1, [pc, #20]	@ (8010060 <dhcp_handle_nak+0x30>)
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7f9 fcc9 	bl	80099e4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fc30 	bl	80108b8 <dhcp_discover>
}
 8010058:	bf00      	nop
 801005a:	3710      	adds	r7, #16
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	080186f4 	.word	0x080186f4

08010064 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010070:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010072:	2108      	movs	r1, #8
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f001 f827 	bl	80110c8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	331c      	adds	r3, #28
 801007e:	2200      	movs	r2, #0
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f002 fb18 	bl	80126b8 <etharp_query>
 8010088:	4603      	mov	r3, r0
 801008a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	799b      	ldrb	r3, [r3, #6]
 8010090:	2bff      	cmp	r3, #255	@ 0xff
 8010092:	d005      	beq.n	80100a0 <dhcp_check+0x3c>
    dhcp->tries++;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	799b      	ldrb	r3, [r3, #6]
 8010098:	3301      	adds	r3, #1
 801009a:	b2da      	uxtb	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80100a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80100a4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80100a6:	893b      	ldrh	r3, [r7, #8]
 80100a8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80100ac:	4a06      	ldr	r2, [pc, #24]	@ (80100c8 <dhcp_check+0x64>)
 80100ae:	fb82 1203 	smull	r1, r2, r2, r3
 80100b2:	1152      	asrs	r2, r2, #5
 80100b4:	17db      	asrs	r3, r3, #31
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80100be:	bf00      	nop
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	10624dd3 	.word	0x10624dd3

080100cc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80100dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010110 <dhcp_handle_offer+0x44>)
 80100de:	789b      	ldrb	r3, [r3, #2]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d011      	beq.n	8010108 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2200      	movs	r2, #0
 80100e8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80100ea:	4b0a      	ldr	r3, [pc, #40]	@ (8010114 <dhcp_handle_offer+0x48>)
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7f8 fcaf 	bl	8008a52 <lwip_htonl>
 80100f4:	4602      	mov	r2, r0
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	691a      	ldr	r2, [r3, #16]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f808 	bl	8010118 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010108:	bf00      	nop
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	2000d914 	.word	0x2000d914
 8010114:	2000d91c 	.word	0x2000d91c

08010118 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010118:	b5b0      	push	{r4, r5, r7, lr}
 801011a:	b08a      	sub	sp, #40	@ 0x28
 801011c:	af02      	add	r7, sp, #8
 801011e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d105      	bne.n	8010132 <dhcp_select+0x1a>
 8010126:	4871      	ldr	r0, [pc, #452]	@ (80102ec <dhcp_select+0x1d4>)
 8010128:	f7f0 fd50 	bl	8000bcc <printf>
 801012c:	f06f 030f 	mvn.w	r3, #15
 8010130:	e0d8      	b.n	80102e4 <dhcp_select+0x1cc>
  dhcp = netif_dhcp_data(netif);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010136:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d105      	bne.n	801014a <dhcp_select+0x32>
 801013e:	486c      	ldr	r0, [pc, #432]	@ (80102f0 <dhcp_select+0x1d8>)
 8010140:	f7f0 fd44 	bl	8000bcc <printf>
 8010144:	f06f 0305 	mvn.w	r3, #5
 8010148:	e0cc      	b.n	80102e4 <dhcp_select+0x1cc>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801014a:	2101      	movs	r1, #1
 801014c:	69b8      	ldr	r0, [r7, #24]
 801014e:	f000 ffbb 	bl	80110c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010152:	f107 030c 	add.w	r3, r7, #12
 8010156:	2203      	movs	r2, #3
 8010158:	69b9      	ldr	r1, [r7, #24]
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f001 fc42 	bl	80119e4 <dhcp_create_msg>
 8010160:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 808e 	beq.w	8010286 <dhcp_select+0x16e>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010170:	89b8      	ldrh	r0, [r7, #12]
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010178:	2302      	movs	r3, #2
 801017a:	2239      	movs	r2, #57	@ 0x39
 801017c:	f000 ffbe 	bl	80110fc <dhcp_option>
 8010180:	4603      	mov	r3, r0
 8010182:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010184:	89b8      	ldrh	r0, [r7, #12]
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010190:	461a      	mov	r2, r3
 8010192:	f001 f80d 	bl	80111b0 <dhcp_option_short>
 8010196:	4603      	mov	r3, r0
 8010198:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801019a:	89b8      	ldrh	r0, [r7, #12]
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80101a2:	2304      	movs	r3, #4
 80101a4:	2232      	movs	r2, #50	@ 0x32
 80101a6:	f000 ffa9 	bl	80110fc <dhcp_option>
 80101aa:	4603      	mov	r3, r0
 80101ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80101ae:	89bc      	ldrh	r4, [r7, #12]
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	69db      	ldr	r3, [r3, #28]
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7f8 fc49 	bl	8008a52 <lwip_htonl>
 80101c0:	4603      	mov	r3, r0
 80101c2:	461a      	mov	r2, r3
 80101c4:	4629      	mov	r1, r5
 80101c6:	4620      	mov	r0, r4
 80101c8:	f001 f824 	bl	8011214 <dhcp_option_long>
 80101cc:	4603      	mov	r3, r0
 80101ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80101d0:	89b8      	ldrh	r0, [r7, #12]
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80101d8:	2304      	movs	r3, #4
 80101da:	2236      	movs	r2, #54	@ 0x36
 80101dc:	f000 ff8e 	bl	80110fc <dhcp_option>
 80101e0:	4603      	mov	r3, r0
 80101e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80101e4:	89bc      	ldrh	r4, [r7, #12]
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	699b      	ldr	r3, [r3, #24]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7f8 fc2e 	bl	8008a52 <lwip_htonl>
 80101f6:	4603      	mov	r3, r0
 80101f8:	461a      	mov	r2, r3
 80101fa:	4629      	mov	r1, r5
 80101fc:	4620      	mov	r0, r4
 80101fe:	f001 f809 	bl	8011214 <dhcp_option_long>
 8010202:	4603      	mov	r3, r0
 8010204:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010206:	89b8      	ldrh	r0, [r7, #12]
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801020e:	2303      	movs	r3, #3
 8010210:	2237      	movs	r2, #55	@ 0x37
 8010212:	f000 ff73 	bl	80110fc <dhcp_option>
 8010216:	4603      	mov	r3, r0
 8010218:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801021a:	2300      	movs	r3, #0
 801021c:	77fb      	strb	r3, [r7, #31]
 801021e:	e00e      	b.n	801023e <dhcp_select+0x126>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010220:	89b8      	ldrh	r0, [r7, #12]
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010228:	7ffb      	ldrb	r3, [r7, #31]
 801022a:	4a32      	ldr	r2, [pc, #200]	@ (80102f4 <dhcp_select+0x1dc>)
 801022c:	5cd3      	ldrb	r3, [r2, r3]
 801022e:	461a      	mov	r2, r3
 8010230:	f000 ff98 	bl	8011164 <dhcp_option_byte>
 8010234:	4603      	mov	r3, r0
 8010236:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010238:	7ffb      	ldrb	r3, [r7, #31]
 801023a:	3301      	adds	r3, #1
 801023c:	77fb      	strb	r3, [r7, #31]
 801023e:	7ffb      	ldrb	r3, [r7, #31]
 8010240:	2b02      	cmp	r3, #2
 8010242:	d9ed      	bls.n	8010220 <dhcp_select+0x108>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8010244:	89b8      	ldrh	r0, [r7, #12]
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	33f0      	adds	r3, #240	@ 0xf0
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4619      	mov	r1, r3
 801024e:	f001 f825 	bl	801129c <dhcp_option_hostname>
 8010252:	4603      	mov	r3, r0
 8010254:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010256:	89b8      	ldrh	r0, [r7, #12]
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	33f0      	adds	r3, #240	@ 0xf0
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	4619      	mov	r1, r3
 8010260:	f001 fc8e 	bl	8011b80 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010264:	4b24      	ldr	r3, [pc, #144]	@ (80102f8 <dhcp_select+0x1e0>)
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	4b24      	ldr	r3, [pc, #144]	@ (80102fc <dhcp_select+0x1e4>)
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	2343      	movs	r3, #67	@ 0x43
 8010272:	4a23      	ldr	r2, [pc, #140]	@ (8010300 <dhcp_select+0x1e8>)
 8010274:	6979      	ldr	r1, [r7, #20]
 8010276:	f7ff fbf5 	bl	800fa64 <udp_sendto_if_src>
 801027a:	4603      	mov	r3, r0
 801027c:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801027e:	6978      	ldr	r0, [r7, #20]
 8010280:	f7fa f816 	bl	800a2b0 <pbuf_free>
 8010284:	e001      	b.n	801028a <dhcp_select+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010286:	23ff      	movs	r3, #255	@ 0xff
 8010288:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	799b      	ldrb	r3, [r3, #6]
 801028e:	2bff      	cmp	r3, #255	@ 0xff
 8010290:	d005      	beq.n	801029e <dhcp_select+0x186>
    dhcp->tries++;
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	799b      	ldrb	r3, [r3, #6]
 8010296:	3301      	adds	r3, #1
 8010298:	b2da      	uxtb	r2, r3
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	799b      	ldrb	r3, [r3, #6]
 80102a2:	2b05      	cmp	r3, #5
 80102a4:	d80d      	bhi.n	80102c2 <dhcp_select+0x1aa>
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	799b      	ldrb	r3, [r3, #6]
 80102aa:	461a      	mov	r2, r3
 80102ac:	2301      	movs	r3, #1
 80102ae:	4093      	lsls	r3, r2
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	461a      	mov	r2, r3
 80102b4:	0152      	lsls	r2, r2, #5
 80102b6:	1ad2      	subs	r2, r2, r3
 80102b8:	0092      	lsls	r2, r2, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	b29b      	uxth	r3, r3
 80102c0:	e001      	b.n	80102c6 <dhcp_select+0x1ae>
 80102c2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80102c6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102c8:	89fb      	ldrh	r3, [r7, #14]
 80102ca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80102ce:	4a0d      	ldr	r2, [pc, #52]	@ (8010304 <dhcp_select+0x1ec>)
 80102d0:	fb82 1203 	smull	r1, r2, r2, r3
 80102d4:	1152      	asrs	r2, r2, #5
 80102d6:	17db      	asrs	r3, r3, #31
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b29a      	uxth	r2, r3
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80102e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3720      	adds	r7, #32
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bdb0      	pop	{r4, r5, r7, pc}
 80102ec:	08017c04 	.word	0x08017c04
 80102f0:	08017c20 	.word	0x08017c20
 80102f4:	2000001c 	.word	0x2000001c
 80102f8:	20004af0 	.word	0x20004af0
 80102fc:	080186f4 	.word	0x080186f4
 8010300:	080186f8 	.word	0x080186f8
 8010304:	10624dd3 	.word	0x10624dd3

08010308 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801030e:	4b27      	ldr	r3, [pc, #156]	@ (80103ac <dhcp_coarse_tmr+0xa4>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	607b      	str	r3, [r7, #4]
 8010314:	e042      	b.n	801039c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d039      	beq.n	8010396 <dhcp_coarse_tmr+0x8e>
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	795b      	ldrb	r3, [r3, #5]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d035      	beq.n	8010396 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	8a9b      	ldrh	r3, [r3, #20]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d012      	beq.n	8010358 <dhcp_coarse_tmr+0x50>
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	8a5b      	ldrh	r3, [r3, #18]
 8010336:	3301      	adds	r3, #1
 8010338:	b29a      	uxth	r2, r3
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	825a      	strh	r2, [r3, #18]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	8a5a      	ldrh	r2, [r3, #18]
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	8a9b      	ldrh	r3, [r3, #20]
 8010346:	429a      	cmp	r2, r3
 8010348:	d106      	bne.n	8010358 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 fe1e 	bl	8010f8c <dhcp_release_and_stop>
        dhcp_start(netif);
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 f969 	bl	8010628 <dhcp_start>
 8010356:	e01e      	b.n	8010396 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	8a1b      	ldrh	r3, [r3, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00b      	beq.n	8010378 <dhcp_coarse_tmr+0x70>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	8a1b      	ldrh	r3, [r3, #16]
 8010364:	1e5a      	subs	r2, r3, #1
 8010366:	b291      	uxth	r1, r2
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	8211      	strh	r1, [r2, #16]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d103      	bne.n	8010378 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f000 f8c6 	bl	8010502 <dhcp_t2_timeout>
 8010376:	e00e      	b.n	8010396 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	89db      	ldrh	r3, [r3, #14]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d00a      	beq.n	8010396 <dhcp_coarse_tmr+0x8e>
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	89db      	ldrh	r3, [r3, #14]
 8010384:	1e5a      	subs	r2, r3, #1
 8010386:	b291      	uxth	r1, r2
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	81d1      	strh	r1, [r2, #14]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d102      	bne.n	8010396 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f888 	bl	80104a6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	607b      	str	r3, [r7, #4]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1b9      	bne.n	8010316 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80103a2:	bf00      	nop
 80103a4:	bf00      	nop
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	2000d8ec 	.word	0x2000d8ec

080103b0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b082      	sub	sp, #8
 80103b4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80103b6:	4b16      	ldr	r3, [pc, #88]	@ (8010410 <dhcp_fine_tmr+0x60>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	607b      	str	r3, [r7, #4]
 80103bc:	e020      	b.n	8010400 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d017      	beq.n	80103fa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	891b      	ldrh	r3, [r3, #8]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d906      	bls.n	80103e0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	891b      	ldrh	r3, [r3, #8]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	b29a      	uxth	r2, r3
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	811a      	strh	r2, [r3, #8]
 80103de:	e00c      	b.n	80103fa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	891b      	ldrh	r3, [r3, #8]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d108      	bne.n	80103fa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	891b      	ldrh	r3, [r3, #8]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f80d 	bl	8010414 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	607b      	str	r3, [r7, #4]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d1db      	bne.n	80103be <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010406:	bf00      	nop
 8010408:	bf00      	nop
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	2000d8ec 	.word	0x2000d8ec

08010414 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010420:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	795b      	ldrb	r3, [r3, #5]
 8010426:	2b0c      	cmp	r3, #12
 8010428:	d003      	beq.n	8010432 <dhcp_timeout+0x1e>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	795b      	ldrb	r3, [r3, #5]
 801042e:	2b06      	cmp	r3, #6
 8010430:	d103      	bne.n	801043a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 fa40 	bl	80108b8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010438:	e031      	b.n	801049e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	795b      	ldrb	r3, [r3, #5]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d10e      	bne.n	8010460 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	799b      	ldrb	r3, [r3, #6]
 8010446:	2b05      	cmp	r3, #5
 8010448:	d803      	bhi.n	8010452 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7ff fe64 	bl	8010118 <dhcp_select>
}
 8010450:	e025      	b.n	801049e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fd9a 	bl	8010f8c <dhcp_release_and_stop>
      dhcp_start(netif);
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f000 f8e5 	bl	8010628 <dhcp_start>
}
 801045e:	e01e      	b.n	801049e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	795b      	ldrb	r3, [r3, #5]
 8010464:	2b08      	cmp	r3, #8
 8010466:	d10b      	bne.n	8010480 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	799b      	ldrb	r3, [r3, #6]
 801046c:	2b01      	cmp	r3, #1
 801046e:	d803      	bhi.n	8010478 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff fdf7 	bl	8010064 <dhcp_check>
}
 8010476:	e012      	b.n	801049e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fabf 	bl	80109fc <dhcp_bind>
}
 801047e:	e00e      	b.n	801049e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	795b      	ldrb	r3, [r3, #5]
 8010484:	2b03      	cmp	r3, #3
 8010486:	d10a      	bne.n	801049e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	799b      	ldrb	r3, [r3, #6]
 801048c:	2b01      	cmp	r3, #1
 801048e:	d803      	bhi.n	8010498 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fcbd 	bl	8010e10 <dhcp_reboot>
}
 8010496:	e002      	b.n	801049e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 fa0d 	bl	80108b8 <dhcp_discover>
}
 801049e:	bf00      	nop
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	795b      	ldrb	r3, [r3, #5]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d007      	beq.n	80104cc <dhcp_t1_timeout+0x26>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	795b      	ldrb	r3, [r3, #5]
 80104c0:	2b0a      	cmp	r3, #10
 80104c2:	d003      	beq.n	80104cc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80104c8:	2b05      	cmp	r3, #5
 80104ca:	d116      	bne.n	80104fa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 fb57 	bl	8010b80 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	899b      	ldrh	r3, [r3, #12]
 80104d6:	461a      	mov	r2, r3
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	8a5b      	ldrh	r3, [r3, #18]
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	2b01      	cmp	r3, #1
 80104e0:	dd0b      	ble.n	80104fa <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	899b      	ldrh	r3, [r3, #12]
 80104e6:	461a      	mov	r2, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	8a5b      	ldrh	r3, [r3, #18]
 80104ec:	1ad3      	subs	r3, r2, r3
 80104ee:	0fda      	lsrs	r2, r3, #31
 80104f0:	4413      	add	r3, r2
 80104f2:	105b      	asrs	r3, r3, #1
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80104fa:	bf00      	nop
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b084      	sub	sp, #16
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	795b      	ldrb	r3, [r3, #5]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d00b      	beq.n	8010530 <dhcp_t2_timeout+0x2e>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	795b      	ldrb	r3, [r3, #5]
 801051c:	2b0a      	cmp	r3, #10
 801051e:	d007      	beq.n	8010530 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010524:	2b05      	cmp	r3, #5
 8010526:	d003      	beq.n	8010530 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	795b      	ldrb	r3, [r3, #5]
 801052c:	2b04      	cmp	r3, #4
 801052e:	d116      	bne.n	801055e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fbc9 	bl	8010cc8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	8a9b      	ldrh	r3, [r3, #20]
 801053a:	461a      	mov	r2, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	8a5b      	ldrh	r3, [r3, #18]
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	2b01      	cmp	r3, #1
 8010544:	dd0b      	ble.n	801055e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	8a9b      	ldrh	r3, [r3, #20]
 801054a:	461a      	mov	r2, r3
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	8a5b      	ldrh	r3, [r3, #18]
 8010550:	1ad3      	subs	r3, r2, r3
 8010552:	0fda      	lsrs	r2, r3, #31
 8010554:	4413      	add	r3, r2
 8010556:	105b      	asrs	r3, r3, #1
 8010558:	b29a      	uxth	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801055e:	bf00      	nop
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
	...

08010568 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010576:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2200      	movs	r2, #0
 801057c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2200      	movs	r2, #0
 8010582:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010584:	4b26      	ldr	r3, [pc, #152]	@ (8010620 <dhcp_handle_ack+0xb8>)
 8010586:	78db      	ldrb	r3, [r3, #3]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801058c:	4b25      	ldr	r3, [pc, #148]	@ (8010624 <dhcp_handle_ack+0xbc>)
 801058e:	68da      	ldr	r2, [r3, #12]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010594:	4b22      	ldr	r3, [pc, #136]	@ (8010620 <dhcp_handle_ack+0xb8>)
 8010596:	791b      	ldrb	r3, [r3, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d004      	beq.n	80105a6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801059c:	4b21      	ldr	r3, [pc, #132]	@ (8010624 <dhcp_handle_ack+0xbc>)
 801059e:	691a      	ldr	r2, [r3, #16]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80105a4:	e004      	b.n	80105b0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105aa:	085a      	lsrs	r2, r3, #1
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80105b0:	4b1b      	ldr	r3, [pc, #108]	@ (8010620 <dhcp_handle_ack+0xb8>)
 80105b2:	795b      	ldrb	r3, [r3, #5]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d004      	beq.n	80105c2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80105b8:	4b1a      	ldr	r3, [pc, #104]	@ (8010624 <dhcp_handle_ack+0xbc>)
 80105ba:	695a      	ldr	r2, [r3, #20]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	631a      	str	r2, [r3, #48]	@ 0x30
 80105c0:	e007      	b.n	80105d2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80105c6:	4613      	mov	r3, r2
 80105c8:	00db      	lsls	r3, r3, #3
 80105ca:	1a9b      	subs	r3, r3, r2
 80105cc:	08da      	lsrs	r2, r3, #3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	691a      	ldr	r2, [r3, #16]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80105da:	4b11      	ldr	r3, [pc, #68]	@ (8010620 <dhcp_handle_ack+0xb8>)
 80105dc:	799b      	ldrb	r3, [r3, #6]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00b      	beq.n	80105fa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80105e2:	4b10      	ldr	r3, [pc, #64]	@ (8010624 <dhcp_handle_ack+0xbc>)
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7f8 fa33 	bl	8008a52 <lwip_htonl>
 80105ec:	4602      	mov	r2, r0
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2201      	movs	r2, #1
 80105f6:	71da      	strb	r2, [r3, #7]
 80105f8:	e002      	b.n	8010600 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010600:	4b07      	ldr	r3, [pc, #28]	@ (8010620 <dhcp_handle_ack+0xb8>)
 8010602:	79db      	ldrb	r3, [r3, #7]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d007      	beq.n	8010618 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010608:	4b06      	ldr	r3, [pc, #24]	@ (8010624 <dhcp_handle_ack+0xbc>)
 801060a:	69db      	ldr	r3, [r3, #28]
 801060c:	4618      	mov	r0, r3
 801060e:	f7f8 fa20 	bl	8008a52 <lwip_htonl>
 8010612:	4602      	mov	r2, r0
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010618:	bf00      	nop
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	2000d914 	.word	0x2000d914
 8010624:	2000d91c 	.word	0x2000d91c

08010628 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d105      	bne.n	8010642 <dhcp_start+0x1a>
 8010636:	4833      	ldr	r0, [pc, #204]	@ (8010704 <dhcp_start+0xdc>)
 8010638:	f7f0 fac8 	bl	8000bcc <printf>
 801063c:	f06f 030f 	mvn.w	r3, #15
 8010640:	e05c      	b.n	80106fc <dhcp_start+0xd4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d105      	bne.n	801065c <dhcp_start+0x34>
 8010650:	482d      	ldr	r0, [pc, #180]	@ (8010708 <dhcp_start+0xe0>)
 8010652:	f7f0 fabb 	bl	8000bcc <printf>
 8010656:	f06f 030f 	mvn.w	r3, #15
 801065a:	e04f      	b.n	80106fc <dhcp_start+0xd4>
  dhcp = netif_dhcp_data(netif);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010660:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010666:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801066a:	d202      	bcs.n	8010672 <dhcp_start+0x4a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801066c:	f04f 33ff 	mov.w	r3, #4294967295
 8010670:	e044      	b.n	80106fc <dhcp_start+0xd4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10d      	bne.n	8010694 <dhcp_start+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010678:	2034      	movs	r0, #52	@ 0x34
 801067a:	f7f8 fe63 	bl	8009344 <mem_malloc>
 801067e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d102      	bne.n	801068c <dhcp_start+0x64>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010686:	f04f 33ff 	mov.w	r3, #4294967295
 801068a:	e037      	b.n	80106fc <dhcp_start+0xd4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	625a      	str	r2, [r3, #36]	@ 0x24
 8010692:	e005      	b.n	80106a0 <dhcp_start+0x78>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	791b      	ldrb	r3, [r3, #4]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d001      	beq.n	80106a0 <dhcp_start+0x78>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801069c:	f7ff fc9c 	bl	800ffd8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80106a0:	2234      	movs	r2, #52	@ 0x34
 80106a2:	2100      	movs	r1, #0
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f004 f8b8 	bl	801481a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80106aa:	f7ff fc43 	bl	800ff34 <dhcp_inc_pcb_refcount>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <dhcp_start+0x92>
    return ERR_MEM;
 80106b4:	f04f 33ff 	mov.w	r3, #4294967295
 80106b8:	e020      	b.n	80106fc <dhcp_start+0xd4>
  }
  dhcp->pcb_allocated = 1;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2201      	movs	r2, #1
 80106be:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80106c6:	f003 0304 	and.w	r3, r3, #4
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d105      	bne.n	80106da <dhcp_start+0xb2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80106ce:	2102      	movs	r1, #2
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 fcf9 	bl	80110c8 <dhcp_set_state>
    return ERR_OK;
 80106d6:	2300      	movs	r3, #0
 80106d8:	e010      	b.n	80106fc <dhcp_start+0xd4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 f8ec 	bl	80108b8 <dhcp_discover>
 80106e0:	4603      	mov	r3, r0
 80106e2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80106e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d005      	beq.n	80106f8 <dhcp_start+0xd0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fc4d 	bl	8010f8c <dhcp_release_and_stop>
    return ERR_MEM;
 80106f2:	f04f 33ff 	mov.w	r3, #4294967295
 80106f6:	e001      	b.n	80106fc <dhcp_start+0xd4>
  }
  return result;
 80106f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	08017c3c 	.word	0x08017c3c
 8010708:	08017c80 	.word	0x08017c80

0801070c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010718:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d025      	beq.n	801076c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	795b      	ldrb	r3, [r3, #5]
 8010724:	2b0a      	cmp	r3, #10
 8010726:	d008      	beq.n	801073a <dhcp_network_changed+0x2e>
 8010728:	2b0a      	cmp	r3, #10
 801072a:	dc0d      	bgt.n	8010748 <dhcp_network_changed+0x3c>
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01f      	beq.n	8010770 <dhcp_network_changed+0x64>
 8010730:	2b00      	cmp	r3, #0
 8010732:	db09      	blt.n	8010748 <dhcp_network_changed+0x3c>
 8010734:	3b03      	subs	r3, #3
 8010736:	2b02      	cmp	r3, #2
 8010738:	d806      	bhi.n	8010748 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 fb65 	bl	8010e10 <dhcp_reboot>
      break;
 8010746:	e014      	b.n	8010772 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	795b      	ldrb	r3, [r3, #5]
 801074c:	2b0c      	cmp	r3, #12
 801074e:	d906      	bls.n	801075e <dhcp_network_changed+0x52>
 8010750:	4b09      	ldr	r3, [pc, #36]	@ (8010778 <dhcp_network_changed+0x6c>)
 8010752:	f240 3272 	movw	r2, #882	@ 0x372
 8010756:	4909      	ldr	r1, [pc, #36]	@ (801077c <dhcp_network_changed+0x70>)
 8010758:	4809      	ldr	r0, [pc, #36]	@ (8010780 <dhcp_network_changed+0x74>)
 801075a:	f7f0 fa37 	bl	8000bcc <printf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f000 f8a7 	bl	80108b8 <dhcp_discover>
      break;
 801076a:	e002      	b.n	8010772 <dhcp_network_changed+0x66>
    return;
 801076c:	bf00      	nop
 801076e:	e000      	b.n	8010772 <dhcp_network_changed+0x66>
      break;
 8010770:	bf00      	nop
  }
}
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	08017b5c 	.word	0x08017b5c
 801077c:	08017ca4 	.word	0x08017ca4
 8010780:	08017bb8 	.word	0x08017bb8

08010784 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d103      	bne.n	801079c <dhcp_arp_reply+0x18>
 8010794:	480c      	ldr	r0, [pc, #48]	@ (80107c8 <dhcp_arp_reply+0x44>)
 8010796:	f7f0 fa19 	bl	8000bcc <printf>
 801079a:	e012      	b.n	80107c2 <dhcp_arp_reply+0x3e>
  dhcp = netif_dhcp_data(netif);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00c      	beq.n	80107c2 <dhcp_arp_reply+0x3e>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	795b      	ldrb	r3, [r3, #5]
 80107ac:	2b08      	cmp	r3, #8
 80107ae:	d108      	bne.n	80107c2 <dhcp_arp_reply+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	69db      	ldr	r3, [r3, #28]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d102      	bne.n	80107c2 <dhcp_arp_reply+0x3e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 f805 	bl	80107cc <dhcp_decline>
    }
  }
}
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	08017c3c 	.word	0x08017c3c

080107cc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80107cc:	b5b0      	push	{r4, r5, r7, lr}
 80107ce:	b08a      	sub	sp, #40	@ 0x28
 80107d0:	af02      	add	r7, sp, #8
 80107d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107d8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80107da:	210c      	movs	r1, #12
 80107dc:	69b8      	ldr	r0, [r7, #24]
 80107de:	f000 fc73 	bl	80110c8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80107e2:	f107 030c 	add.w	r3, r7, #12
 80107e6:	2204      	movs	r2, #4
 80107e8:	69b9      	ldr	r1, [r7, #24]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f001 f8fa 	bl	80119e4 <dhcp_create_msg>
 80107f0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d035      	beq.n	8010864 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80107fe:	89b8      	ldrh	r0, [r7, #12]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010806:	2304      	movs	r3, #4
 8010808:	2232      	movs	r2, #50	@ 0x32
 801080a:	f000 fc77 	bl	80110fc <dhcp_option>
 801080e:	4603      	mov	r3, r0
 8010810:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010812:	89bc      	ldrh	r4, [r7, #12]
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	69db      	ldr	r3, [r3, #28]
 801081e:	4618      	mov	r0, r3
 8010820:	f7f8 f917 	bl	8008a52 <lwip_htonl>
 8010824:	4603      	mov	r3, r0
 8010826:	461a      	mov	r2, r3
 8010828:	4629      	mov	r1, r5
 801082a:	4620      	mov	r0, r4
 801082c:	f000 fcf2 	bl	8011214 <dhcp_option_long>
 8010830:	4603      	mov	r3, r0
 8010832:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010834:	89b8      	ldrh	r0, [r7, #12]
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	33f0      	adds	r3, #240	@ 0xf0
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	4619      	mov	r1, r3
 801083e:	f001 f99f 	bl	8011b80 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010842:	4b19      	ldr	r3, [pc, #100]	@ (80108a8 <dhcp_decline+0xdc>)
 8010844:	6818      	ldr	r0, [r3, #0]
 8010846:	4b19      	ldr	r3, [pc, #100]	@ (80108ac <dhcp_decline+0xe0>)
 8010848:	9301      	str	r3, [sp, #4]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	2343      	movs	r3, #67	@ 0x43
 8010850:	4a17      	ldr	r2, [pc, #92]	@ (80108b0 <dhcp_decline+0xe4>)
 8010852:	6979      	ldr	r1, [r7, #20]
 8010854:	f7ff f906 	bl	800fa64 <udp_sendto_if_src>
 8010858:	4603      	mov	r3, r0
 801085a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801085c:	6978      	ldr	r0, [r7, #20]
 801085e:	f7f9 fd27 	bl	800a2b0 <pbuf_free>
 8010862:	e001      	b.n	8010868 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010864:	23ff      	movs	r3, #255	@ 0xff
 8010866:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010868:	69bb      	ldr	r3, [r7, #24]
 801086a:	799b      	ldrb	r3, [r3, #6]
 801086c:	2bff      	cmp	r3, #255	@ 0xff
 801086e:	d005      	beq.n	801087c <dhcp_decline+0xb0>
    dhcp->tries++;
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	799b      	ldrb	r3, [r3, #6]
 8010874:	3301      	adds	r3, #1
 8010876:	b2da      	uxtb	r2, r3
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801087c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010880:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010882:	89fb      	ldrh	r3, [r7, #14]
 8010884:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010888:	4a0a      	ldr	r2, [pc, #40]	@ (80108b4 <dhcp_decline+0xe8>)
 801088a:	fb82 1203 	smull	r1, r2, r2, r3
 801088e:	1152      	asrs	r2, r2, #5
 8010890:	17db      	asrs	r3, r3, #31
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	b29a      	uxth	r2, r3
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801089a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3720      	adds	r7, #32
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bdb0      	pop	{r4, r5, r7, pc}
 80108a6:	bf00      	nop
 80108a8:	20004af0 	.word	0x20004af0
 80108ac:	080186f4 	.word	0x080186f4
 80108b0:	080186f8 	.word	0x080186f8
 80108b4:	10624dd3 	.word	0x10624dd3

080108b8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08a      	sub	sp, #40	@ 0x28
 80108bc:	af02      	add	r7, sp, #8
 80108be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108c4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80108c6:	2300      	movs	r3, #0
 80108c8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	2200      	movs	r2, #0
 80108ce:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80108d0:	2106      	movs	r1, #6
 80108d2:	69b8      	ldr	r0, [r7, #24]
 80108d4:	f000 fbf8 	bl	80110c8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80108d8:	f107 0308 	add.w	r3, r7, #8
 80108dc:	2201      	movs	r2, #1
 80108de:	69b9      	ldr	r1, [r7, #24]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 f87f 	bl	80119e4 <dhcp_create_msg>
 80108e6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d04b      	beq.n	8010986 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80108f4:	8938      	ldrh	r0, [r7, #8]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108fc:	2302      	movs	r3, #2
 80108fe:	2239      	movs	r2, #57	@ 0x39
 8010900:	f000 fbfc 	bl	80110fc <dhcp_option>
 8010904:	4603      	mov	r3, r0
 8010906:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010908:	8938      	ldrh	r0, [r7, #8]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010914:	461a      	mov	r2, r3
 8010916:	f000 fc4b 	bl	80111b0 <dhcp_option_short>
 801091a:	4603      	mov	r3, r0
 801091c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801091e:	8938      	ldrh	r0, [r7, #8]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010926:	2303      	movs	r3, #3
 8010928:	2237      	movs	r2, #55	@ 0x37
 801092a:	f000 fbe7 	bl	80110fc <dhcp_option>
 801092e:	4603      	mov	r3, r0
 8010930:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010932:	2300      	movs	r3, #0
 8010934:	77fb      	strb	r3, [r7, #31]
 8010936:	e00e      	b.n	8010956 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010938:	8938      	ldrh	r0, [r7, #8]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010940:	7ffb      	ldrb	r3, [r7, #31]
 8010942:	4a29      	ldr	r2, [pc, #164]	@ (80109e8 <dhcp_discover+0x130>)
 8010944:	5cd3      	ldrb	r3, [r2, r3]
 8010946:	461a      	mov	r2, r3
 8010948:	f000 fc0c 	bl	8011164 <dhcp_option_byte>
 801094c:	4603      	mov	r3, r0
 801094e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010950:	7ffb      	ldrb	r3, [r7, #31]
 8010952:	3301      	adds	r3, #1
 8010954:	77fb      	strb	r3, [r7, #31]
 8010956:	7ffb      	ldrb	r3, [r7, #31]
 8010958:	2b02      	cmp	r3, #2
 801095a:	d9ed      	bls.n	8010938 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801095c:	8938      	ldrh	r0, [r7, #8]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	33f0      	adds	r3, #240	@ 0xf0
 8010962:	693a      	ldr	r2, [r7, #16]
 8010964:	4619      	mov	r1, r3
 8010966:	f001 f90b 	bl	8011b80 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801096a:	4b20      	ldr	r3, [pc, #128]	@ (80109ec <dhcp_discover+0x134>)
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	4b20      	ldr	r3, [pc, #128]	@ (80109f0 <dhcp_discover+0x138>)
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	9300      	str	r3, [sp, #0]
 8010976:	2343      	movs	r3, #67	@ 0x43
 8010978:	4a1e      	ldr	r2, [pc, #120]	@ (80109f4 <dhcp_discover+0x13c>)
 801097a:	6939      	ldr	r1, [r7, #16]
 801097c:	f7ff f872 	bl	800fa64 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8010980:	6938      	ldr	r0, [r7, #16]
 8010982:	f7f9 fc95 	bl	800a2b0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	799b      	ldrb	r3, [r3, #6]
 801098a:	2bff      	cmp	r3, #255	@ 0xff
 801098c:	d005      	beq.n	801099a <dhcp_discover+0xe2>
    dhcp->tries++;
 801098e:	69bb      	ldr	r3, [r7, #24]
 8010990:	799b      	ldrb	r3, [r3, #6]
 8010992:	3301      	adds	r3, #1
 8010994:	b2da      	uxtb	r2, r3
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	799b      	ldrb	r3, [r3, #6]
 801099e:	2b05      	cmp	r3, #5
 80109a0:	d80d      	bhi.n	80109be <dhcp_discover+0x106>
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	799b      	ldrb	r3, [r3, #6]
 80109a6:	461a      	mov	r2, r3
 80109a8:	2301      	movs	r3, #1
 80109aa:	4093      	lsls	r3, r2
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	461a      	mov	r2, r3
 80109b0:	0152      	lsls	r2, r2, #5
 80109b2:	1ad2      	subs	r2, r2, r3
 80109b4:	0092      	lsls	r2, r2, #2
 80109b6:	4413      	add	r3, r2
 80109b8:	00db      	lsls	r3, r3, #3
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	e001      	b.n	80109c2 <dhcp_discover+0x10a>
 80109be:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80109c2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80109c4:	897b      	ldrh	r3, [r7, #10]
 80109c6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80109ca:	4a0b      	ldr	r2, [pc, #44]	@ (80109f8 <dhcp_discover+0x140>)
 80109cc:	fb82 1203 	smull	r1, r2, r2, r3
 80109d0:	1152      	asrs	r2, r2, #5
 80109d2:	17db      	asrs	r3, r3, #31
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80109dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3720      	adds	r7, #32
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	2000001c 	.word	0x2000001c
 80109ec:	20004af0 	.word	0x20004af0
 80109f0:	080186f4 	.word	0x080186f4
 80109f4:	080186f8 	.word	0x080186f8
 80109f8:	10624dd3 	.word	0x10624dd3

080109fc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b088      	sub	sp, #32
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d103      	bne.n	8010a12 <dhcp_bind+0x16>
 8010a0a:	485a      	ldr	r0, [pc, #360]	@ (8010b74 <dhcp_bind+0x178>)
 8010a0c:	f7f0 f8de 	bl	8000bcc <printf>
 8010a10:	e0ac      	b.n	8010b6c <dhcp_bind+0x170>
  dhcp = netif_dhcp_data(netif);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a16:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d103      	bne.n	8010a26 <dhcp_bind+0x2a>
 8010a1e:	4856      	ldr	r0, [pc, #344]	@ (8010b78 <dhcp_bind+0x17c>)
 8010a20:	f7f0 f8d4 	bl	8000bcc <printf>
 8010a24:	e0a2      	b.n	8010b6c <dhcp_bind+0x170>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a34:	d019      	beq.n	8010a6a <dhcp_bind+0x6e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a3a:	331e      	adds	r3, #30
 8010a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8010b7c <dhcp_bind+0x180>)
 8010a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a42:	095b      	lsrs	r3, r3, #5
 8010a44:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a4c:	d302      	bcc.n	8010a54 <dhcp_bind+0x58>
      timeout = 0xffff;
 8010a4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a52:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010a54:	69bb      	ldr	r3, [r7, #24]
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	8a9b      	ldrh	r3, [r3, #20]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d102      	bne.n	8010a6a <dhcp_bind+0x6e>
      dhcp->t0_timeout = 1;
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	2201      	movs	r2, #1
 8010a68:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a72:	d01d      	beq.n	8010ab0 <dhcp_bind+0xb4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a78:	331e      	adds	r3, #30
 8010a7a:	4a40      	ldr	r2, [pc, #256]	@ (8010b7c <dhcp_bind+0x180>)
 8010a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a80:	095b      	lsrs	r3, r3, #5
 8010a82:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a8a:	d302      	bcc.n	8010a92 <dhcp_bind+0x96>
      timeout = 0xffff;
 8010a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a90:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010a92:	69bb      	ldr	r3, [r7, #24]
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	895b      	ldrh	r3, [r3, #10]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <dhcp_bind+0xac>
      dhcp->t1_timeout = 1;
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	895a      	ldrh	r2, [r3, #10]
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab8:	d01d      	beq.n	8010af6 <dhcp_bind+0xfa>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010abe:	331e      	adds	r3, #30
 8010ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8010b7c <dhcp_bind+0x180>)
 8010ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ac6:	095b      	lsrs	r3, r3, #5
 8010ac8:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8010aca:	69bb      	ldr	r3, [r7, #24]
 8010acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ad0:	d302      	bcc.n	8010ad8 <dhcp_bind+0xdc>
      timeout = 0xffff;
 8010ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ad6:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010ad8:	69bb      	ldr	r3, [r7, #24]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	899b      	ldrh	r3, [r3, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d102      	bne.n	8010aee <dhcp_bind+0xf2>
      dhcp->t2_timeout = 1;
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	2201      	movs	r2, #1
 8010aec:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	899a      	ldrh	r2, [r3, #12]
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	895a      	ldrh	r2, [r3, #10]
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	899b      	ldrh	r3, [r3, #12]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d306      	bcc.n	8010b10 <dhcp_bind+0x114>
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	899b      	ldrh	r3, [r3, #12]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d002      	beq.n	8010b10 <dhcp_bind+0x114>
    dhcp->t1_timeout = 0;
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	79db      	ldrb	r3, [r3, #7]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d003      	beq.n	8010b20 <dhcp_bind+0x124>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	613b      	str	r3, [r7, #16]
 8010b1e:	e014      	b.n	8010b4a <dhcp_bind+0x14e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	331c      	adds	r3, #28
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	db02      	blt.n	8010b36 <dhcp_bind+0x13a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010b30:	23ff      	movs	r3, #255	@ 0xff
 8010b32:	613b      	str	r3, [r7, #16]
 8010b34:	e009      	b.n	8010b4a <dhcp_bind+0x14e>
    } else if (first_octet >= 192) {
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	2bbf      	cmp	r3, #191	@ 0xbf
 8010b3a:	d903      	bls.n	8010b44 <dhcp_bind+0x148>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010b3c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010b40:	613b      	str	r3, [r7, #16]
 8010b42:	e002      	b.n	8010b4a <dhcp_bind+0x14e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010b48:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010b50:	210a      	movs	r1, #10
 8010b52:	69f8      	ldr	r0, [r7, #28]
 8010b54:	f000 fab8 	bl	80110c8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	f103 011c 	add.w	r1, r3, #28
 8010b5e:	f107 030c 	add.w	r3, r7, #12
 8010b62:	f107 0210 	add.w	r2, r7, #16
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7f8 ff3c 	bl	80099e4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010b6c:	3720      	adds	r7, #32
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
 8010b72:	bf00      	nop
 8010b74:	08017cb8 	.word	0x08017cb8
 8010b78:	08017cd4 	.word	0x08017cd4
 8010b7c:	88888889 	.word	0x88888889

08010b80 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08a      	sub	sp, #40	@ 0x28
 8010b84:	af02      	add	r7, sp, #8
 8010b86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b8c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010b8e:	2105      	movs	r1, #5
 8010b90:	69b8      	ldr	r0, [r7, #24]
 8010b92:	f000 fa99 	bl	80110c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010b96:	f107 030c 	add.w	r3, r7, #12
 8010b9a:	2203      	movs	r2, #3
 8010b9c:	69b9      	ldr	r1, [r7, #24]
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 ff20 	bl	80119e4 <dhcp_create_msg>
 8010ba4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d057      	beq.n	8010c5c <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010bb2:	89b8      	ldrh	r0, [r7, #12]
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010bba:	2302      	movs	r3, #2
 8010bbc:	2239      	movs	r2, #57	@ 0x39
 8010bbe:	f000 fa9d 	bl	80110fc <dhcp_option>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010bc6:	89b8      	ldrh	r0, [r7, #12]
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	f000 faec 	bl	80111b0 <dhcp_option_short>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010bdc:	89b8      	ldrh	r0, [r7, #12]
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010be4:	2303      	movs	r3, #3
 8010be6:	2237      	movs	r2, #55	@ 0x37
 8010be8:	f000 fa88 	bl	80110fc <dhcp_option>
 8010bec:	4603      	mov	r3, r0
 8010bee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	77bb      	strb	r3, [r7, #30]
 8010bf4:	e00e      	b.n	8010c14 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010bf6:	89b8      	ldrh	r0, [r7, #12]
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010bfe:	7fbb      	ldrb	r3, [r7, #30]
 8010c00:	4a2e      	ldr	r2, [pc, #184]	@ (8010cbc <dhcp_renew+0x13c>)
 8010c02:	5cd3      	ldrb	r3, [r2, r3]
 8010c04:	461a      	mov	r2, r3
 8010c06:	f000 faad 	bl	8011164 <dhcp_option_byte>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010c0e:	7fbb      	ldrb	r3, [r7, #30]
 8010c10:	3301      	adds	r3, #1
 8010c12:	77bb      	strb	r3, [r7, #30]
 8010c14:	7fbb      	ldrb	r3, [r7, #30]
 8010c16:	2b02      	cmp	r3, #2
 8010c18:	d9ed      	bls.n	8010bf6 <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8010c1a:	89b8      	ldrh	r0, [r7, #12]
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	33f0      	adds	r3, #240	@ 0xf0
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	4619      	mov	r1, r3
 8010c24:	f000 fb3a 	bl	801129c <dhcp_option_hostname>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010c2c:	89b8      	ldrh	r0, [r7, #12]
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	33f0      	adds	r3, #240	@ 0xf0
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	4619      	mov	r1, r3
 8010c36:	f000 ffa3 	bl	8011b80 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010c3a:	4b21      	ldr	r3, [pc, #132]	@ (8010cc0 <dhcp_renew+0x140>)
 8010c3c:	6818      	ldr	r0, [r3, #0]
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	f103 0218 	add.w	r2, r3, #24
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	2343      	movs	r3, #67	@ 0x43
 8010c4a:	6979      	ldr	r1, [r7, #20]
 8010c4c:	f7fe feaa 	bl	800f9a4 <udp_sendto_if>
 8010c50:	4603      	mov	r3, r0
 8010c52:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010c54:	6978      	ldr	r0, [r7, #20]
 8010c56:	f7f9 fb2b 	bl	800a2b0 <pbuf_free>
 8010c5a:	e001      	b.n	8010c60 <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010c5c:	23ff      	movs	r3, #255	@ 0xff
 8010c5e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	799b      	ldrb	r3, [r3, #6]
 8010c64:	2bff      	cmp	r3, #255	@ 0xff
 8010c66:	d005      	beq.n	8010c74 <dhcp_renew+0xf4>
    dhcp->tries++;
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	799b      	ldrb	r3, [r3, #6]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	799b      	ldrb	r3, [r3, #6]
 8010c78:	2b09      	cmp	r3, #9
 8010c7a:	d809      	bhi.n	8010c90 <dhcp_renew+0x110>
 8010c7c:	69bb      	ldr	r3, [r7, #24]
 8010c7e:	799b      	ldrb	r3, [r3, #6]
 8010c80:	461a      	mov	r2, r3
 8010c82:	0152      	lsls	r2, r2, #5
 8010c84:	1ad2      	subs	r2, r2, r3
 8010c86:	0092      	lsls	r2, r2, #2
 8010c88:	4413      	add	r3, r2
 8010c8a:	011b      	lsls	r3, r3, #4
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	e001      	b.n	8010c94 <dhcp_renew+0x114>
 8010c90:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010c94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010c96:	89fb      	ldrh	r3, [r7, #14]
 8010c98:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010c9c:	4a09      	ldr	r2, [pc, #36]	@ (8010cc4 <dhcp_renew+0x144>)
 8010c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8010ca2:	1152      	asrs	r2, r2, #5
 8010ca4:	17db      	asrs	r3, r3, #31
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3720      	adds	r7, #32
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	2000001c 	.word	0x2000001c
 8010cc0:	20004af0 	.word	0x20004af0
 8010cc4:	10624dd3 	.word	0x10624dd3

08010cc8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b08a      	sub	sp, #40	@ 0x28
 8010ccc:	af02      	add	r7, sp, #8
 8010cce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cd4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010cd6:	2104      	movs	r1, #4
 8010cd8:	69b8      	ldr	r0, [r7, #24]
 8010cda:	f000 f9f5 	bl	80110c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010cde:	f107 030c 	add.w	r3, r7, #12
 8010ce2:	2203      	movs	r2, #3
 8010ce4:	69b9      	ldr	r1, [r7, #24]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fe7c 	bl	80119e4 <dhcp_create_msg>
 8010cec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d055      	beq.n	8010da0 <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010cfa:	89b8      	ldrh	r0, [r7, #12]
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010d02:	2302      	movs	r3, #2
 8010d04:	2239      	movs	r2, #57	@ 0x39
 8010d06:	f000 f9f9 	bl	80110fc <dhcp_option>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010d0e:	89b8      	ldrh	r0, [r7, #12]
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	f000 fa48 	bl	80111b0 <dhcp_option_short>
 8010d20:	4603      	mov	r3, r0
 8010d22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010d24:	89b8      	ldrh	r0, [r7, #12]
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010d2c:	2303      	movs	r3, #3
 8010d2e:	2237      	movs	r2, #55	@ 0x37
 8010d30:	f000 f9e4 	bl	80110fc <dhcp_option>
 8010d34:	4603      	mov	r3, r0
 8010d36:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d38:	2300      	movs	r3, #0
 8010d3a:	77bb      	strb	r3, [r7, #30]
 8010d3c:	e00e      	b.n	8010d5c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010d3e:	89b8      	ldrh	r0, [r7, #12]
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010d46:	7fbb      	ldrb	r3, [r7, #30]
 8010d48:	4a2d      	ldr	r2, [pc, #180]	@ (8010e00 <dhcp_rebind+0x138>)
 8010d4a:	5cd3      	ldrb	r3, [r2, r3]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	f000 fa09 	bl	8011164 <dhcp_option_byte>
 8010d52:	4603      	mov	r3, r0
 8010d54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d56:	7fbb      	ldrb	r3, [r7, #30]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	77bb      	strb	r3, [r7, #30]
 8010d5c:	7fbb      	ldrb	r3, [r7, #30]
 8010d5e:	2b02      	cmp	r3, #2
 8010d60:	d9ed      	bls.n	8010d3e <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8010d62:	89b8      	ldrh	r0, [r7, #12]
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	33f0      	adds	r3, #240	@ 0xf0
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	f000 fa96 	bl	801129c <dhcp_option_hostname>
 8010d70:	4603      	mov	r3, r0
 8010d72:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010d74:	89b8      	ldrh	r0, [r7, #12]
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	33f0      	adds	r3, #240	@ 0xf0
 8010d7a:	697a      	ldr	r2, [r7, #20]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	f000 feff 	bl	8011b80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010d82:	4b20      	ldr	r3, [pc, #128]	@ (8010e04 <dhcp_rebind+0x13c>)
 8010d84:	6818      	ldr	r0, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	2343      	movs	r3, #67	@ 0x43
 8010d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8010e08 <dhcp_rebind+0x140>)
 8010d8e:	6979      	ldr	r1, [r7, #20]
 8010d90:	f7fe fe08 	bl	800f9a4 <udp_sendto_if>
 8010d94:	4603      	mov	r3, r0
 8010d96:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010d98:	6978      	ldr	r0, [r7, #20]
 8010d9a:	f7f9 fa89 	bl	800a2b0 <pbuf_free>
 8010d9e:	e001      	b.n	8010da4 <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010da0:	23ff      	movs	r3, #255	@ 0xff
 8010da2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	799b      	ldrb	r3, [r3, #6]
 8010da8:	2bff      	cmp	r3, #255	@ 0xff
 8010daa:	d005      	beq.n	8010db8 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	799b      	ldrb	r3, [r3, #6]
 8010db0:	3301      	adds	r3, #1
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	799b      	ldrb	r3, [r3, #6]
 8010dbc:	2b09      	cmp	r3, #9
 8010dbe:	d809      	bhi.n	8010dd4 <dhcp_rebind+0x10c>
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	799b      	ldrb	r3, [r3, #6]
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	0152      	lsls	r2, r2, #5
 8010dc8:	1ad2      	subs	r2, r2, r3
 8010dca:	0092      	lsls	r2, r2, #2
 8010dcc:	4413      	add	r3, r2
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	e001      	b.n	8010dd8 <dhcp_rebind+0x110>
 8010dd4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010dd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010dda:	89fb      	ldrh	r3, [r7, #14]
 8010ddc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010de0:	4a0a      	ldr	r2, [pc, #40]	@ (8010e0c <dhcp_rebind+0x144>)
 8010de2:	fb82 1203 	smull	r1, r2, r2, r3
 8010de6:	1152      	asrs	r2, r2, #5
 8010de8:	17db      	asrs	r3, r3, #31
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3720      	adds	r7, #32
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	2000001c 	.word	0x2000001c
 8010e04:	20004af0 	.word	0x20004af0
 8010e08:	080186f8 	.word	0x080186f8
 8010e0c:	10624dd3 	.word	0x10624dd3

08010e10 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010e10:	b5b0      	push	{r4, r5, r7, lr}
 8010e12:	b08a      	sub	sp, #40	@ 0x28
 8010e14:	af02      	add	r7, sp, #8
 8010e16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e1c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010e1e:	2103      	movs	r1, #3
 8010e20:	69b8      	ldr	r0, [r7, #24]
 8010e22:	f000 f951 	bl	80110c8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010e26:	f107 030c 	add.w	r3, r7, #12
 8010e2a:	2203      	movs	r2, #3
 8010e2c:	69b9      	ldr	r1, [r7, #24]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 fdd8 	bl	80119e4 <dhcp_create_msg>
 8010e34:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d06f      	beq.n	8010f1c <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010e42:	89b8      	ldrh	r0, [r7, #12]
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	2239      	movs	r2, #57	@ 0x39
 8010e4e:	f000 f955 	bl	80110fc <dhcp_option>
 8010e52:	4603      	mov	r3, r0
 8010e54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010e56:	89b8      	ldrh	r0, [r7, #12]
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	33f0      	adds	r3, #240	@ 0xf0
 8010e5c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010e60:	4619      	mov	r1, r3
 8010e62:	f000 f9a5 	bl	80111b0 <dhcp_option_short>
 8010e66:	4603      	mov	r3, r0
 8010e68:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010e6a:	89b8      	ldrh	r0, [r7, #12]
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010e72:	2304      	movs	r3, #4
 8010e74:	2232      	movs	r2, #50	@ 0x32
 8010e76:	f000 f941 	bl	80110fc <dhcp_option>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010e7e:	89bc      	ldrh	r4, [r7, #12]
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	69db      	ldr	r3, [r3, #28]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7f7 fde1 	bl	8008a52 <lwip_htonl>
 8010e90:	4603      	mov	r3, r0
 8010e92:	461a      	mov	r2, r3
 8010e94:	4629      	mov	r1, r5
 8010e96:	4620      	mov	r0, r4
 8010e98:	f000 f9bc 	bl	8011214 <dhcp_option_long>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010ea0:	89b8      	ldrh	r0, [r7, #12]
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	2237      	movs	r2, #55	@ 0x37
 8010eac:	f000 f926 	bl	80110fc <dhcp_option>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	77bb      	strb	r3, [r7, #30]
 8010eb8:	e00e      	b.n	8010ed8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010eba:	89b8      	ldrh	r0, [r7, #12]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010ec2:	7fbb      	ldrb	r3, [r7, #30]
 8010ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8010f7c <dhcp_reboot+0x16c>)
 8010ec6:	5cd3      	ldrb	r3, [r2, r3]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	f000 f94b 	bl	8011164 <dhcp_option_byte>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010ed2:	7fbb      	ldrb	r3, [r7, #30]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	77bb      	strb	r3, [r7, #30]
 8010ed8:	7fbb      	ldrb	r3, [r7, #30]
 8010eda:	2b02      	cmp	r3, #2
 8010edc:	d9ed      	bls.n	8010eba <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8010ede:	89b8      	ldrh	r0, [r7, #12]
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	33f0      	adds	r3, #240	@ 0xf0
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	f000 f9d8 	bl	801129c <dhcp_option_hostname>
 8010eec:	4603      	mov	r3, r0
 8010eee:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010ef0:	89b8      	ldrh	r0, [r7, #12]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	33f0      	adds	r3, #240	@ 0xf0
 8010ef6:	697a      	ldr	r2, [r7, #20]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	f000 fe41 	bl	8011b80 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010efe:	4b20      	ldr	r3, [pc, #128]	@ (8010f80 <dhcp_reboot+0x170>)
 8010f00:	6818      	ldr	r0, [r3, #0]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	2343      	movs	r3, #67	@ 0x43
 8010f08:	4a1e      	ldr	r2, [pc, #120]	@ (8010f84 <dhcp_reboot+0x174>)
 8010f0a:	6979      	ldr	r1, [r7, #20]
 8010f0c:	f7fe fd4a 	bl	800f9a4 <udp_sendto_if>
 8010f10:	4603      	mov	r3, r0
 8010f12:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010f14:	6978      	ldr	r0, [r7, #20]
 8010f16:	f7f9 f9cb 	bl	800a2b0 <pbuf_free>
 8010f1a:	e001      	b.n	8010f20 <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010f1c:	23ff      	movs	r3, #255	@ 0xff
 8010f1e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	799b      	ldrb	r3, [r3, #6]
 8010f24:	2bff      	cmp	r3, #255	@ 0xff
 8010f26:	d005      	beq.n	8010f34 <dhcp_reboot+0x124>
    dhcp->tries++;
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	799b      	ldrb	r3, [r3, #6]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	b2da      	uxtb	r2, r3
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010f34:	69bb      	ldr	r3, [r7, #24]
 8010f36:	799b      	ldrb	r3, [r3, #6]
 8010f38:	2b09      	cmp	r3, #9
 8010f3a:	d809      	bhi.n	8010f50 <dhcp_reboot+0x140>
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	799b      	ldrb	r3, [r3, #6]
 8010f40:	461a      	mov	r2, r3
 8010f42:	0152      	lsls	r2, r2, #5
 8010f44:	1ad2      	subs	r2, r2, r3
 8010f46:	0092      	lsls	r2, r2, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	00db      	lsls	r3, r3, #3
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	e001      	b.n	8010f54 <dhcp_reboot+0x144>
 8010f50:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010f54:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010f56:	89fb      	ldrh	r3, [r7, #14]
 8010f58:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8010f88 <dhcp_reboot+0x178>)
 8010f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8010f62:	1152      	asrs	r2, r2, #5
 8010f64:	17db      	asrs	r3, r3, #31
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3720      	adds	r7, #32
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bdb0      	pop	{r4, r5, r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	2000001c 	.word	0x2000001c
 8010f80:	20004af0 	.word	0x20004af0
 8010f84:	080186f8 	.word	0x080186f8
 8010f88:	10624dd3 	.word	0x10624dd3

08010f8c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010f8c:	b5b0      	push	{r4, r5, r7, lr}
 8010f8e:	b08a      	sub	sp, #40	@ 0x28
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f98:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f000 8089 	beq.w	80110b4 <dhcp_release_and_stop+0x128>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	795b      	ldrb	r3, [r3, #5]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f000 8086 	beq.w	80110b8 <dhcp_release_and_stop+0x12c>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	699b      	ldr	r3, [r3, #24]
 8010fb0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	829a      	strh	r2, [r3, #20]
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	8a9a      	ldrh	r2, [r3, #20]
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	825a      	strh	r2, [r3, #18]
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	8a5a      	ldrh	r2, [r3, #18]
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	821a      	strh	r2, [r3, #16]
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	8a1a      	ldrh	r2, [r3, #16]
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 fdec 	bl	8011bdc <dhcp_supplied_address>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d046      	beq.n	8011098 <dhcp_release_and_stop+0x10c>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801100a:	2100      	movs	r1, #0
 801100c:	69f8      	ldr	r0, [r7, #28]
 801100e:	f000 f85b 	bl	80110c8 <dhcp_set_state>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011012:	f107 030e 	add.w	r3, r7, #14
 8011016:	2207      	movs	r2, #7
 8011018:	69f9      	ldr	r1, [r7, #28]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fce2 	bl	80119e4 <dhcp_create_msg>
 8011020:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011022:	69bb      	ldr	r3, [r7, #24]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d030      	beq.n	801108a <dhcp_release_and_stop+0xfe>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801102e:	89f8      	ldrh	r0, [r7, #14]
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011036:	2304      	movs	r3, #4
 8011038:	2236      	movs	r2, #54	@ 0x36
 801103a:	f000 f85f 	bl	80110fc <dhcp_option>
 801103e:	4603      	mov	r3, r0
 8011040:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011042:	89fc      	ldrh	r4, [r7, #14]
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	4618      	mov	r0, r3
 801104e:	f7f7 fd00 	bl	8008a52 <lwip_htonl>
 8011052:	4603      	mov	r3, r0
 8011054:	461a      	mov	r2, r3
 8011056:	4629      	mov	r1, r5
 8011058:	4620      	mov	r0, r4
 801105a:	f000 f8db 	bl	8011214 <dhcp_option_long>
 801105e:	4603      	mov	r3, r0
 8011060:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011062:	89f8      	ldrh	r0, [r7, #14]
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	33f0      	adds	r3, #240	@ 0xf0
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	4619      	mov	r1, r3
 801106c:	f000 fd88 	bl	8011b80 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011070:	4b13      	ldr	r3, [pc, #76]	@ (80110c0 <dhcp_release_and_stop+0x134>)
 8011072:	6818      	ldr	r0, [r3, #0]
 8011074:	f107 0210 	add.w	r2, r7, #16
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	2343      	movs	r3, #67	@ 0x43
 801107e:	69b9      	ldr	r1, [r7, #24]
 8011080:	f7fe fc90 	bl	800f9a4 <udp_sendto_if>
      pbuf_free(p_out);
 8011084:	69b8      	ldr	r0, [r7, #24]
 8011086:	f7f9 f913 	bl	800a2b0 <pbuf_free>
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }

    /* remove IP address from interface (prevents routing from selecting this interface) */
    netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801108a:	4b0e      	ldr	r3, [pc, #56]	@ (80110c4 <dhcp_release_and_stop+0x138>)
 801108c:	4a0d      	ldr	r2, [pc, #52]	@ (80110c4 <dhcp_release_and_stop+0x138>)
 801108e:	490d      	ldr	r1, [pc, #52]	@ (80110c4 <dhcp_release_and_stop+0x138>)
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7f8 fca7 	bl	80099e4 <netif_set_addr>
 8011096:	e003      	b.n	80110a0 <dhcp_release_and_stop+0x114>
  } else {
     dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011098:	2100      	movs	r1, #0
 801109a:	69f8      	ldr	r0, [r7, #28]
 801109c:	f000 f814 	bl	80110c8 <dhcp_set_state>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  if (dhcp->pcb_allocated != 0) {
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	791b      	ldrb	r3, [r3, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d008      	beq.n	80110ba <dhcp_release_and_stop+0x12e>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80110a8:	f7fe ff96 	bl	800ffd8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	2200      	movs	r2, #0
 80110b0:	711a      	strb	r2, [r3, #4]
 80110b2:	e002      	b.n	80110ba <dhcp_release_and_stop+0x12e>
    return;
 80110b4:	bf00      	nop
 80110b6:	e000      	b.n	80110ba <dhcp_release_and_stop+0x12e>
    return;
 80110b8:	bf00      	nop
  }
}
 80110ba:	3720      	adds	r7, #32
 80110bc:	46bd      	mov	sp, r7
 80110be:	bdb0      	pop	{r4, r5, r7, pc}
 80110c0:	20004af0 	.word	0x20004af0
 80110c4:	080186f4 	.word	0x080186f4

080110c8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	795b      	ldrb	r3, [r3, #5]
 80110d8:	78fa      	ldrb	r2, [r7, #3]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d008      	beq.n	80110f0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	78fa      	ldrb	r2, [r7, #3]
 80110e2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2200      	movs	r2, #0
 80110ee:	811a      	strh	r2, [r3, #8]
  }
}
 80110f0:	bf00      	nop
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6039      	str	r1, [r7, #0]
 8011104:	4611      	mov	r1, r2
 8011106:	461a      	mov	r2, r3
 8011108:	4603      	mov	r3, r0
 801110a:	80fb      	strh	r3, [r7, #6]
 801110c:	460b      	mov	r3, r1
 801110e:	717b      	strb	r3, [r7, #5]
 8011110:	4613      	mov	r3, r2
 8011112:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011114:	88fa      	ldrh	r2, [r7, #6]
 8011116:	793b      	ldrb	r3, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	3302      	adds	r3, #2
 801111c:	2b44      	cmp	r3, #68	@ 0x44
 801111e:	d906      	bls.n	801112e <dhcp_option+0x32>
 8011120:	4b0d      	ldr	r3, [pc, #52]	@ (8011158 <dhcp_option+0x5c>)
 8011122:	f240 5299 	movw	r2, #1433	@ 0x599
 8011126:	490d      	ldr	r1, [pc, #52]	@ (801115c <dhcp_option+0x60>)
 8011128:	480d      	ldr	r0, [pc, #52]	@ (8011160 <dhcp_option+0x64>)
 801112a:	f7ef fd4f 	bl	8000bcc <printf>
  options[options_out_len++] = option_type;
 801112e:	88fb      	ldrh	r3, [r7, #6]
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	80fa      	strh	r2, [r7, #6]
 8011134:	461a      	mov	r2, r3
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	4413      	add	r3, r2
 801113a:	797a      	ldrb	r2, [r7, #5]
 801113c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801113e:	88fb      	ldrh	r3, [r7, #6]
 8011140:	1c5a      	adds	r2, r3, #1
 8011142:	80fa      	strh	r2, [r7, #6]
 8011144:	461a      	mov	r2, r3
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	4413      	add	r3, r2
 801114a:	793a      	ldrb	r2, [r7, #4]
 801114c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801114e:	88fb      	ldrh	r3, [r7, #6]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	08017b5c 	.word	0x08017b5c
 801115c:	08017cec 	.word	0x08017cec
 8011160:	08017bb8 	.word	0x08017bb8

08011164 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	4603      	mov	r3, r0
 801116c:	6039      	str	r1, [r7, #0]
 801116e:	80fb      	strh	r3, [r7, #6]
 8011170:	4613      	mov	r3, r2
 8011172:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011174:	88fb      	ldrh	r3, [r7, #6]
 8011176:	2b43      	cmp	r3, #67	@ 0x43
 8011178:	d906      	bls.n	8011188 <dhcp_option_byte+0x24>
 801117a:	4b0a      	ldr	r3, [pc, #40]	@ (80111a4 <dhcp_option_byte+0x40>)
 801117c:	f240 52a5 	movw	r2, #1445	@ 0x5a5
 8011180:	4909      	ldr	r1, [pc, #36]	@ (80111a8 <dhcp_option_byte+0x44>)
 8011182:	480a      	ldr	r0, [pc, #40]	@ (80111ac <dhcp_option_byte+0x48>)
 8011184:	f7ef fd22 	bl	8000bcc <printf>
  options[options_out_len++] = value;
 8011188:	88fb      	ldrh	r3, [r7, #6]
 801118a:	1c5a      	adds	r2, r3, #1
 801118c:	80fa      	strh	r2, [r7, #6]
 801118e:	461a      	mov	r2, r3
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	4413      	add	r3, r2
 8011194:	797a      	ldrb	r2, [r7, #5]
 8011196:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011198:	88fb      	ldrh	r3, [r7, #6]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	08017b5c 	.word	0x08017b5c
 80111a8:	08017d30 	.word	0x08017d30
 80111ac:	08017bb8 	.word	0x08017bb8

080111b0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	4603      	mov	r3, r0
 80111b8:	6039      	str	r1, [r7, #0]
 80111ba:	80fb      	strh	r3, [r7, #6]
 80111bc:	4613      	mov	r3, r2
 80111be:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80111c0:	88fb      	ldrh	r3, [r7, #6]
 80111c2:	3302      	adds	r3, #2
 80111c4:	2b44      	cmp	r3, #68	@ 0x44
 80111c6:	d906      	bls.n	80111d6 <dhcp_option_short+0x26>
 80111c8:	4b0f      	ldr	r3, [pc, #60]	@ (8011208 <dhcp_option_short+0x58>)
 80111ca:	f240 52ad 	movw	r2, #1453	@ 0x5ad
 80111ce:	490f      	ldr	r1, [pc, #60]	@ (801120c <dhcp_option_short+0x5c>)
 80111d0:	480f      	ldr	r0, [pc, #60]	@ (8011210 <dhcp_option_short+0x60>)
 80111d2:	f7ef fcfb 	bl	8000bcc <printf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80111d6:	88bb      	ldrh	r3, [r7, #4]
 80111d8:	0a1b      	lsrs	r3, r3, #8
 80111da:	b29a      	uxth	r2, r3
 80111dc:	88fb      	ldrh	r3, [r7, #6]
 80111de:	1c59      	adds	r1, r3, #1
 80111e0:	80f9      	strh	r1, [r7, #6]
 80111e2:	4619      	mov	r1, r3
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	440b      	add	r3, r1
 80111e8:	b2d2      	uxtb	r2, r2
 80111ea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80111ec:	88fb      	ldrh	r3, [r7, #6]
 80111ee:	1c5a      	adds	r2, r3, #1
 80111f0:	80fa      	strh	r2, [r7, #6]
 80111f2:	461a      	mov	r2, r3
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	4413      	add	r3, r2
 80111f8:	88ba      	ldrh	r2, [r7, #4]
 80111fa:	b2d2      	uxtb	r2, r2
 80111fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80111fe:	88fb      	ldrh	r3, [r7, #6]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	08017b5c 	.word	0x08017b5c
 801120c:	08017d68 	.word	0x08017d68
 8011210:	08017bb8 	.word	0x08017bb8

08011214 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	607a      	str	r2, [r7, #4]
 8011220:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011222:	89fb      	ldrh	r3, [r7, #14]
 8011224:	3304      	adds	r3, #4
 8011226:	2b44      	cmp	r3, #68	@ 0x44
 8011228:	d906      	bls.n	8011238 <dhcp_option_long+0x24>
 801122a:	4b19      	ldr	r3, [pc, #100]	@ (8011290 <dhcp_option_long+0x7c>)
 801122c:	f240 52b6 	movw	r2, #1462	@ 0x5b6
 8011230:	4918      	ldr	r1, [pc, #96]	@ (8011294 <dhcp_option_long+0x80>)
 8011232:	4819      	ldr	r0, [pc, #100]	@ (8011298 <dhcp_option_long+0x84>)
 8011234:	f7ef fcca 	bl	8000bcc <printf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	0e1a      	lsrs	r2, r3, #24
 801123c:	89fb      	ldrh	r3, [r7, #14]
 801123e:	1c59      	adds	r1, r3, #1
 8011240:	81f9      	strh	r1, [r7, #14]
 8011242:	4619      	mov	r1, r3
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	440b      	add	r3, r1
 8011248:	b2d2      	uxtb	r2, r2
 801124a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	0c1a      	lsrs	r2, r3, #16
 8011250:	89fb      	ldrh	r3, [r7, #14]
 8011252:	1c59      	adds	r1, r3, #1
 8011254:	81f9      	strh	r1, [r7, #14]
 8011256:	4619      	mov	r1, r3
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	440b      	add	r3, r1
 801125c:	b2d2      	uxtb	r2, r2
 801125e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	0a1a      	lsrs	r2, r3, #8
 8011264:	89fb      	ldrh	r3, [r7, #14]
 8011266:	1c59      	adds	r1, r3, #1
 8011268:	81f9      	strh	r1, [r7, #14]
 801126a:	4619      	mov	r1, r3
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	440b      	add	r3, r1
 8011270:	b2d2      	uxtb	r2, r2
 8011272:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011274:	89fb      	ldrh	r3, [r7, #14]
 8011276:	1c5a      	adds	r2, r3, #1
 8011278:	81fa      	strh	r2, [r7, #14]
 801127a:	461a      	mov	r2, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	4413      	add	r3, r2
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	b2d2      	uxtb	r2, r2
 8011284:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011286:	89fb      	ldrh	r3, [r7, #14]
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08017b5c 	.word	0x08017b5c
 8011294:	08017da4 	.word	0x08017da4
 8011298:	08017bb8 	.word	0x08017bb8

0801129c <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b088      	sub	sp, #32
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	4603      	mov	r3, r0
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	607a      	str	r2, [r7, #4]
 80112a8:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d044      	beq.n	801133c <dhcp_option_hostname+0xa0>
    size_t namelen = strlen(netif->hostname);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7ee ff92 	bl	80001e0 <strlen>
 80112bc:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d03b      	beq.n	801133c <dhcp_option_hostname+0xa0>
      size_t len;
      const char *p = netif->hostname;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112c8:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 80112ca:	89fb      	ldrh	r3, [r7, #14]
 80112cc:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 80112d0:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
 80112d2:	697a      	ldr	r2, [r7, #20]
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d906      	bls.n	80112e8 <dhcp_option_hostname+0x4c>
 80112da:	4b1b      	ldr	r3, [pc, #108]	@ (8011348 <dhcp_option_hostname+0xac>)
 80112dc:	f240 52ca 	movw	r2, #1482	@ 0x5ca
 80112e0:	491a      	ldr	r1, [pc, #104]	@ (801134c <dhcp_option_hostname+0xb0>)
 80112e2:	481b      	ldr	r0, [pc, #108]	@ (8011350 <dhcp_option_hostname+0xb4>)
 80112e4:	f7ef fc72 	bl	8000bcc <printf>
      len = LWIP_MIN(namelen, available);
 80112e8:	693a      	ldr	r2, [r7, #16]
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	4293      	cmp	r3, r2
 80112ee:	bf28      	it	cs
 80112f0:	4613      	movcs	r3, r2
 80112f2:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	2bff      	cmp	r3, #255	@ 0xff
 80112f8:	d906      	bls.n	8011308 <dhcp_option_hostname+0x6c>
 80112fa:	4b13      	ldr	r3, [pc, #76]	@ (8011348 <dhcp_option_hostname+0xac>)
 80112fc:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8011300:	4912      	ldr	r1, [pc, #72]	@ (801134c <dhcp_option_hostname+0xb0>)
 8011302:	4813      	ldr	r0, [pc, #76]	@ (8011350 <dhcp_option_hostname+0xb4>)
 8011304:	f7ef fc62 	bl	8000bcc <printf>
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	b2db      	uxtb	r3, r3
 801130c:	89f8      	ldrh	r0, [r7, #14]
 801130e:	220c      	movs	r2, #12
 8011310:	68b9      	ldr	r1, [r7, #8]
 8011312:	f7ff fef3 	bl	80110fc <dhcp_option>
 8011316:	4603      	mov	r3, r0
 8011318:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 801131a:	e00a      	b.n	8011332 <dhcp_option_hostname+0x96>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	1c5a      	adds	r2, r3, #1
 8011320:	61ba      	str	r2, [r7, #24]
 8011322:	781a      	ldrb	r2, [r3, #0]
 8011324:	89fb      	ldrh	r3, [r7, #14]
 8011326:	68b9      	ldr	r1, [r7, #8]
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff ff1b 	bl	8011164 <dhcp_option_byte>
 801132e:	4603      	mov	r3, r0
 8011330:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	1e5a      	subs	r2, r3, #1
 8011336:	61fa      	str	r2, [r7, #28]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1ef      	bne.n	801131c <dhcp_option_hostname+0x80>
      }
    }
  }
  return options_out_len;
 801133c:	89fb      	ldrh	r3, [r7, #14]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3720      	adds	r7, #32
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	08017b5c 	.word	0x08017b5c
 801134c:	08017de0 	.word	0x08017de0
 8011350:	08017bb8 	.word	0x08017bb8

08011354 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b092      	sub	sp, #72	@ 0x48
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  u16_t offset_max;
  u16_t options_offset;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801135e:	2300      	movs	r3, #0
 8011360:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011366:	2208      	movs	r2, #8
 8011368:	2100      	movs	r1, #0
 801136a:	48b7      	ldr	r0, [pc, #732]	@ (8011648 <dhcp_parse_reply+0x2f4>)
 801136c:	f003 fa55 	bl	801481a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	2b2b      	cmp	r3, #43	@ 0x2b
 8011376:	d802      	bhi.n	801137e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011378:	f06f 0301 	mvn.w	r3, #1
 801137c:	e259      	b.n	8011832 <dhcp_parse_reply+0x4de>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011384:	23f0      	movs	r3, #240	@ 0xf0
 8011386:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	891b      	ldrh	r3, [r3, #8]
 801138c:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	637b      	str	r3, [r7, #52]	@ 0x34
  options_offset = options_idx;
 8011392:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011394:	837b      	strh	r3, [r7, #26]
  while ((q != NULL) && (options_idx >= q->len)) {
 8011396:	e00c      	b.n	80113b2 <dhcp_parse_reply+0x5e>
    options_idx = (u16_t)(options_idx - q->len);
 8011398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801139a:	895b      	ldrh	r3, [r3, #10]
 801139c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80113a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113a4:	895b      	ldrh	r3, [r3, #10]
 80113a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80113a8:	1ad3      	subs	r3, r2, r3
 80113aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 80113ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 80113b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d004      	beq.n	80113c2 <dhcp_parse_reply+0x6e>
 80113b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ba:	895b      	ldrh	r3, [r3, #10]
 80113bc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80113be:	429a      	cmp	r2, r3
 80113c0:	d2ea      	bcs.n	8011398 <dhcp_parse_reply+0x44>
  }
  if (q == NULL) {
 80113c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d102      	bne.n	80113ce <dhcp_parse_reply+0x7a>
    return ERR_BUF;
 80113c8:	f06f 0301 	mvn.w	r3, #1
 80113cc:	e231      	b.n	8011832 <dhcp_parse_reply+0x4de>
  }
  offset = options_idx;
 80113ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80113d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 80113d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80113d6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 80113d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80113de:	e1e6      	b.n	80117ae <dhcp_parse_reply+0x45a>
    u8_t op = options[offset];
 80113e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80113e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113e6:	4413      	add	r3, r2
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	767b      	strb	r3, [r7, #25]
    u8_t len;
    u8_t decode_len = 0;
 80113ec:	2300      	movs	r3, #0
 80113ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 80113f2:	f04f 33ff 	mov.w	r3, #4294967295
 80113f6:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 80113f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80113fc:	3302      	adds	r3, #2
 80113fe:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8011400:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011406:	429a      	cmp	r2, r3
 8011408:	d202      	bcs.n	8011410 <dhcp_parse_reply+0xbc>
      /* overflow */
      return ERR_BUF;
 801140a:	f06f 0301 	mvn.w	r3, #1
 801140e:	e210      	b.n	8011832 <dhcp_parse_reply+0x4de>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011414:	3301      	adds	r3, #1
 8011416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011418:	8952      	ldrh	r2, [r2, #10]
 801141a:	4293      	cmp	r3, r2
 801141c:	da08      	bge.n	8011430 <dhcp_parse_reply+0xdc>
      len = options[offset + 1];
 801141e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011422:	3301      	adds	r3, #1
 8011424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011426:	4413      	add	r3, r2
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801142e:	e00b      	b.n	8011448 <dhcp_parse_reply+0xf4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d004      	beq.n	8011442 <dhcp_parse_reply+0xee>
 8011438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	e000      	b.n	8011444 <dhcp_parse_reply+0xf0>
 8011442:	2300      	movs	r3, #0
 8011444:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011448:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801144c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 8011450:	7e7b      	ldrb	r3, [r7, #25]
 8011452:	2b3b      	cmp	r3, #59	@ 0x3b
 8011454:	f200 80df 	bhi.w	8011616 <dhcp_parse_reply+0x2c2>
 8011458:	a201      	add	r2, pc, #4	@ (adr r2, 8011460 <dhcp_parse_reply+0x10c>)
 801145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801145e:	bf00      	nop
 8011460:	08011551 	.word	0x08011551
 8011464:	08011561 	.word	0x08011561
 8011468:	08011617 	.word	0x08011617
 801146c:	08011575 	.word	0x08011575
 8011470:	08011617 	.word	0x08011617
 8011474:	08011617 	.word	0x08011617
 8011478:	08011617 	.word	0x08011617
 801147c:	08011617 	.word	0x08011617
 8011480:	08011617 	.word	0x08011617
 8011484:	08011617 	.word	0x08011617
 8011488:	08011617 	.word	0x08011617
 801148c:	08011617 	.word	0x08011617
 8011490:	08011617 	.word	0x08011617
 8011494:	08011617 	.word	0x08011617
 8011498:	08011617 	.word	0x08011617
 801149c:	08011617 	.word	0x08011617
 80114a0:	08011617 	.word	0x08011617
 80114a4:	08011617 	.word	0x08011617
 80114a8:	08011617 	.word	0x08011617
 80114ac:	08011617 	.word	0x08011617
 80114b0:	08011617 	.word	0x08011617
 80114b4:	08011617 	.word	0x08011617
 80114b8:	08011617 	.word	0x08011617
 80114bc:	08011617 	.word	0x08011617
 80114c0:	08011617 	.word	0x08011617
 80114c4:	08011617 	.word	0x08011617
 80114c8:	08011617 	.word	0x08011617
 80114cc:	08011617 	.word	0x08011617
 80114d0:	08011617 	.word	0x08011617
 80114d4:	08011617 	.word	0x08011617
 80114d8:	08011617 	.word	0x08011617
 80114dc:	08011617 	.word	0x08011617
 80114e0:	08011617 	.word	0x08011617
 80114e4:	08011617 	.word	0x08011617
 80114e8:	08011617 	.word	0x08011617
 80114ec:	08011617 	.word	0x08011617
 80114f0:	08011617 	.word	0x08011617
 80114f4:	08011617 	.word	0x08011617
 80114f8:	08011617 	.word	0x08011617
 80114fc:	08011617 	.word	0x08011617
 8011500:	08011617 	.word	0x08011617
 8011504:	08011617 	.word	0x08011617
 8011508:	08011617 	.word	0x08011617
 801150c:	08011617 	.word	0x08011617
 8011510:	08011617 	.word	0x08011617
 8011514:	08011617 	.word	0x08011617
 8011518:	08011617 	.word	0x08011617
 801151c:	08011617 	.word	0x08011617
 8011520:	08011617 	.word	0x08011617
 8011524:	08011617 	.word	0x08011617
 8011528:	08011617 	.word	0x08011617
 801152c:	08011593 	.word	0x08011593
 8011530:	080115a7 	.word	0x080115a7
 8011534:	080115c7 	.word	0x080115c7
 8011538:	080115db 	.word	0x080115db
 801153c:	08011617 	.word	0x08011617
 8011540:	08011617 	.word	0x08011617
 8011544:	08011617 	.word	0x08011617
 8011548:	080115ef 	.word	0x080115ef
 801154c:	08011603 	.word	0x08011603
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011550:	2300      	movs	r3, #0
 8011552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801155a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 801155e:	e05e      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011560:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011564:	2b04      	cmp	r3, #4
 8011566:	d002      	beq.n	801156e <dhcp_parse_reply+0x21a>
 8011568:	f06f 0305 	mvn.w	r3, #5
 801156c:	e161      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801156e:	2306      	movs	r3, #6
 8011570:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011572:	e054      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011574:	2304      	movs	r3, #4
 8011576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801157a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801157e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011582:	429a      	cmp	r2, r3
 8011584:	d202      	bcs.n	801158c <dhcp_parse_reply+0x238>
 8011586:	f06f 0305 	mvn.w	r3, #5
 801158a:	e152      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801158c:	2307      	movs	r3, #7
 801158e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011590:	e045      	b.n	801161e <dhcp_parse_reply+0x2ca>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011592:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011596:	2b04      	cmp	r3, #4
 8011598:	d002      	beq.n	80115a0 <dhcp_parse_reply+0x24c>
 801159a:	f06f 0305 	mvn.w	r3, #5
 801159e:	e148      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80115a0:	2303      	movs	r3, #3
 80115a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80115a4:	e03b      	b.n	801161e <dhcp_parse_reply+0x2ca>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 80115a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d002      	beq.n	80115b4 <dhcp_parse_reply+0x260>
 80115ae:	f06f 0305 	mvn.w	r3, #5
 80115b2:	e13e      	b.n	8011832 <dhcp_parse_reply+0x4de>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_DHCP_INPUT_ERROR("overload in file/sname", options_offset == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80115b4:	8b7b      	ldrh	r3, [r7, #26]
 80115b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80115b8:	d002      	beq.n	80115c0 <dhcp_parse_reply+0x26c>
 80115ba:	f06f 0305 	mvn.w	r3, #5
 80115be:	e138      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80115c0:	2300      	movs	r3, #0
 80115c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80115c4:	e02b      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 80115c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d002      	beq.n	80115d4 <dhcp_parse_reply+0x280>
 80115ce:	f06f 0305 	mvn.w	r3, #5
 80115d2:	e12e      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80115d4:	2301      	movs	r3, #1
 80115d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80115d8:	e021      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 80115da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115de:	2b04      	cmp	r3, #4
 80115e0:	d002      	beq.n	80115e8 <dhcp_parse_reply+0x294>
 80115e2:	f06f 0305 	mvn.w	r3, #5
 80115e6:	e124      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80115e8:	2302      	movs	r3, #2
 80115ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80115ec:	e017      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_T1):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 80115ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115f2:	2b04      	cmp	r3, #4
 80115f4:	d002      	beq.n	80115fc <dhcp_parse_reply+0x2a8>
 80115f6:	f06f 0305 	mvn.w	r3, #5
 80115fa:	e11a      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_T1;
 80115fc:	2304      	movs	r3, #4
 80115fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011600:	e00d      	b.n	801161e <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_T2):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011602:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011606:	2b04      	cmp	r3, #4
 8011608:	d002      	beq.n	8011610 <dhcp_parse_reply+0x2bc>
 801160a:	f06f 0305 	mvn.w	r3, #5
 801160e:	e110      	b.n	8011832 <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011610:	2305      	movs	r3, #5
 8011612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011614:	e003      	b.n	801161e <dhcp_parse_reply+0x2ca>
      default:
        decode_len = 0;
 8011616:	2300      	movs	r3, #0
 8011618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801161c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801161e:	7e7b      	ldrb	r3, [r7, #25]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d105      	bne.n	8011630 <dhcp_parse_reply+0x2dc>
      offset++;
 8011624:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011628:	3301      	adds	r3, #1
 801162a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801162e:	e097      	b.n	8011760 <dhcp_parse_reply+0x40c>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011630:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011634:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011638:	4413      	add	r3, r2
 801163a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801163e:	4293      	cmp	r3, r2
 8011640:	dd04      	ble.n	801164c <dhcp_parse_reply+0x2f8>
        /* overflow */
        return ERR_BUF;
 8011642:	f06f 0301 	mvn.w	r3, #1
 8011646:	e0f4      	b.n	8011832 <dhcp_parse_reply+0x4de>
 8011648:	2000d914 	.word	0x2000d914
      }
      offset = (u16_t)(offset + len + 2);
 801164c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011650:	b29a      	uxth	r2, r3
 8011652:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011656:	4413      	add	r3, r2
 8011658:	b29b      	uxth	r3, r3
 801165a:	3302      	adds	r3, #2
 801165c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 8011660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011664:	2b00      	cmp	r3, #0
 8011666:	d07b      	beq.n	8011760 <dhcp_parse_reply+0x40c>
        u32_t value = 0;
 8011668:	2300      	movs	r3, #0
 801166a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801166e:	2b00      	cmp	r3, #0
 8011670:	db02      	blt.n	8011678 <dhcp_parse_reply+0x324>
 8011672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011674:	2b07      	cmp	r3, #7
 8011676:	dd06      	ble.n	8011686 <dhcp_parse_reply+0x332>
 8011678:	4b70      	ldr	r3, [pc, #448]	@ (801183c <dhcp_parse_reply+0x4e8>)
 801167a:	f240 6279 	movw	r2, #1657	@ 0x679
 801167e:	4970      	ldr	r1, [pc, #448]	@ (8011840 <dhcp_parse_reply+0x4ec>)
 8011680:	4870      	ldr	r0, [pc, #448]	@ (8011844 <dhcp_parse_reply+0x4f0>)
 8011682:	f7ef faa3 	bl	8000bcc <printf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011686:	4a70      	ldr	r2, [pc, #448]	@ (8011848 <dhcp_parse_reply+0x4f4>)
 8011688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168a:	4413      	add	r3, r2
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d166      	bne.n	8011760 <dhcp_parse_reply+0x40c>
          copy_len = LWIP_MIN(decode_len, 4);
 8011692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011696:	2b04      	cmp	r3, #4
 8011698:	bf28      	it	cs
 801169a:	2304      	movcs	r3, #4
 801169c:	b2db      	uxtb	r3, r3
 801169e:	82fb      	strh	r3, [r7, #22]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80116a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116a2:	8afa      	ldrh	r2, [r7, #22]
 80116a4:	f107 010c 	add.w	r1, r7, #12
 80116a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80116aa:	f7f9 f833 	bl	800a714 <pbuf_copy_partial>
 80116ae:	4603      	mov	r3, r0
 80116b0:	461a      	mov	r2, r3
 80116b2:	8afb      	ldrh	r3, [r7, #22]
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d002      	beq.n	80116be <dhcp_parse_reply+0x36a>
            return ERR_BUF;
 80116b8:	f06f 0301 	mvn.w	r3, #1
 80116bc:	e0b9      	b.n	8011832 <dhcp_parse_reply+0x4de>
          }
          if (decode_len > 4) {
 80116be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80116c2:	2b04      	cmp	r3, #4
 80116c4:	d92c      	bls.n	8011720 <dhcp_parse_reply+0x3cc>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_DHCP_INPUT_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80116c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80116ca:	f003 0303 	and.w	r3, r3, #3
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d002      	beq.n	80116da <dhcp_parse_reply+0x386>
 80116d4:	f06f 0305 	mvn.w	r3, #5
 80116d8:	e0ab      	b.n	8011832 <dhcp_parse_reply+0x4de>
            dhcp_got_option(dhcp, decode_idx);
 80116da:	4a5b      	ldr	r2, [pc, #364]	@ (8011848 <dhcp_parse_reply+0x4f4>)
 80116dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116de:	4413      	add	r3, r2
 80116e0:	2201      	movs	r2, #1
 80116e2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f7 f9b3 	bl	8008a52 <lwip_htonl>
 80116ec:	4602      	mov	r2, r0
 80116ee:	4957      	ldr	r1, [pc, #348]	@ (801184c <dhcp_parse_reply+0x4f8>)
 80116f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80116f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80116fa:	3b04      	subs	r3, #4
 80116fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8011700:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011702:	3304      	adds	r3, #4
 8011704:	82bb      	strh	r3, [r7, #20]
            if (next_val_offset < val_offset) {
 8011706:	8aba      	ldrh	r2, [r7, #20]
 8011708:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801170a:	429a      	cmp	r2, r3
 801170c:	d202      	bcs.n	8011714 <dhcp_parse_reply+0x3c0>
              /* overflow */
              return ERR_BUF;
 801170e:	f06f 0301 	mvn.w	r3, #1
 8011712:	e08e      	b.n	8011832 <dhcp_parse_reply+0x4de>
            }
            val_offset = next_val_offset;
 8011714:	8abb      	ldrh	r3, [r7, #20]
 8011716:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 8011718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171a:	3301      	adds	r3, #1
 801171c:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 801171e:	e7a5      	b.n	801166c <dhcp_parse_reply+0x318>
          } else if (decode_len == 4) {
 8011720:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011724:	2b04      	cmp	r3, #4
 8011726:	d106      	bne.n	8011736 <dhcp_parse_reply+0x3e2>
            value = lwip_ntohl(value);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	4618      	mov	r0, r3
 801172c:	f7f7 f991 	bl	8008a52 <lwip_htonl>
 8011730:	4603      	mov	r3, r0
 8011732:	60fb      	str	r3, [r7, #12]
 8011734:	e00a      	b.n	801174c <dhcp_parse_reply+0x3f8>
          } else {
            LWIP_DHCP_INPUT_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011736:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801173a:	2b01      	cmp	r3, #1
 801173c:	d002      	beq.n	8011744 <dhcp_parse_reply+0x3f0>
 801173e:	f06f 0305 	mvn.w	r3, #5
 8011742:	e076      	b.n	8011832 <dhcp_parse_reply+0x4de>
            value = ((u8_t *)&value)[0];
 8011744:	f107 030c 	add.w	r3, r7, #12
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801174c:	4a3e      	ldr	r2, [pc, #248]	@ (8011848 <dhcp_parse_reply+0x4f4>)
 801174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011750:	4413      	add	r3, r2
 8011752:	2201      	movs	r2, #1
 8011754:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	493c      	ldr	r1, [pc, #240]	@ (801184c <dhcp_parse_reply+0x4f8>)
 801175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011762:	895b      	ldrh	r3, [r3, #10]
 8011764:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011768:	429a      	cmp	r2, r3
 801176a:	d320      	bcc.n	80117ae <dhcp_parse_reply+0x45a>
      offset = (u16_t)(offset - q->len);
 801176c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801176e:	895b      	ldrh	r3, [r3, #10]
 8011770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011774:	1ad3      	subs	r3, r2, r3
 8011776:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801177a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801177c:	895b      	ldrh	r3, [r3, #10]
 801177e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 8011784:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011788:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801178a:	429a      	cmp	r2, r3
 801178c:	d20c      	bcs.n	80117a8 <dhcp_parse_reply+0x454>
        q = q->next;
 801178e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_DHCP_INPUT_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <dhcp_parse_reply+0x44c>
 801179a:	f06f 0305 	mvn.w	r3, #5
 801179e:	e048      	b.n	8011832 <dhcp_parse_reply+0x4de>
        options = (u8_t *)q->payload;
 80117a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80117a6:	e002      	b.n	80117ae <dhcp_parse_reply+0x45a>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80117a8:	f06f 0301 	mvn.w	r3, #1
 80117ac:	e041      	b.n	8011832 <dhcp_parse_reply+0x4de>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80117ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00c      	beq.n	80117ce <dhcp_parse_reply+0x47a>
 80117b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80117b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d207      	bcs.n	80117ce <dhcp_parse_reply+0x47a>
 80117be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80117c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117c4:	4413      	add	r3, r2
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2bff      	cmp	r3, #255	@ 0xff
 80117ca:	f47f ae09 	bne.w	80113e0 <dhcp_parse_reply+0x8c>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80117ce:	4b1e      	ldr	r3, [pc, #120]	@ (8011848 <dhcp_parse_reply+0x4f4>)
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d018      	beq.n	8011808 <dhcp_parse_reply+0x4b4>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80117d6:	4b1d      	ldr	r3, [pc, #116]	@ (801184c <dhcp_parse_reply+0x4f8>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80117dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011848 <dhcp_parse_reply+0x4f4>)
 80117de:	2200      	movs	r2, #0
 80117e0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d102      	bne.n	80117ee <dhcp_parse_reply+0x49a>
      parse_file_as_options = 1;
 80117e8:	2301      	movs	r3, #1
 80117ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80117ec:	e00c      	b.n	8011808 <dhcp_parse_reply+0x4b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	d102      	bne.n	80117fa <dhcp_parse_reply+0x4a6>
      parse_sname_as_options = 1;
 80117f4:	2301      	movs	r3, #1
 80117f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80117f8:	e006      	b.n	8011808 <dhcp_parse_reply+0x4b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	2b03      	cmp	r3, #3
 80117fe:	d103      	bne.n	8011808 <dhcp_parse_reply+0x4b4>
      parse_sname_as_options = 1;
 8011800:	2301      	movs	r3, #1
 8011802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 8011804:	2301      	movs	r3, #1
 8011806:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180a:	2b00      	cmp	r3, #0
 801180c:	d006      	beq.n	801181c <dhcp_parse_reply+0x4c8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 8011812:	236c      	movs	r3, #108	@ 0x6c
 8011814:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011816:	23ec      	movs	r3, #236	@ 0xec
 8011818:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801181a:	e5b8      	b.n	801138e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801181c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801181e:	2b00      	cmp	r3, #0
 8011820:	d006      	beq.n	8011830 <dhcp_parse_reply+0x4dc>
    parse_sname_as_options = 0;
 8011822:	2300      	movs	r3, #0
 8011824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8011826:	232c      	movs	r3, #44	@ 0x2c
 8011828:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801182a:	236c      	movs	r3, #108	@ 0x6c
 801182c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 801182e:	e5ae      	b.n	801138e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3748      	adds	r7, #72	@ 0x48
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	08017b5c 	.word	0x08017b5c
 8011840:	08017dfc 	.word	0x08017dfc
 8011844:	08017bb8 	.word	0x08017bb8
 8011848:	2000d914 	.word	0x2000d914
 801184c:	2000d91c 	.word	0x2000d91c

08011850 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b08a      	sub	sp, #40	@ 0x28
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
 801185c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801185e:	4b5e      	ldr	r3, [pc, #376]	@ (80119d8 <dhcp_recv+0x188>)
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011868:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	2b00      	cmp	r3, #0
 8011874:	f000 809a 	beq.w	80119ac <dhcp_recv+0x15c>
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	791b      	ldrb	r3, [r3, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	f000 8095 	beq.w	80119ac <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	895b      	ldrh	r3, [r3, #10]
 8011886:	2b2b      	cmp	r3, #43	@ 0x2b
 8011888:	f240 8092 	bls.w	80119b0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	2b02      	cmp	r3, #2
 8011892:	f040 808f 	bne.w	80119b4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011896:	2300      	movs	r3, #0
 8011898:	74fb      	strb	r3, [r7, #19]
 801189a:	e00e      	b.n	80118ba <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801189c:	7cfb      	ldrb	r3, [r7, #19]
 801189e:	69fa      	ldr	r2, [r7, #28]
 80118a0:	4413      	add	r3, r2
 80118a2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80118a6:	7cfb      	ldrb	r3, [r7, #19]
 80118a8:	6979      	ldr	r1, [r7, #20]
 80118aa:	440b      	add	r3, r1
 80118ac:	7f1b      	ldrb	r3, [r3, #28]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	f040 8082 	bne.w	80119b8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80118b4:	7cfb      	ldrb	r3, [r7, #19]
 80118b6:	3301      	adds	r3, #1
 80118b8:	74fb      	strb	r3, [r7, #19]
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80118c0:	7cfa      	ldrb	r2, [r7, #19]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d202      	bcs.n	80118cc <dhcp_recv+0x7c>
 80118c6:	7cfb      	ldrb	r3, [r7, #19]
 80118c8:	2b05      	cmp	r3, #5
 80118ca:	d9e7      	bls.n	801189c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f7 f8be 	bl	8008a52 <lwip_htonl>
 80118d6:	4602      	mov	r2, r0
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d16d      	bne.n	80119bc <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80118e0:	69b9      	ldr	r1, [r7, #24]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7ff fd36 	bl	8011354 <dhcp_parse_reply>
 80118e8:	4603      	mov	r3, r0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d168      	bne.n	80119c0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80118ee:	4b3b      	ldr	r3, [pc, #236]	@ (80119dc <dhcp_recv+0x18c>)
 80118f0:	785b      	ldrb	r3, [r3, #1]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d066      	beq.n	80119c4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80118fc:	4b38      	ldr	r3, [pc, #224]	@ (80119e0 <dhcp_recv+0x190>)
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011904:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011908:	2b05      	cmp	r3, #5
 801190a:	d12a      	bne.n	8011962 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	795b      	ldrb	r3, [r3, #5]
 8011910:	2b01      	cmp	r3, #1
 8011912:	d112      	bne.n	801193a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8011914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011916:	69f8      	ldr	r0, [r7, #28]
 8011918:	f7fe fe26 	bl	8010568 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011922:	f003 0308 	and.w	r3, r3, #8
 8011926:	2b00      	cmp	r3, #0
 8011928:	d003      	beq.n	8011932 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801192a:	69f8      	ldr	r0, [r7, #28]
 801192c:	f7fe fb9a 	bl	8010064 <dhcp_check>
 8011930:	e04b      	b.n	80119ca <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011932:	69f8      	ldr	r0, [r7, #28]
 8011934:	f7ff f862 	bl	80109fc <dhcp_bind>
 8011938:	e047      	b.n	80119ca <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	795b      	ldrb	r3, [r3, #5]
 801193e:	2b03      	cmp	r3, #3
 8011940:	d007      	beq.n	8011952 <dhcp_recv+0x102>
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	795b      	ldrb	r3, [r3, #5]
 8011946:	2b04      	cmp	r3, #4
 8011948:	d003      	beq.n	8011952 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801194e:	2b05      	cmp	r3, #5
 8011950:	d13b      	bne.n	80119ca <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8011952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011954:	69f8      	ldr	r0, [r7, #28]
 8011956:	f7fe fe07 	bl	8010568 <dhcp_handle_ack>
      dhcp_bind(netif);
 801195a:	69f8      	ldr	r0, [r7, #28]
 801195c:	f7ff f84e 	bl	80109fc <dhcp_bind>
 8011960:	e033      	b.n	80119ca <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011962:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011966:	2b06      	cmp	r3, #6
 8011968:	d113      	bne.n	8011992 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801196e:	2b03      	cmp	r3, #3
 8011970:	d00b      	beq.n	801198a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	795b      	ldrb	r3, [r3, #5]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d007      	beq.n	801198a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801197e:	2b04      	cmp	r3, #4
 8011980:	d003      	beq.n	801198a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	795b      	ldrb	r3, [r3, #5]
 8011986:	2b05      	cmp	r3, #5
 8011988:	d103      	bne.n	8011992 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801198a:	69f8      	ldr	r0, [r7, #28]
 801198c:	f7fe fb50 	bl	8010030 <dhcp_handle_nak>
 8011990:	e01b      	b.n	80119ca <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011992:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011996:	2b02      	cmp	r3, #2
 8011998:	d116      	bne.n	80119c8 <dhcp_recv+0x178>
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	795b      	ldrb	r3, [r3, #5]
 801199e:	2b06      	cmp	r3, #6
 80119a0:	d112      	bne.n	80119c8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80119a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80119a4:	69f8      	ldr	r0, [r7, #28]
 80119a6:	f7fe fb91 	bl	80100cc <dhcp_handle_offer>
 80119aa:	e00e      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119ac:	bf00      	nop
 80119ae:	e00c      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119b0:	bf00      	nop
 80119b2:	e00a      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119b4:	bf00      	nop
 80119b6:	e008      	b.n	80119ca <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 80119b8:	bf00      	nop
 80119ba:	e006      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119bc:	bf00      	nop
 80119be:	e004      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119c0:	bf00      	nop
 80119c2:	e002      	b.n	80119ca <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80119c4:	bf00      	nop
 80119c6:	e000      	b.n	80119ca <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 80119c8:	bf00      	nop
  pbuf_free(p);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f7f8 fc70 	bl	800a2b0 <pbuf_free>
}
 80119d0:	bf00      	nop
 80119d2:	3728      	adds	r7, #40	@ 0x28
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	200054ec 	.word	0x200054ec
 80119dc:	2000d914 	.word	0x2000d914
 80119e0:	2000d91c 	.word	0x2000d91c

080119e4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b088      	sub	sp, #32
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	603b      	str	r3, [r7, #0]
 80119f0:	4613      	mov	r3, r2
 80119f2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d104      	bne.n	8011a04 <dhcp_create_msg+0x20>
 80119fa:	485b      	ldr	r0, [pc, #364]	@ (8011b68 <dhcp_create_msg+0x184>)
 80119fc:	f7ef f8e6 	bl	8000bcc <printf>
 8011a00:	2300      	movs	r3, #0
 8011a02:	e0ad      	b.n	8011b60 <dhcp_create_msg+0x17c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d104      	bne.n	8011a14 <dhcp_create_msg+0x30>
 8011a0a:	4858      	ldr	r0, [pc, #352]	@ (8011b6c <dhcp_create_msg+0x188>)
 8011a0c:	f7ef f8de 	bl	8000bcc <printf>
 8011a10:	2300      	movs	r3, #0
 8011a12:	e0a5      	b.n	8011b60 <dhcp_create_msg+0x17c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011a14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a18:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8011a1c:	2036      	movs	r0, #54	@ 0x36
 8011a1e:	f7f8 f967 	bl	8009cf0 <pbuf_alloc>
 8011a22:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011a24:	69bb      	ldr	r3, [r7, #24]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <dhcp_create_msg+0x4a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e098      	b.n	8011b60 <dhcp_create_msg+0x17c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	895b      	ldrh	r3, [r3, #10]
 8011a32:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8011a36:	d206      	bcs.n	8011a46 <dhcp_create_msg+0x62>
 8011a38:	4b4d      	ldr	r3, [pc, #308]	@ (8011b70 <dhcp_create_msg+0x18c>)
 8011a3a:	f240 7272 	movw	r2, #1906	@ 0x772
 8011a3e:	494d      	ldr	r1, [pc, #308]	@ (8011b74 <dhcp_create_msg+0x190>)
 8011a40:	484d      	ldr	r0, [pc, #308]	@ (8011b78 <dhcp_create_msg+0x194>)
 8011a42:	f7ef f8c3 	bl	8000bcc <printf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011a46:	79fb      	ldrb	r3, [r7, #7]
 8011a48:	2b03      	cmp	r3, #3
 8011a4a:	d103      	bne.n	8011a54 <dhcp_create_msg+0x70>
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	795b      	ldrb	r3, [r3, #5]
 8011a50:	2b03      	cmp	r3, #3
 8011a52:	d10d      	bne.n	8011a70 <dhcp_create_msg+0x8c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	799b      	ldrb	r3, [r3, #6]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d105      	bne.n	8011a68 <dhcp_create_msg+0x84>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011a5c:	f002 fd8a 	bl	8014574 <rand>
 8011a60:	4603      	mov	r3, r0
 8011a62:	461a      	mov	r2, r3
 8011a64:	4b45      	ldr	r3, [pc, #276]	@ (8011b7c <dhcp_create_msg+0x198>)
 8011a66:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011a68:	4b44      	ldr	r3, [pc, #272]	@ (8011b7c <dhcp_create_msg+0x198>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011a76:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	6978      	ldr	r0, [r7, #20]
 8011a7e:	f002 fecc 	bl	801481a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	2201      	movs	r2, #1
 8011a86:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f6 ffd8 	bl	8008a52 <lwip_htonl>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011aa8:	79fb      	ldrb	r3, [r7, #7]
 8011aaa:	2b08      	cmp	r3, #8
 8011aac:	d010      	beq.n	8011ad0 <dhcp_create_msg+0xec>
 8011aae:	79fb      	ldrb	r3, [r7, #7]
 8011ab0:	2b04      	cmp	r3, #4
 8011ab2:	d00d      	beq.n	8011ad0 <dhcp_create_msg+0xec>
 8011ab4:	79fb      	ldrb	r3, [r7, #7]
 8011ab6:	2b07      	cmp	r3, #7
 8011ab8:	d00a      	beq.n	8011ad0 <dhcp_create_msg+0xec>
 8011aba:	79fb      	ldrb	r3, [r7, #7]
 8011abc:	2b03      	cmp	r3, #3
 8011abe:	d10c      	bne.n	8011ada <dhcp_create_msg+0xf6>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011ac4:	2b05      	cmp	r3, #5
 8011ac6:	d003      	beq.n	8011ad0 <dhcp_create_msg+0xec>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	795b      	ldrb	r3, [r3, #5]
 8011acc:	2b04      	cmp	r3, #4
 8011ace:	d104      	bne.n	8011ada <dhcp_create_msg+0xf6>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	3304      	adds	r3, #4
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011ada:	2300      	movs	r3, #0
 8011adc:	83fb      	strh	r3, [r7, #30]
 8011ade:	e00c      	b.n	8011afa <dhcp_create_msg+0x116>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011ae0:	8bfa      	ldrh	r2, [r7, #30]
 8011ae2:	8bfb      	ldrh	r3, [r7, #30]
 8011ae4:	68f9      	ldr	r1, [r7, #12]
 8011ae6:	440a      	add	r2, r1
 8011ae8:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	4413      	add	r3, r2
 8011af0:	460a      	mov	r2, r1
 8011af2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011af4:	8bfb      	ldrh	r3, [r7, #30]
 8011af6:	3301      	adds	r3, #1
 8011af8:	83fb      	strh	r3, [r7, #30]
 8011afa:	8bfb      	ldrh	r3, [r7, #30]
 8011afc:	2b05      	cmp	r3, #5
 8011afe:	d9ef      	bls.n	8011ae0 <dhcp_create_msg+0xfc>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011b08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8011b12:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8011b16:	2200      	movs	r2, #0
 8011b18:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8011b1c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8011b20:	2200      	movs	r2, #0
 8011b22:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011b26:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011b30:	2301      	movs	r3, #1
 8011b32:	2235      	movs	r2, #53	@ 0x35
 8011b34:	2000      	movs	r0, #0
 8011b36:	f7ff fae1 	bl	80110fc <dhcp_option>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011b44:	79fa      	ldrb	r2, [r7, #7]
 8011b46:	8a7b      	ldrh	r3, [r7, #18]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff fb0b 	bl	8011164 <dhcp_option_byte>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d002      	beq.n	8011b5e <dhcp_create_msg+0x17a>
    *options_out_len = options_out_len_loc;
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	8a7a      	ldrh	r2, [r7, #18]
 8011b5c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011b5e:	69bb      	ldr	r3, [r7, #24]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3720      	adds	r7, #32
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	08017e10 	.word	0x08017e10
 8011b6c:	08017e30 	.word	0x08017e30
 8011b70:	08017b5c 	.word	0x08017b5c
 8011b74:	08017e50 	.word	0x08017e50
 8011b78:	08017bb8 	.word	0x08017bb8
 8011b7c:	20004af8 	.word	0x20004af8

08011b80 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	4603      	mov	r3, r0
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
 8011b8c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011b8e:	89fb      	ldrh	r3, [r7, #14]
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	81fa      	strh	r2, [r7, #14]
 8011b94:	461a      	mov	r2, r3
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	4413      	add	r3, r2
 8011b9a:	22ff      	movs	r2, #255	@ 0xff
 8011b9c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011b9e:	e007      	b.n	8011bb0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011ba0:	89fb      	ldrh	r3, [r7, #14]
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	81fa      	strh	r2, [r7, #14]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	4413      	add	r3, r2
 8011bac:	2200      	movs	r2, #0
 8011bae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011bb0:	89fb      	ldrh	r3, [r7, #14]
 8011bb2:	2b43      	cmp	r3, #67	@ 0x43
 8011bb4:	d904      	bls.n	8011bc0 <dhcp_option_trailer+0x40>
 8011bb6:	89fb      	ldrh	r3, [r7, #14]
 8011bb8:	f003 0303 	and.w	r3, r3, #3
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <dhcp_option_trailer+0x46>
 8011bc0:	89fb      	ldrh	r3, [r7, #14]
 8011bc2:	2b43      	cmp	r3, #67	@ 0x43
 8011bc4:	d9ec      	bls.n	8011ba0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011bc6:	89fb      	ldrh	r3, [r7, #14]
 8011bc8:	33f0      	adds	r3, #240	@ 0xf0
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	4619      	mov	r1, r3
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7f8 f9ec 	bl	8009fac <pbuf_realloc>
}
 8011bd4:	bf00      	nop
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d017      	beq.n	8011c1a <dhcp_supplied_address+0x3e>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d013      	beq.n	8011c1a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bf6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	795b      	ldrb	r3, [r3, #5]
 8011bfc:	2b0a      	cmp	r3, #10
 8011bfe:	d007      	beq.n	8011c10 <dhcp_supplied_address+0x34>
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	795b      	ldrb	r3, [r3, #5]
 8011c04:	2b05      	cmp	r3, #5
 8011c06:	d003      	beq.n	8011c10 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011c0c:	2b04      	cmp	r3, #4
 8011c0e:	d101      	bne.n	8011c14 <dhcp_supplied_address+0x38>
 8011c10:	2301      	movs	r3, #1
 8011c12:	e000      	b.n	8011c16 <dhcp_supplied_address+0x3a>
 8011c14:	2300      	movs	r3, #0
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	e000      	b.n	8011c1c <dhcp_supplied_address+0x40>
  }
  return 0;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3714      	adds	r7, #20
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b082      	sub	sp, #8
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011c30:	492b      	ldr	r1, [pc, #172]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	4613      	mov	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4413      	add	r3, r2
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	440b      	add	r3, r1
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d013      	beq.n	8011c6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011c44:	4926      	ldr	r1, [pc, #152]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	440b      	add	r3, r1
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7f8 fb2b 	bl	800a2b0 <pbuf_free>
    arp_table[i].q = NULL;
 8011c5a:	4921      	ldr	r1, [pc, #132]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	4413      	add	r3, r2
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	440b      	add	r3, r1
 8011c68:	2200      	movs	r2, #0
 8011c6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011c6c:	491c      	ldr	r1, [pc, #112]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	4613      	mov	r3, r2
 8011c72:	005b      	lsls	r3, r3, #1
 8011c74:	4413      	add	r3, r2
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	440b      	add	r3, r1
 8011c7a:	3314      	adds	r3, #20
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8011c80:	4917      	ldr	r1, [pc, #92]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	4613      	mov	r3, r2
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	4413      	add	r3, r2
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	440b      	add	r3, r1
 8011c8e:	3312      	adds	r3, #18
 8011c90:	2200      	movs	r2, #0
 8011c92:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8011c94:	4912      	ldr	r1, [pc, #72]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	4413      	add	r3, r2
 8011c9e:	00db      	lsls	r3, r3, #3
 8011ca0:	440b      	add	r3, r1
 8011ca2:	3308      	adds	r3, #8
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8011ca8:	490d      	ldr	r1, [pc, #52]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	4613      	mov	r3, r2
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	4413      	add	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	440b      	add	r3, r1
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8011cbc:	4908      	ldr	r1, [pc, #32]	@ (8011ce0 <etharp_free_entry+0xb8>)
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	4413      	add	r3, r2
 8011cc6:	00db      	lsls	r3, r3, #3
 8011cc8:	440b      	add	r3, r1
 8011cca:	3308      	adds	r3, #8
 8011ccc:	4a05      	ldr	r2, [pc, #20]	@ (8011ce4 <etharp_free_entry+0xbc>)
 8011cce:	3304      	adds	r3, #4
 8011cd0:	6810      	ldr	r0, [r2, #0]
 8011cd2:	6018      	str	r0, [r3, #0]
 8011cd4:	8892      	ldrh	r2, [r2, #4]
 8011cd6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8011cd8:	bf00      	nop
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20004afc 	.word	0x20004afc
 8011ce4:	08018704 	.word	0x08018704

08011ce8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cee:	2300      	movs	r3, #0
 8011cf0:	607b      	str	r3, [r7, #4]
 8011cf2:	e096      	b.n	8011e22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011cf4:	494f      	ldr	r1, [pc, #316]	@ (8011e34 <etharp_tmr+0x14c>)
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	4413      	add	r3, r2
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	440b      	add	r3, r1
 8011d02:	3314      	adds	r3, #20
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011d08:	78fb      	ldrb	r3, [r7, #3]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f000 8086 	beq.w	8011e1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011d10:	4948      	ldr	r1, [pc, #288]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	4613      	mov	r3, r2
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	4413      	add	r3, r2
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	440b      	add	r3, r1
 8011d1e:	3312      	adds	r3, #18
 8011d20:	881b      	ldrh	r3, [r3, #0]
 8011d22:	3301      	adds	r3, #1
 8011d24:	b298      	uxth	r0, r3
 8011d26:	4943      	ldr	r1, [pc, #268]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	005b      	lsls	r3, r3, #1
 8011d2e:	4413      	add	r3, r2
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	440b      	add	r3, r1
 8011d34:	3312      	adds	r3, #18
 8011d36:	4602      	mov	r2, r0
 8011d38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011d3a:	493e      	ldr	r1, [pc, #248]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	440b      	add	r3, r1
 8011d48:	3312      	adds	r3, #18
 8011d4a:	881b      	ldrh	r3, [r3, #0]
 8011d4c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011d50:	d215      	bcs.n	8011d7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011d52:	4938      	ldr	r1, [pc, #224]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	4613      	mov	r3, r2
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	4413      	add	r3, r2
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	440b      	add	r3, r1
 8011d60:	3314      	adds	r3, #20
 8011d62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d10e      	bne.n	8011d86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011d68:	4932      	ldr	r1, [pc, #200]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	4413      	add	r3, r2
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	440b      	add	r3, r1
 8011d76:	3312      	adds	r3, #18
 8011d78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011d7a:	2b04      	cmp	r3, #4
 8011d7c:	d903      	bls.n	8011d86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7ff ff52 	bl	8011c28 <etharp_free_entry>
 8011d84:	e04a      	b.n	8011e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011d86:	492b      	ldr	r1, [pc, #172]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	440b      	add	r3, r1
 8011d94:	3314      	adds	r3, #20
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b03      	cmp	r3, #3
 8011d9a:	d10a      	bne.n	8011db2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011d9c:	4925      	ldr	r1, [pc, #148]	@ (8011e34 <etharp_tmr+0x14c>)
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	4613      	mov	r3, r2
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	4413      	add	r3, r2
 8011da6:	00db      	lsls	r3, r3, #3
 8011da8:	440b      	add	r3, r1
 8011daa:	3314      	adds	r3, #20
 8011dac:	2204      	movs	r2, #4
 8011dae:	701a      	strb	r2, [r3, #0]
 8011db0:	e034      	b.n	8011e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011db2:	4920      	ldr	r1, [pc, #128]	@ (8011e34 <etharp_tmr+0x14c>)
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	4613      	mov	r3, r2
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	4413      	add	r3, r2
 8011dbc:	00db      	lsls	r3, r3, #3
 8011dbe:	440b      	add	r3, r1
 8011dc0:	3314      	adds	r3, #20
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	2b04      	cmp	r3, #4
 8011dc6:	d10a      	bne.n	8011dde <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011dc8:	491a      	ldr	r1, [pc, #104]	@ (8011e34 <etharp_tmr+0x14c>)
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	005b      	lsls	r3, r3, #1
 8011dd0:	4413      	add	r3, r2
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	440b      	add	r3, r1
 8011dd6:	3314      	adds	r3, #20
 8011dd8:	2202      	movs	r2, #2
 8011dda:	701a      	strb	r2, [r3, #0]
 8011ddc:	e01e      	b.n	8011e1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011dde:	4915      	ldr	r1, [pc, #84]	@ (8011e34 <etharp_tmr+0x14c>)
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	4613      	mov	r3, r2
 8011de4:	005b      	lsls	r3, r3, #1
 8011de6:	4413      	add	r3, r2
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	440b      	add	r3, r1
 8011dec:	3314      	adds	r3, #20
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d113      	bne.n	8011e1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011df4:	490f      	ldr	r1, [pc, #60]	@ (8011e34 <etharp_tmr+0x14c>)
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	005b      	lsls	r3, r3, #1
 8011dfc:	4413      	add	r3, r2
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	440b      	add	r3, r1
 8011e02:	3308      	adds	r3, #8
 8011e04:	6818      	ldr	r0, [r3, #0]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	4613      	mov	r3, r2
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	4413      	add	r3, r2
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	4a08      	ldr	r2, [pc, #32]	@ (8011e34 <etharp_tmr+0x14c>)
 8011e12:	4413      	add	r3, r2
 8011e14:	3304      	adds	r3, #4
 8011e16:	4619      	mov	r1, r3
 8011e18:	f000 fe56 	bl	8012ac8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b09      	cmp	r3, #9
 8011e26:	f77f af65 	ble.w	8011cf4 <etharp_tmr+0xc>
      }
    }
  }
}
 8011e2a:	bf00      	nop
 8011e2c:	bf00      	nop
 8011e2e:	3708      	adds	r7, #8
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	20004afc 	.word	0x20004afc

08011e38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b08a      	sub	sp, #40	@ 0x28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	460b      	mov	r3, r1
 8011e42:	607a      	str	r2, [r7, #4]
 8011e44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011e46:	230a      	movs	r3, #10
 8011e48:	843b      	strh	r3, [r7, #32]
 8011e4a:	230a      	movs	r3, #10
 8011e4c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8011e4e:	230a      	movs	r3, #10
 8011e50:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011e56:	230a      	movs	r3, #10
 8011e58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	83bb      	strh	r3, [r7, #28]
 8011e5e:	2300      	movs	r3, #0
 8011e60:	837b      	strh	r3, [r7, #26]
 8011e62:	2300      	movs	r3, #0
 8011e64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e66:	2300      	movs	r3, #0
 8011e68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011e6a:	e0ae      	b.n	8011fca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011e6c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011e70:	49a6      	ldr	r1, [pc, #664]	@ (801210c <etharp_find_entry+0x2d4>)
 8011e72:	4613      	mov	r3, r2
 8011e74:	005b      	lsls	r3, r3, #1
 8011e76:	4413      	add	r3, r2
 8011e78:	00db      	lsls	r3, r3, #3
 8011e7a:	440b      	add	r3, r1
 8011e7c:	3314      	adds	r3, #20
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011e82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011e86:	2b0a      	cmp	r3, #10
 8011e88:	d105      	bne.n	8011e96 <etharp_find_entry+0x5e>
 8011e8a:	7dfb      	ldrb	r3, [r7, #23]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d102      	bne.n	8011e96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011e90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011e92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011e94:	e095      	b.n	8011fc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 8092 	beq.w	8011fc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d009      	beq.n	8011eb8 <etharp_find_entry+0x80>
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d806      	bhi.n	8011eb8 <etharp_find_entry+0x80>
 8011eaa:	4b99      	ldr	r3, [pc, #612]	@ (8012110 <etharp_find_entry+0x2d8>)
 8011eac:	f240 1223 	movw	r2, #291	@ 0x123
 8011eb0:	4998      	ldr	r1, [pc, #608]	@ (8012114 <etharp_find_entry+0x2dc>)
 8011eb2:	4899      	ldr	r0, [pc, #612]	@ (8012118 <etharp_find_entry+0x2e0>)
 8011eb4:	f7ee fe8a 	bl	8000bcc <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d020      	beq.n	8011f00 <etharp_find_entry+0xc8>
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6819      	ldr	r1, [r3, #0]
 8011ec2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011ec6:	4891      	ldr	r0, [pc, #580]	@ (801210c <etharp_find_entry+0x2d4>)
 8011ec8:	4613      	mov	r3, r2
 8011eca:	005b      	lsls	r3, r3, #1
 8011ecc:	4413      	add	r3, r2
 8011ece:	00db      	lsls	r3, r3, #3
 8011ed0:	4403      	add	r3, r0
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	4299      	cmp	r1, r3
 8011ed8:	d112      	bne.n	8011f00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00c      	beq.n	8011efa <etharp_find_entry+0xc2>
 8011ee0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011ee4:	4989      	ldr	r1, [pc, #548]	@ (801210c <etharp_find_entry+0x2d4>)
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	005b      	lsls	r3, r3, #1
 8011eea:	4413      	add	r3, r2
 8011eec:	00db      	lsls	r3, r3, #3
 8011eee:	440b      	add	r3, r1
 8011ef0:	3308      	adds	r3, #8
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d102      	bne.n	8011f00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011efa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011efe:	e100      	b.n	8012102 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d140      	bne.n	8011f88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011f06:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f0a:	4980      	ldr	r1, [pc, #512]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	005b      	lsls	r3, r3, #1
 8011f10:	4413      	add	r3, r2
 8011f12:	00db      	lsls	r3, r3, #3
 8011f14:	440b      	add	r3, r1
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d01a      	beq.n	8011f52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011f1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f20:	497a      	ldr	r1, [pc, #488]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f22:	4613      	mov	r3, r2
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	4413      	add	r3, r2
 8011f28:	00db      	lsls	r3, r3, #3
 8011f2a:	440b      	add	r3, r1
 8011f2c:	3312      	adds	r3, #18
 8011f2e:	881b      	ldrh	r3, [r3, #0]
 8011f30:	8bba      	ldrh	r2, [r7, #28]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d845      	bhi.n	8011fc2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011f36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011f3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f3e:	4973      	ldr	r1, [pc, #460]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f40:	4613      	mov	r3, r2
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	4413      	add	r3, r2
 8011f46:	00db      	lsls	r3, r3, #3
 8011f48:	440b      	add	r3, r1
 8011f4a:	3312      	adds	r3, #18
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	83bb      	strh	r3, [r7, #28]
 8011f50:	e037      	b.n	8011fc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011f52:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f56:	496d      	ldr	r1, [pc, #436]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f58:	4613      	mov	r3, r2
 8011f5a:	005b      	lsls	r3, r3, #1
 8011f5c:	4413      	add	r3, r2
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	440b      	add	r3, r1
 8011f62:	3312      	adds	r3, #18
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	8b7a      	ldrh	r2, [r7, #26]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d82a      	bhi.n	8011fc2 <etharp_find_entry+0x18a>
            old_pending = i;
 8011f6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f6e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8011f70:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f74:	4965      	ldr	r1, [pc, #404]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	440b      	add	r3, r1
 8011f80:	3312      	adds	r3, #18
 8011f82:	881b      	ldrh	r3, [r3, #0]
 8011f84:	837b      	strh	r3, [r7, #26]
 8011f86:	e01c      	b.n	8011fc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011f88:	7dfb      	ldrb	r3, [r7, #23]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d919      	bls.n	8011fc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011f8e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011f92:	495e      	ldr	r1, [pc, #376]	@ (801210c <etharp_find_entry+0x2d4>)
 8011f94:	4613      	mov	r3, r2
 8011f96:	005b      	lsls	r3, r3, #1
 8011f98:	4413      	add	r3, r2
 8011f9a:	00db      	lsls	r3, r3, #3
 8011f9c:	440b      	add	r3, r1
 8011f9e:	3312      	adds	r3, #18
 8011fa0:	881b      	ldrh	r3, [r3, #0]
 8011fa2:	8b3a      	ldrh	r2, [r7, #24]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d80c      	bhi.n	8011fc2 <etharp_find_entry+0x18a>
            old_stable = i;
 8011fa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011faa:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8011fac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8011fb0:	4956      	ldr	r1, [pc, #344]	@ (801210c <etharp_find_entry+0x2d4>)
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	4413      	add	r3, r2
 8011fb8:	00db      	lsls	r3, r3, #3
 8011fba:	440b      	add	r3, r1
 8011fbc:	3312      	adds	r3, #18
 8011fbe:	881b      	ldrh	r3, [r3, #0]
 8011fc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011fc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011fca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011fce:	2b09      	cmp	r3, #9
 8011fd0:	f77f af4c 	ble.w	8011e6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011fd4:	7afb      	ldrb	r3, [r7, #11]
 8011fd6:	f003 0302 	and.w	r3, r3, #2
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d108      	bne.n	8011ff0 <etharp_find_entry+0x1b8>
 8011fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011fe2:	2b0a      	cmp	r3, #10
 8011fe4:	d107      	bne.n	8011ff6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	f003 0301 	and.w	r3, r3, #1
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d102      	bne.n	8011ff6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff4:	e085      	b.n	8012102 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011ff6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011ffa:	2b09      	cmp	r3, #9
 8011ffc:	dc02      	bgt.n	8012004 <etharp_find_entry+0x1cc>
    i = empty;
 8011ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012000:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012002:	e039      	b.n	8012078 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012004:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012008:	2b09      	cmp	r3, #9
 801200a:	dc14      	bgt.n	8012036 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801200c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801200e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012010:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012014:	493d      	ldr	r1, [pc, #244]	@ (801210c <etharp_find_entry+0x2d4>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d018      	beq.n	8012058 <etharp_find_entry+0x220>
 8012026:	4b3a      	ldr	r3, [pc, #232]	@ (8012110 <etharp_find_entry+0x2d8>)
 8012028:	f240 126d 	movw	r2, #365	@ 0x16d
 801202c:	493b      	ldr	r1, [pc, #236]	@ (801211c <etharp_find_entry+0x2e4>)
 801202e:	483a      	ldr	r0, [pc, #232]	@ (8012118 <etharp_find_entry+0x2e0>)
 8012030:	f7ee fdcc 	bl	8000bcc <printf>
 8012034:	e010      	b.n	8012058 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012036:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801203a:	2b09      	cmp	r3, #9
 801203c:	dc02      	bgt.n	8012044 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801203e:	8c3b      	ldrh	r3, [r7, #32]
 8012040:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012042:	e009      	b.n	8012058 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012044:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012048:	2b09      	cmp	r3, #9
 801204a:	dc02      	bgt.n	8012052 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801204c:	8bfb      	ldrh	r3, [r7, #30]
 801204e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012050:	e002      	b.n	8012058 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	e054      	b.n	8012102 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012058:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801205c:	2b09      	cmp	r3, #9
 801205e:	dd06      	ble.n	801206e <etharp_find_entry+0x236>
 8012060:	4b2b      	ldr	r3, [pc, #172]	@ (8012110 <etharp_find_entry+0x2d8>)
 8012062:	f240 127f 	movw	r2, #383	@ 0x17f
 8012066:	492e      	ldr	r1, [pc, #184]	@ (8012120 <etharp_find_entry+0x2e8>)
 8012068:	482b      	ldr	r0, [pc, #172]	@ (8012118 <etharp_find_entry+0x2e0>)
 801206a:	f7ee fdaf 	bl	8000bcc <printf>
    etharp_free_entry(i);
 801206e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff fdd8 	bl	8011c28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012078:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801207c:	2b09      	cmp	r3, #9
 801207e:	dd06      	ble.n	801208e <etharp_find_entry+0x256>
 8012080:	4b23      	ldr	r3, [pc, #140]	@ (8012110 <etharp_find_entry+0x2d8>)
 8012082:	f240 1283 	movw	r2, #387	@ 0x183
 8012086:	4926      	ldr	r1, [pc, #152]	@ (8012120 <etharp_find_entry+0x2e8>)
 8012088:	4823      	ldr	r0, [pc, #140]	@ (8012118 <etharp_find_entry+0x2e0>)
 801208a:	f7ee fd9f 	bl	8000bcc <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801208e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8012092:	491e      	ldr	r1, [pc, #120]	@ (801210c <etharp_find_entry+0x2d4>)
 8012094:	4613      	mov	r3, r2
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	4413      	add	r3, r2
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	440b      	add	r3, r1
 801209e:	3314      	adds	r3, #20
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d006      	beq.n	80120b4 <etharp_find_entry+0x27c>
 80120a6:	4b1a      	ldr	r3, [pc, #104]	@ (8012110 <etharp_find_entry+0x2d8>)
 80120a8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80120ac:	491d      	ldr	r1, [pc, #116]	@ (8012124 <etharp_find_entry+0x2ec>)
 80120ae:	481a      	ldr	r0, [pc, #104]	@ (8012118 <etharp_find_entry+0x2e0>)
 80120b0:	f7ee fd8c 	bl	8000bcc <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d00b      	beq.n	80120d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80120ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	6819      	ldr	r1, [r3, #0]
 80120c2:	4812      	ldr	r0, [pc, #72]	@ (801210c <etharp_find_entry+0x2d4>)
 80120c4:	4613      	mov	r3, r2
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	4413      	add	r3, r2
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	4403      	add	r3, r0
 80120ce:	3304      	adds	r3, #4
 80120d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80120d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80120d6:	490d      	ldr	r1, [pc, #52]	@ (801210c <etharp_find_entry+0x2d4>)
 80120d8:	4613      	mov	r3, r2
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	4413      	add	r3, r2
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	440b      	add	r3, r1
 80120e2:	3312      	adds	r3, #18
 80120e4:	2200      	movs	r2, #0
 80120e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80120e8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80120ec:	4907      	ldr	r1, [pc, #28]	@ (801210c <etharp_find_entry+0x2d4>)
 80120ee:	4613      	mov	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	440b      	add	r3, r1
 80120f8:	3308      	adds	r3, #8
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80120fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8012102:	4618      	mov	r0, r3
 8012104:	3728      	adds	r7, #40	@ 0x28
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20004afc 	.word	0x20004afc
 8012110:	08017e90 	.word	0x08017e90
 8012114:	08017ec4 	.word	0x08017ec4
 8012118:	08017f04 	.word	0x08017f04
 801211c:	08017f2c 	.word	0x08017f2c
 8012120:	08017f44 	.word	0x08017f44
 8012124:	08017f58 	.word	0x08017f58

08012128 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b088      	sub	sp, #32
 801212c:	af02      	add	r7, sp, #8
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801213c:	2b06      	cmp	r3, #6
 801213e:	d006      	beq.n	801214e <etharp_update_arp_entry+0x26>
 8012140:	4b48      	ldr	r3, [pc, #288]	@ (8012264 <etharp_update_arp_entry+0x13c>)
 8012142:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012146:	4948      	ldr	r1, [pc, #288]	@ (8012268 <etharp_update_arp_entry+0x140>)
 8012148:	4848      	ldr	r0, [pc, #288]	@ (801226c <etharp_update_arp_entry+0x144>)
 801214a:	f7ee fd3f 	bl	8000bcc <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d012      	beq.n	801217a <etharp_update_arp_entry+0x52>
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00e      	beq.n	801217a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	68f9      	ldr	r1, [r7, #12]
 8012162:	4618      	mov	r0, r3
 8012164:	f001 f9ba 	bl	80134dc <ip4_addr_isbroadcast_u32>
 8012168:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801216a:	2b00      	cmp	r3, #0
 801216c:	d105      	bne.n	801217a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012176:	2be0      	cmp	r3, #224	@ 0xe0
 8012178:	d102      	bne.n	8012180 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801217a:	f06f 030f 	mvn.w	r3, #15
 801217e:	e06c      	b.n	801225a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012180:	78fb      	ldrb	r3, [r7, #3]
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	4619      	mov	r1, r3
 8012186:	68b8      	ldr	r0, [r7, #8]
 8012188:	f7ff fe56 	bl	8011e38 <etharp_find_entry>
 801218c:	4603      	mov	r3, r0
 801218e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012190:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012194:	2b00      	cmp	r3, #0
 8012196:	da02      	bge.n	801219e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012198:	8afb      	ldrh	r3, [r7, #22]
 801219a:	b25b      	sxtb	r3, r3
 801219c:	e05d      	b.n	801225a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801219e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80121a2:	4933      	ldr	r1, [pc, #204]	@ (8012270 <etharp_update_arp_entry+0x148>)
 80121a4:	4613      	mov	r3, r2
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	4413      	add	r3, r2
 80121aa:	00db      	lsls	r3, r3, #3
 80121ac:	440b      	add	r3, r1
 80121ae:	3314      	adds	r3, #20
 80121b0:	2202      	movs	r2, #2
 80121b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80121b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80121b8:	492d      	ldr	r1, [pc, #180]	@ (8012270 <etharp_update_arp_entry+0x148>)
 80121ba:	4613      	mov	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	440b      	add	r3, r1
 80121c4:	3308      	adds	r3, #8
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80121ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80121ce:	4613      	mov	r3, r2
 80121d0:	005b      	lsls	r3, r3, #1
 80121d2:	4413      	add	r3, r2
 80121d4:	00db      	lsls	r3, r3, #3
 80121d6:	3308      	adds	r3, #8
 80121d8:	4a25      	ldr	r2, [pc, #148]	@ (8012270 <etharp_update_arp_entry+0x148>)
 80121da:	4413      	add	r3, r2
 80121dc:	3304      	adds	r3, #4
 80121de:	2206      	movs	r2, #6
 80121e0:	6879      	ldr	r1, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f002 fbeb 	bl	80149be <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80121e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80121ec:	4920      	ldr	r1, [pc, #128]	@ (8012270 <etharp_update_arp_entry+0x148>)
 80121ee:	4613      	mov	r3, r2
 80121f0:	005b      	lsls	r3, r3, #1
 80121f2:	4413      	add	r3, r2
 80121f4:	00db      	lsls	r3, r3, #3
 80121f6:	440b      	add	r3, r1
 80121f8:	3312      	adds	r3, #18
 80121fa:	2200      	movs	r2, #0
 80121fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80121fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012202:	491b      	ldr	r1, [pc, #108]	@ (8012270 <etharp_update_arp_entry+0x148>)
 8012204:	4613      	mov	r3, r2
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	4413      	add	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	440b      	add	r3, r1
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d021      	beq.n	8012258 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012214:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012218:	4915      	ldr	r1, [pc, #84]	@ (8012270 <etharp_update_arp_entry+0x148>)
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	440b      	add	r3, r1
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012228:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801222c:	4910      	ldr	r1, [pc, #64]	@ (8012270 <etharp_update_arp_entry+0x148>)
 801222e:	4613      	mov	r3, r2
 8012230:	005b      	lsls	r3, r3, #1
 8012232:	4413      	add	r3, r2
 8012234:	00db      	lsls	r3, r3, #3
 8012236:	440b      	add	r3, r1
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8012242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6939      	ldr	r1, [r7, #16]
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	f002 f85f 	bl	8014310 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012252:	6938      	ldr	r0, [r7, #16]
 8012254:	f7f8 f82c 	bl	800a2b0 <pbuf_free>
  }
  return ERR_OK;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	08017e90 	.word	0x08017e90
 8012268:	08017f84 	.word	0x08017f84
 801226c:	08017f04 	.word	0x08017f04
 8012270:	20004afc 	.word	0x20004afc

08012274 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012274:	b5b0      	push	{r4, r5, r7, lr}
 8012276:	b08a      	sub	sp, #40	@ 0x28
 8012278:	af04      	add	r7, sp, #16
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d103      	bne.n	801228c <etharp_input+0x18>
 8012284:	483d      	ldr	r0, [pc, #244]	@ (801237c <etharp_input+0x108>)
 8012286:	f7ee fca1 	bl	8000bcc <printf>
 801228a:	e074      	b.n	8012376 <etharp_input+0x102>

  hdr = (struct etharp_hdr *)p->payload;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	881b      	ldrh	r3, [r3, #0]
 8012296:	b29b      	uxth	r3, r3
 8012298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801229c:	d10c      	bne.n	80122b8 <etharp_input+0x44>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80122a2:	2b06      	cmp	r3, #6
 80122a4:	d108      	bne.n	80122b8 <etharp_input+0x44>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80122aa:	2b04      	cmp	r3, #4
 80122ac:	d104      	bne.n	80122b8 <etharp_input+0x44>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	885b      	ldrh	r3, [r3, #2]
 80122b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80122b4:	2b08      	cmp	r3, #8
 80122b6:	d003      	beq.n	80122c0 <etharp_input+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7f7 fff9 	bl	800a2b0 <pbuf_free>
    return;
 80122be:	e05a      	b.n	8012376 <etharp_input+0x102>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	330e      	adds	r3, #14
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	3318      	adds	r3, #24
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	3304      	adds	r3, #4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <etharp_input+0x6c>
    for_us = 0;
 80122da:	2300      	movs	r3, #0
 80122dc:	74fb      	strb	r3, [r7, #19]
 80122de:	e009      	b.n	80122f4 <etharp_input+0x80>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80122e0:	68ba      	ldr	r2, [r7, #8]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	3304      	adds	r3, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	bf0c      	ite	eq
 80122ec:	2301      	moveq	r3, #1
 80122ee:	2300      	movne	r3, #0
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	f103 0208 	add.w	r2, r3, #8
 80122fa:	7cfb      	ldrb	r3, [r7, #19]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <etharp_input+0x90>
 8012300:	2301      	movs	r3, #1
 8012302:	e000      	b.n	8012306 <etharp_input+0x92>
 8012304:	2302      	movs	r3, #2
 8012306:	f107 010c 	add.w	r1, r7, #12
 801230a:	6838      	ldr	r0, [r7, #0]
 801230c:	f7ff ff0c 	bl	8012128 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	88db      	ldrh	r3, [r3, #6]
 8012314:	b29b      	uxth	r3, r3
 8012316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801231a:	d003      	beq.n	8012324 <etharp_input+0xb0>
 801231c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012320:	d01e      	beq.n	8012360 <etharp_input+0xec>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012322:	e025      	b.n	8012370 <etharp_input+0xfc>
      if (for_us) {
 8012324:	7cfb      	ldrb	r3, [r7, #19]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d021      	beq.n	801236e <etharp_input+0xfa>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012340:	697a      	ldr	r2, [r7, #20]
 8012342:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012344:	2102      	movs	r1, #2
 8012346:	9103      	str	r1, [sp, #12]
 8012348:	f107 010c 	add.w	r1, r7, #12
 801234c:	9102      	str	r1, [sp, #8]
 801234e:	9201      	str	r2, [sp, #4]
 8012350:	9300      	str	r3, [sp, #0]
 8012352:	462b      	mov	r3, r5
 8012354:	4622      	mov	r2, r4
 8012356:	4601      	mov	r1, r0
 8012358:	6838      	ldr	r0, [r7, #0]
 801235a:	f000 fb07 	bl	801296c <etharp_raw>
      break;
 801235e:	e006      	b.n	801236e <etharp_input+0xfa>
      dhcp_arp_reply(netif, &sipaddr);
 8012360:	f107 030c 	add.w	r3, r7, #12
 8012364:	4619      	mov	r1, r3
 8012366:	6838      	ldr	r0, [r7, #0]
 8012368:	f7fe fa0c 	bl	8010784 <dhcp_arp_reply>
      break;
 801236c:	e000      	b.n	8012370 <etharp_input+0xfc>
      break;
 801236e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7f7 ff9d 	bl	800a2b0 <pbuf_free>
}
 8012376:	3718      	adds	r7, #24
 8012378:	46bd      	mov	sp, r7
 801237a:	bdb0      	pop	{r4, r5, r7, pc}
 801237c:	08017fdc 	.word	0x08017fdc

08012380 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af02      	add	r7, sp, #8
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	4613      	mov	r3, r2
 801238c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801238e:	79fa      	ldrb	r2, [r7, #7]
 8012390:	4944      	ldr	r1, [pc, #272]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012392:	4613      	mov	r3, r2
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	4413      	add	r3, r2
 8012398:	00db      	lsls	r3, r3, #3
 801239a:	440b      	add	r3, r1
 801239c:	3314      	adds	r3, #20
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d806      	bhi.n	80123b2 <etharp_output_to_arp_index+0x32>
 80123a4:	4b40      	ldr	r3, [pc, #256]	@ (80124a8 <etharp_output_to_arp_index+0x128>)
 80123a6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80123aa:	4940      	ldr	r1, [pc, #256]	@ (80124ac <etharp_output_to_arp_index+0x12c>)
 80123ac:	4840      	ldr	r0, [pc, #256]	@ (80124b0 <etharp_output_to_arp_index+0x130>)
 80123ae:	f7ee fc0d 	bl	8000bcc <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80123b2:	79fa      	ldrb	r2, [r7, #7]
 80123b4:	493b      	ldr	r1, [pc, #236]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 80123b6:	4613      	mov	r3, r2
 80123b8:	005b      	lsls	r3, r3, #1
 80123ba:	4413      	add	r3, r2
 80123bc:	00db      	lsls	r3, r3, #3
 80123be:	440b      	add	r3, r1
 80123c0:	3314      	adds	r3, #20
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	2b02      	cmp	r3, #2
 80123c6:	d153      	bne.n	8012470 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80123c8:	79fa      	ldrb	r2, [r7, #7]
 80123ca:	4936      	ldr	r1, [pc, #216]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 80123cc:	4613      	mov	r3, r2
 80123ce:	005b      	lsls	r3, r3, #1
 80123d0:	4413      	add	r3, r2
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	440b      	add	r3, r1
 80123d6:	3312      	adds	r3, #18
 80123d8:	881b      	ldrh	r3, [r3, #0]
 80123da:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80123de:	d919      	bls.n	8012414 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80123e0:	79fa      	ldrb	r2, [r7, #7]
 80123e2:	4613      	mov	r3, r2
 80123e4:	005b      	lsls	r3, r3, #1
 80123e6:	4413      	add	r3, r2
 80123e8:	00db      	lsls	r3, r3, #3
 80123ea:	4a2e      	ldr	r2, [pc, #184]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 80123ec:	4413      	add	r3, r2
 80123ee:	3304      	adds	r3, #4
 80123f0:	4619      	mov	r1, r3
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f000 fb68 	bl	8012ac8 <etharp_request>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d138      	bne.n	8012470 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80123fe:	79fa      	ldrb	r2, [r7, #7]
 8012400:	4928      	ldr	r1, [pc, #160]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012402:	4613      	mov	r3, r2
 8012404:	005b      	lsls	r3, r3, #1
 8012406:	4413      	add	r3, r2
 8012408:	00db      	lsls	r3, r3, #3
 801240a:	440b      	add	r3, r1
 801240c:	3314      	adds	r3, #20
 801240e:	2203      	movs	r2, #3
 8012410:	701a      	strb	r2, [r3, #0]
 8012412:	e02d      	b.n	8012470 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012414:	79fa      	ldrb	r2, [r7, #7]
 8012416:	4923      	ldr	r1, [pc, #140]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012418:	4613      	mov	r3, r2
 801241a:	005b      	lsls	r3, r3, #1
 801241c:	4413      	add	r3, r2
 801241e:	00db      	lsls	r3, r3, #3
 8012420:	440b      	add	r3, r1
 8012422:	3312      	adds	r3, #18
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801242a:	d321      	bcc.n	8012470 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801242c:	79fa      	ldrb	r2, [r7, #7]
 801242e:	4613      	mov	r3, r2
 8012430:	005b      	lsls	r3, r3, #1
 8012432:	4413      	add	r3, r2
 8012434:	00db      	lsls	r3, r3, #3
 8012436:	4a1b      	ldr	r2, [pc, #108]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012438:	4413      	add	r3, r2
 801243a:	1d19      	adds	r1, r3, #4
 801243c:	79fa      	ldrb	r2, [r7, #7]
 801243e:	4613      	mov	r3, r2
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	4413      	add	r3, r2
 8012444:	00db      	lsls	r3, r3, #3
 8012446:	3308      	adds	r3, #8
 8012448:	4a16      	ldr	r2, [pc, #88]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 801244a:	4413      	add	r3, r2
 801244c:	3304      	adds	r3, #4
 801244e:	461a      	mov	r2, r3
 8012450:	68f8      	ldr	r0, [r7, #12]
 8012452:	f000 fb17 	bl	8012a84 <etharp_request_dst>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d109      	bne.n	8012470 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801245c:	79fa      	ldrb	r2, [r7, #7]
 801245e:	4911      	ldr	r1, [pc, #68]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012460:	4613      	mov	r3, r2
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	4413      	add	r3, r2
 8012466:	00db      	lsls	r3, r3, #3
 8012468:	440b      	add	r3, r1
 801246a:	3314      	adds	r3, #20
 801246c:	2203      	movs	r2, #3
 801246e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8012476:	79fa      	ldrb	r2, [r7, #7]
 8012478:	4613      	mov	r3, r2
 801247a:	005b      	lsls	r3, r3, #1
 801247c:	4413      	add	r3, r2
 801247e:	00db      	lsls	r3, r3, #3
 8012480:	3308      	adds	r3, #8
 8012482:	4a08      	ldr	r2, [pc, #32]	@ (80124a4 <etharp_output_to_arp_index+0x124>)
 8012484:	4413      	add	r3, r2
 8012486:	3304      	adds	r3, #4
 8012488:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801248c:	9200      	str	r2, [sp, #0]
 801248e:	460a      	mov	r2, r1
 8012490:	68b9      	ldr	r1, [r7, #8]
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f001 ff3c 	bl	8014310 <ethernet_output>
 8012498:	4603      	mov	r3, r0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20004afc 	.word	0x20004afc
 80124a8:	08017e90 	.word	0x08017e90
 80124ac:	08017ffc 	.word	0x08017ffc
 80124b0:	08017f04 	.word	0x08017f04

080124b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08a      	sub	sp, #40	@ 0x28
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <etharp_output+0x24>
 80124ca:	4b73      	ldr	r3, [pc, #460]	@ (8012698 <etharp_output+0x1e4>)
 80124cc:	f240 321e 	movw	r2, #798	@ 0x31e
 80124d0:	4972      	ldr	r1, [pc, #456]	@ (801269c <etharp_output+0x1e8>)
 80124d2:	4873      	ldr	r0, [pc, #460]	@ (80126a0 <etharp_output+0x1ec>)
 80124d4:	f7ee fb7a 	bl	8000bcc <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <etharp_output+0x38>
 80124de:	4b6e      	ldr	r3, [pc, #440]	@ (8012698 <etharp_output+0x1e4>)
 80124e0:	f240 321f 	movw	r2, #799	@ 0x31f
 80124e4:	496f      	ldr	r1, [pc, #444]	@ (80126a4 <etharp_output+0x1f0>)
 80124e6:	486e      	ldr	r0, [pc, #440]	@ (80126a0 <etharp_output+0x1ec>)
 80124e8:	f7ee fb70 	bl	8000bcc <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d106      	bne.n	8012500 <etharp_output+0x4c>
 80124f2:	4b69      	ldr	r3, [pc, #420]	@ (8012698 <etharp_output+0x1e4>)
 80124f4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80124f8:	496b      	ldr	r1, [pc, #428]	@ (80126a8 <etharp_output+0x1f4>)
 80124fa:	4869      	ldr	r0, [pc, #420]	@ (80126a0 <etharp_output+0x1ec>)
 80124fc:	f7ee fb66 	bl	8000bcc <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	68f9      	ldr	r1, [r7, #12]
 8012506:	4618      	mov	r0, r3
 8012508:	f000 ffe8 	bl	80134dc <ip4_addr_isbroadcast_u32>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d002      	beq.n	8012518 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012512:	4b66      	ldr	r3, [pc, #408]	@ (80126ac <etharp_output+0x1f8>)
 8012514:	61fb      	str	r3, [r7, #28]
 8012516:	e0af      	b.n	8012678 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012520:	2be0      	cmp	r3, #224	@ 0xe0
 8012522:	d118      	bne.n	8012556 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012524:	2301      	movs	r3, #1
 8012526:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012528:	2300      	movs	r3, #0
 801252a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801252c:	235e      	movs	r3, #94	@ 0x5e
 801252e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	3301      	adds	r3, #1
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801253a:	b2db      	uxtb	r3, r3
 801253c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	3302      	adds	r3, #2
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	3303      	adds	r3, #3
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801254e:	f107 0310 	add.w	r3, r7, #16
 8012552:	61fb      	str	r3, [r7, #28]
 8012554:	e090      	b.n	8012678 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3304      	adds	r3, #4
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	405a      	eors	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	3308      	adds	r3, #8
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	4013      	ands	r3, r2
 801256a:	2b00      	cmp	r3, #0
 801256c:	d012      	beq.n	8012594 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012574:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012578:	4293      	cmp	r3, r2
 801257a:	d00b      	beq.n	8012594 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	330c      	adds	r3, #12
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d003      	beq.n	801258e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	330c      	adds	r3, #12
 801258a:	61bb      	str	r3, [r7, #24]
 801258c:	e002      	b.n	8012594 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801258e:	f06f 0303 	mvn.w	r3, #3
 8012592:	e07d      	b.n	8012690 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012594:	4b46      	ldr	r3, [pc, #280]	@ (80126b0 <etharp_output+0x1fc>)
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	4619      	mov	r1, r3
 801259a:	4a46      	ldr	r2, [pc, #280]	@ (80126b4 <etharp_output+0x200>)
 801259c:	460b      	mov	r3, r1
 801259e:	005b      	lsls	r3, r3, #1
 80125a0:	440b      	add	r3, r1
 80125a2:	00db      	lsls	r3, r3, #3
 80125a4:	4413      	add	r3, r2
 80125a6:	3314      	adds	r3, #20
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d925      	bls.n	80125fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80125ae:	4b40      	ldr	r3, [pc, #256]	@ (80126b0 <etharp_output+0x1fc>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	4619      	mov	r1, r3
 80125b4:	4a3f      	ldr	r2, [pc, #252]	@ (80126b4 <etharp_output+0x200>)
 80125b6:	460b      	mov	r3, r1
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	440b      	add	r3, r1
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	4413      	add	r3, r2
 80125c0:	3308      	adds	r3, #8
 80125c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80125c4:	68fa      	ldr	r2, [r7, #12]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d117      	bne.n	80125fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	4b38      	ldr	r3, [pc, #224]	@ (80126b0 <etharp_output+0x1fc>)
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	4618      	mov	r0, r3
 80125d4:	4937      	ldr	r1, [pc, #220]	@ (80126b4 <etharp_output+0x200>)
 80125d6:	4603      	mov	r3, r0
 80125d8:	005b      	lsls	r3, r3, #1
 80125da:	4403      	add	r3, r0
 80125dc:	00db      	lsls	r3, r3, #3
 80125de:	440b      	add	r3, r1
 80125e0:	3304      	adds	r3, #4
 80125e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d108      	bne.n	80125fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80125e8:	4b31      	ldr	r3, [pc, #196]	@ (80126b0 <etharp_output+0x1fc>)
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	461a      	mov	r2, r3
 80125ee:	68b9      	ldr	r1, [r7, #8]
 80125f0:	68f8      	ldr	r0, [r7, #12]
 80125f2:	f7ff fec5 	bl	8012380 <etharp_output_to_arp_index>
 80125f6:	4603      	mov	r3, r0
 80125f8:	e04a      	b.n	8012690 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80125fa:	2300      	movs	r3, #0
 80125fc:	75fb      	strb	r3, [r7, #23]
 80125fe:	e031      	b.n	8012664 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012600:	7dfa      	ldrb	r2, [r7, #23]
 8012602:	492c      	ldr	r1, [pc, #176]	@ (80126b4 <etharp_output+0x200>)
 8012604:	4613      	mov	r3, r2
 8012606:	005b      	lsls	r3, r3, #1
 8012608:	4413      	add	r3, r2
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	440b      	add	r3, r1
 801260e:	3314      	adds	r3, #20
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d923      	bls.n	801265e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012616:	7dfa      	ldrb	r2, [r7, #23]
 8012618:	4926      	ldr	r1, [pc, #152]	@ (80126b4 <etharp_output+0x200>)
 801261a:	4613      	mov	r3, r2
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	4413      	add	r3, r2
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	440b      	add	r3, r1
 8012624:	3308      	adds	r3, #8
 8012626:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	429a      	cmp	r2, r3
 801262c:	d117      	bne.n	801265e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	6819      	ldr	r1, [r3, #0]
 8012632:	7dfa      	ldrb	r2, [r7, #23]
 8012634:	481f      	ldr	r0, [pc, #124]	@ (80126b4 <etharp_output+0x200>)
 8012636:	4613      	mov	r3, r2
 8012638:	005b      	lsls	r3, r3, #1
 801263a:	4413      	add	r3, r2
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	4403      	add	r3, r0
 8012640:	3304      	adds	r3, #4
 8012642:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012644:	4299      	cmp	r1, r3
 8012646:	d10a      	bne.n	801265e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012648:	4a19      	ldr	r2, [pc, #100]	@ (80126b0 <etharp_output+0x1fc>)
 801264a:	7dfb      	ldrb	r3, [r7, #23]
 801264c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801264e:	7dfb      	ldrb	r3, [r7, #23]
 8012650:	461a      	mov	r2, r3
 8012652:	68b9      	ldr	r1, [r7, #8]
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f7ff fe93 	bl	8012380 <etharp_output_to_arp_index>
 801265a:	4603      	mov	r3, r0
 801265c:	e018      	b.n	8012690 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801265e:	7dfb      	ldrb	r3, [r7, #23]
 8012660:	3301      	adds	r3, #1
 8012662:	75fb      	strb	r3, [r7, #23]
 8012664:	7dfb      	ldrb	r3, [r7, #23]
 8012666:	2b09      	cmp	r3, #9
 8012668:	d9ca      	bls.n	8012600 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	69b9      	ldr	r1, [r7, #24]
 801266e:	68f8      	ldr	r0, [r7, #12]
 8012670:	f000 f822 	bl	80126b8 <etharp_query>
 8012674:	4603      	mov	r3, r0
 8012676:	e00b      	b.n	8012690 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 801267e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f001 fe41 	bl	8014310 <ethernet_output>
 801268e:	4603      	mov	r3, r0
}
 8012690:	4618      	mov	r0, r3
 8012692:	3720      	adds	r7, #32
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	08017e90 	.word	0x08017e90
 801269c:	08017fdc 	.word	0x08017fdc
 80126a0:	08017f04 	.word	0x08017f04
 80126a4:	0801802c 	.word	0x0801802c
 80126a8:	08017fcc 	.word	0x08017fcc
 80126ac:	080186fc 	.word	0x080186fc
 80126b0:	20004bec 	.word	0x20004bec
 80126b4:	20004afc 	.word	0x20004afc

080126b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b08c      	sub	sp, #48	@ 0x30
 80126bc:	af02      	add	r7, sp, #8
 80126be:	60f8      	str	r0, [r7, #12]
 80126c0:	60b9      	str	r1, [r7, #8]
 80126c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	332e      	adds	r3, #46	@ 0x2e
 80126c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80126ca:	23ff      	movs	r3, #255	@ 0xff
 80126cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  int is_new_entry = 0;
 80126d0:	2300      	movs	r3, #0
 80126d2:	627b      	str	r3, [r7, #36]	@ 0x24
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68f9      	ldr	r1, [r7, #12]
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 fefe 	bl	80134dc <ip4_addr_isbroadcast_u32>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d10c      	bne.n	8012700 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80126ee:	2be0      	cmp	r3, #224	@ 0xe0
 80126f0:	d006      	beq.n	8012700 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d003      	beq.n	8012700 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d102      	bne.n	8012706 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012700:	f06f 030f 	mvn.w	r3, #15
 8012704:	e11d      	b.n	8012942 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012706:	68fa      	ldr	r2, [r7, #12]
 8012708:	2101      	movs	r1, #1
 801270a:	68b8      	ldr	r0, [r7, #8]
 801270c:	f7ff fb94 	bl	8011e38 <etharp_find_entry>
 8012710:	4603      	mov	r3, r0
 8012712:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012718:	2b00      	cmp	r3, #0
 801271a:	da02      	bge.n	8012722 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801271c:	8a7b      	ldrh	r3, [r7, #18]
 801271e:	b25b      	sxtb	r3, r3
 8012720:	e10f      	b.n	8012942 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012722:	8a7b      	ldrh	r3, [r7, #18]
 8012724:	2b7e      	cmp	r3, #126	@ 0x7e
 8012726:	d906      	bls.n	8012736 <etharp_query+0x7e>
 8012728:	4b88      	ldr	r3, [pc, #544]	@ (801294c <etharp_query+0x294>)
 801272a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801272e:	4988      	ldr	r1, [pc, #544]	@ (8012950 <etharp_query+0x298>)
 8012730:	4888      	ldr	r0, [pc, #544]	@ (8012954 <etharp_query+0x29c>)
 8012732:	f7ee fa4b 	bl	8000bcc <printf>
  i = (netif_addr_idx_t)i_err;
 8012736:	8a7b      	ldrh	r3, [r7, #18]
 8012738:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801273a:	7c7a      	ldrb	r2, [r7, #17]
 801273c:	4986      	ldr	r1, [pc, #536]	@ (8012958 <etharp_query+0x2a0>)
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	3314      	adds	r3, #20
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d115      	bne.n	801277c <etharp_query+0xc4>
    is_new_entry = 1;
 8012750:	2301      	movs	r3, #1
 8012752:	627b      	str	r3, [r7, #36]	@ 0x24
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012754:	7c7a      	ldrb	r2, [r7, #17]
 8012756:	4980      	ldr	r1, [pc, #512]	@ (8012958 <etharp_query+0x2a0>)
 8012758:	4613      	mov	r3, r2
 801275a:	005b      	lsls	r3, r3, #1
 801275c:	4413      	add	r3, r2
 801275e:	00db      	lsls	r3, r3, #3
 8012760:	440b      	add	r3, r1
 8012762:	3314      	adds	r3, #20
 8012764:	2201      	movs	r2, #1
 8012766:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012768:	7c7a      	ldrb	r2, [r7, #17]
 801276a:	497b      	ldr	r1, [pc, #492]	@ (8012958 <etharp_query+0x2a0>)
 801276c:	4613      	mov	r3, r2
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	4413      	add	r3, r2
 8012772:	00db      	lsls	r3, r3, #3
 8012774:	440b      	add	r3, r1
 8012776:	3308      	adds	r3, #8
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801277c:	7c7a      	ldrb	r2, [r7, #17]
 801277e:	4976      	ldr	r1, [pc, #472]	@ (8012958 <etharp_query+0x2a0>)
 8012780:	4613      	mov	r3, r2
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	4413      	add	r3, r2
 8012786:	00db      	lsls	r3, r3, #3
 8012788:	440b      	add	r3, r1
 801278a:	3314      	adds	r3, #20
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d011      	beq.n	80127b6 <etharp_query+0xfe>
 8012792:	7c7a      	ldrb	r2, [r7, #17]
 8012794:	4970      	ldr	r1, [pc, #448]	@ (8012958 <etharp_query+0x2a0>)
 8012796:	4613      	mov	r3, r2
 8012798:	005b      	lsls	r3, r3, #1
 801279a:	4413      	add	r3, r2
 801279c:	00db      	lsls	r3, r3, #3
 801279e:	440b      	add	r3, r1
 80127a0:	3314      	adds	r3, #20
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d806      	bhi.n	80127b6 <etharp_query+0xfe>
 80127a8:	4b68      	ldr	r3, [pc, #416]	@ (801294c <etharp_query+0x294>)
 80127aa:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80127ae:	496b      	ldr	r1, [pc, #428]	@ (801295c <etharp_query+0x2a4>)
 80127b0:	4868      	ldr	r0, [pc, #416]	@ (8012954 <etharp_query+0x29c>)
 80127b2:	f7ee fa0b 	bl	8000bcc <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d102      	bne.n	80127c2 <etharp_query+0x10a>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d128      	bne.n	8012814 <etharp_query+0x15c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80127c2:	68b9      	ldr	r1, [r7, #8]
 80127c4:	68f8      	ldr	r0, [r7, #12]
 80127c6:	f000 f97f 	bl	8012ac8 <etharp_request>
 80127ca:	4603      	mov	r3, r0
 80127cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (result != ERR_OK) {
 80127d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d117      	bne.n	8012808 <etharp_query+0x150>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 80127d8:	7c7a      	ldrb	r2, [r7, #17]
 80127da:	495f      	ldr	r1, [pc, #380]	@ (8012958 <etharp_query+0x2a0>)
 80127dc:	4613      	mov	r3, r2
 80127de:	005b      	lsls	r3, r3, #1
 80127e0:	4413      	add	r3, r2
 80127e2:	00db      	lsls	r3, r3, #3
 80127e4:	440b      	add	r3, r1
 80127e6:	3314      	adds	r3, #20
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d10c      	bne.n	8012808 <etharp_query+0x150>
 80127ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d109      	bne.n	8012808 <etharp_query+0x150>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 80127f4:	7c7a      	ldrb	r2, [r7, #17]
 80127f6:	4958      	ldr	r1, [pc, #352]	@ (8012958 <etharp_query+0x2a0>)
 80127f8:	4613      	mov	r3, r2
 80127fa:	005b      	lsls	r3, r3, #1
 80127fc:	4413      	add	r3, r2
 80127fe:	00db      	lsls	r3, r3, #3
 8012800:	440b      	add	r3, r1
 8012802:	3312      	adds	r3, #18
 8012804:	2200      	movs	r2, #0
 8012806:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d102      	bne.n	8012814 <etharp_query+0x15c>
      return result;
 801280e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012812:	e096      	b.n	8012942 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <etharp_query+0x170>
 801281a:	4b4c      	ldr	r3, [pc, #304]	@ (801294c <etharp_query+0x294>)
 801281c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012820:	494f      	ldr	r1, [pc, #316]	@ (8012960 <etharp_query+0x2a8>)
 8012822:	484c      	ldr	r0, [pc, #304]	@ (8012954 <etharp_query+0x29c>)
 8012824:	f7ee f9d2 	bl	8000bcc <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012828:	7c7a      	ldrb	r2, [r7, #17]
 801282a:	494b      	ldr	r1, [pc, #300]	@ (8012958 <etharp_query+0x2a0>)
 801282c:	4613      	mov	r3, r2
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	4413      	add	r3, r2
 8012832:	00db      	lsls	r3, r3, #3
 8012834:	440b      	add	r3, r1
 8012836:	3314      	adds	r3, #20
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	2b01      	cmp	r3, #1
 801283c:	d917      	bls.n	801286e <etharp_query+0x1b6>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801283e:	4a49      	ldr	r2, [pc, #292]	@ (8012964 <etharp_query+0x2ac>)
 8012840:	7c7b      	ldrb	r3, [r7, #17]
 8012842:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012844:	7c7a      	ldrb	r2, [r7, #17]
 8012846:	4613      	mov	r3, r2
 8012848:	005b      	lsls	r3, r3, #1
 801284a:	4413      	add	r3, r2
 801284c:	00db      	lsls	r3, r3, #3
 801284e:	3308      	adds	r3, #8
 8012850:	4a41      	ldr	r2, [pc, #260]	@ (8012958 <etharp_query+0x2a0>)
 8012852:	4413      	add	r3, r2
 8012854:	3304      	adds	r3, #4
 8012856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801285a:	9200      	str	r2, [sp, #0]
 801285c:	697a      	ldr	r2, [r7, #20]
 801285e:	6879      	ldr	r1, [r7, #4]
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f001 fd55 	bl	8014310 <ethernet_output>
 8012866:	4603      	mov	r3, r0
 8012868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801286c:	e067      	b.n	801293e <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801286e:	7c7a      	ldrb	r2, [r7, #17]
 8012870:	4939      	ldr	r1, [pc, #228]	@ (8012958 <etharp_query+0x2a0>)
 8012872:	4613      	mov	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	4413      	add	r3, r2
 8012878:	00db      	lsls	r3, r3, #3
 801287a:	440b      	add	r3, r1
 801287c:	3314      	adds	r3, #20
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d15c      	bne.n	801293e <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012884:	2300      	movs	r3, #0
 8012886:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801288c:	e01c      	b.n	80128c8 <etharp_query+0x210>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	895a      	ldrh	r2, [r3, #10]
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	891b      	ldrh	r3, [r3, #8]
 8012896:	429a      	cmp	r2, r3
 8012898:	d10a      	bne.n	80128b0 <etharp_query+0x1f8>
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d006      	beq.n	80128b0 <etharp_query+0x1f8>
 80128a2:	4b2a      	ldr	r3, [pc, #168]	@ (801294c <etharp_query+0x294>)
 80128a4:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 80128a8:	492f      	ldr	r1, [pc, #188]	@ (8012968 <etharp_query+0x2b0>)
 80128aa:	482a      	ldr	r0, [pc, #168]	@ (8012954 <etharp_query+0x29c>)
 80128ac:	f7ee f98e 	bl	8000bcc <printf>
      if (PBUF_NEEDS_COPY(p)) {
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	7b1b      	ldrb	r3, [r3, #12]
 80128b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <etharp_query+0x20a>
        copy_needed = 1;
 80128bc:	2301      	movs	r3, #1
 80128be:	61bb      	str	r3, [r7, #24]
        break;
 80128c0:	e005      	b.n	80128ce <etharp_query+0x216>
      }
      p = p->next;
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d1df      	bne.n	801288e <etharp_query+0x1d6>
    }
    if (copy_needed) {
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d007      	beq.n	80128e4 <etharp_query+0x22c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80128da:	200e      	movs	r0, #14
 80128dc:	f7f7 ff80 	bl	800a7e0 <pbuf_clone>
 80128e0:	61f8      	str	r0, [r7, #28]
 80128e2:	e004      	b.n	80128ee <etharp_query+0x236>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80128e8:	69f8      	ldr	r0, [r7, #28]
 80128ea:	f7f7 fd81 	bl	800a3f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d021      	beq.n	8012938 <etharp_query+0x280>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80128f4:	7c7a      	ldrb	r2, [r7, #17]
 80128f6:	4918      	ldr	r1, [pc, #96]	@ (8012958 <etharp_query+0x2a0>)
 80128f8:	4613      	mov	r3, r2
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	4413      	add	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	440b      	add	r3, r1
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d00a      	beq.n	801291e <etharp_query+0x266>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012908:	7c7a      	ldrb	r2, [r7, #17]
 801290a:	4913      	ldr	r1, [pc, #76]	@ (8012958 <etharp_query+0x2a0>)
 801290c:	4613      	mov	r3, r2
 801290e:	005b      	lsls	r3, r3, #1
 8012910:	4413      	add	r3, r2
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	440b      	add	r3, r1
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	4618      	mov	r0, r3
 801291a:	f7f7 fcc9 	bl	800a2b0 <pbuf_free>
      }
      arp_table[i].q = p;
 801291e:	7c7a      	ldrb	r2, [r7, #17]
 8012920:	490d      	ldr	r1, [pc, #52]	@ (8012958 <etharp_query+0x2a0>)
 8012922:	4613      	mov	r3, r2
 8012924:	005b      	lsls	r3, r3, #1
 8012926:	4413      	add	r3, r2
 8012928:	00db      	lsls	r3, r3, #3
 801292a:	440b      	add	r3, r1
 801292c:	69fa      	ldr	r2, [r7, #28]
 801292e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012930:	2300      	movs	r3, #0
 8012932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012936:	e002      	b.n	801293e <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012938:	23ff      	movs	r3, #255	@ 0xff
 801293a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }
  return result;
 801293e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
}
 8012942:	4618      	mov	r0, r3
 8012944:	3728      	adds	r7, #40	@ 0x28
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	08017e90 	.word	0x08017e90
 8012950:	08018038 	.word	0x08018038
 8012954:	08017f04 	.word	0x08017f04
 8012958:	20004afc 	.word	0x20004afc
 801295c:	08018048 	.word	0x08018048
 8012960:	0801802c 	.word	0x0801802c
 8012964:	20004bec 	.word	0x20004bec
 8012968:	08018070 	.word	0x08018070

0801296c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b08a      	sub	sp, #40	@ 0x28
 8012970:	af02      	add	r7, sp, #8
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
 8012978:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801297a:	2300      	movs	r3, #0
 801297c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d106      	bne.n	8012992 <etharp_raw+0x26>
 8012984:	4b3a      	ldr	r3, [pc, #232]	@ (8012a70 <etharp_raw+0x104>)
 8012986:	f240 425f 	movw	r2, #1119	@ 0x45f
 801298a:	493a      	ldr	r1, [pc, #232]	@ (8012a74 <etharp_raw+0x108>)
 801298c:	483a      	ldr	r0, [pc, #232]	@ (8012a78 <etharp_raw+0x10c>)
 801298e:	f7ee f91d 	bl	8000bcc <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012992:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012996:	211c      	movs	r1, #28
 8012998:	200e      	movs	r0, #14
 801299a:	f7f7 f9a9 	bl	8009cf0 <pbuf_alloc>
 801299e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80129a0:	69bb      	ldr	r3, [r7, #24]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d102      	bne.n	80129ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80129a6:	f04f 33ff 	mov.w	r3, #4294967295
 80129aa:	e05d      	b.n	8012a68 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80129ac:	69bb      	ldr	r3, [r7, #24]
 80129ae:	895b      	ldrh	r3, [r3, #10]
 80129b0:	2b1b      	cmp	r3, #27
 80129b2:	d806      	bhi.n	80129c2 <etharp_raw+0x56>
 80129b4:	4b2e      	ldr	r3, [pc, #184]	@ (8012a70 <etharp_raw+0x104>)
 80129b6:	f240 426a 	movw	r2, #1130	@ 0x46a
 80129ba:	4930      	ldr	r1, [pc, #192]	@ (8012a7c <etharp_raw+0x110>)
 80129bc:	482e      	ldr	r0, [pc, #184]	@ (8012a78 <etharp_raw+0x10c>)
 80129be:	f7ee f905 	bl	8000bcc <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80129c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7f6 f82c 	bl	8008a28 <lwip_htons>
 80129d0:	4603      	mov	r3, r0
 80129d2:	461a      	mov	r2, r3
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80129de:	2b06      	cmp	r3, #6
 80129e0:	d006      	beq.n	80129f0 <etharp_raw+0x84>
 80129e2:	4b23      	ldr	r3, [pc, #140]	@ (8012a70 <etharp_raw+0x104>)
 80129e4:	f240 4271 	movw	r2, #1137	@ 0x471
 80129e8:	4925      	ldr	r1, [pc, #148]	@ (8012a80 <etharp_raw+0x114>)
 80129ea:	4823      	ldr	r0, [pc, #140]	@ (8012a78 <etharp_raw+0x10c>)
 80129ec:	f7ee f8ee 	bl	8000bcc <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	3308      	adds	r3, #8
 80129f4:	2206      	movs	r2, #6
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f001 ffe0 	bl	80149be <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	3312      	adds	r3, #18
 8012a02:	2206      	movs	r2, #6
 8012a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a06:	4618      	mov	r0, r3
 8012a08:	f001 ffd9 	bl	80149be <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	330e      	adds	r3, #14
 8012a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a12:	6812      	ldr	r2, [r2, #0]
 8012a14:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	3318      	adds	r3, #24
 8012a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a1c:	6812      	ldr	r2, [r2, #0]
 8012a1e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	2200      	movs	r2, #0
 8012a24:	701a      	strb	r2, [r3, #0]
 8012a26:	2200      	movs	r2, #0
 8012a28:	f042 0201 	orr.w	r2, r2, #1
 8012a2c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f042 0208 	orr.w	r2, r2, #8
 8012a36:	709a      	strb	r2, [r3, #2]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2206      	movs	r2, #6
 8012a40:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	2204      	movs	r2, #4
 8012a46:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012a48:	f640 0306 	movw	r3, #2054	@ 0x806
 8012a4c:	9300      	str	r3, [sp, #0]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	68ba      	ldr	r2, [r7, #8]
 8012a52:	69b9      	ldr	r1, [r7, #24]
 8012a54:	68f8      	ldr	r0, [r7, #12]
 8012a56:	f001 fc5b 	bl	8014310 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012a5a:	69b8      	ldr	r0, [r7, #24]
 8012a5c:	f7f7 fc28 	bl	800a2b0 <pbuf_free>
  p = NULL;
 8012a60:	2300      	movs	r3, #0
 8012a62:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012a64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3720      	adds	r7, #32
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}
 8012a70:	08017e90 	.word	0x08017e90
 8012a74:	08017fdc 	.word	0x08017fdc
 8012a78:	08017f04 	.word	0x08017f04
 8012a7c:	0801808c 	.word	0x0801808c
 8012a80:	080180c0 	.word	0x080180c0

08012a84 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b088      	sub	sp, #32
 8012a88:	af04      	add	r7, sp, #16
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	9203      	str	r2, [sp, #12]
 8012aa4:	68ba      	ldr	r2, [r7, #8]
 8012aa6:	9202      	str	r2, [sp, #8]
 8012aa8:	4a06      	ldr	r2, [pc, #24]	@ (8012ac4 <etharp_request_dst+0x40>)
 8012aaa:	9201      	str	r2, [sp, #4]
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	4603      	mov	r3, r0
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	68f8      	ldr	r0, [r7, #12]
 8012ab4:	f7ff ff5a 	bl	801296c <etharp_raw>
 8012ab8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	08018704 	.word	0x08018704

08012ac8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012ad2:	4a05      	ldr	r2, [pc, #20]	@ (8012ae8 <etharp_request+0x20>)
 8012ad4:	6839      	ldr	r1, [r7, #0]
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff ffd4 	bl	8012a84 <etharp_request_dst>
 8012adc:	4603      	mov	r3, r0
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3708      	adds	r7, #8
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
 8012ae6:	bf00      	nop
 8012ae8:	080186fc 	.word	0x080186fc

08012aec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b08e      	sub	sp, #56	@ 0x38
 8012af0:	af04      	add	r7, sp, #16
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012af6:	4b8e      	ldr	r3, [pc, #568]	@ (8012d30 <icmp_input+0x244>)
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	f003 030f 	and.w	r3, r3, #15
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012b0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b0e:	2b13      	cmp	r3, #19
 8012b10:	f240 80f6 	bls.w	8012d00 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	895b      	ldrh	r3, [r3, #10]
 8012b18:	2b03      	cmp	r3, #3
 8012b1a:	f240 80f3 	bls.w	8012d04 <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	785b      	ldrb	r3, [r3, #1]
 8012b2e:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012b32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 80db 	beq.w	8012cf2 <icmp_input+0x206>
 8012b3c:	2b08      	cmp	r3, #8
 8012b3e:	f040 80db 	bne.w	8012cf8 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012b42:	4b7c      	ldr	r3, [pc, #496]	@ (8012d34 <icmp_input+0x248>)
 8012b44:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b46:	4b7a      	ldr	r3, [pc, #488]	@ (8012d30 <icmp_input+0x244>)
 8012b48:	695b      	ldr	r3, [r3, #20]
 8012b4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012b4e:	2be0      	cmp	r3, #224	@ 0xe0
 8012b50:	f000 80df 	beq.w	8012d12 <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012b54:	4b76      	ldr	r3, [pc, #472]	@ (8012d30 <icmp_input+0x244>)
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	4a75      	ldr	r2, [pc, #468]	@ (8012d30 <icmp_input+0x244>)
 8012b5a:	6812      	ldr	r2, [r2, #0]
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f000 fcbc 	bl	80134dc <ip4_addr_isbroadcast_u32>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f040 80d5 	bne.w	8012d16 <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	891b      	ldrh	r3, [r3, #8]
 8012b70:	2b07      	cmp	r3, #7
 8012b72:	f240 80c9 	bls.w	8012d08 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7f6 f8b0 	bl	8008cdc <inet_chksum_pbuf>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d003      	beq.n	8012b8a <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f7f7 fb94 	bl	800a2b0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012b88:	e0ce      	b.n	8012d28 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012b8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b8c:	330e      	adds	r3, #14
 8012b8e:	4619      	mov	r1, r3
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7f7 fafb 	bl	800a18c <pbuf_add_header>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d04b      	beq.n	8012c34 <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	891a      	ldrh	r2, [r3, #8]
 8012ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ba2:	4413      	add	r3, r2
 8012ba4:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	891b      	ldrh	r3, [r3, #8]
 8012baa:	8b7a      	ldrh	r2, [r7, #26]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	f0c0 80b4 	bcc.w	8012d1a <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012bb2:	8b7b      	ldrh	r3, [r7, #26]
 8012bb4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012bb8:	4619      	mov	r1, r3
 8012bba:	200e      	movs	r0, #14
 8012bbc:	f7f7 f898 	bl	8009cf0 <pbuf_alloc>
 8012bc0:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	f000 80aa 	beq.w	8012d1e <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	895b      	ldrh	r3, [r3, #10]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d203      	bcs.n	8012be0 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012bd8:	6978      	ldr	r0, [r7, #20]
 8012bda:	f7f7 fb69 	bl	800a2b0 <pbuf_free>
          goto icmperr;
 8012bde:	e09f      	b.n	8012d20 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012be6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012be8:	4618      	mov	r0, r3
 8012bea:	f001 fee8 	bl	80149be <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	6978      	ldr	r0, [r7, #20]
 8012bf4:	f7f7 fada 	bl	800a1ac <pbuf_remove_header>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d009      	beq.n	8012c12 <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8012d38 <icmp_input+0x24c>)
 8012c00:	22b6      	movs	r2, #182	@ 0xb6
 8012c02:	494e      	ldr	r1, [pc, #312]	@ (8012d3c <icmp_input+0x250>)
 8012c04:	484e      	ldr	r0, [pc, #312]	@ (8012d40 <icmp_input+0x254>)
 8012c06:	f7ed ffe1 	bl	8000bcc <printf>
          pbuf_free(r);
 8012c0a:	6978      	ldr	r0, [r7, #20]
 8012c0c:	f7f7 fb50 	bl	800a2b0 <pbuf_free>
          goto icmperr;
 8012c10:	e086      	b.n	8012d20 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012c12:	6879      	ldr	r1, [r7, #4]
 8012c14:	6978      	ldr	r0, [r7, #20]
 8012c16:	f7f7 fc6f 	bl	800a4f8 <pbuf_copy>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d003      	beq.n	8012c28 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012c20:	6978      	ldr	r0, [r7, #20]
 8012c22:	f7f7 fb45 	bl	800a2b0 <pbuf_free>
          goto icmperr;
 8012c26:	e07b      	b.n	8012d20 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7f7 fb41 	bl	800a2b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	607b      	str	r3, [r7, #4]
 8012c32:	e00f      	b.n	8012c54 <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012c34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c36:	330e      	adds	r3, #14
 8012c38:	4619      	mov	r1, r3
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f7f7 fab6 	bl	800a1ac <pbuf_remove_header>
 8012c40:	4603      	mov	r3, r0
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d006      	beq.n	8012c54 <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012c46:	4b3c      	ldr	r3, [pc, #240]	@ (8012d38 <icmp_input+0x24c>)
 8012c48:	22c7      	movs	r2, #199	@ 0xc7
 8012c4a:	493e      	ldr	r1, [pc, #248]	@ (8012d44 <icmp_input+0x258>)
 8012c4c:	483c      	ldr	r0, [pc, #240]	@ (8012d40 <icmp_input+0x254>)
 8012c4e:	f7ed ffbd 	bl	8000bcc <printf>
          goto icmperr;
 8012c52:	e065      	b.n	8012d20 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012c5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f7f7 fa94 	bl	800a18c <pbuf_add_header>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d145      	bne.n	8012cf6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	681a      	ldr	r2, [r3, #0]
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012c78:	4b2d      	ldr	r3, [pc, #180]	@ (8012d30 <icmp_input+0x244>)
 8012c7a:	691a      	ldr	r2, [r3, #16]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	2200      	movs	r2, #0
 8012c84:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d907      	bls.n	8012ca4 <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	885b      	ldrh	r3, [r3, #2]
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	3309      	adds	r3, #9
 8012c9c:	b29a      	uxth	r2, r3
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	805a      	strh	r2, [r3, #2]
 8012ca2:	e006      	b.n	8012cb2 <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	885b      	ldrh	r3, [r3, #2]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	3308      	adds	r3, #8
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	22ff      	movs	r2, #255	@ 0xff
 8012cb6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	729a      	strb	r2, [r3, #10]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8012cc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7f5 fff6 	bl	8008cb8 <inet_chksum>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	461a      	mov	r2, r3
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	9302      	str	r3, [sp, #8]
 8012cd8:	2301      	movs	r3, #1
 8012cda:	9301      	str	r3, [sp, #4]
 8012cdc:	2300      	movs	r3, #0
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	23ff      	movs	r3, #255	@ 0xff
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	69f9      	ldr	r1, [r7, #28]
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f000 faba 	bl	8013260 <ip4_output_if>
 8012cec:	4603      	mov	r3, r0
 8012cee:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012cf0:	e001      	b.n	8012cf6 <icmp_input+0x20a>
      break;
 8012cf2:	bf00      	nop
 8012cf4:	e000      	b.n	8012cf8 <icmp_input+0x20c>
      break;
 8012cf6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7f7 fad9 	bl	800a2b0 <pbuf_free>
  return;
 8012cfe:	e013      	b.n	8012d28 <icmp_input+0x23c>
    goto lenerr;
 8012d00:	bf00      	nop
 8012d02:	e002      	b.n	8012d0a <icmp_input+0x21e>
    goto lenerr;
 8012d04:	bf00      	nop
 8012d06:	e000      	b.n	8012d0a <icmp_input+0x21e>
        goto lenerr;
 8012d08:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7f7 fad0 	bl	800a2b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d10:	e00a      	b.n	8012d28 <icmp_input+0x23c>
        goto icmperr;
 8012d12:	bf00      	nop
 8012d14:	e004      	b.n	8012d20 <icmp_input+0x234>
        goto icmperr;
 8012d16:	bf00      	nop
 8012d18:	e002      	b.n	8012d20 <icmp_input+0x234>
          goto icmperr;
 8012d1a:	bf00      	nop
 8012d1c:	e000      	b.n	8012d20 <icmp_input+0x234>
          goto icmperr;
 8012d1e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7f7 fac5 	bl	800a2b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012d26:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012d28:	3728      	adds	r7, #40	@ 0x28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	200054ec 	.word	0x200054ec
 8012d34:	20005500 	.word	0x20005500
 8012d38:	08018104 	.word	0x08018104
 8012d3c:	08018138 	.word	0x08018138
 8012d40:	08018170 	.word	0x08018170
 8012d44:	08018198 	.word	0x08018198

08012d48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012d54:	78fb      	ldrb	r3, [r7, #3]
 8012d56:	461a      	mov	r2, r3
 8012d58:	2103      	movs	r1, #3
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 f814 	bl	8012d88 <icmp_send_response>
}
 8012d60:	bf00      	nop
 8012d62:	3708      	adds	r7, #8
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	460b      	mov	r3, r1
 8012d72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012d74:	78fb      	ldrb	r3, [r7, #3]
 8012d76:	461a      	mov	r2, r3
 8012d78:	210b      	movs	r1, #11
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 f804 	bl	8012d88 <icmp_send_response>
}
 8012d80:	bf00      	nop
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b08c      	sub	sp, #48	@ 0x30
 8012d8c:	af04      	add	r7, sp, #16
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
 8012d94:	4613      	mov	r3, r2
 8012d96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8012d98:	231c      	movs	r3, #28
 8012d9a:	837b      	strh	r3, [r7, #26]
  if (p->tot_len < response_pkt_len) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	891b      	ldrh	r3, [r3, #8]
 8012da0:	8b7a      	ldrh	r2, [r7, #26]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d902      	bls.n	8012dac <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	891b      	ldrh	r3, [r3, #8]
 8012daa:	837b      	strh	r3, [r7, #26]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
 8012dac:	8b7b      	ldrh	r3, [r7, #26]
 8012dae:	3308      	adds	r3, #8
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012db6:	4619      	mov	r1, r3
 8012db8:	2022      	movs	r0, #34	@ 0x22
 8012dba:	f7f6 ff99 	bl	8009cf0 <pbuf_alloc>
 8012dbe:	6178      	str	r0, [r7, #20]
  if (q == NULL) {
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d059      	beq.n	8012e7a <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	895b      	ldrh	r3, [r3, #10]
 8012dca:	461a      	mov	r2, r3
 8012dcc:	8b7b      	ldrh	r3, [r7, #26]
 8012dce:	3308      	adds	r3, #8
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d206      	bcs.n	8012de2 <icmp_send_response+0x5a>
 8012dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8012e84 <icmp_send_response+0xfc>)
 8012dd6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8012dda:	492b      	ldr	r1, [pc, #172]	@ (8012e88 <icmp_send_response+0x100>)
 8012ddc:	482b      	ldr	r0, [pc, #172]	@ (8012e8c <icmp_send_response+0x104>)
 8012dde:	f7ed fef5 	bl	8000bcc <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	613b      	str	r3, [r7, #16]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	78fa      	ldrb	r2, [r7, #3]
 8012df2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	78ba      	ldrb	r2, [r7, #2]
 8012df8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	711a      	strb	r2, [r3, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2200      	movs	r2, #0
 8012e08:	719a      	strb	r2, [r3, #6]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	f103 0008 	add.w	r0, r3, #8
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	8b7a      	ldrh	r2, [r7, #26]
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	f001 fdce 	bl	80149be <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012e28:	f107 0308 	add.w	r3, r7, #8
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f000 f82f 	bl	8012e90 <ip4_route>
 8012e32:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d01b      	beq.n	8012e72 <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	709a      	strb	r2, [r3, #2]
 8012e40:	2200      	movs	r2, #0
 8012e42:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	895b      	ldrh	r3, [r3, #10]
 8012e48:	4619      	mov	r1, r3
 8012e4a:	68f8      	ldr	r0, [r7, #12]
 8012e4c:	f7f5 ff34 	bl	8008cb8 <inet_chksum>
 8012e50:	4603      	mov	r3, r0
 8012e52:	461a      	mov	r2, r3
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012e58:	f107 0208 	add.w	r2, r7, #8
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	9302      	str	r3, [sp, #8]
 8012e60:	2301      	movs	r3, #1
 8012e62:	9301      	str	r3, [sp, #4]
 8012e64:	2300      	movs	r3, #0
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	23ff      	movs	r3, #255	@ 0xff
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	6978      	ldr	r0, [r7, #20]
 8012e6e:	f000 f9f7 	bl	8013260 <ip4_output_if>
  }
  pbuf_free(q);
 8012e72:	6978      	ldr	r0, [r7, #20]
 8012e74:	f7f7 fa1c 	bl	800a2b0 <pbuf_free>
 8012e78:	e000      	b.n	8012e7c <icmp_send_response+0xf4>
    return;
 8012e7a:	bf00      	nop
}
 8012e7c:	3720      	adds	r7, #32
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	08018104 	.word	0x08018104
 8012e88:	080181cc 	.word	0x080181cc
 8012e8c:	08018170 	.word	0x08018170

08012e90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b085      	sub	sp, #20
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012e98:	4b33      	ldr	r3, [pc, #204]	@ (8012f68 <ip4_route+0xd8>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	e036      	b.n	8012f0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012ea6:	f003 0301 	and.w	r3, r3, #1
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d02b      	beq.n	8012f08 <ip4_route+0x78>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012eb6:	089b      	lsrs	r3, r3, #2
 8012eb8:	f003 0301 	and.w	r3, r3, #1
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d022      	beq.n	8012f08 <ip4_route+0x78>
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d01d      	beq.n	8012f08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	405a      	eors	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	3308      	adds	r3, #8
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4013      	ands	r3, r2
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	e038      	b.n	8012f5a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012eee:	f003 0302 	and.w	r3, r3, #2
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d108      	bne.n	8012f08 <ip4_route+0x78>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	330c      	adds	r3, #12
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	d101      	bne.n	8012f08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	e028      	b.n	8012f5a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	60fb      	str	r3, [r7, #12]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1c5      	bne.n	8012ea0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f14:	4b15      	ldr	r3, [pc, #84]	@ (8012f6c <ip4_route+0xdc>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d01a      	beq.n	8012f52 <ip4_route+0xc2>
 8012f1c:	4b13      	ldr	r3, [pc, #76]	@ (8012f6c <ip4_route+0xdc>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012f24:	f003 0301 	and.w	r3, r3, #1
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d012      	beq.n	8012f52 <ip4_route+0xc2>
 8012f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8012f6c <ip4_route+0xdc>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012f34:	f003 0304 	and.w	r3, r3, #4
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d00a      	beq.n	8012f52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8012f6c <ip4_route+0xdc>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	3304      	adds	r3, #4
 8012f42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d004      	beq.n	8012f52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012f50:	d101      	bne.n	8012f56 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	e001      	b.n	8012f5a <ip4_route+0xca>
  }

  return netif_default;
 8012f56:	4b05      	ldr	r3, [pc, #20]	@ (8012f6c <ip4_route+0xdc>)
 8012f58:	681b      	ldr	r3, [r3, #0]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3714      	adds	r7, #20
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr
 8012f66:	bf00      	nop
 8012f68:	2000d8ec 	.word	0x2000d8ec
 8012f6c:	2000d8f0 	.word	0x2000d8f0

08012f70 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012f7e:	f003 0301 	and.w	r3, r3, #1
 8012f82:	b2db      	uxtb	r3, r3
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d016      	beq.n	8012fb6 <ip4_input_accept+0x46>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	3304      	adds	r3, #4
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d011      	beq.n	8012fb6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012f92:	4b0b      	ldr	r3, [pc, #44]	@ (8012fc0 <ip4_input_accept+0x50>)
 8012f94:	695a      	ldr	r2, [r3, #20]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	3304      	adds	r3, #4
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d008      	beq.n	8012fb2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012fa0:	4b07      	ldr	r3, [pc, #28]	@ (8012fc0 <ip4_input_accept+0x50>)
 8012fa2:	695b      	ldr	r3, [r3, #20]
 8012fa4:	6879      	ldr	r1, [r7, #4]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 fa98 	bl	80134dc <ip4_addr_isbroadcast_u32>
 8012fac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d001      	beq.n	8012fb6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	e000      	b.n	8012fb8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012fb6:	2300      	movs	r3, #0
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	200054ec 	.word	0x200054ec

08012fc4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b088      	sub	sp, #32
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012fce:	2301      	movs	r3, #1
 8012fd0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	091b      	lsrs	r3, r3, #4
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	2b04      	cmp	r3, #4
 8012fe2:	d004      	beq.n	8012fee <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7f7 f963 	bl	800a2b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012fea:	2300      	movs	r3, #0
 8012fec:	e130      	b.n	8013250 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	f003 030f 	and.w	r3, r3, #15
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	b2db      	uxtb	r3, r3
 8012ffc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	885b      	ldrh	r3, [r3, #2]
 8013002:	b29b      	uxth	r3, r3
 8013004:	4618      	mov	r0, r3
 8013006:	f7f5 fd0f 	bl	8008a28 <lwip_htons>
 801300a:	4603      	mov	r3, r0
 801300c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	891b      	ldrh	r3, [r3, #8]
 8013012:	89ba      	ldrh	r2, [r7, #12]
 8013014:	429a      	cmp	r2, r3
 8013016:	d204      	bcs.n	8013022 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013018:	89bb      	ldrh	r3, [r7, #12]
 801301a:	4619      	mov	r1, r3
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7f6 ffc5 	bl	8009fac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	895b      	ldrh	r3, [r3, #10]
 8013026:	89fa      	ldrh	r2, [r7, #14]
 8013028:	429a      	cmp	r2, r3
 801302a:	d807      	bhi.n	801303c <ip4_input+0x78>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	891b      	ldrh	r3, [r3, #8]
 8013030:	89ba      	ldrh	r2, [r7, #12]
 8013032:	429a      	cmp	r2, r3
 8013034:	d802      	bhi.n	801303c <ip4_input+0x78>
 8013036:	89fb      	ldrh	r3, [r7, #14]
 8013038:	2b13      	cmp	r3, #19
 801303a:	d804      	bhi.n	8013046 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7f7 f937 	bl	800a2b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013042:	2300      	movs	r3, #0
 8013044:	e104      	b.n	8013250 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8013046:	89fb      	ldrh	r3, [r7, #14]
 8013048:	4619      	mov	r1, r3
 801304a:	6938      	ldr	r0, [r7, #16]
 801304c:	f7f5 fe34 	bl	8008cb8 <inet_chksum>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d004      	beq.n	8013060 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7f7 f92a 	bl	800a2b0 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 801305c:	2300      	movs	r3, #0
 801305e:	e0f7      	b.n	8013250 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	691b      	ldr	r3, [r3, #16]
 8013064:	4a7c      	ldr	r2, [pc, #496]	@ (8013258 <ip4_input+0x294>)
 8013066:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	4a7a      	ldr	r2, [pc, #488]	@ (8013258 <ip4_input+0x294>)
 801306e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013070:	4b79      	ldr	r3, [pc, #484]	@ (8013258 <ip4_input+0x294>)
 8013072:	695b      	ldr	r3, [r3, #20]
 8013074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013078:	2be0      	cmp	r3, #224	@ 0xe0
 801307a:	d112      	bne.n	80130a2 <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013082:	f003 0301 	and.w	r3, r3, #1
 8013086:	b2db      	uxtb	r3, r3
 8013088:	2b00      	cmp	r3, #0
 801308a:	d007      	beq.n	801309c <ip4_input+0xd8>
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	3304      	adds	r3, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d002      	beq.n	801309c <ip4_input+0xd8>
      netif = inp;
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	61fb      	str	r3, [r7, #28]
 801309a:	e02a      	b.n	80130f2 <ip4_input+0x12e>
    } else {
      netif = NULL;
 801309c:	2300      	movs	r3, #0
 801309e:	61fb      	str	r3, [r7, #28]
 80130a0:	e027      	b.n	80130f2 <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80130a2:	6838      	ldr	r0, [r7, #0]
 80130a4:	f7ff ff64 	bl	8012f70 <ip4_input_accept>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d002      	beq.n	80130b4 <ip4_input+0xf0>
      netif = inp;
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	61fb      	str	r3, [r7, #28]
 80130b2:	e01e      	b.n	80130f2 <ip4_input+0x12e>
    } else {
      netif = NULL;
 80130b4:	2300      	movs	r3, #0
 80130b6:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80130b8:	4b67      	ldr	r3, [pc, #412]	@ (8013258 <ip4_input+0x294>)
 80130ba:	695b      	ldr	r3, [r3, #20]
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	2b7f      	cmp	r3, #127	@ 0x7f
 80130c0:	d017      	beq.n	80130f2 <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80130c2:	4b66      	ldr	r3, [pc, #408]	@ (801325c <ip4_input+0x298>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	61fb      	str	r3, [r7, #28]
 80130c8:	e00e      	b.n	80130e8 <ip4_input+0x124>
          if (netif == inp) {
 80130ca:	69fa      	ldr	r2, [r7, #28]
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d006      	beq.n	80130e0 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80130d2:	69f8      	ldr	r0, [r7, #28]
 80130d4:	f7ff ff4c 	bl	8012f70 <ip4_input_accept>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d108      	bne.n	80130f0 <ip4_input+0x12c>
 80130de:	e000      	b.n	80130e2 <ip4_input+0x11e>
            continue;
 80130e0:	bf00      	nop
        NETIF_FOREACH(netif) {
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	61fb      	str	r3, [r7, #28]
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1ed      	bne.n	80130ca <ip4_input+0x106>
 80130ee:	e000      	b.n	80130f2 <ip4_input+0x12e>
            break;
 80130f0:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d111      	bne.n	801311c <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	7a5b      	ldrb	r3, [r3, #9]
 80130fc:	2b11      	cmp	r3, #17
 80130fe:	d10d      	bne.n	801311c <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013100:	89fb      	ldrh	r3, [r7, #14]
 8013102:	693a      	ldr	r2, [r7, #16]
 8013104:	4413      	add	r3, r2
 8013106:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	885b      	ldrh	r3, [r3, #2]
 801310c:	b29b      	uxth	r3, r3
 801310e:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8013112:	d103      	bne.n	801311c <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d017      	beq.n	8013152 <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013122:	4b4d      	ldr	r3, [pc, #308]	@ (8013258 <ip4_input+0x294>)
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d013      	beq.n	8013152 <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801312a:	4b4b      	ldr	r3, [pc, #300]	@ (8013258 <ip4_input+0x294>)
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	6839      	ldr	r1, [r7, #0]
 8013130:	4618      	mov	r0, r3
 8013132:	f000 f9d3 	bl	80134dc <ip4_addr_isbroadcast_u32>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d105      	bne.n	8013148 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801313c:	4b46      	ldr	r3, [pc, #280]	@ (8013258 <ip4_input+0x294>)
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013144:	2be0      	cmp	r3, #224	@ 0xe0
 8013146:	d104      	bne.n	8013152 <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7f7 f8b1 	bl	800a2b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801314e:	2300      	movs	r3, #0
 8013150:	e07e      	b.n	8013250 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d104      	bne.n	8013162 <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7f7 f8a9 	bl	800a2b0 <pbuf_free>
    return ERR_OK;
 801315e:	2300      	movs	r3, #0
 8013160:	e076      	b.n	8013250 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	88db      	ldrh	r3, [r3, #6]
 8013166:	b29b      	uxth	r3, r3
 8013168:	461a      	mov	r2, r3
 801316a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801316e:	4013      	ands	r3, r2
 8013170:	2b00      	cmp	r3, #0
 8013172:	d00b      	beq.n	801318c <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fcf7 	bl	8013b68 <ip4_reass>
 801317a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d101      	bne.n	8013186 <ip4_input+0x1c2>
      return ERR_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	e064      	b.n	8013250 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801318c:	4a32      	ldr	r2, [pc, #200]	@ (8013258 <ip4_input+0x294>)
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013192:	4a31      	ldr	r2, [pc, #196]	@ (8013258 <ip4_input+0x294>)
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013198:	4a2f      	ldr	r2, [pc, #188]	@ (8013258 <ip4_input+0x294>)
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	f003 030f 	and.w	r3, r3, #15
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	b2db      	uxtb	r3, r3
 80131ac:	461a      	mov	r2, r3
 80131ae:	4b2a      	ldr	r3, [pc, #168]	@ (8013258 <ip4_input+0x294>)
 80131b0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80131b2:	89fb      	ldrh	r3, [r7, #14]
 80131b4:	4619      	mov	r1, r3
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f7f6 fff8 	bl	800a1ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	7a5b      	ldrb	r3, [r3, #9]
 80131c0:	2b11      	cmp	r3, #17
 80131c2:	d006      	beq.n	80131d2 <ip4_input+0x20e>
 80131c4:	2b11      	cmp	r3, #17
 80131c6:	dc13      	bgt.n	80131f0 <ip4_input+0x22c>
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d00c      	beq.n	80131e6 <ip4_input+0x222>
 80131cc:	2b06      	cmp	r3, #6
 80131ce:	d005      	beq.n	80131dc <ip4_input+0x218>
 80131d0:	e00e      	b.n	80131f0 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80131d2:	6839      	ldr	r1, [r7, #0]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7fc fab9 	bl	800f74c <udp_input>
        break;
 80131da:	e026      	b.n	801322a <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80131dc:	6839      	ldr	r1, [r7, #0]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7f8 fe34 	bl	800be4c <tcp_input>
        break;
 80131e4:	e021      	b.n	801322a <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80131e6:	6839      	ldr	r1, [r7, #0]
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff fc7f 	bl	8012aec <icmp_input>
        break;
 80131ee:	e01c      	b.n	801322a <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80131f0:	4b19      	ldr	r3, [pc, #100]	@ (8013258 <ip4_input+0x294>)
 80131f2:	695b      	ldr	r3, [r3, #20]
 80131f4:	69f9      	ldr	r1, [r7, #28]
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 f970 	bl	80134dc <ip4_addr_isbroadcast_u32>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d10f      	bne.n	8013222 <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013202:	4b15      	ldr	r3, [pc, #84]	@ (8013258 <ip4_input+0x294>)
 8013204:	695b      	ldr	r3, [r3, #20]
 8013206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801320a:	2be0      	cmp	r3, #224	@ 0xe0
 801320c:	d009      	beq.n	8013222 <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801320e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013212:	4619      	mov	r1, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7f7 f838 	bl	800a28a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801321a:	2102      	movs	r1, #2
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7ff fd93 	bl	8012d48 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f7f7 f844 	bl	800a2b0 <pbuf_free>
        break;
 8013228:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801322a:	4b0b      	ldr	r3, [pc, #44]	@ (8013258 <ip4_input+0x294>)
 801322c:	2200      	movs	r2, #0
 801322e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013230:	4b09      	ldr	r3, [pc, #36]	@ (8013258 <ip4_input+0x294>)
 8013232:	2200      	movs	r2, #0
 8013234:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013236:	4b08      	ldr	r3, [pc, #32]	@ (8013258 <ip4_input+0x294>)
 8013238:	2200      	movs	r2, #0
 801323a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801323c:	4b06      	ldr	r3, [pc, #24]	@ (8013258 <ip4_input+0x294>)
 801323e:	2200      	movs	r2, #0
 8013240:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013242:	4b05      	ldr	r3, [pc, #20]	@ (8013258 <ip4_input+0x294>)
 8013244:	2200      	movs	r2, #0
 8013246:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013248:	4b03      	ldr	r3, [pc, #12]	@ (8013258 <ip4_input+0x294>)
 801324a:	2200      	movs	r2, #0
 801324c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801324e:	2300      	movs	r3, #0
}
 8013250:	4618      	mov	r0, r3
 8013252:	3720      	adds	r7, #32
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	200054ec 	.word	0x200054ec
 801325c:	2000d8ec 	.word	0x2000d8ec

08013260 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b08a      	sub	sp, #40	@ 0x28
 8013264:	af04      	add	r7, sp, #16
 8013266:	60f8      	str	r0, [r7, #12]
 8013268:	60b9      	str	r1, [r7, #8]
 801326a:	607a      	str	r2, [r7, #4]
 801326c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d009      	beq.n	801328c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d003      	beq.n	8013286 <ip4_output_if+0x26>
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d102      	bne.n	801328c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013288:	3304      	adds	r3, #4
 801328a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801328c:	78fa      	ldrb	r2, [r7, #3]
 801328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013290:	9302      	str	r3, [sp, #8]
 8013292:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	f897 3020 	ldrb.w	r3, [r7, #32]
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	4613      	mov	r3, r2
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	6979      	ldr	r1, [r7, #20]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f000 f805 	bl	80132b4 <ip4_output_if_src>
 80132aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3718      	adds	r7, #24
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b088      	sub	sp, #32
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 80132c2:	2300      	movs	r3, #0
 80132c4:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	7b9b      	ldrb	r3, [r3, #14]
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d006      	beq.n	80132dc <ip4_output_if_src+0x28>
 80132ce:	4b7d      	ldr	r3, [pc, #500]	@ (80134c4 <ip4_output_if_src+0x210>)
 80132d0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80132d4:	497c      	ldr	r1, [pc, #496]	@ (80134c8 <ip4_output_if_src+0x214>)
 80132d6:	487d      	ldr	r0, [pc, #500]	@ (80134cc <ip4_output_if_src+0x218>)
 80132d8:	f7ed fc78 	bl	8000bcc <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f000 80c4 	beq.w	801346c <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 80132e4:	2314      	movs	r3, #20
 80132e6:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80132e8:	2114      	movs	r1, #20
 80132ea:	68f8      	ldr	r0, [r7, #12]
 80132ec:	f7f6 ff4e 	bl	800a18c <pbuf_add_header>
 80132f0:	4603      	mov	r3, r0
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80132f6:	f06f 0301 	mvn.w	r3, #1
 80132fa:	e0df      	b.n	80134bc <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	895b      	ldrh	r3, [r3, #10]
 8013306:	2b13      	cmp	r3, #19
 8013308:	d806      	bhi.n	8013318 <ip4_output_if_src+0x64>
 801330a:	4b6e      	ldr	r3, [pc, #440]	@ (80134c4 <ip4_output_if_src+0x210>)
 801330c:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013310:	496f      	ldr	r1, [pc, #444]	@ (80134d0 <ip4_output_if_src+0x21c>)
 8013312:	486e      	ldr	r0, [pc, #440]	@ (80134cc <ip4_output_if_src+0x218>)
 8013314:	f7ed fc5a 	bl	8000bcc <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	78fa      	ldrb	r2, [r7, #3]
 801331c:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013324:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8013326:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801332a:	78fb      	ldrb	r3, [r7, #3]
 801332c:	021b      	lsls	r3, r3, #8
 801332e:	4313      	orrs	r3, r2
 8013330:	021b      	lsls	r3, r3, #8
 8013332:	b21a      	sxth	r2, r3
 8013334:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8013338:	78fb      	ldrb	r3, [r7, #3]
 801333a:	021b      	lsls	r3, r3, #8
 801333c:	430b      	orrs	r3, r1
 801333e:	121b      	asrs	r3, r3, #8
 8013340:	b21b      	sxth	r3, r3
 8013342:	b2db      	uxtb	r3, r3
 8013344:	b21b      	sxth	r3, r3
 8013346:	4313      	orrs	r3, r2
 8013348:	b21b      	sxth	r3, r3
 801334a:	b29b      	uxth	r3, r3
 801334c:	461a      	mov	r2, r3
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	4413      	add	r3, r2
 8013352:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	b29b      	uxth	r3, r3
 8013362:	69fa      	ldr	r2, [r7, #28]
 8013364:	4413      	add	r3, r2
 8013366:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	0c1b      	lsrs	r3, r3, #16
 801336e:	69fa      	ldr	r2, [r7, #28]
 8013370:	4413      	add	r3, r2
 8013372:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013374:	8afb      	ldrh	r3, [r7, #22]
 8013376:	089b      	lsrs	r3, r3, #2
 8013378:	b29b      	uxth	r3, r3
 801337a:	b2db      	uxtb	r3, r3
 801337c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013380:	b2da      	uxtb	r2, r3
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801338c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801338e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	021b      	lsls	r3, r3, #8
 8013398:	4313      	orrs	r3, r2
 801339a:	021b      	lsls	r3, r3, #8
 801339c:	b21a      	sxth	r2, r3
 801339e:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	021b      	lsls	r3, r3, #8
 80133a8:	430b      	orrs	r3, r1
 80133aa:	121b      	asrs	r3, r3, #8
 80133ac:	b21b      	sxth	r3, r3
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	b21b      	sxth	r3, r3
 80133b2:	4313      	orrs	r3, r2
 80133b4:	b21b      	sxth	r3, r3
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	461a      	mov	r2, r3
 80133ba:	69fb      	ldr	r3, [r7, #28]
 80133bc:	4413      	add	r3, r2
 80133be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	891b      	ldrh	r3, [r3, #8]
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7f5 fb2f 	bl	8008a28 <lwip_htons>
 80133ca:	4603      	mov	r3, r0
 80133cc:	461a      	mov	r2, r3
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	885b      	ldrh	r3, [r3, #2]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	461a      	mov	r2, r3
 80133da:	69fb      	ldr	r3, [r7, #28]
 80133dc:	4413      	add	r3, r2
 80133de:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	2200      	movs	r2, #0
 80133e4:	719a      	strb	r2, [r3, #6]
 80133e6:	2200      	movs	r2, #0
 80133e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80133ea:	4b3a      	ldr	r3, [pc, #232]	@ (80134d4 <ip4_output_if_src+0x220>)
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7f5 fb1a 	bl	8008a28 <lwip_htons>
 80133f4:	4603      	mov	r3, r0
 80133f6:	461a      	mov	r2, r3
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	889b      	ldrh	r3, [r3, #4]
 8013400:	b29b      	uxth	r3, r3
 8013402:	461a      	mov	r2, r3
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	4413      	add	r3, r2
 8013408:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801340a:	4b32      	ldr	r3, [pc, #200]	@ (80134d4 <ip4_output_if_src+0x220>)
 801340c:	881b      	ldrh	r3, [r3, #0]
 801340e:	3301      	adds	r3, #1
 8013410:	b29a      	uxth	r2, r3
 8013412:	4b30      	ldr	r3, [pc, #192]	@ (80134d4 <ip4_output_if_src+0x220>)
 8013414:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d104      	bne.n	8013426 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801341c:	4b2e      	ldr	r3, [pc, #184]	@ (80134d8 <ip4_output_if_src+0x224>)
 801341e:	681a      	ldr	r2, [r3, #0]
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	60da      	str	r2, [r3, #12]
 8013424:	e003      	b.n	801342e <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	b29b      	uxth	r3, r3
 8013434:	69fa      	ldr	r2, [r7, #28]
 8013436:	4413      	add	r3, r2
 8013438:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	0c1b      	lsrs	r3, r3, #16
 8013440:	69fa      	ldr	r2, [r7, #28]
 8013442:	4413      	add	r3, r2
 8013444:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	0c1a      	lsrs	r2, r3, #16
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	b29b      	uxth	r3, r3
 801344e:	4413      	add	r3, r2
 8013450:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8013452:	69fb      	ldr	r3, [r7, #28]
 8013454:	0c1b      	lsrs	r3, r3, #16
 8013456:	69fa      	ldr	r2, [r7, #28]
 8013458:	4413      	add	r3, r2
 801345a:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	43db      	mvns	r3, r3
 8013460:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	b29a      	uxth	r2, r3
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	815a      	strh	r2, [r3, #10]
 801346a:	e00f      	b.n	801348c <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	895b      	ldrh	r3, [r3, #10]
 8013470:	2b13      	cmp	r3, #19
 8013472:	d802      	bhi.n	801347a <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013474:	f06f 0301 	mvn.w	r3, #1
 8013478:	e020      	b.n	80134bc <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	691b      	ldr	r3, [r3, #16]
 8013484:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8013486:	f107 0310 	add.w	r3, r7, #16
 801348a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801348c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801348e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013490:	2b00      	cmp	r3, #0
 8013492:	d00c      	beq.n	80134ae <ip4_output_if_src+0x1fa>
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	891a      	ldrh	r2, [r3, #8]
 8013498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801349c:	429a      	cmp	r2, r3
 801349e:	d906      	bls.n	80134ae <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80134a4:	68f8      	ldr	r0, [r7, #12]
 80134a6:	f000 fd5b 	bl	8013f60 <ip4_frag>
 80134aa:	4603      	mov	r3, r0
 80134ac:	e006      	b.n	80134bc <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80134ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b0:	695b      	ldr	r3, [r3, #20]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134b8:	4798      	blx	r3
 80134ba:	4603      	mov	r3, r0
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3720      	adds	r7, #32
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	080181f8 	.word	0x080181f8
 80134c8:	08018228 	.word	0x08018228
 80134cc:	08018234 	.word	0x08018234
 80134d0:	0801825c 	.word	0x0801825c
 80134d4:	20004bee 	.word	0x20004bee
 80134d8:	080186f4 	.word	0x080186f4

080134dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134f0:	d002      	beq.n	80134f8 <ip4_addr_isbroadcast_u32+0x1c>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d101      	bne.n	80134fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80134f8:	2301      	movs	r3, #1
 80134fa:	e02a      	b.n	8013552 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013502:	f003 0302 	and.w	r3, r3, #2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d101      	bne.n	801350e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801350a:	2300      	movs	r3, #0
 801350c:	e021      	b.n	8013552 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	3304      	adds	r3, #4
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	429a      	cmp	r2, r3
 8013518:	d101      	bne.n	801351e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801351a:	2300      	movs	r3, #0
 801351c:	e019      	b.n	8013552 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	3304      	adds	r3, #4
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	405a      	eors	r2, r3
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	3308      	adds	r3, #8
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4013      	ands	r3, r2
 8013530:	2b00      	cmp	r3, #0
 8013532:	d10d      	bne.n	8013550 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	3308      	adds	r3, #8
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	43da      	mvns	r2, r3
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	3308      	adds	r3, #8
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013548:	429a      	cmp	r2, r3
 801354a:	d101      	bne.n	8013550 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801354c:	2301      	movs	r3, #1
 801354e:	e000      	b.n	8013552 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013550:	2300      	movs	r3, #0
  }
}
 8013552:	4618      	mov	r0, r3
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355c:	4770      	bx	lr
	...

08013560 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b084      	sub	sp, #16
 8013564:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013566:	2300      	movs	r3, #0
 8013568:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801356a:	4b12      	ldr	r3, [pc, #72]	@ (80135b4 <ip_reass_tmr+0x54>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013570:	e018      	b.n	80135a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	7fdb      	ldrb	r3, [r3, #31]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d00b      	beq.n	8013592 <ip_reass_tmr+0x32>
      r->timer--;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	7fdb      	ldrb	r3, [r3, #31]
 801357e:	3b01      	subs	r3, #1
 8013580:	b2da      	uxtb	r2, r3
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	60fb      	str	r3, [r7, #12]
 8013590:	e008      	b.n	80135a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801359c:	68b9      	ldr	r1, [r7, #8]
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	f000 f80a 	bl	80135b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d1e3      	bne.n	8013572 <ip_reass_tmr+0x12>
    }
  }
}
 80135aa:	bf00      	nop
 80135ac:	bf00      	nop
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	20004bf0 	.word	0x20004bf0

080135b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b088      	sub	sp, #32
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d105      	bne.n	80135da <ip_reass_free_complete_datagram+0x22>
 80135ce:	4b45      	ldr	r3, [pc, #276]	@ (80136e4 <ip_reass_free_complete_datagram+0x12c>)
 80135d0:	22ab      	movs	r2, #171	@ 0xab
 80135d2:	4945      	ldr	r1, [pc, #276]	@ (80136e8 <ip_reass_free_complete_datagram+0x130>)
 80135d4:	4845      	ldr	r0, [pc, #276]	@ (80136ec <ip_reass_free_complete_datagram+0x134>)
 80135d6:	f7ed faf9 	bl	8000bcc <printf>
  if (prev != NULL) {
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d00a      	beq.n	80135f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d005      	beq.n	80135f6 <ip_reass_free_complete_datagram+0x3e>
 80135ea:	4b3e      	ldr	r3, [pc, #248]	@ (80136e4 <ip_reass_free_complete_datagram+0x12c>)
 80135ec:	22ad      	movs	r2, #173	@ 0xad
 80135ee:	4940      	ldr	r1, [pc, #256]	@ (80136f0 <ip_reass_free_complete_datagram+0x138>)
 80135f0:	483e      	ldr	r0, [pc, #248]	@ (80136ec <ip_reass_free_complete_datagram+0x134>)
 80135f2:	f7ed faeb 	bl	8000bcc <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	889b      	ldrh	r3, [r3, #4]
 8013602:	b29b      	uxth	r3, r3
 8013604:	2b00      	cmp	r3, #0
 8013606:	d12a      	bne.n	801365e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	6858      	ldr	r0, [r3, #4]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	3308      	adds	r3, #8
 801361e:	2214      	movs	r2, #20
 8013620:	4619      	mov	r1, r3
 8013622:	f001 f9cc 	bl	80149be <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013626:	2101      	movs	r1, #1
 8013628:	69b8      	ldr	r0, [r7, #24]
 801362a:	f7ff fb9d 	bl	8012d68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801362e:	69b8      	ldr	r0, [r7, #24]
 8013630:	f7f6 fec6 	bl	800a3c0 <pbuf_clen>
 8013634:	4603      	mov	r3, r0
 8013636:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013638:	8bfa      	ldrh	r2, [r7, #30]
 801363a:	8a7b      	ldrh	r3, [r7, #18]
 801363c:	4413      	add	r3, r2
 801363e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013642:	db05      	blt.n	8013650 <ip_reass_free_complete_datagram+0x98>
 8013644:	4b27      	ldr	r3, [pc, #156]	@ (80136e4 <ip_reass_free_complete_datagram+0x12c>)
 8013646:	22bc      	movs	r2, #188	@ 0xbc
 8013648:	492a      	ldr	r1, [pc, #168]	@ (80136f4 <ip_reass_free_complete_datagram+0x13c>)
 801364a:	4828      	ldr	r0, [pc, #160]	@ (80136ec <ip_reass_free_complete_datagram+0x134>)
 801364c:	f7ed fabe 	bl	8000bcc <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013650:	8bfa      	ldrh	r2, [r7, #30]
 8013652:	8a7b      	ldrh	r3, [r7, #18]
 8013654:	4413      	add	r3, r2
 8013656:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013658:	69b8      	ldr	r0, [r7, #24]
 801365a:	f7f6 fe29 	bl	800a2b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013664:	e01f      	b.n	80136a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013666:	69bb      	ldr	r3, [r7, #24]
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7f6 fea2 	bl	800a3c0 <pbuf_clen>
 801367c:	4603      	mov	r3, r0
 801367e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013680:	8bfa      	ldrh	r2, [r7, #30]
 8013682:	8a7b      	ldrh	r3, [r7, #18]
 8013684:	4413      	add	r3, r2
 8013686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801368a:	db05      	blt.n	8013698 <ip_reass_free_complete_datagram+0xe0>
 801368c:	4b15      	ldr	r3, [pc, #84]	@ (80136e4 <ip_reass_free_complete_datagram+0x12c>)
 801368e:	22cc      	movs	r2, #204	@ 0xcc
 8013690:	4918      	ldr	r1, [pc, #96]	@ (80136f4 <ip_reass_free_complete_datagram+0x13c>)
 8013692:	4816      	ldr	r0, [pc, #88]	@ (80136ec <ip_reass_free_complete_datagram+0x134>)
 8013694:	f7ed fa9a 	bl	8000bcc <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013698:	8bfa      	ldrh	r2, [r7, #30]
 801369a:	8a7b      	ldrh	r3, [r7, #18]
 801369c:	4413      	add	r3, r2
 801369e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f7f6 fe05 	bl	800a2b0 <pbuf_free>
  while (p != NULL) {
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1dc      	bne.n	8013666 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80136ac:	6839      	ldr	r1, [r7, #0]
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f8c2 	bl	8013838 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80136b4:	4b10      	ldr	r3, [pc, #64]	@ (80136f8 <ip_reass_free_complete_datagram+0x140>)
 80136b6:	881b      	ldrh	r3, [r3, #0]
 80136b8:	8bfa      	ldrh	r2, [r7, #30]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d905      	bls.n	80136ca <ip_reass_free_complete_datagram+0x112>
 80136be:	4b09      	ldr	r3, [pc, #36]	@ (80136e4 <ip_reass_free_complete_datagram+0x12c>)
 80136c0:	22d2      	movs	r2, #210	@ 0xd2
 80136c2:	490e      	ldr	r1, [pc, #56]	@ (80136fc <ip_reass_free_complete_datagram+0x144>)
 80136c4:	4809      	ldr	r0, [pc, #36]	@ (80136ec <ip_reass_free_complete_datagram+0x134>)
 80136c6:	f7ed fa81 	bl	8000bcc <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80136ca:	4b0b      	ldr	r3, [pc, #44]	@ (80136f8 <ip_reass_free_complete_datagram+0x140>)
 80136cc:	881a      	ldrh	r2, [r3, #0]
 80136ce:	8bfb      	ldrh	r3, [r7, #30]
 80136d0:	1ad3      	subs	r3, r2, r3
 80136d2:	b29a      	uxth	r2, r3
 80136d4:	4b08      	ldr	r3, [pc, #32]	@ (80136f8 <ip_reass_free_complete_datagram+0x140>)
 80136d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80136d8:	8bfb      	ldrh	r3, [r7, #30]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3720      	adds	r7, #32
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	0801828c 	.word	0x0801828c
 80136e8:	080182c4 	.word	0x080182c4
 80136ec:	080182d0 	.word	0x080182d0
 80136f0:	080182f8 	.word	0x080182f8
 80136f4:	0801830c 	.word	0x0801830c
 80136f8:	20004bf4 	.word	0x20004bf4
 80136fc:	0801832c 	.word	0x0801832c

08013700 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b08a      	sub	sp, #40	@ 0x28
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801370a:	2300      	movs	r3, #0
 801370c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801370e:	2300      	movs	r3, #0
 8013710:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013712:	2300      	movs	r3, #0
 8013714:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013716:	2300      	movs	r3, #0
 8013718:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801371a:	2300      	movs	r3, #0
 801371c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801371e:	4b28      	ldr	r3, [pc, #160]	@ (80137c0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013724:	e030      	b.n	8013788 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013728:	695a      	ldr	r2, [r3, #20]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	429a      	cmp	r2, r3
 8013730:	d10c      	bne.n	801374c <ip_reass_remove_oldest_datagram+0x4c>
 8013732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013734:	699a      	ldr	r2, [r3, #24]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	429a      	cmp	r2, r3
 801373c:	d106      	bne.n	801374c <ip_reass_remove_oldest_datagram+0x4c>
 801373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013740:	899a      	ldrh	r2, [r3, #12]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	889b      	ldrh	r3, [r3, #4]
 8013746:	b29b      	uxth	r3, r3
 8013748:	429a      	cmp	r2, r3
 801374a:	d014      	beq.n	8013776 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	3301      	adds	r3, #1
 8013750:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013752:	6a3b      	ldr	r3, [r7, #32]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d104      	bne.n	8013762 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	61bb      	str	r3, [r7, #24]
 8013760:	e009      	b.n	8013776 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013764:	7fda      	ldrb	r2, [r3, #31]
 8013766:	6a3b      	ldr	r3, [r7, #32]
 8013768:	7fdb      	ldrb	r3, [r3, #31]
 801376a:	429a      	cmp	r2, r3
 801376c:	d803      	bhi.n	8013776 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013770:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d001      	beq.n	8013782 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013780:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378a:	2b00      	cmp	r3, #0
 801378c:	d1cb      	bne.n	8013726 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801378e:	6a3b      	ldr	r3, [r7, #32]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d008      	beq.n	80137a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013794:	69b9      	ldr	r1, [r7, #24]
 8013796:	6a38      	ldr	r0, [r7, #32]
 8013798:	f7ff ff0e 	bl	80135b8 <ip_reass_free_complete_datagram>
 801379c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801379e:	697a      	ldr	r2, [r7, #20]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	4413      	add	r3, r2
 80137a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80137a6:	697a      	ldr	r2, [r7, #20]
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	da02      	bge.n	80137b4 <ip_reass_remove_oldest_datagram+0xb4>
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	dcac      	bgt.n	801370e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80137b4:	697b      	ldr	r3, [r7, #20]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3728      	adds	r7, #40	@ 0x28
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	20004bf0 	.word	0x20004bf0

080137c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b084      	sub	sp, #16
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80137ce:	2004      	movs	r0, #4
 80137d0:	f7f5 ff32 	bl	8009638 <memp_malloc>
 80137d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d110      	bne.n	80137fe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80137dc:	6839      	ldr	r1, [r7, #0]
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f7ff ff8e 	bl	8013700 <ip_reass_remove_oldest_datagram>
 80137e4:	4602      	mov	r2, r0
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	4293      	cmp	r3, r2
 80137ea:	dc03      	bgt.n	80137f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80137ec:	2004      	movs	r0, #4
 80137ee:	f7f5 ff23 	bl	8009638 <memp_malloc>
 80137f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d101      	bne.n	80137fe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	e016      	b.n	801382c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80137fe:	2220      	movs	r2, #32
 8013800:	2100      	movs	r1, #0
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f001 f809 	bl	801481a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	220f      	movs	r2, #15
 801380c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801380e:	4b09      	ldr	r3, [pc, #36]	@ (8013834 <ip_reass_enqueue_new_datagram+0x70>)
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013816:	4a07      	ldr	r2, [pc, #28]	@ (8013834 <ip_reass_enqueue_new_datagram+0x70>)
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	3308      	adds	r3, #8
 8013820:	2214      	movs	r2, #20
 8013822:	6879      	ldr	r1, [r7, #4]
 8013824:	4618      	mov	r0, r3
 8013826:	f001 f8ca 	bl	80149be <memcpy>
  return ipr;
 801382a:	68fb      	ldr	r3, [r7, #12]
}
 801382c:	4618      	mov	r0, r3
 801382e:	3710      	adds	r7, #16
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}
 8013834:	20004bf0 	.word	0x20004bf0

08013838 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013842:	4b10      	ldr	r3, [pc, #64]	@ (8013884 <ip_reass_dequeue_datagram+0x4c>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	429a      	cmp	r2, r3
 801384a:	d104      	bne.n	8013856 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4a0c      	ldr	r2, [pc, #48]	@ (8013884 <ip_reass_dequeue_datagram+0x4c>)
 8013852:	6013      	str	r3, [r2, #0]
 8013854:	e00d      	b.n	8013872 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d106      	bne.n	801386a <ip_reass_dequeue_datagram+0x32>
 801385c:	4b0a      	ldr	r3, [pc, #40]	@ (8013888 <ip_reass_dequeue_datagram+0x50>)
 801385e:	f240 1245 	movw	r2, #325	@ 0x145
 8013862:	490a      	ldr	r1, [pc, #40]	@ (801388c <ip_reass_dequeue_datagram+0x54>)
 8013864:	480a      	ldr	r0, [pc, #40]	@ (8013890 <ip_reass_dequeue_datagram+0x58>)
 8013866:	f7ed f9b1 	bl	8000bcc <printf>
    prev->next = ipr->next;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013872:	6879      	ldr	r1, [r7, #4]
 8013874:	2004      	movs	r0, #4
 8013876:	f7f5 ff23 	bl	80096c0 <memp_free>
}
 801387a:	bf00      	nop
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	20004bf0 	.word	0x20004bf0
 8013888:	0801828c 	.word	0x0801828c
 801388c:	08018350 	.word	0x08018350
 8013890:	080182d0 	.word	0x080182d0

08013894 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08c      	sub	sp, #48	@ 0x30
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80138a0:	2300      	movs	r3, #0
 80138a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80138a4:	2301      	movs	r3, #1
 80138a6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	885b      	ldrh	r3, [r3, #2]
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7f5 f8b7 	bl	8008a28 <lwip_htons>
 80138ba:	4603      	mov	r3, r0
 80138bc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	f003 030f 	and.w	r3, r3, #15
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80138cc:	7e7b      	ldrb	r3, [r7, #25]
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	8b7a      	ldrh	r2, [r7, #26]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d202      	bcs.n	80138dc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80138d6:	f04f 33ff 	mov.w	r3, #4294967295
 80138da:	e135      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80138dc:	7e7b      	ldrb	r3, [r7, #25]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	8b7a      	ldrh	r2, [r7, #26]
 80138e2:	1ad3      	subs	r3, r2, r3
 80138e4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	88db      	ldrh	r3, [r3, #6]
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f5 f89b 	bl	8008a28 <lwip_htons>
 80138f2:	4603      	mov	r3, r0
 80138f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	00db      	lsls	r3, r3, #3
 80138fc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	2200      	movs	r2, #0
 8013908:	701a      	strb	r2, [r3, #0]
 801390a:	2200      	movs	r2, #0
 801390c:	705a      	strb	r2, [r3, #1]
 801390e:	2200      	movs	r2, #0
 8013910:	709a      	strb	r2, [r3, #2]
 8013912:	2200      	movs	r2, #0
 8013914:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013918:	8afa      	ldrh	r2, [r7, #22]
 801391a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801391c:	8afa      	ldrh	r2, [r7, #22]
 801391e:	8b7b      	ldrh	r3, [r7, #26]
 8013920:	4413      	add	r3, r2
 8013922:	b29a      	uxth	r2, r3
 8013924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013926:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392a:	88db      	ldrh	r3, [r3, #6]
 801392c:	b29b      	uxth	r3, r3
 801392e:	8afa      	ldrh	r2, [r7, #22]
 8013930:	429a      	cmp	r2, r3
 8013932:	d902      	bls.n	801393a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013934:	f04f 33ff 	mov.w	r3, #4294967295
 8013938:	e106      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013940:	e068      	b.n	8013a14 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013944:	685b      	ldr	r3, [r3, #4]
 8013946:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394a:	889b      	ldrh	r3, [r3, #4]
 801394c:	b29a      	uxth	r2, r3
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	889b      	ldrh	r3, [r3, #4]
 8013952:	b29b      	uxth	r3, r3
 8013954:	429a      	cmp	r2, r3
 8013956:	d235      	bcs.n	80139c4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801395c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013960:	2b00      	cmp	r3, #0
 8013962:	d020      	beq.n	80139a6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013966:	889b      	ldrh	r3, [r3, #4]
 8013968:	b29a      	uxth	r2, r3
 801396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396c:	88db      	ldrh	r3, [r3, #6]
 801396e:	b29b      	uxth	r3, r3
 8013970:	429a      	cmp	r2, r3
 8013972:	d307      	bcc.n	8013984 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013976:	88db      	ldrh	r3, [r3, #6]
 8013978:	b29a      	uxth	r2, r3
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	889b      	ldrh	r3, [r3, #4]
 801397e:	b29b      	uxth	r3, r3
 8013980:	429a      	cmp	r2, r3
 8013982:	d902      	bls.n	801398a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013984:	f04f 33ff 	mov.w	r3, #4294967295
 8013988:	e0de      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013992:	88db      	ldrh	r3, [r3, #6]
 8013994:	b29a      	uxth	r2, r3
 8013996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013998:	889b      	ldrh	r3, [r3, #4]
 801399a:	b29b      	uxth	r3, r3
 801399c:	429a      	cmp	r2, r3
 801399e:	d03d      	beq.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80139a4:	e03a      	b.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80139a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a8:	88db      	ldrh	r3, [r3, #6]
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	889b      	ldrh	r3, [r3, #4]
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d902      	bls.n	80139bc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139b6:	f04f 33ff 	mov.w	r3, #4294967295
 80139ba:	e0c5      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	605a      	str	r2, [r3, #4]
      break;
 80139c2:	e02b      	b.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80139c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139c6:	889b      	ldrh	r3, [r3, #4]
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	889b      	ldrh	r3, [r3, #4]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d102      	bne.n	80139da <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139d4:	f04f 33ff 	mov.w	r3, #4294967295
 80139d8:	e0b6      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80139da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139dc:	889b      	ldrh	r3, [r3, #4]
 80139de:	b29a      	uxth	r2, r3
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	88db      	ldrh	r3, [r3, #6]
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d202      	bcs.n	80139f0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139ea:	f04f 33ff 	mov.w	r3, #4294967295
 80139ee:	e0ab      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80139f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d009      	beq.n	8013a0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80139f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f8:	88db      	ldrh	r3, [r3, #6]
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	889b      	ldrh	r3, [r3, #4]
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d001      	beq.n	8013a0a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d193      	bne.n	8013942 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013a1a:	e000      	b.n	8013a1e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013a1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d12d      	bne.n	8013a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d01c      	beq.n	8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2c:	88db      	ldrh	r3, [r3, #6]
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a32:	889b      	ldrh	r3, [r3, #4]
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d906      	bls.n	8013a48 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013a3a:	4b45      	ldr	r3, [pc, #276]	@ (8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a3c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013a40:	4944      	ldr	r1, [pc, #272]	@ (8013b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013a42:	4845      	ldr	r0, [pc, #276]	@ (8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a44:	f7ed f8c2 	bl	8000bcc <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	88db      	ldrh	r3, [r3, #6]
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a56:	889b      	ldrh	r3, [r3, #4]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d010      	beq.n	8013a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	623b      	str	r3, [r7, #32]
 8013a62:	e00d      	b.n	8013a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d006      	beq.n	8013a7a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013a6c:	4b38      	ldr	r3, [pc, #224]	@ (8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013a6e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013a72:	493a      	ldr	r1, [pc, #232]	@ (8013b5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013a74:	4838      	ldr	r0, [pc, #224]	@ (8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013a76:	f7ed f8a9 	bl	8000bcc <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	68ba      	ldr	r2, [r7, #8]
 8013a7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d105      	bne.n	8013a92 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	7f9b      	ldrb	r3, [r3, #30]
 8013a8a:	f003 0301 	and.w	r3, r3, #1
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d059      	beq.n	8013b46 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013a92:	6a3b      	ldr	r3, [r7, #32]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d04f      	beq.n	8013b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d006      	beq.n	8013aae <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	685b      	ldr	r3, [r3, #4]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	889b      	ldrh	r3, [r3, #4]
 8013aa8:	b29b      	uxth	r3, r3
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	623b      	str	r3, [r7, #32]
 8013ab2:	e041      	b.n	8013b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013abe:	e012      	b.n	8013ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ac8:	88db      	ldrh	r3, [r3, #6]
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ace:	889b      	ldrh	r3, [r3, #4]
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d002      	beq.n	8013adc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	623b      	str	r3, [r7, #32]
            break;
 8013ada:	e007      	b.n	8013aec <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ade:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1e9      	bne.n	8013ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013aec:	6a3b      	ldr	r3, [r7, #32]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d022      	beq.n	8013b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d106      	bne.n	8013b08 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013afa:	4b15      	ldr	r3, [pc, #84]	@ (8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013afc:	f240 12df 	movw	r2, #479	@ 0x1df
 8013b00:	4917      	ldr	r1, [pc, #92]	@ (8013b60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013b02:	4815      	ldr	r0, [pc, #84]	@ (8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b04:	f7ed f862 	bl	8000bcc <printf>
          LWIP_ASSERT("sanity check",
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d106      	bne.n	8013b22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013b14:	4b0e      	ldr	r3, [pc, #56]	@ (8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b16:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013b1a:	4911      	ldr	r1, [pc, #68]	@ (8013b60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013b1c:	480e      	ldr	r0, [pc, #56]	@ (8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b1e:	f7ed f855 	bl	8000bcc <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d006      	beq.n	8013b38 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013b2a:	4b09      	ldr	r3, [pc, #36]	@ (8013b50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b2c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013b30:	490c      	ldr	r1, [pc, #48]	@ (8013b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013b32:	4809      	ldr	r0, [pc, #36]	@ (8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b34:	f7ed f84a 	bl	8000bcc <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013b38:	6a3b      	ldr	r3, [r7, #32]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	bf14      	ite	ne
 8013b3e:	2301      	movne	r3, #1
 8013b40:	2300      	moveq	r3, #0
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	e000      	b.n	8013b48 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013b46:	2300      	movs	r3, #0
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3730      	adds	r7, #48	@ 0x30
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	0801828c 	.word	0x0801828c
 8013b54:	0801836c 	.word	0x0801836c
 8013b58:	080182d0 	.word	0x080182d0
 8013b5c:	0801838c 	.word	0x0801838c
 8013b60:	080183c4 	.word	0x080183c4
 8013b64:	080183d4 	.word	0x080183d4

08013b68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08e      	sub	sp, #56	@ 0x38
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	f003 030f 	and.w	r3, r3, #15
 8013b7e:	b2db      	uxtb	r3, r3
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	2b14      	cmp	r3, #20
 8013b86:	f040 8179 	bne.w	8013e7c <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b8c:	88db      	ldrh	r3, [r3, #6]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f4 ff49 	bl	8008a28 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ba4:	885b      	ldrh	r3, [r3, #2]
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f4 ff3d 	bl	8008a28 <lwip_htons>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	f003 030f 	and.w	r3, r3, #15
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	f0c0 8158 	bcc.w	8013e80 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7f6 fbef 	bl	800a3c0 <pbuf_clen>
 8013be2:	4603      	mov	r3, r0
 8013be4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013be6:	4b90      	ldr	r3, [pc, #576]	@ (8013e28 <ip4_reass+0x2c0>)
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	8c3b      	ldrh	r3, [r7, #32]
 8013bee:	4413      	add	r3, r2
 8013bf0:	2b0a      	cmp	r3, #10
 8013bf2:	dd10      	ble.n	8013c16 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013bf4:	8c3b      	ldrh	r3, [r7, #32]
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bfa:	f7ff fd81 	bl	8013700 <ip_reass_remove_oldest_datagram>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 813f 	beq.w	8013e84 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013c06:	4b88      	ldr	r3, [pc, #544]	@ (8013e28 <ip4_reass+0x2c0>)
 8013c08:	881b      	ldrh	r3, [r3, #0]
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	8c3b      	ldrh	r3, [r7, #32]
 8013c0e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013c10:	2b0a      	cmp	r3, #10
 8013c12:	f300 8137 	bgt.w	8013e84 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013c16:	4b85      	ldr	r3, [pc, #532]	@ (8013e2c <ip4_reass+0x2c4>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c1c:	e015      	b.n	8013c4a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c20:	695a      	ldr	r2, [r3, #20]
 8013c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d10c      	bne.n	8013c44 <ip4_reass+0xdc>
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2c:	699a      	ldr	r2, [r3, #24]
 8013c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d106      	bne.n	8013c44 <ip4_reass+0xdc>
 8013c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c38:	899a      	ldrh	r2, [r3, #12]
 8013c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c3c:	889b      	ldrh	r3, [r3, #4]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d006      	beq.n	8013c52 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1e6      	bne.n	8013c1e <ip4_reass+0xb6>
 8013c50:	e000      	b.n	8013c54 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013c52:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d109      	bne.n	8013c6e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013c5a:	8c3b      	ldrh	r3, [r7, #32]
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c60:	f7ff fdb0 	bl	80137c4 <ip_reass_enqueue_new_datagram>
 8013c64:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d11c      	bne.n	8013ca6 <ip4_reass+0x13e>
      goto nullreturn;
 8013c6c:	e10d      	b.n	8013e8a <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c70:	88db      	ldrh	r3, [r3, #6]
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f4 fed7 	bl	8008a28 <lwip_htons>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d110      	bne.n	8013ca6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c86:	89db      	ldrh	r3, [r3, #14]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f7f4 fecd 	bl	8008a28 <lwip_htons>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d006      	beq.n	8013ca6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c9a:	3308      	adds	r3, #8
 8013c9c:	2214      	movs	r2, #20
 8013c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f000 fe8c 	bl	80149be <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ca8:	88db      	ldrh	r3, [r3, #6]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	f003 0320 	and.w	r3, r3, #32
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	bf0c      	ite	eq
 8013cb4:	2301      	moveq	r3, #1
 8013cb6:	2300      	movne	r3, #0
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00e      	beq.n	8013ce0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013cc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013cc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cc6:	4413      	add	r3, r2
 8013cc8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013cca:	8b7a      	ldrh	r2, [r7, #26]
 8013ccc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	f0c0 80a8 	bcc.w	8013e24 <ip4_reass+0x2bc>
 8013cd4:	8b7b      	ldrh	r3, [r7, #26]
 8013cd6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013cda:	4293      	cmp	r3, r2
 8013cdc:	f200 80a2 	bhi.w	8013e24 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013ce0:	69fa      	ldr	r2, [r7, #28]
 8013ce2:	6879      	ldr	r1, [r7, #4]
 8013ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ce6:	f7ff fdd5 	bl	8013894 <ip_reass_chain_frag_into_datagram_and_validate>
 8013cea:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cf2:	f000 80a3 	beq.w	8013e3c <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8013e28 <ip4_reass+0x2c0>)
 8013cf8:	881a      	ldrh	r2, [r3, #0]
 8013cfa:	8c3b      	ldrh	r3, [r7, #32]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	4b49      	ldr	r3, [pc, #292]	@ (8013e28 <ip4_reass+0x2c0>)
 8013d02:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00d      	beq.n	8013d26 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013d0a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013d0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013d0e:	4413      	add	r3, r2
 8013d10:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d14:	8a7a      	ldrh	r2, [r7, #18]
 8013d16:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1a:	7f9b      	ldrb	r3, [r3, #30]
 8013d1c:	f043 0301 	orr.w	r3, r3, #1
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d24:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d179      	bne.n	8013e20 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d2e:	8b9b      	ldrh	r3, [r3, #28]
 8013d30:	3314      	adds	r3, #20
 8013d32:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d36:	685b      	ldr	r3, [r3, #4]
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d48:	3308      	adds	r3, #8
 8013d4a:	2214      	movs	r2, #20
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d50:	f000 fe35 	bl	80149be <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013d54:	8a3b      	ldrh	r3, [r7, #16]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f4 fe66 	bl	8008a28 <lwip_htons>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	461a      	mov	r2, r3
 8013d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d62:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d66:	2200      	movs	r2, #0
 8013d68:	719a      	strb	r2, [r3, #6]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d70:	2200      	movs	r2, #0
 8013d72:	729a      	strb	r2, [r3, #10]
 8013d74:	2200      	movs	r2, #0
 8013d76:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8013d78:	2114      	movs	r1, #20
 8013d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d7c:	f7f4 ff9c 	bl	8008cb8 <inet_chksum>
 8013d80:	4603      	mov	r3, r0
 8013d82:	461a      	mov	r2, r3
 8013d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d86:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013d8e:	e00d      	b.n	8013dac <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8013d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013d96:	2114      	movs	r1, #20
 8013d98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013d9a:	f7f6 fa07 	bl	800a1ac <pbuf_remove_header>
      pbuf_cat(p, r);
 8013d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f7f6 fb47 	bl	800a434 <pbuf_cat>
      r = iprh->next_pbuf;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8013dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d1ee      	bne.n	8013d90 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013db2:	4b1e      	ldr	r3, [pc, #120]	@ (8013e2c <ip4_reass+0x2c4>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d102      	bne.n	8013dc2 <ip4_reass+0x25a>
      ipr_prev = NULL;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8013dc0:	e010      	b.n	8013de4 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8013e2c <ip4_reass+0x2c4>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013dc8:	e007      	b.n	8013dda <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8013dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d006      	beq.n	8013de2 <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8013dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1f4      	bne.n	8013dca <ip4_reass+0x262>
 8013de0:	e000      	b.n	8013de4 <ip4_reass+0x27c>
          break;
 8013de2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013de4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013de6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013de8:	f7ff fd26 	bl	8013838 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7f6 fae7 	bl	800a3c0 <pbuf_clen>
 8013df2:	4603      	mov	r3, r0
 8013df4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013df6:	4b0c      	ldr	r3, [pc, #48]	@ (8013e28 <ip4_reass+0x2c0>)
 8013df8:	881b      	ldrh	r3, [r3, #0]
 8013dfa:	8c3a      	ldrh	r2, [r7, #32]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d906      	bls.n	8013e0e <ip4_reass+0x2a6>
 8013e00:	4b0b      	ldr	r3, [pc, #44]	@ (8013e30 <ip4_reass+0x2c8>)
 8013e02:	f240 229b 	movw	r2, #667	@ 0x29b
 8013e06:	490b      	ldr	r1, [pc, #44]	@ (8013e34 <ip4_reass+0x2cc>)
 8013e08:	480b      	ldr	r0, [pc, #44]	@ (8013e38 <ip4_reass+0x2d0>)
 8013e0a:	f7ec fedf 	bl	8000bcc <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013e0e:	4b06      	ldr	r3, [pc, #24]	@ (8013e28 <ip4_reass+0x2c0>)
 8013e10:	881a      	ldrh	r2, [r3, #0]
 8013e12:	8c3b      	ldrh	r3, [r7, #32]
 8013e14:	1ad3      	subs	r3, r2, r3
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	4b03      	ldr	r3, [pc, #12]	@ (8013e28 <ip4_reass+0x2c0>)
 8013e1a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	e038      	b.n	8013e92 <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013e20:	2300      	movs	r3, #0
 8013e22:	e036      	b.n	8013e92 <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8013e24:	bf00      	nop
 8013e26:	e00a      	b.n	8013e3e <ip4_reass+0x2d6>
 8013e28:	20004bf4 	.word	0x20004bf4
 8013e2c:	20004bf0 	.word	0x20004bf0
 8013e30:	0801828c 	.word	0x0801828c
 8013e34:	080183f8 	.word	0x080183f8
 8013e38:	080182d0 	.word	0x080182d0
    goto nullreturn_ipr;
 8013e3c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d106      	bne.n	8013e52 <ip4_reass+0x2ea>
 8013e44:	4b15      	ldr	r3, [pc, #84]	@ (8013e9c <ip4_reass+0x334>)
 8013e46:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013e4a:	4915      	ldr	r1, [pc, #84]	@ (8013ea0 <ip4_reass+0x338>)
 8013e4c:	4815      	ldr	r0, [pc, #84]	@ (8013ea4 <ip4_reass+0x33c>)
 8013e4e:	f7ec febd 	bl	8000bcc <printf>
  if (ipr->p == NULL) {
 8013e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d116      	bne.n	8013e88 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013e5a:	4b13      	ldr	r3, [pc, #76]	@ (8013ea8 <ip4_reass+0x340>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d006      	beq.n	8013e72 <ip4_reass+0x30a>
 8013e64:	4b0d      	ldr	r3, [pc, #52]	@ (8013e9c <ip4_reass+0x334>)
 8013e66:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013e6a:	4910      	ldr	r1, [pc, #64]	@ (8013eac <ip4_reass+0x344>)
 8013e6c:	480d      	ldr	r0, [pc, #52]	@ (8013ea4 <ip4_reass+0x33c>)
 8013e6e:	f7ec fead 	bl	8000bcc <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013e72:	2100      	movs	r1, #0
 8013e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e76:	f7ff fcdf 	bl	8013838 <ip_reass_dequeue_datagram>
 8013e7a:	e006      	b.n	8013e8a <ip4_reass+0x322>
    goto nullreturn;
 8013e7c:	bf00      	nop
 8013e7e:	e004      	b.n	8013e8a <ip4_reass+0x322>
    goto nullreturn;
 8013e80:	bf00      	nop
 8013e82:	e002      	b.n	8013e8a <ip4_reass+0x322>
      goto nullreturn;
 8013e84:	bf00      	nop
 8013e86:	e000      	b.n	8013e8a <ip4_reass+0x322>
  }

nullreturn:
 8013e88:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f7f6 fa10 	bl	800a2b0 <pbuf_free>
  return NULL;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3738      	adds	r7, #56	@ 0x38
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	0801828c 	.word	0x0801828c
 8013ea0:	08018414 	.word	0x08018414
 8013ea4:	080182d0 	.word	0x080182d0
 8013ea8:	20004bf0 	.word	0x20004bf0
 8013eac:	08018420 	.word	0x08018420

08013eb0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013eb4:	2005      	movs	r0, #5
 8013eb6:	f7f5 fbbf 	bl	8009638 <memp_malloc>
 8013eba:	4603      	mov	r3, r0
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <ip_frag_free_pbuf_custom_ref+0x1c>
 8013ece:	4b07      	ldr	r3, [pc, #28]	@ (8013eec <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013ed0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013ed4:	4906      	ldr	r1, [pc, #24]	@ (8013ef0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013ed6:	4807      	ldr	r0, [pc, #28]	@ (8013ef4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013ed8:	f7ec fe78 	bl	8000bcc <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013edc:	6879      	ldr	r1, [r7, #4]
 8013ede:	2005      	movs	r0, #5
 8013ee0:	f7f5 fbee 	bl	80096c0 <memp_free>
}
 8013ee4:	bf00      	nop
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	0801828c 	.word	0x0801828c
 8013ef0:	08018440 	.word	0x08018440
 8013ef4:	080182d0 	.word	0x080182d0

08013ef8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d106      	bne.n	8013f18 <ipfrag_free_pbuf_custom+0x20>
 8013f0a:	4b11      	ldr	r3, [pc, #68]	@ (8013f50 <ipfrag_free_pbuf_custom+0x58>)
 8013f0c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013f10:	4910      	ldr	r1, [pc, #64]	@ (8013f54 <ipfrag_free_pbuf_custom+0x5c>)
 8013f12:	4811      	ldr	r0, [pc, #68]	@ (8013f58 <ipfrag_free_pbuf_custom+0x60>)
 8013f14:	f7ec fe5a 	bl	8000bcc <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d006      	beq.n	8013f2e <ipfrag_free_pbuf_custom+0x36>
 8013f20:	4b0b      	ldr	r3, [pc, #44]	@ (8013f50 <ipfrag_free_pbuf_custom+0x58>)
 8013f22:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013f26:	490d      	ldr	r1, [pc, #52]	@ (8013f5c <ipfrag_free_pbuf_custom+0x64>)
 8013f28:	480b      	ldr	r0, [pc, #44]	@ (8013f58 <ipfrag_free_pbuf_custom+0x60>)
 8013f2a:	f7ec fe4f 	bl	8000bcc <printf>
  if (pcr->original != NULL) {
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	695b      	ldr	r3, [r3, #20]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d004      	beq.n	8013f40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	695b      	ldr	r3, [r3, #20]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7f6 f9b8 	bl	800a2b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f7ff ffbd 	bl	8013ec0 <ip_frag_free_pbuf_custom_ref>
}
 8013f46:	bf00      	nop
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	0801828c 	.word	0x0801828c
 8013f54:	0801844c 	.word	0x0801844c
 8013f58:	080182d0 	.word	0x080182d0
 8013f5c:	08018458 	.word	0x08018458

08013f60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b094      	sub	sp, #80	@ 0x50
 8013f64:	af02      	add	r7, sp, #8
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013f76:	3b14      	subs	r3, #20
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	da00      	bge.n	8013f7e <ip4_frag+0x1e>
 8013f7c:	3307      	adds	r3, #7
 8013f7e:	10db      	asrs	r3, r3, #3
 8013f80:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013f82:	2314      	movs	r3, #20
 8013f84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	f003 030f 	and.w	r3, r3, #15
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	b2db      	uxtb	r3, r3
 8013f9e:	2b14      	cmp	r3, #20
 8013fa0:	d002      	beq.n	8013fa8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013fa2:	f06f 0305 	mvn.w	r3, #5
 8013fa6:	e114      	b.n	80141d2 <ip4_frag+0x272>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	895b      	ldrh	r3, [r3, #10]
 8013fac:	2b13      	cmp	r3, #19
 8013fae:	d805      	bhi.n	8013fbc <ip4_frag+0x5c>
 8013fb0:	488a      	ldr	r0, [pc, #552]	@ (80141dc <ip4_frag+0x27c>)
 8013fb2:	f7ec fe0b 	bl	8000bcc <printf>
 8013fb6:	f06f 0305 	mvn.w	r3, #5
 8013fba:	e10a      	b.n	80141d2 <ip4_frag+0x272>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fbe:	88db      	ldrh	r3, [r3, #6]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7f4 fd30 	bl	8008a28 <lwip_htons>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013fcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013fd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013fd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	891b      	ldrh	r3, [r3, #8]
 8013fe2:	3b14      	subs	r3, #20
 8013fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013fe8:	e0e9      	b.n	80141be <ip4_frag+0x25e>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013fea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013fec:	00db      	lsls	r3, r3, #3
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013ff4:	4293      	cmp	r3, r2
 8013ff6:	bf28      	it	cs
 8013ff8:	4613      	movcs	r3, r2
 8013ffa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013ffc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014000:	2114      	movs	r1, #20
 8014002:	200e      	movs	r0, #14
 8014004:	f7f5 fe74 	bl	8009cf0 <pbuf_alloc>
 8014008:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400c:	2b00      	cmp	r3, #0
 801400e:	f000 80dd 	beq.w	80141cc <ip4_frag+0x26c>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014014:	895b      	ldrh	r3, [r3, #10]
 8014016:	2b13      	cmp	r3, #19
 8014018:	d806      	bhi.n	8014028 <ip4_frag+0xc8>
 801401a:	4b71      	ldr	r3, [pc, #452]	@ (80141e0 <ip4_frag+0x280>)
 801401c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014020:	4970      	ldr	r1, [pc, #448]	@ (80141e4 <ip4_frag+0x284>)
 8014022:	4871      	ldr	r0, [pc, #452]	@ (80141e8 <ip4_frag+0x288>)
 8014024:	f7ec fdd2 	bl	8000bcc <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	2214      	movs	r2, #20
 801402e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014030:	4618      	mov	r0, r3
 8014032:	f000 fcc4 	bl	80149be <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801403c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801403e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8014042:	e064      	b.n	801410e <ip4_frag+0x1ae>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	895a      	ldrh	r2, [r3, #10]
 8014048:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801404a:	1ad3      	subs	r3, r2, r3
 801404c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	895b      	ldrh	r3, [r3, #10]
 8014052:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014054:	429a      	cmp	r2, r3
 8014056:	d906      	bls.n	8014066 <ip4_frag+0x106>
 8014058:	4b61      	ldr	r3, [pc, #388]	@ (80141e0 <ip4_frag+0x280>)
 801405a:	f240 322d 	movw	r2, #813	@ 0x32d
 801405e:	4963      	ldr	r1, [pc, #396]	@ (80141ec <ip4_frag+0x28c>)
 8014060:	4861      	ldr	r0, [pc, #388]	@ (80141e8 <ip4_frag+0x288>)
 8014062:	f7ec fdb3 	bl	8000bcc <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014066:	8bfa      	ldrh	r2, [r7, #30]
 8014068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801406c:	4293      	cmp	r3, r2
 801406e:	bf28      	it	cs
 8014070:	4613      	movcs	r3, r2
 8014072:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014076:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801407a:	2b00      	cmp	r3, #0
 801407c:	d105      	bne.n	801408a <ip4_frag+0x12a>
        poff = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]
        continue;
 8014088:	e041      	b.n	801410e <ip4_frag+0x1ae>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801408a:	f7ff ff11 	bl	8013eb0 <ip_frag_alloc_pbuf_custom_ref>
 801408e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d103      	bne.n	801409e <ip4_frag+0x13e>
        pbuf_free(rambuf);
 8014096:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014098:	f7f6 f90a 	bl	800a2b0 <pbuf_free>
        goto memerr;
 801409c:	e097      	b.n	80141ce <ip4_frag+0x26e>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801409e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80140a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80140a6:	4413      	add	r3, r2
 80140a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80140ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80140b0:	9201      	str	r2, [sp, #4]
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	4603      	mov	r3, r0
 80140b6:	2241      	movs	r2, #65	@ 0x41
 80140b8:	2000      	movs	r0, #0
 80140ba:	f7f5 ff43 	bl	8009f44 <pbuf_alloced_custom>
 80140be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d106      	bne.n	80140d4 <ip4_frag+0x174>
        ip_frag_free_pbuf_custom_ref(pcr);
 80140c6:	69b8      	ldr	r0, [r7, #24]
 80140c8:	f7ff fefa 	bl	8013ec0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80140cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140ce:	f7f6 f8ef 	bl	800a2b0 <pbuf_free>
        goto memerr;
 80140d2:	e07c      	b.n	80141ce <ip4_frag+0x26e>
      }
      pbuf_ref(p);
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f7f6 f98b 	bl	800a3f0 <pbuf_ref>
      pcr->original = p;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	4a43      	ldr	r2, [pc, #268]	@ (80141f0 <ip4_frag+0x290>)
 80140e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80140e6:	6979      	ldr	r1, [r7, #20]
 80140e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140ea:	f7f6 f9a3 	bl	800a434 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80140ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80140f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80140fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014100:	2b00      	cmp	r3, #0
 8014102:	d004      	beq.n	801410e <ip4_frag+0x1ae>
        poff = 0;
 8014104:	2300      	movs	r3, #0
 8014106:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801410e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014112:	2b00      	cmp	r3, #0
 8014114:	d196      	bne.n	8014044 <ip4_frag+0xe4>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014116:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014118:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801411c:	4413      	add	r3, r2
 801411e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014124:	f1a3 0213 	sub.w	r2, r3, #19
 8014128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801412c:	429a      	cmp	r2, r3
 801412e:	bfcc      	ite	gt
 8014130:	2301      	movgt	r3, #1
 8014132:	2300      	movle	r3, #0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014138:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801413c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014140:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <ip4_frag+0x1ee>
 8014148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414a:	2b00      	cmp	r3, #0
 801414c:	d003      	beq.n	8014156 <ip4_frag+0x1f6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801414e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014150:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014154:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014156:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014158:	4618      	mov	r0, r3
 801415a:	f7f4 fc65 	bl	8008a28 <lwip_htons>
 801415e:	4603      	mov	r3, r0
 8014160:	461a      	mov	r2, r3
 8014162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014164:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014166:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014168:	3314      	adds	r3, #20
 801416a:	b29b      	uxth	r3, r3
 801416c:	4618      	mov	r0, r3
 801416e:	f7f4 fc5b 	bl	8008a28 <lwip_htons>
 8014172:	4603      	mov	r3, r0
 8014174:	461a      	mov	r2, r3
 8014176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014178:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801417c:	2200      	movs	r2, #0
 801417e:	729a      	strb	r2, [r3, #10]
 8014180:	2200      	movs	r2, #0
 8014182:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8014184:	2114      	movs	r1, #20
 8014186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014188:	f7f4 fd96 	bl	8008cb8 <inet_chksum>
 801418c:	4603      	mov	r3, r0
 801418e:	461a      	mov	r2, r3
 8014190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014192:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	695b      	ldr	r3, [r3, #20]
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801419c:	68b8      	ldr	r0, [r7, #8]
 801419e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80141a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141a2:	f7f6 f885 	bl	800a2b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80141a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80141aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80141ac:	1ad3      	subs	r3, r2, r3
 80141ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80141b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80141b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80141b8:	4413      	add	r3, r2
 80141ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80141be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f47f af11 	bne.w	8013fea <ip4_frag+0x8a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	e002      	b.n	80141d2 <ip4_frag+0x272>
      goto memerr;
 80141cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80141ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3748      	adds	r7, #72	@ 0x48
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop
 80141dc:	08018464 	.word	0x08018464
 80141e0:	0801828c 	.word	0x0801828c
 80141e4:	08018480 	.word	0x08018480
 80141e8:	080182d0 	.word	0x080182d0
 80141ec:	080184a0 	.word	0x080184a0
 80141f0:	08013ef9 	.word	0x08013ef9

080141f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b086      	sub	sp, #24
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80141fe:	230e      	movs	r3, #14
 8014200:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	895b      	ldrh	r3, [r3, #10]
 8014206:	2b0e      	cmp	r3, #14
 8014208:	d96e      	bls.n	80142e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	7bdb      	ldrb	r3, [r3, #15]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d106      	bne.n	8014220 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014218:	3301      	adds	r3, #1
 801421a:	b2da      	uxtb	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	7b1a      	ldrb	r2, [r3, #12]
 801422a:	7b5b      	ldrb	r3, [r3, #13]
 801422c:	021b      	lsls	r3, r3, #8
 801422e:	4313      	orrs	r3, r2
 8014230:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	f003 0301 	and.w	r3, r3, #1
 801423a:	2b00      	cmp	r3, #0
 801423c:	d023      	beq.n	8014286 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	2b01      	cmp	r3, #1
 8014244:	d10f      	bne.n	8014266 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	785b      	ldrb	r3, [r3, #1]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d11b      	bne.n	8014286 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014252:	2b5e      	cmp	r3, #94	@ 0x5e
 8014254:	d117      	bne.n	8014286 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	7b5b      	ldrb	r3, [r3, #13]
 801425a:	f043 0310 	orr.w	r3, r3, #16
 801425e:	b2da      	uxtb	r2, r3
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	735a      	strb	r2, [r3, #13]
 8014264:	e00f      	b.n	8014286 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	2206      	movs	r2, #6
 801426a:	4928      	ldr	r1, [pc, #160]	@ (801430c <ethernet_input+0x118>)
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fac4 	bl	80147fa <memcmp>
 8014272:	4603      	mov	r3, r0
 8014274:	2b00      	cmp	r3, #0
 8014276:	d106      	bne.n	8014286 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7b5b      	ldrb	r3, [r3, #13]
 801427c:	f043 0308 	orr.w	r3, r3, #8
 8014280:	b2da      	uxtb	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014286:	89fb      	ldrh	r3, [r7, #14]
 8014288:	2b08      	cmp	r3, #8
 801428a:	d003      	beq.n	8014294 <ethernet_input+0xa0>
 801428c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014290:	d014      	beq.n	80142bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014292:	e032      	b.n	80142fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801429a:	f003 0308 	and.w	r3, r3, #8
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d024      	beq.n	80142ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80142a2:	8afb      	ldrh	r3, [r7, #22]
 80142a4:	4619      	mov	r1, r3
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7f5 ff80 	bl	800a1ac <pbuf_remove_header>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d11e      	bne.n	80142f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80142b2:	6839      	ldr	r1, [r7, #0]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7fe fe85 	bl	8012fc4 <ip4_input>
      break;
 80142ba:	e013      	b.n	80142e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80142c2:	f003 0308 	and.w	r3, r3, #8
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d014      	beq.n	80142f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80142ca:	8afb      	ldrh	r3, [r7, #22]
 80142cc:	4619      	mov	r1, r3
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7f5 ff6c 	bl	800a1ac <pbuf_remove_header>
 80142d4:	4603      	mov	r3, r0
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d10e      	bne.n	80142f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7fd ffc9 	bl	8012274 <etharp_input>
      break;
 80142e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80142e4:	2300      	movs	r3, #0
 80142e6:	e00c      	b.n	8014302 <ethernet_input+0x10e>
    goto free_and_return;
 80142e8:	bf00      	nop
 80142ea:	e006      	b.n	80142fa <ethernet_input+0x106>
        goto free_and_return;
 80142ec:	bf00      	nop
 80142ee:	e004      	b.n	80142fa <ethernet_input+0x106>
        goto free_and_return;
 80142f0:	bf00      	nop
 80142f2:	e002      	b.n	80142fa <ethernet_input+0x106>
        goto free_and_return;
 80142f4:	bf00      	nop
 80142f6:	e000      	b.n	80142fa <ethernet_input+0x106>
        goto free_and_return;
 80142f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f7f5 ffd8 	bl	800a2b0 <pbuf_free>
  return ERR_OK;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3718      	adds	r7, #24
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	080186fc 	.word	0x080186fc

08014310 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
 801431c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801431e:	8c3b      	ldrh	r3, [r7, #32]
 8014320:	4618      	mov	r0, r3
 8014322:	f7f4 fb81 	bl	8008a28 <lwip_htons>
 8014326:	4603      	mov	r3, r0
 8014328:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801432a:	210e      	movs	r1, #14
 801432c:	68b8      	ldr	r0, [r7, #8]
 801432e:	f7f5 ff2d 	bl	800a18c <pbuf_add_header>
 8014332:	4603      	mov	r3, r0
 8014334:	2b00      	cmp	r3, #0
 8014336:	d125      	bne.n	8014384 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	685b      	ldr	r3, [r3, #4]
 801433c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	8afa      	ldrh	r2, [r7, #22]
 8014342:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	2206      	movs	r2, #6
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	4618      	mov	r0, r3
 801434c:	f000 fb37 	bl	80149be <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	3306      	adds	r3, #6
 8014354:	2206      	movs	r2, #6
 8014356:	6879      	ldr	r1, [r7, #4]
 8014358:	4618      	mov	r0, r3
 801435a:	f000 fb30 	bl	80149be <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014364:	2b06      	cmp	r3, #6
 8014366:	d006      	beq.n	8014376 <ethernet_output+0x66>
 8014368:	4b0a      	ldr	r3, [pc, #40]	@ (8014394 <ethernet_output+0x84>)
 801436a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801436e:	490a      	ldr	r1, [pc, #40]	@ (8014398 <ethernet_output+0x88>)
 8014370:	480a      	ldr	r0, [pc, #40]	@ (801439c <ethernet_output+0x8c>)
 8014372:	f7ec fc2b 	bl	8000bcc <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	699b      	ldr	r3, [r3, #24]
 801437a:	68b9      	ldr	r1, [r7, #8]
 801437c:	68f8      	ldr	r0, [r7, #12]
 801437e:	4798      	blx	r3
 8014380:	4603      	mov	r3, r0
 8014382:	e002      	b.n	801438a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014384:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014386:	f06f 0301 	mvn.w	r3, #1
}
 801438a:	4618      	mov	r0, r3
 801438c:	3718      	adds	r7, #24
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
 8014392:	bf00      	nop
 8014394:	080184b0 	.word	0x080184b0
 8014398:	080184e4 	.word	0x080184e4
 801439c:	08018518 	.word	0x08018518

080143a0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	2200      	movs	r2, #0
 80143ae:	2104      	movs	r1, #4
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f0 feab 	bl	800510c <osMessageQueueNew>
 80143b6:	4602      	mov	r2, r0
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <sys_mbox_new+0x2a>
    return ERR_MEM;
 80143c4:	f04f 33ff 	mov.w	r3, #4294967295
 80143c8:	e000      	b.n	80143cc <sys_mbox_new+0x2c>

  return ERR_OK;
 80143ca:	2300      	movs	r3, #0
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
 80143de:	bf00      	nop
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6818      	ldr	r0, [r3, #0]
 80143e4:	4639      	mov	r1, r7
 80143e6:	f04f 33ff 	mov.w	r3, #4294967295
 80143ea:	2200      	movs	r2, #0
 80143ec:	f7f0 ff02 	bl	80051f4 <osMessageQueuePut>
 80143f0:	4603      	mov	r3, r0
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d1f4      	bne.n	80143e0 <sys_mbox_post+0xc>
#endif
}
 80143f6:	bf00      	nop
 80143f8:	bf00      	nop
 80143fa:	3708      	adds	r7, #8
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6818      	ldr	r0, [r3, #0]
 801440e:	4639      	mov	r1, r7
 8014410:	2300      	movs	r3, #0
 8014412:	2200      	movs	r2, #0
 8014414:	f7f0 feee 	bl	80051f4 <osMessageQueuePut>
 8014418:	4603      	mov	r3, r0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d102      	bne.n	8014424 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801441e:	2300      	movs	r3, #0
 8014420:	73fb      	strb	r3, [r7, #15]
 8014422:	e001      	b.n	8014428 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014424:	23ff      	movs	r3, #255	@ 0xff
 8014426:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3710      	adds	r7, #16
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014440:	f7f0 fb74 	bl	8004b2c <osKernelGetTickCount>
 8014444:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d013      	beq.n	8014474 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	6818      	ldr	r0, [r3, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2200      	movs	r2, #0
 8014454:	68b9      	ldr	r1, [r7, #8]
 8014456:	f7f0 ff2d 	bl	80052b4 <osMessageQueueGet>
 801445a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d105      	bne.n	801446e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8014462:	f7f0 fb63 	bl	8004b2c <osKernelGetTickCount>
 8014466:	4602      	mov	r2, r0
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	e00f      	b.n	801448e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801446e:	f04f 33ff 	mov.w	r3, #4294967295
 8014472:	e00c      	b.n	801448e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	6818      	ldr	r0, [r3, #0]
 8014478:	f04f 33ff 	mov.w	r3, #4294967295
 801447c:	2200      	movs	r2, #0
 801447e:	68b9      	ldr	r1, [r7, #8]
 8014480:	f7f0 ff18 	bl	80052b4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8014484:	f7f0 fb52 	bl	8004b2c <osKernelGetTickCount>
 8014488:	4602      	mov	r2, r0
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801448e:	4618      	mov	r0, r3
 8014490:	3718      	adds	r7, #24
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014496:	b480      	push	{r7}
 8014498:	b083      	sub	sp, #12
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d101      	bne.n	80144aa <sys_mbox_valid+0x14>
    return 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	e000      	b.n	80144ac <sys_mbox_valid+0x16>
  else
    return 1;
 80144aa:	2301      	movs	r3, #1
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	370c      	adds	r7, #12
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr

080144b8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80144bc:	2000      	movs	r0, #0
 80144be:	f7f0 fbf7 	bl	8004cb0 <osMutexNew>
 80144c2:	4603      	mov	r3, r0
 80144c4:	4a01      	ldr	r2, [pc, #4]	@ (80144cc <sys_init+0x14>)
 80144c6:	6013      	str	r3, [r2, #0]
#endif
}
 80144c8:	bf00      	nop
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	2000d93c 	.word	0x2000d93c

080144d0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80144d8:	2000      	movs	r0, #0
 80144da:	f7f0 fbe9 	bl	8004cb0 <osMutexNew>
 80144de:	4602      	mov	r2, r0
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d102      	bne.n	80144f2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80144ec:	f04f 33ff 	mov.w	r3, #4294967295
 80144f0:	e000      	b.n	80144f4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3708      	adds	r7, #8
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f04f 31ff 	mov.w	r1, #4294967295
 801450c:	4618      	mov	r0, r3
 801450e:	f7f0 fc55 	bl	8004dbc <osMutexAcquire>
#endif
}
 8014512:	bf00      	nop
 8014514:	3708      	adds	r7, #8
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4618      	mov	r0, r3
 8014528:	f7f0 fc93 	bl	8004e52 <osMutexRelease>
}
 801452c:	bf00      	nop
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b08e      	sub	sp, #56	@ 0x38
 8014538:	af00      	add	r7, sp, #0
 801453a:	60f8      	str	r0, [r7, #12]
 801453c:	60b9      	str	r1, [r7, #8]
 801453e:	607a      	str	r2, [r7, #4]
 8014540:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8014542:	f107 0314 	add.w	r3, r7, #20
 8014546:	2224      	movs	r2, #36	@ 0x24
 8014548:	2100      	movs	r1, #0
 801454a:	4618      	mov	r0, r3
 801454c:	f000 f965 	bl	801481a <memset>
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	617b      	str	r3, [r7, #20]
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801455c:	f107 0314 	add.w	r3, r7, #20
 8014560:	461a      	mov	r2, r3
 8014562:	6879      	ldr	r1, [r7, #4]
 8014564:	68b8      	ldr	r0, [r7, #8]
 8014566:	f7f0 faf6 	bl	8004b56 <osThreadNew>
 801456a:	4603      	mov	r3, r0
#endif
}
 801456c:	4618      	mov	r0, r3
 801456e:	3738      	adds	r7, #56	@ 0x38
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <rand>:
 8014574:	4b16      	ldr	r3, [pc, #88]	@ (80145d0 <rand+0x5c>)
 8014576:	b510      	push	{r4, lr}
 8014578:	681c      	ldr	r4, [r3, #0]
 801457a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801457c:	b9b3      	cbnz	r3, 80145ac <rand+0x38>
 801457e:	2018      	movs	r0, #24
 8014580:	f000 fa94 	bl	8014aac <malloc>
 8014584:	4602      	mov	r2, r0
 8014586:	6320      	str	r0, [r4, #48]	@ 0x30
 8014588:	b920      	cbnz	r0, 8014594 <rand+0x20>
 801458a:	4b12      	ldr	r3, [pc, #72]	@ (80145d4 <rand+0x60>)
 801458c:	4812      	ldr	r0, [pc, #72]	@ (80145d8 <rand+0x64>)
 801458e:	2152      	movs	r1, #82	@ 0x52
 8014590:	f000 fa24 	bl	80149dc <__assert_func>
 8014594:	4911      	ldr	r1, [pc, #68]	@ (80145dc <rand+0x68>)
 8014596:	4b12      	ldr	r3, [pc, #72]	@ (80145e0 <rand+0x6c>)
 8014598:	e9c0 1300 	strd	r1, r3, [r0]
 801459c:	4b11      	ldr	r3, [pc, #68]	@ (80145e4 <rand+0x70>)
 801459e:	6083      	str	r3, [r0, #8]
 80145a0:	230b      	movs	r3, #11
 80145a2:	8183      	strh	r3, [r0, #12]
 80145a4:	2100      	movs	r1, #0
 80145a6:	2001      	movs	r0, #1
 80145a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80145ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80145ae:	480e      	ldr	r0, [pc, #56]	@ (80145e8 <rand+0x74>)
 80145b0:	690b      	ldr	r3, [r1, #16]
 80145b2:	694c      	ldr	r4, [r1, #20]
 80145b4:	4a0d      	ldr	r2, [pc, #52]	@ (80145ec <rand+0x78>)
 80145b6:	4358      	muls	r0, r3
 80145b8:	fb02 0004 	mla	r0, r2, r4, r0
 80145bc:	fba3 3202 	umull	r3, r2, r3, r2
 80145c0:	3301      	adds	r3, #1
 80145c2:	eb40 0002 	adc.w	r0, r0, r2
 80145c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80145ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80145ce:	bd10      	pop	{r4, pc}
 80145d0:	2000002c 	.word	0x2000002c
 80145d4:	0801870a 	.word	0x0801870a
 80145d8:	08018721 	.word	0x08018721
 80145dc:	abcd330e 	.word	0xabcd330e
 80145e0:	e66d1234 	.word	0xe66d1234
 80145e4:	0005deec 	.word	0x0005deec
 80145e8:	5851f42d 	.word	0x5851f42d
 80145ec:	4c957f2d 	.word	0x4c957f2d

080145f0 <std>:
 80145f0:	2300      	movs	r3, #0
 80145f2:	b510      	push	{r4, lr}
 80145f4:	4604      	mov	r4, r0
 80145f6:	e9c0 3300 	strd	r3, r3, [r0]
 80145fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145fe:	6083      	str	r3, [r0, #8]
 8014600:	8181      	strh	r1, [r0, #12]
 8014602:	6643      	str	r3, [r0, #100]	@ 0x64
 8014604:	81c2      	strh	r2, [r0, #14]
 8014606:	6183      	str	r3, [r0, #24]
 8014608:	4619      	mov	r1, r3
 801460a:	2208      	movs	r2, #8
 801460c:	305c      	adds	r0, #92	@ 0x5c
 801460e:	f000 f904 	bl	801481a <memset>
 8014612:	4b0d      	ldr	r3, [pc, #52]	@ (8014648 <std+0x58>)
 8014614:	6263      	str	r3, [r4, #36]	@ 0x24
 8014616:	4b0d      	ldr	r3, [pc, #52]	@ (801464c <std+0x5c>)
 8014618:	62a3      	str	r3, [r4, #40]	@ 0x28
 801461a:	4b0d      	ldr	r3, [pc, #52]	@ (8014650 <std+0x60>)
 801461c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801461e:	4b0d      	ldr	r3, [pc, #52]	@ (8014654 <std+0x64>)
 8014620:	6323      	str	r3, [r4, #48]	@ 0x30
 8014622:	4b0d      	ldr	r3, [pc, #52]	@ (8014658 <std+0x68>)
 8014624:	6224      	str	r4, [r4, #32]
 8014626:	429c      	cmp	r4, r3
 8014628:	d006      	beq.n	8014638 <std+0x48>
 801462a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801462e:	4294      	cmp	r4, r2
 8014630:	d002      	beq.n	8014638 <std+0x48>
 8014632:	33d0      	adds	r3, #208	@ 0xd0
 8014634:	429c      	cmp	r4, r3
 8014636:	d105      	bne.n	8014644 <std+0x54>
 8014638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014640:	f000 b9ba 	b.w	80149b8 <__retarget_lock_init_recursive>
 8014644:	bd10      	pop	{r4, pc}
 8014646:	bf00      	nop
 8014648:	08014775 	.word	0x08014775
 801464c:	08014797 	.word	0x08014797
 8014650:	080147cf 	.word	0x080147cf
 8014654:	080147f3 	.word	0x080147f3
 8014658:	20004bf8 	.word	0x20004bf8

0801465c <stdio_exit_handler>:
 801465c:	4a02      	ldr	r2, [pc, #8]	@ (8014668 <stdio_exit_handler+0xc>)
 801465e:	4903      	ldr	r1, [pc, #12]	@ (801466c <stdio_exit_handler+0x10>)
 8014660:	4803      	ldr	r0, [pc, #12]	@ (8014670 <stdio_exit_handler+0x14>)
 8014662:	f000 b869 	b.w	8014738 <_fwalk_sglue>
 8014666:	bf00      	nop
 8014668:	20000020 	.word	0x20000020
 801466c:	08014d21 	.word	0x08014d21
 8014670:	20000030 	.word	0x20000030

08014674 <cleanup_stdio>:
 8014674:	6841      	ldr	r1, [r0, #4]
 8014676:	4b0c      	ldr	r3, [pc, #48]	@ (80146a8 <cleanup_stdio+0x34>)
 8014678:	4299      	cmp	r1, r3
 801467a:	b510      	push	{r4, lr}
 801467c:	4604      	mov	r4, r0
 801467e:	d001      	beq.n	8014684 <cleanup_stdio+0x10>
 8014680:	f000 fb4e 	bl	8014d20 <_fflush_r>
 8014684:	68a1      	ldr	r1, [r4, #8]
 8014686:	4b09      	ldr	r3, [pc, #36]	@ (80146ac <cleanup_stdio+0x38>)
 8014688:	4299      	cmp	r1, r3
 801468a:	d002      	beq.n	8014692 <cleanup_stdio+0x1e>
 801468c:	4620      	mov	r0, r4
 801468e:	f000 fb47 	bl	8014d20 <_fflush_r>
 8014692:	68e1      	ldr	r1, [r4, #12]
 8014694:	4b06      	ldr	r3, [pc, #24]	@ (80146b0 <cleanup_stdio+0x3c>)
 8014696:	4299      	cmp	r1, r3
 8014698:	d004      	beq.n	80146a4 <cleanup_stdio+0x30>
 801469a:	4620      	mov	r0, r4
 801469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146a0:	f000 bb3e 	b.w	8014d20 <_fflush_r>
 80146a4:	bd10      	pop	{r4, pc}
 80146a6:	bf00      	nop
 80146a8:	20004bf8 	.word	0x20004bf8
 80146ac:	20004c60 	.word	0x20004c60
 80146b0:	20004cc8 	.word	0x20004cc8

080146b4 <global_stdio_init.part.0>:
 80146b4:	b510      	push	{r4, lr}
 80146b6:	4b0b      	ldr	r3, [pc, #44]	@ (80146e4 <global_stdio_init.part.0+0x30>)
 80146b8:	4c0b      	ldr	r4, [pc, #44]	@ (80146e8 <global_stdio_init.part.0+0x34>)
 80146ba:	4a0c      	ldr	r2, [pc, #48]	@ (80146ec <global_stdio_init.part.0+0x38>)
 80146bc:	601a      	str	r2, [r3, #0]
 80146be:	4620      	mov	r0, r4
 80146c0:	2200      	movs	r2, #0
 80146c2:	2104      	movs	r1, #4
 80146c4:	f7ff ff94 	bl	80145f0 <std>
 80146c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80146cc:	2201      	movs	r2, #1
 80146ce:	2109      	movs	r1, #9
 80146d0:	f7ff ff8e 	bl	80145f0 <std>
 80146d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80146d8:	2202      	movs	r2, #2
 80146da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146de:	2112      	movs	r1, #18
 80146e0:	f7ff bf86 	b.w	80145f0 <std>
 80146e4:	20004d30 	.word	0x20004d30
 80146e8:	20004bf8 	.word	0x20004bf8
 80146ec:	0801465d 	.word	0x0801465d

080146f0 <__sfp_lock_acquire>:
 80146f0:	4801      	ldr	r0, [pc, #4]	@ (80146f8 <__sfp_lock_acquire+0x8>)
 80146f2:	f000 b962 	b.w	80149ba <__retarget_lock_acquire_recursive>
 80146f6:	bf00      	nop
 80146f8:	20004d39 	.word	0x20004d39

080146fc <__sfp_lock_release>:
 80146fc:	4801      	ldr	r0, [pc, #4]	@ (8014704 <__sfp_lock_release+0x8>)
 80146fe:	f000 b95d 	b.w	80149bc <__retarget_lock_release_recursive>
 8014702:	bf00      	nop
 8014704:	20004d39 	.word	0x20004d39

08014708 <__sinit>:
 8014708:	b510      	push	{r4, lr}
 801470a:	4604      	mov	r4, r0
 801470c:	f7ff fff0 	bl	80146f0 <__sfp_lock_acquire>
 8014710:	6a23      	ldr	r3, [r4, #32]
 8014712:	b11b      	cbz	r3, 801471c <__sinit+0x14>
 8014714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014718:	f7ff bff0 	b.w	80146fc <__sfp_lock_release>
 801471c:	4b04      	ldr	r3, [pc, #16]	@ (8014730 <__sinit+0x28>)
 801471e:	6223      	str	r3, [r4, #32]
 8014720:	4b04      	ldr	r3, [pc, #16]	@ (8014734 <__sinit+0x2c>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d1f5      	bne.n	8014714 <__sinit+0xc>
 8014728:	f7ff ffc4 	bl	80146b4 <global_stdio_init.part.0>
 801472c:	e7f2      	b.n	8014714 <__sinit+0xc>
 801472e:	bf00      	nop
 8014730:	08014675 	.word	0x08014675
 8014734:	20004d30 	.word	0x20004d30

08014738 <_fwalk_sglue>:
 8014738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801473c:	4607      	mov	r7, r0
 801473e:	4688      	mov	r8, r1
 8014740:	4614      	mov	r4, r2
 8014742:	2600      	movs	r6, #0
 8014744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014748:	f1b9 0901 	subs.w	r9, r9, #1
 801474c:	d505      	bpl.n	801475a <_fwalk_sglue+0x22>
 801474e:	6824      	ldr	r4, [r4, #0]
 8014750:	2c00      	cmp	r4, #0
 8014752:	d1f7      	bne.n	8014744 <_fwalk_sglue+0xc>
 8014754:	4630      	mov	r0, r6
 8014756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801475a:	89ab      	ldrh	r3, [r5, #12]
 801475c:	2b01      	cmp	r3, #1
 801475e:	d907      	bls.n	8014770 <_fwalk_sglue+0x38>
 8014760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014764:	3301      	adds	r3, #1
 8014766:	d003      	beq.n	8014770 <_fwalk_sglue+0x38>
 8014768:	4629      	mov	r1, r5
 801476a:	4638      	mov	r0, r7
 801476c:	47c0      	blx	r8
 801476e:	4306      	orrs	r6, r0
 8014770:	3568      	adds	r5, #104	@ 0x68
 8014772:	e7e9      	b.n	8014748 <_fwalk_sglue+0x10>

08014774 <__sread>:
 8014774:	b510      	push	{r4, lr}
 8014776:	460c      	mov	r4, r1
 8014778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801477c:	f000 f8ce 	bl	801491c <_read_r>
 8014780:	2800      	cmp	r0, #0
 8014782:	bfab      	itete	ge
 8014784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014786:	89a3      	ldrhlt	r3, [r4, #12]
 8014788:	181b      	addge	r3, r3, r0
 801478a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801478e:	bfac      	ite	ge
 8014790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014792:	81a3      	strhlt	r3, [r4, #12]
 8014794:	bd10      	pop	{r4, pc}

08014796 <__swrite>:
 8014796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801479a:	461f      	mov	r7, r3
 801479c:	898b      	ldrh	r3, [r1, #12]
 801479e:	05db      	lsls	r3, r3, #23
 80147a0:	4605      	mov	r5, r0
 80147a2:	460c      	mov	r4, r1
 80147a4:	4616      	mov	r6, r2
 80147a6:	d505      	bpl.n	80147b4 <__swrite+0x1e>
 80147a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ac:	2302      	movs	r3, #2
 80147ae:	2200      	movs	r2, #0
 80147b0:	f000 f8a2 	bl	80148f8 <_lseek_r>
 80147b4:	89a3      	ldrh	r3, [r4, #12]
 80147b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80147be:	81a3      	strh	r3, [r4, #12]
 80147c0:	4632      	mov	r2, r6
 80147c2:	463b      	mov	r3, r7
 80147c4:	4628      	mov	r0, r5
 80147c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147ca:	f000 b8b9 	b.w	8014940 <_write_r>

080147ce <__sseek>:
 80147ce:	b510      	push	{r4, lr}
 80147d0:	460c      	mov	r4, r1
 80147d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147d6:	f000 f88f 	bl	80148f8 <_lseek_r>
 80147da:	1c43      	adds	r3, r0, #1
 80147dc:	89a3      	ldrh	r3, [r4, #12]
 80147de:	bf15      	itete	ne
 80147e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80147e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80147e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80147ea:	81a3      	strheq	r3, [r4, #12]
 80147ec:	bf18      	it	ne
 80147ee:	81a3      	strhne	r3, [r4, #12]
 80147f0:	bd10      	pop	{r4, pc}

080147f2 <__sclose>:
 80147f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147f6:	f000 b819 	b.w	801482c <_close_r>

080147fa <memcmp>:
 80147fa:	b510      	push	{r4, lr}
 80147fc:	3901      	subs	r1, #1
 80147fe:	4402      	add	r2, r0
 8014800:	4290      	cmp	r0, r2
 8014802:	d101      	bne.n	8014808 <memcmp+0xe>
 8014804:	2000      	movs	r0, #0
 8014806:	e005      	b.n	8014814 <memcmp+0x1a>
 8014808:	7803      	ldrb	r3, [r0, #0]
 801480a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801480e:	42a3      	cmp	r3, r4
 8014810:	d001      	beq.n	8014816 <memcmp+0x1c>
 8014812:	1b18      	subs	r0, r3, r4
 8014814:	bd10      	pop	{r4, pc}
 8014816:	3001      	adds	r0, #1
 8014818:	e7f2      	b.n	8014800 <memcmp+0x6>

0801481a <memset>:
 801481a:	4402      	add	r2, r0
 801481c:	4603      	mov	r3, r0
 801481e:	4293      	cmp	r3, r2
 8014820:	d100      	bne.n	8014824 <memset+0xa>
 8014822:	4770      	bx	lr
 8014824:	f803 1b01 	strb.w	r1, [r3], #1
 8014828:	e7f9      	b.n	801481e <memset+0x4>
	...

0801482c <_close_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d06      	ldr	r5, [pc, #24]	@ (8014848 <_close_r+0x1c>)
 8014830:	2300      	movs	r3, #0
 8014832:	4604      	mov	r4, r0
 8014834:	4608      	mov	r0, r1
 8014836:	602b      	str	r3, [r5, #0]
 8014838:	f7ec fb44 	bl	8000ec4 <_close>
 801483c:	1c43      	adds	r3, r0, #1
 801483e:	d102      	bne.n	8014846 <_close_r+0x1a>
 8014840:	682b      	ldr	r3, [r5, #0]
 8014842:	b103      	cbz	r3, 8014846 <_close_r+0x1a>
 8014844:	6023      	str	r3, [r4, #0]
 8014846:	bd38      	pop	{r3, r4, r5, pc}
 8014848:	20004d34 	.word	0x20004d34

0801484c <_reclaim_reent>:
 801484c:	4b29      	ldr	r3, [pc, #164]	@ (80148f4 <_reclaim_reent+0xa8>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	4283      	cmp	r3, r0
 8014852:	b570      	push	{r4, r5, r6, lr}
 8014854:	4604      	mov	r4, r0
 8014856:	d04b      	beq.n	80148f0 <_reclaim_reent+0xa4>
 8014858:	69c3      	ldr	r3, [r0, #28]
 801485a:	b1ab      	cbz	r3, 8014888 <_reclaim_reent+0x3c>
 801485c:	68db      	ldr	r3, [r3, #12]
 801485e:	b16b      	cbz	r3, 801487c <_reclaim_reent+0x30>
 8014860:	2500      	movs	r5, #0
 8014862:	69e3      	ldr	r3, [r4, #28]
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	5959      	ldr	r1, [r3, r5]
 8014868:	2900      	cmp	r1, #0
 801486a:	d13b      	bne.n	80148e4 <_reclaim_reent+0x98>
 801486c:	3504      	adds	r5, #4
 801486e:	2d80      	cmp	r5, #128	@ 0x80
 8014870:	d1f7      	bne.n	8014862 <_reclaim_reent+0x16>
 8014872:	69e3      	ldr	r3, [r4, #28]
 8014874:	4620      	mov	r0, r4
 8014876:	68d9      	ldr	r1, [r3, #12]
 8014878:	f000 f8ce 	bl	8014a18 <_free_r>
 801487c:	69e3      	ldr	r3, [r4, #28]
 801487e:	6819      	ldr	r1, [r3, #0]
 8014880:	b111      	cbz	r1, 8014888 <_reclaim_reent+0x3c>
 8014882:	4620      	mov	r0, r4
 8014884:	f000 f8c8 	bl	8014a18 <_free_r>
 8014888:	6961      	ldr	r1, [r4, #20]
 801488a:	b111      	cbz	r1, 8014892 <_reclaim_reent+0x46>
 801488c:	4620      	mov	r0, r4
 801488e:	f000 f8c3 	bl	8014a18 <_free_r>
 8014892:	69e1      	ldr	r1, [r4, #28]
 8014894:	b111      	cbz	r1, 801489c <_reclaim_reent+0x50>
 8014896:	4620      	mov	r0, r4
 8014898:	f000 f8be 	bl	8014a18 <_free_r>
 801489c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801489e:	b111      	cbz	r1, 80148a6 <_reclaim_reent+0x5a>
 80148a0:	4620      	mov	r0, r4
 80148a2:	f000 f8b9 	bl	8014a18 <_free_r>
 80148a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148a8:	b111      	cbz	r1, 80148b0 <_reclaim_reent+0x64>
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 f8b4 	bl	8014a18 <_free_r>
 80148b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80148b2:	b111      	cbz	r1, 80148ba <_reclaim_reent+0x6e>
 80148b4:	4620      	mov	r0, r4
 80148b6:	f000 f8af 	bl	8014a18 <_free_r>
 80148ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80148bc:	b111      	cbz	r1, 80148c4 <_reclaim_reent+0x78>
 80148be:	4620      	mov	r0, r4
 80148c0:	f000 f8aa 	bl	8014a18 <_free_r>
 80148c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80148c6:	b111      	cbz	r1, 80148ce <_reclaim_reent+0x82>
 80148c8:	4620      	mov	r0, r4
 80148ca:	f000 f8a5 	bl	8014a18 <_free_r>
 80148ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80148d0:	b111      	cbz	r1, 80148d8 <_reclaim_reent+0x8c>
 80148d2:	4620      	mov	r0, r4
 80148d4:	f000 f8a0 	bl	8014a18 <_free_r>
 80148d8:	6a23      	ldr	r3, [r4, #32]
 80148da:	b14b      	cbz	r3, 80148f0 <_reclaim_reent+0xa4>
 80148dc:	4620      	mov	r0, r4
 80148de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148e2:	4718      	bx	r3
 80148e4:	680e      	ldr	r6, [r1, #0]
 80148e6:	4620      	mov	r0, r4
 80148e8:	f000 f896 	bl	8014a18 <_free_r>
 80148ec:	4631      	mov	r1, r6
 80148ee:	e7bb      	b.n	8014868 <_reclaim_reent+0x1c>
 80148f0:	bd70      	pop	{r4, r5, r6, pc}
 80148f2:	bf00      	nop
 80148f4:	2000002c 	.word	0x2000002c

080148f8 <_lseek_r>:
 80148f8:	b538      	push	{r3, r4, r5, lr}
 80148fa:	4d07      	ldr	r5, [pc, #28]	@ (8014918 <_lseek_r+0x20>)
 80148fc:	4604      	mov	r4, r0
 80148fe:	4608      	mov	r0, r1
 8014900:	4611      	mov	r1, r2
 8014902:	2200      	movs	r2, #0
 8014904:	602a      	str	r2, [r5, #0]
 8014906:	461a      	mov	r2, r3
 8014908:	f7ec fb03 	bl	8000f12 <_lseek>
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	d102      	bne.n	8014916 <_lseek_r+0x1e>
 8014910:	682b      	ldr	r3, [r5, #0]
 8014912:	b103      	cbz	r3, 8014916 <_lseek_r+0x1e>
 8014914:	6023      	str	r3, [r4, #0]
 8014916:	bd38      	pop	{r3, r4, r5, pc}
 8014918:	20004d34 	.word	0x20004d34

0801491c <_read_r>:
 801491c:	b538      	push	{r3, r4, r5, lr}
 801491e:	4d07      	ldr	r5, [pc, #28]	@ (801493c <_read_r+0x20>)
 8014920:	4604      	mov	r4, r0
 8014922:	4608      	mov	r0, r1
 8014924:	4611      	mov	r1, r2
 8014926:	2200      	movs	r2, #0
 8014928:	602a      	str	r2, [r5, #0]
 801492a:	461a      	mov	r2, r3
 801492c:	f7ec fa91 	bl	8000e52 <_read>
 8014930:	1c43      	adds	r3, r0, #1
 8014932:	d102      	bne.n	801493a <_read_r+0x1e>
 8014934:	682b      	ldr	r3, [r5, #0]
 8014936:	b103      	cbz	r3, 801493a <_read_r+0x1e>
 8014938:	6023      	str	r3, [r4, #0]
 801493a:	bd38      	pop	{r3, r4, r5, pc}
 801493c:	20004d34 	.word	0x20004d34

08014940 <_write_r>:
 8014940:	b538      	push	{r3, r4, r5, lr}
 8014942:	4d07      	ldr	r5, [pc, #28]	@ (8014960 <_write_r+0x20>)
 8014944:	4604      	mov	r4, r0
 8014946:	4608      	mov	r0, r1
 8014948:	4611      	mov	r1, r2
 801494a:	2200      	movs	r2, #0
 801494c:	602a      	str	r2, [r5, #0]
 801494e:	461a      	mov	r2, r3
 8014950:	f7ec fa9c 	bl	8000e8c <_write>
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	d102      	bne.n	801495e <_write_r+0x1e>
 8014958:	682b      	ldr	r3, [r5, #0]
 801495a:	b103      	cbz	r3, 801495e <_write_r+0x1e>
 801495c:	6023      	str	r3, [r4, #0]
 801495e:	bd38      	pop	{r3, r4, r5, pc}
 8014960:	20004d34 	.word	0x20004d34

08014964 <__errno>:
 8014964:	4b01      	ldr	r3, [pc, #4]	@ (801496c <__errno+0x8>)
 8014966:	6818      	ldr	r0, [r3, #0]
 8014968:	4770      	bx	lr
 801496a:	bf00      	nop
 801496c:	2000002c 	.word	0x2000002c

08014970 <__libc_init_array>:
 8014970:	b570      	push	{r4, r5, r6, lr}
 8014972:	4d0d      	ldr	r5, [pc, #52]	@ (80149a8 <__libc_init_array+0x38>)
 8014974:	4c0d      	ldr	r4, [pc, #52]	@ (80149ac <__libc_init_array+0x3c>)
 8014976:	1b64      	subs	r4, r4, r5
 8014978:	10a4      	asrs	r4, r4, #2
 801497a:	2600      	movs	r6, #0
 801497c:	42a6      	cmp	r6, r4
 801497e:	d109      	bne.n	8014994 <__libc_init_array+0x24>
 8014980:	4d0b      	ldr	r5, [pc, #44]	@ (80149b0 <__libc_init_array+0x40>)
 8014982:	4c0c      	ldr	r4, [pc, #48]	@ (80149b4 <__libc_init_array+0x44>)
 8014984:	f000 fe48 	bl	8015618 <_init>
 8014988:	1b64      	subs	r4, r4, r5
 801498a:	10a4      	asrs	r4, r4, #2
 801498c:	2600      	movs	r6, #0
 801498e:	42a6      	cmp	r6, r4
 8014990:	d105      	bne.n	801499e <__libc_init_array+0x2e>
 8014992:	bd70      	pop	{r4, r5, r6, pc}
 8014994:	f855 3b04 	ldr.w	r3, [r5], #4
 8014998:	4798      	blx	r3
 801499a:	3601      	adds	r6, #1
 801499c:	e7ee      	b.n	801497c <__libc_init_array+0xc>
 801499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80149a2:	4798      	blx	r3
 80149a4:	3601      	adds	r6, #1
 80149a6:	e7f2      	b.n	801498e <__libc_init_array+0x1e>
 80149a8:	080187f0 	.word	0x080187f0
 80149ac:	080187f0 	.word	0x080187f0
 80149b0:	080187f0 	.word	0x080187f0
 80149b4:	080187f4 	.word	0x080187f4

080149b8 <__retarget_lock_init_recursive>:
 80149b8:	4770      	bx	lr

080149ba <__retarget_lock_acquire_recursive>:
 80149ba:	4770      	bx	lr

080149bc <__retarget_lock_release_recursive>:
 80149bc:	4770      	bx	lr

080149be <memcpy>:
 80149be:	440a      	add	r2, r1
 80149c0:	4291      	cmp	r1, r2
 80149c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80149c6:	d100      	bne.n	80149ca <memcpy+0xc>
 80149c8:	4770      	bx	lr
 80149ca:	b510      	push	{r4, lr}
 80149cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149d4:	4291      	cmp	r1, r2
 80149d6:	d1f9      	bne.n	80149cc <memcpy+0xe>
 80149d8:	bd10      	pop	{r4, pc}
	...

080149dc <__assert_func>:
 80149dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149de:	4614      	mov	r4, r2
 80149e0:	461a      	mov	r2, r3
 80149e2:	4b09      	ldr	r3, [pc, #36]	@ (8014a08 <__assert_func+0x2c>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	4605      	mov	r5, r0
 80149e8:	68d8      	ldr	r0, [r3, #12]
 80149ea:	b954      	cbnz	r4, 8014a02 <__assert_func+0x26>
 80149ec:	4b07      	ldr	r3, [pc, #28]	@ (8014a0c <__assert_func+0x30>)
 80149ee:	461c      	mov	r4, r3
 80149f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149f4:	9100      	str	r1, [sp, #0]
 80149f6:	462b      	mov	r3, r5
 80149f8:	4905      	ldr	r1, [pc, #20]	@ (8014a10 <__assert_func+0x34>)
 80149fa:	f000 f9b9 	bl	8014d70 <fiprintf>
 80149fe:	f000 f9d9 	bl	8014db4 <abort>
 8014a02:	4b04      	ldr	r3, [pc, #16]	@ (8014a14 <__assert_func+0x38>)
 8014a04:	e7f4      	b.n	80149f0 <__assert_func+0x14>
 8014a06:	bf00      	nop
 8014a08:	2000002c 	.word	0x2000002c
 8014a0c:	080187b4 	.word	0x080187b4
 8014a10:	08018786 	.word	0x08018786
 8014a14:	08018779 	.word	0x08018779

08014a18 <_free_r>:
 8014a18:	b538      	push	{r3, r4, r5, lr}
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	2900      	cmp	r1, #0
 8014a1e:	d041      	beq.n	8014aa4 <_free_r+0x8c>
 8014a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a24:	1f0c      	subs	r4, r1, #4
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	bfb8      	it	lt
 8014a2a:	18e4      	addlt	r4, r4, r3
 8014a2c:	f000 f8e8 	bl	8014c00 <__malloc_lock>
 8014a30:	4a1d      	ldr	r2, [pc, #116]	@ (8014aa8 <_free_r+0x90>)
 8014a32:	6813      	ldr	r3, [r2, #0]
 8014a34:	b933      	cbnz	r3, 8014a44 <_free_r+0x2c>
 8014a36:	6063      	str	r3, [r4, #4]
 8014a38:	6014      	str	r4, [r2, #0]
 8014a3a:	4628      	mov	r0, r5
 8014a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a40:	f000 b8e4 	b.w	8014c0c <__malloc_unlock>
 8014a44:	42a3      	cmp	r3, r4
 8014a46:	d908      	bls.n	8014a5a <_free_r+0x42>
 8014a48:	6820      	ldr	r0, [r4, #0]
 8014a4a:	1821      	adds	r1, r4, r0
 8014a4c:	428b      	cmp	r3, r1
 8014a4e:	bf01      	itttt	eq
 8014a50:	6819      	ldreq	r1, [r3, #0]
 8014a52:	685b      	ldreq	r3, [r3, #4]
 8014a54:	1809      	addeq	r1, r1, r0
 8014a56:	6021      	streq	r1, [r4, #0]
 8014a58:	e7ed      	b.n	8014a36 <_free_r+0x1e>
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	b10b      	cbz	r3, 8014a64 <_free_r+0x4c>
 8014a60:	42a3      	cmp	r3, r4
 8014a62:	d9fa      	bls.n	8014a5a <_free_r+0x42>
 8014a64:	6811      	ldr	r1, [r2, #0]
 8014a66:	1850      	adds	r0, r2, r1
 8014a68:	42a0      	cmp	r0, r4
 8014a6a:	d10b      	bne.n	8014a84 <_free_r+0x6c>
 8014a6c:	6820      	ldr	r0, [r4, #0]
 8014a6e:	4401      	add	r1, r0
 8014a70:	1850      	adds	r0, r2, r1
 8014a72:	4283      	cmp	r3, r0
 8014a74:	6011      	str	r1, [r2, #0]
 8014a76:	d1e0      	bne.n	8014a3a <_free_r+0x22>
 8014a78:	6818      	ldr	r0, [r3, #0]
 8014a7a:	685b      	ldr	r3, [r3, #4]
 8014a7c:	6053      	str	r3, [r2, #4]
 8014a7e:	4408      	add	r0, r1
 8014a80:	6010      	str	r0, [r2, #0]
 8014a82:	e7da      	b.n	8014a3a <_free_r+0x22>
 8014a84:	d902      	bls.n	8014a8c <_free_r+0x74>
 8014a86:	230c      	movs	r3, #12
 8014a88:	602b      	str	r3, [r5, #0]
 8014a8a:	e7d6      	b.n	8014a3a <_free_r+0x22>
 8014a8c:	6820      	ldr	r0, [r4, #0]
 8014a8e:	1821      	adds	r1, r4, r0
 8014a90:	428b      	cmp	r3, r1
 8014a92:	bf04      	itt	eq
 8014a94:	6819      	ldreq	r1, [r3, #0]
 8014a96:	685b      	ldreq	r3, [r3, #4]
 8014a98:	6063      	str	r3, [r4, #4]
 8014a9a:	bf04      	itt	eq
 8014a9c:	1809      	addeq	r1, r1, r0
 8014a9e:	6021      	streq	r1, [r4, #0]
 8014aa0:	6054      	str	r4, [r2, #4]
 8014aa2:	e7ca      	b.n	8014a3a <_free_r+0x22>
 8014aa4:	bd38      	pop	{r3, r4, r5, pc}
 8014aa6:	bf00      	nop
 8014aa8:	20004d40 	.word	0x20004d40

08014aac <malloc>:
 8014aac:	4b02      	ldr	r3, [pc, #8]	@ (8014ab8 <malloc+0xc>)
 8014aae:	4601      	mov	r1, r0
 8014ab0:	6818      	ldr	r0, [r3, #0]
 8014ab2:	f000 b825 	b.w	8014b00 <_malloc_r>
 8014ab6:	bf00      	nop
 8014ab8:	2000002c 	.word	0x2000002c

08014abc <sbrk_aligned>:
 8014abc:	b570      	push	{r4, r5, r6, lr}
 8014abe:	4e0f      	ldr	r6, [pc, #60]	@ (8014afc <sbrk_aligned+0x40>)
 8014ac0:	460c      	mov	r4, r1
 8014ac2:	6831      	ldr	r1, [r6, #0]
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	b911      	cbnz	r1, 8014ace <sbrk_aligned+0x12>
 8014ac8:	f000 f964 	bl	8014d94 <_sbrk_r>
 8014acc:	6030      	str	r0, [r6, #0]
 8014ace:	4621      	mov	r1, r4
 8014ad0:	4628      	mov	r0, r5
 8014ad2:	f000 f95f 	bl	8014d94 <_sbrk_r>
 8014ad6:	1c43      	adds	r3, r0, #1
 8014ad8:	d103      	bne.n	8014ae2 <sbrk_aligned+0x26>
 8014ada:	f04f 34ff 	mov.w	r4, #4294967295
 8014ade:	4620      	mov	r0, r4
 8014ae0:	bd70      	pop	{r4, r5, r6, pc}
 8014ae2:	1cc4      	adds	r4, r0, #3
 8014ae4:	f024 0403 	bic.w	r4, r4, #3
 8014ae8:	42a0      	cmp	r0, r4
 8014aea:	d0f8      	beq.n	8014ade <sbrk_aligned+0x22>
 8014aec:	1a21      	subs	r1, r4, r0
 8014aee:	4628      	mov	r0, r5
 8014af0:	f000 f950 	bl	8014d94 <_sbrk_r>
 8014af4:	3001      	adds	r0, #1
 8014af6:	d1f2      	bne.n	8014ade <sbrk_aligned+0x22>
 8014af8:	e7ef      	b.n	8014ada <sbrk_aligned+0x1e>
 8014afa:	bf00      	nop
 8014afc:	20004d3c 	.word	0x20004d3c

08014b00 <_malloc_r>:
 8014b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b04:	1ccd      	adds	r5, r1, #3
 8014b06:	f025 0503 	bic.w	r5, r5, #3
 8014b0a:	3508      	adds	r5, #8
 8014b0c:	2d0c      	cmp	r5, #12
 8014b0e:	bf38      	it	cc
 8014b10:	250c      	movcc	r5, #12
 8014b12:	2d00      	cmp	r5, #0
 8014b14:	4606      	mov	r6, r0
 8014b16:	db01      	blt.n	8014b1c <_malloc_r+0x1c>
 8014b18:	42a9      	cmp	r1, r5
 8014b1a:	d904      	bls.n	8014b26 <_malloc_r+0x26>
 8014b1c:	230c      	movs	r3, #12
 8014b1e:	6033      	str	r3, [r6, #0]
 8014b20:	2000      	movs	r0, #0
 8014b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014bfc <_malloc_r+0xfc>
 8014b2a:	f000 f869 	bl	8014c00 <__malloc_lock>
 8014b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8014b32:	461c      	mov	r4, r3
 8014b34:	bb44      	cbnz	r4, 8014b88 <_malloc_r+0x88>
 8014b36:	4629      	mov	r1, r5
 8014b38:	4630      	mov	r0, r6
 8014b3a:	f7ff ffbf 	bl	8014abc <sbrk_aligned>
 8014b3e:	1c43      	adds	r3, r0, #1
 8014b40:	4604      	mov	r4, r0
 8014b42:	d158      	bne.n	8014bf6 <_malloc_r+0xf6>
 8014b44:	f8d8 4000 	ldr.w	r4, [r8]
 8014b48:	4627      	mov	r7, r4
 8014b4a:	2f00      	cmp	r7, #0
 8014b4c:	d143      	bne.n	8014bd6 <_malloc_r+0xd6>
 8014b4e:	2c00      	cmp	r4, #0
 8014b50:	d04b      	beq.n	8014bea <_malloc_r+0xea>
 8014b52:	6823      	ldr	r3, [r4, #0]
 8014b54:	4639      	mov	r1, r7
 8014b56:	4630      	mov	r0, r6
 8014b58:	eb04 0903 	add.w	r9, r4, r3
 8014b5c:	f000 f91a 	bl	8014d94 <_sbrk_r>
 8014b60:	4581      	cmp	r9, r0
 8014b62:	d142      	bne.n	8014bea <_malloc_r+0xea>
 8014b64:	6821      	ldr	r1, [r4, #0]
 8014b66:	1a6d      	subs	r5, r5, r1
 8014b68:	4629      	mov	r1, r5
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	f7ff ffa6 	bl	8014abc <sbrk_aligned>
 8014b70:	3001      	adds	r0, #1
 8014b72:	d03a      	beq.n	8014bea <_malloc_r+0xea>
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	442b      	add	r3, r5
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8014b7e:	685a      	ldr	r2, [r3, #4]
 8014b80:	bb62      	cbnz	r2, 8014bdc <_malloc_r+0xdc>
 8014b82:	f8c8 7000 	str.w	r7, [r8]
 8014b86:	e00f      	b.n	8014ba8 <_malloc_r+0xa8>
 8014b88:	6822      	ldr	r2, [r4, #0]
 8014b8a:	1b52      	subs	r2, r2, r5
 8014b8c:	d420      	bmi.n	8014bd0 <_malloc_r+0xd0>
 8014b8e:	2a0b      	cmp	r2, #11
 8014b90:	d917      	bls.n	8014bc2 <_malloc_r+0xc2>
 8014b92:	1961      	adds	r1, r4, r5
 8014b94:	42a3      	cmp	r3, r4
 8014b96:	6025      	str	r5, [r4, #0]
 8014b98:	bf18      	it	ne
 8014b9a:	6059      	strne	r1, [r3, #4]
 8014b9c:	6863      	ldr	r3, [r4, #4]
 8014b9e:	bf08      	it	eq
 8014ba0:	f8c8 1000 	streq.w	r1, [r8]
 8014ba4:	5162      	str	r2, [r4, r5]
 8014ba6:	604b      	str	r3, [r1, #4]
 8014ba8:	4630      	mov	r0, r6
 8014baa:	f000 f82f 	bl	8014c0c <__malloc_unlock>
 8014bae:	f104 000b 	add.w	r0, r4, #11
 8014bb2:	1d23      	adds	r3, r4, #4
 8014bb4:	f020 0007 	bic.w	r0, r0, #7
 8014bb8:	1ac2      	subs	r2, r0, r3
 8014bba:	bf1c      	itt	ne
 8014bbc:	1a1b      	subne	r3, r3, r0
 8014bbe:	50a3      	strne	r3, [r4, r2]
 8014bc0:	e7af      	b.n	8014b22 <_malloc_r+0x22>
 8014bc2:	6862      	ldr	r2, [r4, #4]
 8014bc4:	42a3      	cmp	r3, r4
 8014bc6:	bf0c      	ite	eq
 8014bc8:	f8c8 2000 	streq.w	r2, [r8]
 8014bcc:	605a      	strne	r2, [r3, #4]
 8014bce:	e7eb      	b.n	8014ba8 <_malloc_r+0xa8>
 8014bd0:	4623      	mov	r3, r4
 8014bd2:	6864      	ldr	r4, [r4, #4]
 8014bd4:	e7ae      	b.n	8014b34 <_malloc_r+0x34>
 8014bd6:	463c      	mov	r4, r7
 8014bd8:	687f      	ldr	r7, [r7, #4]
 8014bda:	e7b6      	b.n	8014b4a <_malloc_r+0x4a>
 8014bdc:	461a      	mov	r2, r3
 8014bde:	685b      	ldr	r3, [r3, #4]
 8014be0:	42a3      	cmp	r3, r4
 8014be2:	d1fb      	bne.n	8014bdc <_malloc_r+0xdc>
 8014be4:	2300      	movs	r3, #0
 8014be6:	6053      	str	r3, [r2, #4]
 8014be8:	e7de      	b.n	8014ba8 <_malloc_r+0xa8>
 8014bea:	230c      	movs	r3, #12
 8014bec:	6033      	str	r3, [r6, #0]
 8014bee:	4630      	mov	r0, r6
 8014bf0:	f000 f80c 	bl	8014c0c <__malloc_unlock>
 8014bf4:	e794      	b.n	8014b20 <_malloc_r+0x20>
 8014bf6:	6005      	str	r5, [r0, #0]
 8014bf8:	e7d6      	b.n	8014ba8 <_malloc_r+0xa8>
 8014bfa:	bf00      	nop
 8014bfc:	20004d40 	.word	0x20004d40

08014c00 <__malloc_lock>:
 8014c00:	4801      	ldr	r0, [pc, #4]	@ (8014c08 <__malloc_lock+0x8>)
 8014c02:	f7ff beda 	b.w	80149ba <__retarget_lock_acquire_recursive>
 8014c06:	bf00      	nop
 8014c08:	20004d38 	.word	0x20004d38

08014c0c <__malloc_unlock>:
 8014c0c:	4801      	ldr	r0, [pc, #4]	@ (8014c14 <__malloc_unlock+0x8>)
 8014c0e:	f7ff bed5 	b.w	80149bc <__retarget_lock_release_recursive>
 8014c12:	bf00      	nop
 8014c14:	20004d38 	.word	0x20004d38

08014c18 <__sflush_r>:
 8014c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c20:	0716      	lsls	r6, r2, #28
 8014c22:	4605      	mov	r5, r0
 8014c24:	460c      	mov	r4, r1
 8014c26:	d454      	bmi.n	8014cd2 <__sflush_r+0xba>
 8014c28:	684b      	ldr	r3, [r1, #4]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	dc02      	bgt.n	8014c34 <__sflush_r+0x1c>
 8014c2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	dd48      	ble.n	8014cc6 <__sflush_r+0xae>
 8014c34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c36:	2e00      	cmp	r6, #0
 8014c38:	d045      	beq.n	8014cc6 <__sflush_r+0xae>
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c40:	682f      	ldr	r7, [r5, #0]
 8014c42:	6a21      	ldr	r1, [r4, #32]
 8014c44:	602b      	str	r3, [r5, #0]
 8014c46:	d030      	beq.n	8014caa <__sflush_r+0x92>
 8014c48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014c4a:	89a3      	ldrh	r3, [r4, #12]
 8014c4c:	0759      	lsls	r1, r3, #29
 8014c4e:	d505      	bpl.n	8014c5c <__sflush_r+0x44>
 8014c50:	6863      	ldr	r3, [r4, #4]
 8014c52:	1ad2      	subs	r2, r2, r3
 8014c54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014c56:	b10b      	cbz	r3, 8014c5c <__sflush_r+0x44>
 8014c58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014c5a:	1ad2      	subs	r2, r2, r3
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c60:	6a21      	ldr	r1, [r4, #32]
 8014c62:	4628      	mov	r0, r5
 8014c64:	47b0      	blx	r6
 8014c66:	1c43      	adds	r3, r0, #1
 8014c68:	89a3      	ldrh	r3, [r4, #12]
 8014c6a:	d106      	bne.n	8014c7a <__sflush_r+0x62>
 8014c6c:	6829      	ldr	r1, [r5, #0]
 8014c6e:	291d      	cmp	r1, #29
 8014c70:	d82b      	bhi.n	8014cca <__sflush_r+0xb2>
 8014c72:	4a2a      	ldr	r2, [pc, #168]	@ (8014d1c <__sflush_r+0x104>)
 8014c74:	410a      	asrs	r2, r1
 8014c76:	07d6      	lsls	r6, r2, #31
 8014c78:	d427      	bmi.n	8014cca <__sflush_r+0xb2>
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	6062      	str	r2, [r4, #4]
 8014c7e:	04d9      	lsls	r1, r3, #19
 8014c80:	6922      	ldr	r2, [r4, #16]
 8014c82:	6022      	str	r2, [r4, #0]
 8014c84:	d504      	bpl.n	8014c90 <__sflush_r+0x78>
 8014c86:	1c42      	adds	r2, r0, #1
 8014c88:	d101      	bne.n	8014c8e <__sflush_r+0x76>
 8014c8a:	682b      	ldr	r3, [r5, #0]
 8014c8c:	b903      	cbnz	r3, 8014c90 <__sflush_r+0x78>
 8014c8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c92:	602f      	str	r7, [r5, #0]
 8014c94:	b1b9      	cbz	r1, 8014cc6 <__sflush_r+0xae>
 8014c96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c9a:	4299      	cmp	r1, r3
 8014c9c:	d002      	beq.n	8014ca4 <__sflush_r+0x8c>
 8014c9e:	4628      	mov	r0, r5
 8014ca0:	f7ff feba 	bl	8014a18 <_free_r>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ca8:	e00d      	b.n	8014cc6 <__sflush_r+0xae>
 8014caa:	2301      	movs	r3, #1
 8014cac:	4628      	mov	r0, r5
 8014cae:	47b0      	blx	r6
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	1c50      	adds	r0, r2, #1
 8014cb4:	d1c9      	bne.n	8014c4a <__sflush_r+0x32>
 8014cb6:	682b      	ldr	r3, [r5, #0]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d0c6      	beq.n	8014c4a <__sflush_r+0x32>
 8014cbc:	2b1d      	cmp	r3, #29
 8014cbe:	d001      	beq.n	8014cc4 <__sflush_r+0xac>
 8014cc0:	2b16      	cmp	r3, #22
 8014cc2:	d11e      	bne.n	8014d02 <__sflush_r+0xea>
 8014cc4:	602f      	str	r7, [r5, #0]
 8014cc6:	2000      	movs	r0, #0
 8014cc8:	e022      	b.n	8014d10 <__sflush_r+0xf8>
 8014cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cce:	b21b      	sxth	r3, r3
 8014cd0:	e01b      	b.n	8014d0a <__sflush_r+0xf2>
 8014cd2:	690f      	ldr	r7, [r1, #16]
 8014cd4:	2f00      	cmp	r7, #0
 8014cd6:	d0f6      	beq.n	8014cc6 <__sflush_r+0xae>
 8014cd8:	0793      	lsls	r3, r2, #30
 8014cda:	680e      	ldr	r6, [r1, #0]
 8014cdc:	bf08      	it	eq
 8014cde:	694b      	ldreq	r3, [r1, #20]
 8014ce0:	600f      	str	r7, [r1, #0]
 8014ce2:	bf18      	it	ne
 8014ce4:	2300      	movne	r3, #0
 8014ce6:	eba6 0807 	sub.w	r8, r6, r7
 8014cea:	608b      	str	r3, [r1, #8]
 8014cec:	f1b8 0f00 	cmp.w	r8, #0
 8014cf0:	dde9      	ble.n	8014cc6 <__sflush_r+0xae>
 8014cf2:	6a21      	ldr	r1, [r4, #32]
 8014cf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014cf6:	4643      	mov	r3, r8
 8014cf8:	463a      	mov	r2, r7
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	47b0      	blx	r6
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	dc08      	bgt.n	8014d14 <__sflush_r+0xfc>
 8014d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d0a:	81a3      	strh	r3, [r4, #12]
 8014d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d14:	4407      	add	r7, r0
 8014d16:	eba8 0800 	sub.w	r8, r8, r0
 8014d1a:	e7e7      	b.n	8014cec <__sflush_r+0xd4>
 8014d1c:	dfbffffe 	.word	0xdfbffffe

08014d20 <_fflush_r>:
 8014d20:	b538      	push	{r3, r4, r5, lr}
 8014d22:	690b      	ldr	r3, [r1, #16]
 8014d24:	4605      	mov	r5, r0
 8014d26:	460c      	mov	r4, r1
 8014d28:	b913      	cbnz	r3, 8014d30 <_fflush_r+0x10>
 8014d2a:	2500      	movs	r5, #0
 8014d2c:	4628      	mov	r0, r5
 8014d2e:	bd38      	pop	{r3, r4, r5, pc}
 8014d30:	b118      	cbz	r0, 8014d3a <_fflush_r+0x1a>
 8014d32:	6a03      	ldr	r3, [r0, #32]
 8014d34:	b90b      	cbnz	r3, 8014d3a <_fflush_r+0x1a>
 8014d36:	f7ff fce7 	bl	8014708 <__sinit>
 8014d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d0f3      	beq.n	8014d2a <_fflush_r+0xa>
 8014d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d44:	07d0      	lsls	r0, r2, #31
 8014d46:	d404      	bmi.n	8014d52 <_fflush_r+0x32>
 8014d48:	0599      	lsls	r1, r3, #22
 8014d4a:	d402      	bmi.n	8014d52 <_fflush_r+0x32>
 8014d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d4e:	f7ff fe34 	bl	80149ba <__retarget_lock_acquire_recursive>
 8014d52:	4628      	mov	r0, r5
 8014d54:	4621      	mov	r1, r4
 8014d56:	f7ff ff5f 	bl	8014c18 <__sflush_r>
 8014d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d5c:	07da      	lsls	r2, r3, #31
 8014d5e:	4605      	mov	r5, r0
 8014d60:	d4e4      	bmi.n	8014d2c <_fflush_r+0xc>
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	059b      	lsls	r3, r3, #22
 8014d66:	d4e1      	bmi.n	8014d2c <_fflush_r+0xc>
 8014d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d6a:	f7ff fe27 	bl	80149bc <__retarget_lock_release_recursive>
 8014d6e:	e7dd      	b.n	8014d2c <_fflush_r+0xc>

08014d70 <fiprintf>:
 8014d70:	b40e      	push	{r1, r2, r3}
 8014d72:	b503      	push	{r0, r1, lr}
 8014d74:	4601      	mov	r1, r0
 8014d76:	ab03      	add	r3, sp, #12
 8014d78:	4805      	ldr	r0, [pc, #20]	@ (8014d90 <fiprintf+0x20>)
 8014d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7e:	6800      	ldr	r0, [r0, #0]
 8014d80:	9301      	str	r3, [sp, #4]
 8014d82:	f000 f847 	bl	8014e14 <_vfiprintf_r>
 8014d86:	b002      	add	sp, #8
 8014d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d8c:	b003      	add	sp, #12
 8014d8e:	4770      	bx	lr
 8014d90:	2000002c 	.word	0x2000002c

08014d94 <_sbrk_r>:
 8014d94:	b538      	push	{r3, r4, r5, lr}
 8014d96:	4d06      	ldr	r5, [pc, #24]	@ (8014db0 <_sbrk_r+0x1c>)
 8014d98:	2300      	movs	r3, #0
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	4608      	mov	r0, r1
 8014d9e:	602b      	str	r3, [r5, #0]
 8014da0:	f7ec f8c4 	bl	8000f2c <_sbrk>
 8014da4:	1c43      	adds	r3, r0, #1
 8014da6:	d102      	bne.n	8014dae <_sbrk_r+0x1a>
 8014da8:	682b      	ldr	r3, [r5, #0]
 8014daa:	b103      	cbz	r3, 8014dae <_sbrk_r+0x1a>
 8014dac:	6023      	str	r3, [r4, #0]
 8014dae:	bd38      	pop	{r3, r4, r5, pc}
 8014db0:	20004d34 	.word	0x20004d34

08014db4 <abort>:
 8014db4:	b508      	push	{r3, lr}
 8014db6:	2006      	movs	r0, #6
 8014db8:	f000 fb8e 	bl	80154d8 <raise>
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	f7ec f83d 	bl	8000e3c <_exit>

08014dc2 <__sfputc_r>:
 8014dc2:	6893      	ldr	r3, [r2, #8]
 8014dc4:	3b01      	subs	r3, #1
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	b410      	push	{r4}
 8014dca:	6093      	str	r3, [r2, #8]
 8014dcc:	da08      	bge.n	8014de0 <__sfputc_r+0x1e>
 8014dce:	6994      	ldr	r4, [r2, #24]
 8014dd0:	42a3      	cmp	r3, r4
 8014dd2:	db01      	blt.n	8014dd8 <__sfputc_r+0x16>
 8014dd4:	290a      	cmp	r1, #10
 8014dd6:	d103      	bne.n	8014de0 <__sfputc_r+0x1e>
 8014dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ddc:	f000 bac0 	b.w	8015360 <__swbuf_r>
 8014de0:	6813      	ldr	r3, [r2, #0]
 8014de2:	1c58      	adds	r0, r3, #1
 8014de4:	6010      	str	r0, [r2, #0]
 8014de6:	7019      	strb	r1, [r3, #0]
 8014de8:	4608      	mov	r0, r1
 8014dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dee:	4770      	bx	lr

08014df0 <__sfputs_r>:
 8014df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014df2:	4606      	mov	r6, r0
 8014df4:	460f      	mov	r7, r1
 8014df6:	4614      	mov	r4, r2
 8014df8:	18d5      	adds	r5, r2, r3
 8014dfa:	42ac      	cmp	r4, r5
 8014dfc:	d101      	bne.n	8014e02 <__sfputs_r+0x12>
 8014dfe:	2000      	movs	r0, #0
 8014e00:	e007      	b.n	8014e12 <__sfputs_r+0x22>
 8014e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e06:	463a      	mov	r2, r7
 8014e08:	4630      	mov	r0, r6
 8014e0a:	f7ff ffda 	bl	8014dc2 <__sfputc_r>
 8014e0e:	1c43      	adds	r3, r0, #1
 8014e10:	d1f3      	bne.n	8014dfa <__sfputs_r+0xa>
 8014e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e14 <_vfiprintf_r>:
 8014e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e18:	460d      	mov	r5, r1
 8014e1a:	b09d      	sub	sp, #116	@ 0x74
 8014e1c:	4614      	mov	r4, r2
 8014e1e:	4698      	mov	r8, r3
 8014e20:	4606      	mov	r6, r0
 8014e22:	b118      	cbz	r0, 8014e2c <_vfiprintf_r+0x18>
 8014e24:	6a03      	ldr	r3, [r0, #32]
 8014e26:	b90b      	cbnz	r3, 8014e2c <_vfiprintf_r+0x18>
 8014e28:	f7ff fc6e 	bl	8014708 <__sinit>
 8014e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e2e:	07d9      	lsls	r1, r3, #31
 8014e30:	d405      	bmi.n	8014e3e <_vfiprintf_r+0x2a>
 8014e32:	89ab      	ldrh	r3, [r5, #12]
 8014e34:	059a      	lsls	r2, r3, #22
 8014e36:	d402      	bmi.n	8014e3e <_vfiprintf_r+0x2a>
 8014e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e3a:	f7ff fdbe 	bl	80149ba <__retarget_lock_acquire_recursive>
 8014e3e:	89ab      	ldrh	r3, [r5, #12]
 8014e40:	071b      	lsls	r3, r3, #28
 8014e42:	d501      	bpl.n	8014e48 <_vfiprintf_r+0x34>
 8014e44:	692b      	ldr	r3, [r5, #16]
 8014e46:	b99b      	cbnz	r3, 8014e70 <_vfiprintf_r+0x5c>
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	f000 fac6 	bl	80153dc <__swsetup_r>
 8014e50:	b170      	cbz	r0, 8014e70 <_vfiprintf_r+0x5c>
 8014e52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014e54:	07dc      	lsls	r4, r3, #31
 8014e56:	d504      	bpl.n	8014e62 <_vfiprintf_r+0x4e>
 8014e58:	f04f 30ff 	mov.w	r0, #4294967295
 8014e5c:	b01d      	add	sp, #116	@ 0x74
 8014e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e62:	89ab      	ldrh	r3, [r5, #12]
 8014e64:	0598      	lsls	r0, r3, #22
 8014e66:	d4f7      	bmi.n	8014e58 <_vfiprintf_r+0x44>
 8014e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014e6a:	f7ff fda7 	bl	80149bc <__retarget_lock_release_recursive>
 8014e6e:	e7f3      	b.n	8014e58 <_vfiprintf_r+0x44>
 8014e70:	2300      	movs	r3, #0
 8014e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e74:	2320      	movs	r3, #32
 8014e76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e7e:	2330      	movs	r3, #48	@ 0x30
 8014e80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015030 <_vfiprintf_r+0x21c>
 8014e84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014e88:	f04f 0901 	mov.w	r9, #1
 8014e8c:	4623      	mov	r3, r4
 8014e8e:	469a      	mov	sl, r3
 8014e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e94:	b10a      	cbz	r2, 8014e9a <_vfiprintf_r+0x86>
 8014e96:	2a25      	cmp	r2, #37	@ 0x25
 8014e98:	d1f9      	bne.n	8014e8e <_vfiprintf_r+0x7a>
 8014e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8014e9e:	d00b      	beq.n	8014eb8 <_vfiprintf_r+0xa4>
 8014ea0:	465b      	mov	r3, fp
 8014ea2:	4622      	mov	r2, r4
 8014ea4:	4629      	mov	r1, r5
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f7ff ffa2 	bl	8014df0 <__sfputs_r>
 8014eac:	3001      	adds	r0, #1
 8014eae:	f000 80a7 	beq.w	8015000 <_vfiprintf_r+0x1ec>
 8014eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014eb4:	445a      	add	r2, fp
 8014eb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8014eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f000 809f 	beq.w	8015000 <_vfiprintf_r+0x1ec>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ecc:	f10a 0a01 	add.w	sl, sl, #1
 8014ed0:	9304      	str	r3, [sp, #16]
 8014ed2:	9307      	str	r3, [sp, #28]
 8014ed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ed8:	931a      	str	r3, [sp, #104]	@ 0x68
 8014eda:	4654      	mov	r4, sl
 8014edc:	2205      	movs	r2, #5
 8014ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ee2:	4853      	ldr	r0, [pc, #332]	@ (8015030 <_vfiprintf_r+0x21c>)
 8014ee4:	f7eb f984 	bl	80001f0 <memchr>
 8014ee8:	9a04      	ldr	r2, [sp, #16]
 8014eea:	b9d8      	cbnz	r0, 8014f24 <_vfiprintf_r+0x110>
 8014eec:	06d1      	lsls	r1, r2, #27
 8014eee:	bf44      	itt	mi
 8014ef0:	2320      	movmi	r3, #32
 8014ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014ef6:	0713      	lsls	r3, r2, #28
 8014ef8:	bf44      	itt	mi
 8014efa:	232b      	movmi	r3, #43	@ 0x2b
 8014efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f00:	f89a 3000 	ldrb.w	r3, [sl]
 8014f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f06:	d015      	beq.n	8014f34 <_vfiprintf_r+0x120>
 8014f08:	9a07      	ldr	r2, [sp, #28]
 8014f0a:	4654      	mov	r4, sl
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	f04f 0c0a 	mov.w	ip, #10
 8014f12:	4621      	mov	r1, r4
 8014f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f18:	3b30      	subs	r3, #48	@ 0x30
 8014f1a:	2b09      	cmp	r3, #9
 8014f1c:	d94b      	bls.n	8014fb6 <_vfiprintf_r+0x1a2>
 8014f1e:	b1b0      	cbz	r0, 8014f4e <_vfiprintf_r+0x13a>
 8014f20:	9207      	str	r2, [sp, #28]
 8014f22:	e014      	b.n	8014f4e <_vfiprintf_r+0x13a>
 8014f24:	eba0 0308 	sub.w	r3, r0, r8
 8014f28:	fa09 f303 	lsl.w	r3, r9, r3
 8014f2c:	4313      	orrs	r3, r2
 8014f2e:	9304      	str	r3, [sp, #16]
 8014f30:	46a2      	mov	sl, r4
 8014f32:	e7d2      	b.n	8014eda <_vfiprintf_r+0xc6>
 8014f34:	9b03      	ldr	r3, [sp, #12]
 8014f36:	1d19      	adds	r1, r3, #4
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	9103      	str	r1, [sp, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	bfbb      	ittet	lt
 8014f40:	425b      	neglt	r3, r3
 8014f42:	f042 0202 	orrlt.w	r2, r2, #2
 8014f46:	9307      	strge	r3, [sp, #28]
 8014f48:	9307      	strlt	r3, [sp, #28]
 8014f4a:	bfb8      	it	lt
 8014f4c:	9204      	strlt	r2, [sp, #16]
 8014f4e:	7823      	ldrb	r3, [r4, #0]
 8014f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8014f52:	d10a      	bne.n	8014f6a <_vfiprintf_r+0x156>
 8014f54:	7863      	ldrb	r3, [r4, #1]
 8014f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f58:	d132      	bne.n	8014fc0 <_vfiprintf_r+0x1ac>
 8014f5a:	9b03      	ldr	r3, [sp, #12]
 8014f5c:	1d1a      	adds	r2, r3, #4
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	9203      	str	r2, [sp, #12]
 8014f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014f66:	3402      	adds	r4, #2
 8014f68:	9305      	str	r3, [sp, #20]
 8014f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015040 <_vfiprintf_r+0x22c>
 8014f6e:	7821      	ldrb	r1, [r4, #0]
 8014f70:	2203      	movs	r2, #3
 8014f72:	4650      	mov	r0, sl
 8014f74:	f7eb f93c 	bl	80001f0 <memchr>
 8014f78:	b138      	cbz	r0, 8014f8a <_vfiprintf_r+0x176>
 8014f7a:	9b04      	ldr	r3, [sp, #16]
 8014f7c:	eba0 000a 	sub.w	r0, r0, sl
 8014f80:	2240      	movs	r2, #64	@ 0x40
 8014f82:	4082      	lsls	r2, r0
 8014f84:	4313      	orrs	r3, r2
 8014f86:	3401      	adds	r4, #1
 8014f88:	9304      	str	r3, [sp, #16]
 8014f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f8e:	4829      	ldr	r0, [pc, #164]	@ (8015034 <_vfiprintf_r+0x220>)
 8014f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014f94:	2206      	movs	r2, #6
 8014f96:	f7eb f92b 	bl	80001f0 <memchr>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d03f      	beq.n	801501e <_vfiprintf_r+0x20a>
 8014f9e:	4b26      	ldr	r3, [pc, #152]	@ (8015038 <_vfiprintf_r+0x224>)
 8014fa0:	bb1b      	cbnz	r3, 8014fea <_vfiprintf_r+0x1d6>
 8014fa2:	9b03      	ldr	r3, [sp, #12]
 8014fa4:	3307      	adds	r3, #7
 8014fa6:	f023 0307 	bic.w	r3, r3, #7
 8014faa:	3308      	adds	r3, #8
 8014fac:	9303      	str	r3, [sp, #12]
 8014fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014fb0:	443b      	add	r3, r7
 8014fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fb4:	e76a      	b.n	8014e8c <_vfiprintf_r+0x78>
 8014fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fba:	460c      	mov	r4, r1
 8014fbc:	2001      	movs	r0, #1
 8014fbe:	e7a8      	b.n	8014f12 <_vfiprintf_r+0xfe>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	3401      	adds	r4, #1
 8014fc4:	9305      	str	r3, [sp, #20]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	f04f 0c0a 	mov.w	ip, #10
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fd2:	3a30      	subs	r2, #48	@ 0x30
 8014fd4:	2a09      	cmp	r2, #9
 8014fd6:	d903      	bls.n	8014fe0 <_vfiprintf_r+0x1cc>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d0c6      	beq.n	8014f6a <_vfiprintf_r+0x156>
 8014fdc:	9105      	str	r1, [sp, #20]
 8014fde:	e7c4      	b.n	8014f6a <_vfiprintf_r+0x156>
 8014fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e7f0      	b.n	8014fcc <_vfiprintf_r+0x1b8>
 8014fea:	ab03      	add	r3, sp, #12
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	462a      	mov	r2, r5
 8014ff0:	4b12      	ldr	r3, [pc, #72]	@ (801503c <_vfiprintf_r+0x228>)
 8014ff2:	a904      	add	r1, sp, #16
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	f3af 8000 	nop.w
 8014ffa:	4607      	mov	r7, r0
 8014ffc:	1c78      	adds	r0, r7, #1
 8014ffe:	d1d6      	bne.n	8014fae <_vfiprintf_r+0x19a>
 8015000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015002:	07d9      	lsls	r1, r3, #31
 8015004:	d405      	bmi.n	8015012 <_vfiprintf_r+0x1fe>
 8015006:	89ab      	ldrh	r3, [r5, #12]
 8015008:	059a      	lsls	r2, r3, #22
 801500a:	d402      	bmi.n	8015012 <_vfiprintf_r+0x1fe>
 801500c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801500e:	f7ff fcd5 	bl	80149bc <__retarget_lock_release_recursive>
 8015012:	89ab      	ldrh	r3, [r5, #12]
 8015014:	065b      	lsls	r3, r3, #25
 8015016:	f53f af1f 	bmi.w	8014e58 <_vfiprintf_r+0x44>
 801501a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801501c:	e71e      	b.n	8014e5c <_vfiprintf_r+0x48>
 801501e:	ab03      	add	r3, sp, #12
 8015020:	9300      	str	r3, [sp, #0]
 8015022:	462a      	mov	r2, r5
 8015024:	4b05      	ldr	r3, [pc, #20]	@ (801503c <_vfiprintf_r+0x228>)
 8015026:	a904      	add	r1, sp, #16
 8015028:	4630      	mov	r0, r6
 801502a:	f000 f879 	bl	8015120 <_printf_i>
 801502e:	e7e4      	b.n	8014ffa <_vfiprintf_r+0x1e6>
 8015030:	080187b5 	.word	0x080187b5
 8015034:	080187bf 	.word	0x080187bf
 8015038:	00000000 	.word	0x00000000
 801503c:	08014df1 	.word	0x08014df1
 8015040:	080187bb 	.word	0x080187bb

08015044 <_printf_common>:
 8015044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015048:	4616      	mov	r6, r2
 801504a:	4698      	mov	r8, r3
 801504c:	688a      	ldr	r2, [r1, #8]
 801504e:	690b      	ldr	r3, [r1, #16]
 8015050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015054:	4293      	cmp	r3, r2
 8015056:	bfb8      	it	lt
 8015058:	4613      	movlt	r3, r2
 801505a:	6033      	str	r3, [r6, #0]
 801505c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015060:	4607      	mov	r7, r0
 8015062:	460c      	mov	r4, r1
 8015064:	b10a      	cbz	r2, 801506a <_printf_common+0x26>
 8015066:	3301      	adds	r3, #1
 8015068:	6033      	str	r3, [r6, #0]
 801506a:	6823      	ldr	r3, [r4, #0]
 801506c:	0699      	lsls	r1, r3, #26
 801506e:	bf42      	ittt	mi
 8015070:	6833      	ldrmi	r3, [r6, #0]
 8015072:	3302      	addmi	r3, #2
 8015074:	6033      	strmi	r3, [r6, #0]
 8015076:	6825      	ldr	r5, [r4, #0]
 8015078:	f015 0506 	ands.w	r5, r5, #6
 801507c:	d106      	bne.n	801508c <_printf_common+0x48>
 801507e:	f104 0a19 	add.w	sl, r4, #25
 8015082:	68e3      	ldr	r3, [r4, #12]
 8015084:	6832      	ldr	r2, [r6, #0]
 8015086:	1a9b      	subs	r3, r3, r2
 8015088:	42ab      	cmp	r3, r5
 801508a:	dc26      	bgt.n	80150da <_printf_common+0x96>
 801508c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015090:	6822      	ldr	r2, [r4, #0]
 8015092:	3b00      	subs	r3, #0
 8015094:	bf18      	it	ne
 8015096:	2301      	movne	r3, #1
 8015098:	0692      	lsls	r2, r2, #26
 801509a:	d42b      	bmi.n	80150f4 <_printf_common+0xb0>
 801509c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80150a0:	4641      	mov	r1, r8
 80150a2:	4638      	mov	r0, r7
 80150a4:	47c8      	blx	r9
 80150a6:	3001      	adds	r0, #1
 80150a8:	d01e      	beq.n	80150e8 <_printf_common+0xa4>
 80150aa:	6823      	ldr	r3, [r4, #0]
 80150ac:	6922      	ldr	r2, [r4, #16]
 80150ae:	f003 0306 	and.w	r3, r3, #6
 80150b2:	2b04      	cmp	r3, #4
 80150b4:	bf02      	ittt	eq
 80150b6:	68e5      	ldreq	r5, [r4, #12]
 80150b8:	6833      	ldreq	r3, [r6, #0]
 80150ba:	1aed      	subeq	r5, r5, r3
 80150bc:	68a3      	ldr	r3, [r4, #8]
 80150be:	bf0c      	ite	eq
 80150c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80150c4:	2500      	movne	r5, #0
 80150c6:	4293      	cmp	r3, r2
 80150c8:	bfc4      	itt	gt
 80150ca:	1a9b      	subgt	r3, r3, r2
 80150cc:	18ed      	addgt	r5, r5, r3
 80150ce:	2600      	movs	r6, #0
 80150d0:	341a      	adds	r4, #26
 80150d2:	42b5      	cmp	r5, r6
 80150d4:	d11a      	bne.n	801510c <_printf_common+0xc8>
 80150d6:	2000      	movs	r0, #0
 80150d8:	e008      	b.n	80150ec <_printf_common+0xa8>
 80150da:	2301      	movs	r3, #1
 80150dc:	4652      	mov	r2, sl
 80150de:	4641      	mov	r1, r8
 80150e0:	4638      	mov	r0, r7
 80150e2:	47c8      	blx	r9
 80150e4:	3001      	adds	r0, #1
 80150e6:	d103      	bne.n	80150f0 <_printf_common+0xac>
 80150e8:	f04f 30ff 	mov.w	r0, #4294967295
 80150ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150f0:	3501      	adds	r5, #1
 80150f2:	e7c6      	b.n	8015082 <_printf_common+0x3e>
 80150f4:	18e1      	adds	r1, r4, r3
 80150f6:	1c5a      	adds	r2, r3, #1
 80150f8:	2030      	movs	r0, #48	@ 0x30
 80150fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80150fe:	4422      	add	r2, r4
 8015100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015108:	3302      	adds	r3, #2
 801510a:	e7c7      	b.n	801509c <_printf_common+0x58>
 801510c:	2301      	movs	r3, #1
 801510e:	4622      	mov	r2, r4
 8015110:	4641      	mov	r1, r8
 8015112:	4638      	mov	r0, r7
 8015114:	47c8      	blx	r9
 8015116:	3001      	adds	r0, #1
 8015118:	d0e6      	beq.n	80150e8 <_printf_common+0xa4>
 801511a:	3601      	adds	r6, #1
 801511c:	e7d9      	b.n	80150d2 <_printf_common+0x8e>
	...

08015120 <_printf_i>:
 8015120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015124:	7e0f      	ldrb	r7, [r1, #24]
 8015126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015128:	2f78      	cmp	r7, #120	@ 0x78
 801512a:	4691      	mov	r9, r2
 801512c:	4680      	mov	r8, r0
 801512e:	460c      	mov	r4, r1
 8015130:	469a      	mov	sl, r3
 8015132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015136:	d807      	bhi.n	8015148 <_printf_i+0x28>
 8015138:	2f62      	cmp	r7, #98	@ 0x62
 801513a:	d80a      	bhi.n	8015152 <_printf_i+0x32>
 801513c:	2f00      	cmp	r7, #0
 801513e:	f000 80d2 	beq.w	80152e6 <_printf_i+0x1c6>
 8015142:	2f58      	cmp	r7, #88	@ 0x58
 8015144:	f000 80b9 	beq.w	80152ba <_printf_i+0x19a>
 8015148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801514c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015150:	e03a      	b.n	80151c8 <_printf_i+0xa8>
 8015152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015156:	2b15      	cmp	r3, #21
 8015158:	d8f6      	bhi.n	8015148 <_printf_i+0x28>
 801515a:	a101      	add	r1, pc, #4	@ (adr r1, 8015160 <_printf_i+0x40>)
 801515c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015160:	080151b9 	.word	0x080151b9
 8015164:	080151cd 	.word	0x080151cd
 8015168:	08015149 	.word	0x08015149
 801516c:	08015149 	.word	0x08015149
 8015170:	08015149 	.word	0x08015149
 8015174:	08015149 	.word	0x08015149
 8015178:	080151cd 	.word	0x080151cd
 801517c:	08015149 	.word	0x08015149
 8015180:	08015149 	.word	0x08015149
 8015184:	08015149 	.word	0x08015149
 8015188:	08015149 	.word	0x08015149
 801518c:	080152cd 	.word	0x080152cd
 8015190:	080151f7 	.word	0x080151f7
 8015194:	08015287 	.word	0x08015287
 8015198:	08015149 	.word	0x08015149
 801519c:	08015149 	.word	0x08015149
 80151a0:	080152ef 	.word	0x080152ef
 80151a4:	08015149 	.word	0x08015149
 80151a8:	080151f7 	.word	0x080151f7
 80151ac:	08015149 	.word	0x08015149
 80151b0:	08015149 	.word	0x08015149
 80151b4:	0801528f 	.word	0x0801528f
 80151b8:	6833      	ldr	r3, [r6, #0]
 80151ba:	1d1a      	adds	r2, r3, #4
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	6032      	str	r2, [r6, #0]
 80151c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80151c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80151c8:	2301      	movs	r3, #1
 80151ca:	e09d      	b.n	8015308 <_printf_i+0x1e8>
 80151cc:	6833      	ldr	r3, [r6, #0]
 80151ce:	6820      	ldr	r0, [r4, #0]
 80151d0:	1d19      	adds	r1, r3, #4
 80151d2:	6031      	str	r1, [r6, #0]
 80151d4:	0606      	lsls	r6, r0, #24
 80151d6:	d501      	bpl.n	80151dc <_printf_i+0xbc>
 80151d8:	681d      	ldr	r5, [r3, #0]
 80151da:	e003      	b.n	80151e4 <_printf_i+0xc4>
 80151dc:	0645      	lsls	r5, r0, #25
 80151de:	d5fb      	bpl.n	80151d8 <_printf_i+0xb8>
 80151e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80151e4:	2d00      	cmp	r5, #0
 80151e6:	da03      	bge.n	80151f0 <_printf_i+0xd0>
 80151e8:	232d      	movs	r3, #45	@ 0x2d
 80151ea:	426d      	negs	r5, r5
 80151ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80151f0:	4859      	ldr	r0, [pc, #356]	@ (8015358 <_printf_i+0x238>)
 80151f2:	230a      	movs	r3, #10
 80151f4:	e011      	b.n	801521a <_printf_i+0xfa>
 80151f6:	6821      	ldr	r1, [r4, #0]
 80151f8:	6833      	ldr	r3, [r6, #0]
 80151fa:	0608      	lsls	r0, r1, #24
 80151fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015200:	d402      	bmi.n	8015208 <_printf_i+0xe8>
 8015202:	0649      	lsls	r1, r1, #25
 8015204:	bf48      	it	mi
 8015206:	b2ad      	uxthmi	r5, r5
 8015208:	2f6f      	cmp	r7, #111	@ 0x6f
 801520a:	4853      	ldr	r0, [pc, #332]	@ (8015358 <_printf_i+0x238>)
 801520c:	6033      	str	r3, [r6, #0]
 801520e:	bf14      	ite	ne
 8015210:	230a      	movne	r3, #10
 8015212:	2308      	moveq	r3, #8
 8015214:	2100      	movs	r1, #0
 8015216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801521a:	6866      	ldr	r6, [r4, #4]
 801521c:	60a6      	str	r6, [r4, #8]
 801521e:	2e00      	cmp	r6, #0
 8015220:	bfa2      	ittt	ge
 8015222:	6821      	ldrge	r1, [r4, #0]
 8015224:	f021 0104 	bicge.w	r1, r1, #4
 8015228:	6021      	strge	r1, [r4, #0]
 801522a:	b90d      	cbnz	r5, 8015230 <_printf_i+0x110>
 801522c:	2e00      	cmp	r6, #0
 801522e:	d04b      	beq.n	80152c8 <_printf_i+0x1a8>
 8015230:	4616      	mov	r6, r2
 8015232:	fbb5 f1f3 	udiv	r1, r5, r3
 8015236:	fb03 5711 	mls	r7, r3, r1, r5
 801523a:	5dc7      	ldrb	r7, [r0, r7]
 801523c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015240:	462f      	mov	r7, r5
 8015242:	42bb      	cmp	r3, r7
 8015244:	460d      	mov	r5, r1
 8015246:	d9f4      	bls.n	8015232 <_printf_i+0x112>
 8015248:	2b08      	cmp	r3, #8
 801524a:	d10b      	bne.n	8015264 <_printf_i+0x144>
 801524c:	6823      	ldr	r3, [r4, #0]
 801524e:	07df      	lsls	r7, r3, #31
 8015250:	d508      	bpl.n	8015264 <_printf_i+0x144>
 8015252:	6923      	ldr	r3, [r4, #16]
 8015254:	6861      	ldr	r1, [r4, #4]
 8015256:	4299      	cmp	r1, r3
 8015258:	bfde      	ittt	le
 801525a:	2330      	movle	r3, #48	@ 0x30
 801525c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015260:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015264:	1b92      	subs	r2, r2, r6
 8015266:	6122      	str	r2, [r4, #16]
 8015268:	f8cd a000 	str.w	sl, [sp]
 801526c:	464b      	mov	r3, r9
 801526e:	aa03      	add	r2, sp, #12
 8015270:	4621      	mov	r1, r4
 8015272:	4640      	mov	r0, r8
 8015274:	f7ff fee6 	bl	8015044 <_printf_common>
 8015278:	3001      	adds	r0, #1
 801527a:	d14a      	bne.n	8015312 <_printf_i+0x1f2>
 801527c:	f04f 30ff 	mov.w	r0, #4294967295
 8015280:	b004      	add	sp, #16
 8015282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015286:	6823      	ldr	r3, [r4, #0]
 8015288:	f043 0320 	orr.w	r3, r3, #32
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	4833      	ldr	r0, [pc, #204]	@ (801535c <_printf_i+0x23c>)
 8015290:	2778      	movs	r7, #120	@ 0x78
 8015292:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015296:	6823      	ldr	r3, [r4, #0]
 8015298:	6831      	ldr	r1, [r6, #0]
 801529a:	061f      	lsls	r7, r3, #24
 801529c:	f851 5b04 	ldr.w	r5, [r1], #4
 80152a0:	d402      	bmi.n	80152a8 <_printf_i+0x188>
 80152a2:	065f      	lsls	r7, r3, #25
 80152a4:	bf48      	it	mi
 80152a6:	b2ad      	uxthmi	r5, r5
 80152a8:	6031      	str	r1, [r6, #0]
 80152aa:	07d9      	lsls	r1, r3, #31
 80152ac:	bf44      	itt	mi
 80152ae:	f043 0320 	orrmi.w	r3, r3, #32
 80152b2:	6023      	strmi	r3, [r4, #0]
 80152b4:	b11d      	cbz	r5, 80152be <_printf_i+0x19e>
 80152b6:	2310      	movs	r3, #16
 80152b8:	e7ac      	b.n	8015214 <_printf_i+0xf4>
 80152ba:	4827      	ldr	r0, [pc, #156]	@ (8015358 <_printf_i+0x238>)
 80152bc:	e7e9      	b.n	8015292 <_printf_i+0x172>
 80152be:	6823      	ldr	r3, [r4, #0]
 80152c0:	f023 0320 	bic.w	r3, r3, #32
 80152c4:	6023      	str	r3, [r4, #0]
 80152c6:	e7f6      	b.n	80152b6 <_printf_i+0x196>
 80152c8:	4616      	mov	r6, r2
 80152ca:	e7bd      	b.n	8015248 <_printf_i+0x128>
 80152cc:	6833      	ldr	r3, [r6, #0]
 80152ce:	6825      	ldr	r5, [r4, #0]
 80152d0:	6961      	ldr	r1, [r4, #20]
 80152d2:	1d18      	adds	r0, r3, #4
 80152d4:	6030      	str	r0, [r6, #0]
 80152d6:	062e      	lsls	r6, r5, #24
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	d501      	bpl.n	80152e0 <_printf_i+0x1c0>
 80152dc:	6019      	str	r1, [r3, #0]
 80152de:	e002      	b.n	80152e6 <_printf_i+0x1c6>
 80152e0:	0668      	lsls	r0, r5, #25
 80152e2:	d5fb      	bpl.n	80152dc <_printf_i+0x1bc>
 80152e4:	8019      	strh	r1, [r3, #0]
 80152e6:	2300      	movs	r3, #0
 80152e8:	6123      	str	r3, [r4, #16]
 80152ea:	4616      	mov	r6, r2
 80152ec:	e7bc      	b.n	8015268 <_printf_i+0x148>
 80152ee:	6833      	ldr	r3, [r6, #0]
 80152f0:	1d1a      	adds	r2, r3, #4
 80152f2:	6032      	str	r2, [r6, #0]
 80152f4:	681e      	ldr	r6, [r3, #0]
 80152f6:	6862      	ldr	r2, [r4, #4]
 80152f8:	2100      	movs	r1, #0
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7ea ff78 	bl	80001f0 <memchr>
 8015300:	b108      	cbz	r0, 8015306 <_printf_i+0x1e6>
 8015302:	1b80      	subs	r0, r0, r6
 8015304:	6060      	str	r0, [r4, #4]
 8015306:	6863      	ldr	r3, [r4, #4]
 8015308:	6123      	str	r3, [r4, #16]
 801530a:	2300      	movs	r3, #0
 801530c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015310:	e7aa      	b.n	8015268 <_printf_i+0x148>
 8015312:	6923      	ldr	r3, [r4, #16]
 8015314:	4632      	mov	r2, r6
 8015316:	4649      	mov	r1, r9
 8015318:	4640      	mov	r0, r8
 801531a:	47d0      	blx	sl
 801531c:	3001      	adds	r0, #1
 801531e:	d0ad      	beq.n	801527c <_printf_i+0x15c>
 8015320:	6823      	ldr	r3, [r4, #0]
 8015322:	079b      	lsls	r3, r3, #30
 8015324:	d413      	bmi.n	801534e <_printf_i+0x22e>
 8015326:	68e0      	ldr	r0, [r4, #12]
 8015328:	9b03      	ldr	r3, [sp, #12]
 801532a:	4298      	cmp	r0, r3
 801532c:	bfb8      	it	lt
 801532e:	4618      	movlt	r0, r3
 8015330:	e7a6      	b.n	8015280 <_printf_i+0x160>
 8015332:	2301      	movs	r3, #1
 8015334:	4632      	mov	r2, r6
 8015336:	4649      	mov	r1, r9
 8015338:	4640      	mov	r0, r8
 801533a:	47d0      	blx	sl
 801533c:	3001      	adds	r0, #1
 801533e:	d09d      	beq.n	801527c <_printf_i+0x15c>
 8015340:	3501      	adds	r5, #1
 8015342:	68e3      	ldr	r3, [r4, #12]
 8015344:	9903      	ldr	r1, [sp, #12]
 8015346:	1a5b      	subs	r3, r3, r1
 8015348:	42ab      	cmp	r3, r5
 801534a:	dcf2      	bgt.n	8015332 <_printf_i+0x212>
 801534c:	e7eb      	b.n	8015326 <_printf_i+0x206>
 801534e:	2500      	movs	r5, #0
 8015350:	f104 0619 	add.w	r6, r4, #25
 8015354:	e7f5      	b.n	8015342 <_printf_i+0x222>
 8015356:	bf00      	nop
 8015358:	080187c6 	.word	0x080187c6
 801535c:	080187d7 	.word	0x080187d7

08015360 <__swbuf_r>:
 8015360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015362:	460e      	mov	r6, r1
 8015364:	4614      	mov	r4, r2
 8015366:	4605      	mov	r5, r0
 8015368:	b118      	cbz	r0, 8015372 <__swbuf_r+0x12>
 801536a:	6a03      	ldr	r3, [r0, #32]
 801536c:	b90b      	cbnz	r3, 8015372 <__swbuf_r+0x12>
 801536e:	f7ff f9cb 	bl	8014708 <__sinit>
 8015372:	69a3      	ldr	r3, [r4, #24]
 8015374:	60a3      	str	r3, [r4, #8]
 8015376:	89a3      	ldrh	r3, [r4, #12]
 8015378:	071a      	lsls	r2, r3, #28
 801537a:	d501      	bpl.n	8015380 <__swbuf_r+0x20>
 801537c:	6923      	ldr	r3, [r4, #16]
 801537e:	b943      	cbnz	r3, 8015392 <__swbuf_r+0x32>
 8015380:	4621      	mov	r1, r4
 8015382:	4628      	mov	r0, r5
 8015384:	f000 f82a 	bl	80153dc <__swsetup_r>
 8015388:	b118      	cbz	r0, 8015392 <__swbuf_r+0x32>
 801538a:	f04f 37ff 	mov.w	r7, #4294967295
 801538e:	4638      	mov	r0, r7
 8015390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015392:	6823      	ldr	r3, [r4, #0]
 8015394:	6922      	ldr	r2, [r4, #16]
 8015396:	1a98      	subs	r0, r3, r2
 8015398:	6963      	ldr	r3, [r4, #20]
 801539a:	b2f6      	uxtb	r6, r6
 801539c:	4283      	cmp	r3, r0
 801539e:	4637      	mov	r7, r6
 80153a0:	dc05      	bgt.n	80153ae <__swbuf_r+0x4e>
 80153a2:	4621      	mov	r1, r4
 80153a4:	4628      	mov	r0, r5
 80153a6:	f7ff fcbb 	bl	8014d20 <_fflush_r>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d1ed      	bne.n	801538a <__swbuf_r+0x2a>
 80153ae:	68a3      	ldr	r3, [r4, #8]
 80153b0:	3b01      	subs	r3, #1
 80153b2:	60a3      	str	r3, [r4, #8]
 80153b4:	6823      	ldr	r3, [r4, #0]
 80153b6:	1c5a      	adds	r2, r3, #1
 80153b8:	6022      	str	r2, [r4, #0]
 80153ba:	701e      	strb	r6, [r3, #0]
 80153bc:	6962      	ldr	r2, [r4, #20]
 80153be:	1c43      	adds	r3, r0, #1
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d004      	beq.n	80153ce <__swbuf_r+0x6e>
 80153c4:	89a3      	ldrh	r3, [r4, #12]
 80153c6:	07db      	lsls	r3, r3, #31
 80153c8:	d5e1      	bpl.n	801538e <__swbuf_r+0x2e>
 80153ca:	2e0a      	cmp	r6, #10
 80153cc:	d1df      	bne.n	801538e <__swbuf_r+0x2e>
 80153ce:	4621      	mov	r1, r4
 80153d0:	4628      	mov	r0, r5
 80153d2:	f7ff fca5 	bl	8014d20 <_fflush_r>
 80153d6:	2800      	cmp	r0, #0
 80153d8:	d0d9      	beq.n	801538e <__swbuf_r+0x2e>
 80153da:	e7d6      	b.n	801538a <__swbuf_r+0x2a>

080153dc <__swsetup_r>:
 80153dc:	b538      	push	{r3, r4, r5, lr}
 80153de:	4b29      	ldr	r3, [pc, #164]	@ (8015484 <__swsetup_r+0xa8>)
 80153e0:	4605      	mov	r5, r0
 80153e2:	6818      	ldr	r0, [r3, #0]
 80153e4:	460c      	mov	r4, r1
 80153e6:	b118      	cbz	r0, 80153f0 <__swsetup_r+0x14>
 80153e8:	6a03      	ldr	r3, [r0, #32]
 80153ea:	b90b      	cbnz	r3, 80153f0 <__swsetup_r+0x14>
 80153ec:	f7ff f98c 	bl	8014708 <__sinit>
 80153f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153f4:	0719      	lsls	r1, r3, #28
 80153f6:	d422      	bmi.n	801543e <__swsetup_r+0x62>
 80153f8:	06da      	lsls	r2, r3, #27
 80153fa:	d407      	bmi.n	801540c <__swsetup_r+0x30>
 80153fc:	2209      	movs	r2, #9
 80153fe:	602a      	str	r2, [r5, #0]
 8015400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015404:	81a3      	strh	r3, [r4, #12]
 8015406:	f04f 30ff 	mov.w	r0, #4294967295
 801540a:	e033      	b.n	8015474 <__swsetup_r+0x98>
 801540c:	0758      	lsls	r0, r3, #29
 801540e:	d512      	bpl.n	8015436 <__swsetup_r+0x5a>
 8015410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015412:	b141      	cbz	r1, 8015426 <__swsetup_r+0x4a>
 8015414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015418:	4299      	cmp	r1, r3
 801541a:	d002      	beq.n	8015422 <__swsetup_r+0x46>
 801541c:	4628      	mov	r0, r5
 801541e:	f7ff fafb 	bl	8014a18 <_free_r>
 8015422:	2300      	movs	r3, #0
 8015424:	6363      	str	r3, [r4, #52]	@ 0x34
 8015426:	89a3      	ldrh	r3, [r4, #12]
 8015428:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801542c:	81a3      	strh	r3, [r4, #12]
 801542e:	2300      	movs	r3, #0
 8015430:	6063      	str	r3, [r4, #4]
 8015432:	6923      	ldr	r3, [r4, #16]
 8015434:	6023      	str	r3, [r4, #0]
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f043 0308 	orr.w	r3, r3, #8
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	6923      	ldr	r3, [r4, #16]
 8015440:	b94b      	cbnz	r3, 8015456 <__swsetup_r+0x7a>
 8015442:	89a3      	ldrh	r3, [r4, #12]
 8015444:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801544c:	d003      	beq.n	8015456 <__swsetup_r+0x7a>
 801544e:	4621      	mov	r1, r4
 8015450:	4628      	mov	r0, r5
 8015452:	f000 f883 	bl	801555c <__smakebuf_r>
 8015456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801545a:	f013 0201 	ands.w	r2, r3, #1
 801545e:	d00a      	beq.n	8015476 <__swsetup_r+0x9a>
 8015460:	2200      	movs	r2, #0
 8015462:	60a2      	str	r2, [r4, #8]
 8015464:	6962      	ldr	r2, [r4, #20]
 8015466:	4252      	negs	r2, r2
 8015468:	61a2      	str	r2, [r4, #24]
 801546a:	6922      	ldr	r2, [r4, #16]
 801546c:	b942      	cbnz	r2, 8015480 <__swsetup_r+0xa4>
 801546e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015472:	d1c5      	bne.n	8015400 <__swsetup_r+0x24>
 8015474:	bd38      	pop	{r3, r4, r5, pc}
 8015476:	0799      	lsls	r1, r3, #30
 8015478:	bf58      	it	pl
 801547a:	6962      	ldrpl	r2, [r4, #20]
 801547c:	60a2      	str	r2, [r4, #8]
 801547e:	e7f4      	b.n	801546a <__swsetup_r+0x8e>
 8015480:	2000      	movs	r0, #0
 8015482:	e7f7      	b.n	8015474 <__swsetup_r+0x98>
 8015484:	2000002c 	.word	0x2000002c

08015488 <_raise_r>:
 8015488:	291f      	cmp	r1, #31
 801548a:	b538      	push	{r3, r4, r5, lr}
 801548c:	4605      	mov	r5, r0
 801548e:	460c      	mov	r4, r1
 8015490:	d904      	bls.n	801549c <_raise_r+0x14>
 8015492:	2316      	movs	r3, #22
 8015494:	6003      	str	r3, [r0, #0]
 8015496:	f04f 30ff 	mov.w	r0, #4294967295
 801549a:	bd38      	pop	{r3, r4, r5, pc}
 801549c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801549e:	b112      	cbz	r2, 80154a6 <_raise_r+0x1e>
 80154a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154a4:	b94b      	cbnz	r3, 80154ba <_raise_r+0x32>
 80154a6:	4628      	mov	r0, r5
 80154a8:	f000 f830 	bl	801550c <_getpid_r>
 80154ac:	4622      	mov	r2, r4
 80154ae:	4601      	mov	r1, r0
 80154b0:	4628      	mov	r0, r5
 80154b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154b6:	f000 b817 	b.w	80154e8 <_kill_r>
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	d00a      	beq.n	80154d4 <_raise_r+0x4c>
 80154be:	1c59      	adds	r1, r3, #1
 80154c0:	d103      	bne.n	80154ca <_raise_r+0x42>
 80154c2:	2316      	movs	r3, #22
 80154c4:	6003      	str	r3, [r0, #0]
 80154c6:	2001      	movs	r0, #1
 80154c8:	e7e7      	b.n	801549a <_raise_r+0x12>
 80154ca:	2100      	movs	r1, #0
 80154cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80154d0:	4620      	mov	r0, r4
 80154d2:	4798      	blx	r3
 80154d4:	2000      	movs	r0, #0
 80154d6:	e7e0      	b.n	801549a <_raise_r+0x12>

080154d8 <raise>:
 80154d8:	4b02      	ldr	r3, [pc, #8]	@ (80154e4 <raise+0xc>)
 80154da:	4601      	mov	r1, r0
 80154dc:	6818      	ldr	r0, [r3, #0]
 80154de:	f7ff bfd3 	b.w	8015488 <_raise_r>
 80154e2:	bf00      	nop
 80154e4:	2000002c 	.word	0x2000002c

080154e8 <_kill_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d07      	ldr	r5, [pc, #28]	@ (8015508 <_kill_r+0x20>)
 80154ec:	2300      	movs	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	4608      	mov	r0, r1
 80154f2:	4611      	mov	r1, r2
 80154f4:	602b      	str	r3, [r5, #0]
 80154f6:	f7eb fc91 	bl	8000e1c <_kill>
 80154fa:	1c43      	adds	r3, r0, #1
 80154fc:	d102      	bne.n	8015504 <_kill_r+0x1c>
 80154fe:	682b      	ldr	r3, [r5, #0]
 8015500:	b103      	cbz	r3, 8015504 <_kill_r+0x1c>
 8015502:	6023      	str	r3, [r4, #0]
 8015504:	bd38      	pop	{r3, r4, r5, pc}
 8015506:	bf00      	nop
 8015508:	20004d34 	.word	0x20004d34

0801550c <_getpid_r>:
 801550c:	f7eb bc7e 	b.w	8000e0c <_getpid>

08015510 <__swhatbuf_r>:
 8015510:	b570      	push	{r4, r5, r6, lr}
 8015512:	460c      	mov	r4, r1
 8015514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015518:	2900      	cmp	r1, #0
 801551a:	b096      	sub	sp, #88	@ 0x58
 801551c:	4615      	mov	r5, r2
 801551e:	461e      	mov	r6, r3
 8015520:	da0d      	bge.n	801553e <__swhatbuf_r+0x2e>
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015528:	f04f 0100 	mov.w	r1, #0
 801552c:	bf14      	ite	ne
 801552e:	2340      	movne	r3, #64	@ 0x40
 8015530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015534:	2000      	movs	r0, #0
 8015536:	6031      	str	r1, [r6, #0]
 8015538:	602b      	str	r3, [r5, #0]
 801553a:	b016      	add	sp, #88	@ 0x58
 801553c:	bd70      	pop	{r4, r5, r6, pc}
 801553e:	466a      	mov	r2, sp
 8015540:	f000 f848 	bl	80155d4 <_fstat_r>
 8015544:	2800      	cmp	r0, #0
 8015546:	dbec      	blt.n	8015522 <__swhatbuf_r+0x12>
 8015548:	9901      	ldr	r1, [sp, #4]
 801554a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801554e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015552:	4259      	negs	r1, r3
 8015554:	4159      	adcs	r1, r3
 8015556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801555a:	e7eb      	b.n	8015534 <__swhatbuf_r+0x24>

0801555c <__smakebuf_r>:
 801555c:	898b      	ldrh	r3, [r1, #12]
 801555e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015560:	079d      	lsls	r5, r3, #30
 8015562:	4606      	mov	r6, r0
 8015564:	460c      	mov	r4, r1
 8015566:	d507      	bpl.n	8015578 <__smakebuf_r+0x1c>
 8015568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801556c:	6023      	str	r3, [r4, #0]
 801556e:	6123      	str	r3, [r4, #16]
 8015570:	2301      	movs	r3, #1
 8015572:	6163      	str	r3, [r4, #20]
 8015574:	b003      	add	sp, #12
 8015576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015578:	ab01      	add	r3, sp, #4
 801557a:	466a      	mov	r2, sp
 801557c:	f7ff ffc8 	bl	8015510 <__swhatbuf_r>
 8015580:	9f00      	ldr	r7, [sp, #0]
 8015582:	4605      	mov	r5, r0
 8015584:	4639      	mov	r1, r7
 8015586:	4630      	mov	r0, r6
 8015588:	f7ff faba 	bl	8014b00 <_malloc_r>
 801558c:	b948      	cbnz	r0, 80155a2 <__smakebuf_r+0x46>
 801558e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015592:	059a      	lsls	r2, r3, #22
 8015594:	d4ee      	bmi.n	8015574 <__smakebuf_r+0x18>
 8015596:	f023 0303 	bic.w	r3, r3, #3
 801559a:	f043 0302 	orr.w	r3, r3, #2
 801559e:	81a3      	strh	r3, [r4, #12]
 80155a0:	e7e2      	b.n	8015568 <__smakebuf_r+0xc>
 80155a2:	89a3      	ldrh	r3, [r4, #12]
 80155a4:	6020      	str	r0, [r4, #0]
 80155a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155aa:	81a3      	strh	r3, [r4, #12]
 80155ac:	9b01      	ldr	r3, [sp, #4]
 80155ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80155b2:	b15b      	cbz	r3, 80155cc <__smakebuf_r+0x70>
 80155b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155b8:	4630      	mov	r0, r6
 80155ba:	f000 f81d 	bl	80155f8 <_isatty_r>
 80155be:	b128      	cbz	r0, 80155cc <__smakebuf_r+0x70>
 80155c0:	89a3      	ldrh	r3, [r4, #12]
 80155c2:	f023 0303 	bic.w	r3, r3, #3
 80155c6:	f043 0301 	orr.w	r3, r3, #1
 80155ca:	81a3      	strh	r3, [r4, #12]
 80155cc:	89a3      	ldrh	r3, [r4, #12]
 80155ce:	431d      	orrs	r5, r3
 80155d0:	81a5      	strh	r5, [r4, #12]
 80155d2:	e7cf      	b.n	8015574 <__smakebuf_r+0x18>

080155d4 <_fstat_r>:
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	4d07      	ldr	r5, [pc, #28]	@ (80155f4 <_fstat_r+0x20>)
 80155d8:	2300      	movs	r3, #0
 80155da:	4604      	mov	r4, r0
 80155dc:	4608      	mov	r0, r1
 80155de:	4611      	mov	r1, r2
 80155e0:	602b      	str	r3, [r5, #0]
 80155e2:	f7eb fc7b 	bl	8000edc <_fstat>
 80155e6:	1c43      	adds	r3, r0, #1
 80155e8:	d102      	bne.n	80155f0 <_fstat_r+0x1c>
 80155ea:	682b      	ldr	r3, [r5, #0]
 80155ec:	b103      	cbz	r3, 80155f0 <_fstat_r+0x1c>
 80155ee:	6023      	str	r3, [r4, #0]
 80155f0:	bd38      	pop	{r3, r4, r5, pc}
 80155f2:	bf00      	nop
 80155f4:	20004d34 	.word	0x20004d34

080155f8 <_isatty_r>:
 80155f8:	b538      	push	{r3, r4, r5, lr}
 80155fa:	4d06      	ldr	r5, [pc, #24]	@ (8015614 <_isatty_r+0x1c>)
 80155fc:	2300      	movs	r3, #0
 80155fe:	4604      	mov	r4, r0
 8015600:	4608      	mov	r0, r1
 8015602:	602b      	str	r3, [r5, #0]
 8015604:	f7eb fc7a 	bl	8000efc <_isatty>
 8015608:	1c43      	adds	r3, r0, #1
 801560a:	d102      	bne.n	8015612 <_isatty_r+0x1a>
 801560c:	682b      	ldr	r3, [r5, #0]
 801560e:	b103      	cbz	r3, 8015612 <_isatty_r+0x1a>
 8015610:	6023      	str	r3, [r4, #0]
 8015612:	bd38      	pop	{r3, r4, r5, pc}
 8015614:	20004d34 	.word	0x20004d34

08015618 <_init>:
 8015618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801561a:	bf00      	nop
 801561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801561e:	bc08      	pop	{r3}
 8015620:	469e      	mov	lr, r3
 8015622:	4770      	bx	lr

08015624 <_fini>:
 8015624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015626:	bf00      	nop
 8015628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801562a:	bc08      	pop	{r3}
 801562c:	469e      	mov	lr, r3
 801562e:	4770      	bx	lr
