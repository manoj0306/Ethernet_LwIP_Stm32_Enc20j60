
lwip_compile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b2c  08018364  08018364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be90  0801be90  0001d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0801be90  0801be90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be98  0801be98  0001d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be98  0801be98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be9c  0801be9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0801bea0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d8c4  2000007c  0801bf1c  0001d07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d940  0801bf1c  0001d940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032931  00000000  00000000  0001d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008693  00000000  00000000  0004f9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002778  00000000  00000000  00058070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f0b  00000000  00000000  0005a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002630c  00000000  00000000  0005c6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d67  00000000  00000000  000829ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aff0d  00000000  00000000  000ba766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aac0  00000000  00000000  0016a6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00175178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801834c 	.word	0x0801834c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0801834c 	.word	0x0801834c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a04      	ldr	r2, [pc, #16]	@ (8000598 <MX_FREERTOS_Init+0x18>)
 8000586:	2100      	movs	r1, #0
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <MX_FREERTOS_Init+0x1c>)
 800058a:	f004 fb48 	bl	8004c1e <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a03      	ldr	r2, [pc, #12]	@ (80005a0 <MX_FREERTOS_Init+0x20>)
 8000592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	0801bbe4 	.word	0x0801bbe4
 800059c:	08000711 	.word	0x08000711
 80005a0:	20004d44 	.word	0x20004d44

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_GPIO_Init+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fde0 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f80c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ffd0 	bl	80005a4 <MX_GPIO_Init>
  //MX_SPI1_Init();
  MX_USART2_UART_Init();
 8000604:	f000 fd3e 	bl	8001084 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f004 faaa 	bl	8004b60 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800060c:	f7ff ffb8 	bl	8000580 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000610:	f004 faca 	bl	8004ba8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <main+0x20>

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f016 ff91 	bl	801754e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800068c:	2319      	movs	r3, #25
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	@ 0xa8
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 f8bb 	bl	800181c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ac:	f000 f92a 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2102      	movs	r1, #2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fb1d 	bl	8001d0c <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f914 	bl	8000904 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	@ 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <putchar>:

/* USER CODE BEGIN 4 */
int putchar(int ch)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,1);
 80006f4:	1d39      	adds	r1, r7, #4
 80006f6:	2301      	movs	r3, #1
 80006f8:	2201      	movs	r2, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <putchar+0x20>)
 80006fc:	f002 fdae 	bl	800325c <HAL_UART_Transmit>
    return ch;
 8000700:	687b      	ldr	r3, [r7, #4]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20004dd4 	.word	0x20004dd4

08000710 <StartDefaultTask>:




void StartDefaultTask(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af02      	add	r7, sp, #8
 8000716:	6078      	str	r0, [r7, #4]
	int i= 1;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
	 osDelay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000720:	f004 fb0f 	bl	8004d42 <osDelay>
	 tcpip_init(NULL,NULL);
 8000724:	2100      	movs	r1, #0
 8000726:	2000      	movs	r0, #0
 8000728:	f009 ffea 	bl	800a700 <tcpip_init>

	 Netif_Config();
 800072c:	f000 f864 	bl	80007f8 <Netif_Config>
	    struct netconn *conn;

	    //Allocate resources for a new connection
	    //Parameter tells what type of connection we need
	    //Other option is for NETCONN_UDP
	    conn=netconn_new(NETCONN_TCP);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2010      	movs	r0, #16
 8000736:	f008 f907 	bl	8008948 <netconn_new_with_proto_and_callback>
 800073a:	6138      	str	r0, [r7, #16]


	    IP4_ADDR(&server_ip,192,168,224,101);//My PC's local IP address is 192.168.2.17
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <StartDefaultTask+0xc8>)
 800073e:	60bb      	str	r3, [r7, #8]

	    printf("Connecting to server ... \r\n ");
 8000740:	4826      	ldr	r0, [pc, #152]	@ (80007dc <StartDefaultTask+0xcc>)
 8000742:	f000 faa7 	bl	8000c94 <printf>
	    status=netconn_connect(conn, &server_ip, 5000);
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800074e:	4619      	mov	r1, r3
 8000750:	6938      	ldr	r0, [r7, #16]
 8000752:	f008 f9b3 	bl	8008abc <netconn_connect>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]

	        if(status==ERR_OK)
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d103      	bne.n	800076a <StartDefaultTask+0x5a>
	        {
	            printf("Connected to server! \r\n ");
 8000762:	481f      	ldr	r0, [pc, #124]	@ (80007e0 <StartDefaultTask+0xd0>)
 8000764:	f000 fa96 	bl	8000c94 <printf>

	            while(1);
	        }

	        //Send a Hello Message 5 time, waiting 1 second
	        while(i)
 8000768:	e02a      	b.n	80007c0 <StartDefaultTask+0xb0>
	            printf("Sorry ! Could not connect to server.\r\n ");
 800076a:	481e      	ldr	r0, [pc, #120]	@ (80007e4 <StartDefaultTask+0xd4>)
 800076c:	f000 fa92 	bl	8000c94 <printf>
	            while(1);
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <StartDefaultTask+0x60>
	        {
	            printf("Sending data to server \r\n ");
 8000774:	481c      	ldr	r0, [pc, #112]	@ (80007e8 <StartDefaultTask+0xd8>)
 8000776:	f000 fa8d 	bl	8000c94 <printf>

	            status=netconn_write(conn,"HELLO FROM STM32\r\n",18,NETCONN_NOCOPY);
 800077a:	2300      	movs	r3, #0
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2212      	movs	r2, #18
 8000782:	491a      	ldr	r1, [pc, #104]	@ (80007ec <StartDefaultTask+0xdc>)
 8000784:	6938      	ldr	r0, [r7, #16]
 8000786:	f008 f9c9 	bl	8008b1c <netconn_write_partly>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	            if(status!=ERR_OK)
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d009      	beq.n	80007aa <StartDefaultTask+0x9a>
	            {
	                //Sending failed
	                printf("Sending failed! \r\n ");
 8000796:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <StartDefaultTask+0xe0>)
 8000798:	f000 fa7c 	bl	8000c94 <printf>

	                netconn_delete(conn);
 800079c:	6938      	ldr	r0, [r7, #16]
 800079e:	f008 f971 	bl	8008a84 <netconn_delete>

	                i = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

	                while(1);
 80007a6:	bf00      	nop
 80007a8:	e7fd      	b.n	80007a6 <StartDefaultTask+0x96>
	            }
	            else if(status==ERR_OK)
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <StartDefaultTask+0xa8>
	            {
	                printf("Data sent successfully ! \r\n ");
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <StartDefaultTask+0xe4>)
 80007b4:	f000 fa6e 	bl	8000c94 <printf>
	            }

	            osDelay(1000);
 80007b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007bc:	f004 fac1 	bl	8004d42 <osDelay>
	        while(i)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1d6      	bne.n	8000774 <StartDefaultTask+0x64>

	        }//end for loop, 5 times looping done

	        //Clean up resources
	        netconn_close(conn);
 80007c6:	6938      	ldr	r0, [r7, #16]
 80007c8:	f008 fa9a 	bl	8008d00 <netconn_close>
	        netconn_delete(conn);
 80007cc:	6938      	ldr	r0, [r7, #16]
 80007ce:	f008 f959 	bl	8008a84 <netconn_delete>


	 while(1);
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <StartDefaultTask+0xc2>
 80007d6:	bf00      	nop
 80007d8:	65e0a8c0 	.word	0x65e0a8c0
 80007dc:	08018378 	.word	0x08018378
 80007e0:	08018398 	.word	0x08018398
 80007e4:	080183b4 	.word	0x080183b4
 80007e8:	080183dc 	.word	0x080183dc
 80007ec:	080183f8 	.word	0x080183f8
 80007f0:	0801840c 	.word	0x0801840c
 80007f4:	08018420 	.word	0x08018420

080007f8 <Netif_Config>:
//        osDelay(1000);
//    }
}

static void Netif_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af04      	add	r7, sp, #16
  ip4_addr_t netmask;
  ip4_addr_t gw;//gateway IP address

  /* IP address setting */

  IP4_ADDR(&ipaddr, IP_ADDR_4, IP_ADDR_3, IP_ADDR_2, IP_ADDR_1); //192.168.1.3 Host
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <Netif_Config+0xac>)
 8000800:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, 255, 255 , 255, 0);
 8000802:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000806:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, IP_ADDR_4, IP_ADDR_3, IP_ADDR_2, 102);
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <Netif_Config+0xb0>)
 800080a:	607b      	str	r3, [r7, #4]


  /* create a binary semaphore used for informing ethernetif of frame reception */
  //osSemaphoreDef(Netif_SEM);
  //Netif_IRQSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1);//CMSIS V1 API
  Netif_IRQSemaphore = osSemaphoreNew(1,0,NULL);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2001      	movs	r0, #1
 8000812:	f004 fbbf 	bl	8004f94 <osSemaphoreNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <Netif_Config+0xb4>)
 800081a:	6013      	str	r3, [r2, #0]

  The init function pointer must point to a initialization function for
  your ethernet netif interface. The following code illustrates it's use.*/


  printf("Adding Network IF ...\r\n ");
 800081c:	4824      	ldr	r0, [pc, #144]	@ (80008b0 <Netif_Config+0xb8>)
 800081e:	f000 fa39 	bl	8000c94 <printf>


  if(netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input)==NULL)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	f107 0208 	add.w	r2, r7, #8
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	4821      	ldr	r0, [pc, #132]	@ (80008b4 <Netif_Config+0xbc>)
 800082e:	9002      	str	r0, [sp, #8]
 8000830:	4821      	ldr	r0, [pc, #132]	@ (80008b8 <Netif_Config+0xc0>)
 8000832:	9001      	str	r0, [sp, #4]
 8000834:	2000      	movs	r0, #0
 8000836:	9000      	str	r0, [sp, #0]
 8000838:	4820      	ldr	r0, [pc, #128]	@ (80008bc <Netif_Config+0xc4>)
 800083a:	f00a fe21 	bl	800b480 <netif_add>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d104      	bne.n	800084e <Netif_Config+0x56>
  {
      //could not initialize the ENC28J60 due to problem between connection of ENC28J60 & MCU
      printf("Error!\r\n ");
 8000844:	481e      	ldr	r0, [pc, #120]	@ (80008c0 <Netif_Config+0xc8>)
 8000846:	f000 fa25 	bl	8000c94 <printf>


      while(1);
 800084a:	bf00      	nop
 800084c:	e7fd      	b.n	800084a <Netif_Config+0x52>
  }
  else
  {
      //show network card init success
      printf("Success!\r\n ");
 800084e:	481d      	ldr	r0, [pc, #116]	@ (80008c4 <Netif_Config+0xcc>)
 8000850:	f000 fa20 	bl	8000c94 <printf>
  }


  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8000854:	4819      	ldr	r0, [pc, #100]	@ (80008bc <Netif_Config+0xc4>)
 8000856:	f00a ffc5 	bl	800b7e4 <netif_set_default>


  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800085a:	491b      	ldr	r1, [pc, #108]	@ (80008c8 <Netif_Config+0xd0>)
 800085c:	4817      	ldr	r0, [pc, #92]	@ (80008bc <Netif_Config+0xc4>)
 800085e:	f00b f88d 	bl	800b97c <netif_set_link_callback>


  irq_arg.netif = &gnetif;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <Netif_Config+0xd4>)
 8000864:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <Netif_Config+0xc4>)
 8000866:	601a      	str	r2, [r3, #0]
  irq_arg.semaphore = Netif_IRQSemaphore;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <Netif_Config+0xb4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <Netif_Config+0xd4>)
 800086e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet IRQ handler thread */
  osThreadNew(ethernetif_process_irq, &irq_arg, &Netif_Thread_attr);//changed it to suit CMSIS OS V2
 8000870:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <Netif_Config+0xd8>)
 8000872:	4916      	ldr	r1, [pc, #88]	@ (80008cc <Netif_Config+0xd4>)
 8000874:	4817      	ldr	r0, [pc, #92]	@ (80008d4 <Netif_Config+0xdc>)
 8000876:	f004 f9d2 	bl	8004c1e <osThreadNew>


  printf("Waiting for cable ...");
 800087a:	4817      	ldr	r0, [pc, #92]	@ (80008d8 <Netif_Config+0xe0>)
 800087c:	f000 fa0a 	bl	8000c94 <printf>


  while(!netif_is_link_up(&gnetif))
 8000880:	bf00      	nop
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <Netif_Config+0xc4>)
 8000884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f8      	beq.n	8000882 <Netif_Config+0x8a>


  }


  printf("Cable plugged in!\r\n ");
 8000890:	4812      	ldr	r0, [pc, #72]	@ (80008dc <Netif_Config+0xe4>)
 8000892:	f000 f9ff 	bl	8000c94 <printf>


  netif_set_up(&gnetif);
 8000896:	4809      	ldr	r0, [pc, #36]	@ (80008bc <Netif_Config+0xc4>)
 8000898:	f00a ffb4 	bl	800b804 <netif_set_up>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	64e0a8c0 	.word	0x64e0a8c0
 80008a8:	66e0a8c0 	.word	0x66e0a8c0
 80008ac:	20000098 	.word	0x20000098
 80008b0:	08018440 	.word	0x08018440
 80008b4:	0800a625 	.word	0x0800a625
 80008b8:	08004981 	.word	0x08004981
 80008bc:	20004d50 	.word	0x20004d50
 80008c0:	0801845c 	.word	0x0801845c
 80008c4:	08018468 	.word	0x08018468
 80008c8:	08004a97 	.word	0x08004a97
 80008cc:	20004d48 	.word	0x20004d48
 80008d0:	0801bc08 	.word	0x0801bc08
 80008d4:	08004a55 	.word	0x08004a55
 80008d8:	08018474 	.word	0x08018474
 80008dc:	0801848c 	.word	0x0801848c

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 fc85 	bl	8001200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40014400 	.word	0x40014400

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <printchar>:
*/

#include <stdarg.h>

static void printchar(char **str, int c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);

	if (str) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00a      	beq.n	8000936 <printchar+0x26>
		**str = c;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	701a      	strb	r2, [r3, #0]
		++(*str);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
	}
	else (void)putchar(c);
}
 8000934:	e002      	b.n	800093c <printchar+0x2c>
	else (void)putchar(c);
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f7ff fed8 	bl	80006ec <putchar>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000948:	b084      	sub	sp, #16
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000954:	2400      	movs	r4, #0
 8000956:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	dd17      	ble.n	8000990 <prints+0x4c>
		register int len = 0;
 8000960:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000962:	68be      	ldr	r6, [r7, #8]
 8000964:	e001      	b.n	800096a <prints+0x26>
 8000966:	3501      	adds	r5, #1
 8000968:	3601      	adds	r6, #1
 800096a:	7833      	ldrb	r3, [r6, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1fa      	bne.n	8000966 <prints+0x22>
		if (len >= width) width = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429d      	cmp	r5, r3
 8000974:	db02      	blt.n	800097c <prints+0x38>
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e002      	b.n	8000982 <prints+0x3e>
		else width -= len;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	1b5b      	subs	r3, r3, r5
 8000980:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <prints+0x4c>
 800098c:	f04f 0830 	mov.w	r8, #48	@ 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	2b00      	cmp	r3, #0
 8000998:	d116      	bne.n	80009c8 <prints+0x84>
		for ( ; width > 0; --width) {
 800099a:	e007      	b.n	80009ac <prints+0x68>
			printchar (out, padchar);
 800099c:	4641      	mov	r1, r8
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ffb6 	bl	8000910 <printchar>
			++pc;
 80009a4:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	dcf4      	bgt.n	800099c <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 80009b2:	e009      	b.n	80009c8 <prints+0x84>
		printchar (out, *string);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ffa8 	bl	8000910 <printchar>
		++pc;
 80009c0:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f1      	bne.n	80009b4 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 80009d0:	e007      	b.n	80009e2 <prints+0x9e>
		printchar (out, padchar);
 80009d2:	4641      	mov	r1, r8
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f7ff ff9b 	bl	8000910 <printchar>
		++pc;
 80009da:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dcf4      	bgt.n	80009d2 <prints+0x8e>
	}

	return pc;
 80009e8:	4623      	mov	r3, r4
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009f4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80009f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009f8:	b089      	sub	sp, #36	@ 0x24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000a04:	f04f 0900 	mov.w	r9, #0
 8000a08:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000a0a:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10c      	bne.n	8000a2c <printi+0x38>
		print_buf[0] = '0';
 8000a12:	2330      	movs	r3, #48	@ 0x30
 8000a14:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 8000a16:	2300      	movs	r3, #0
 8000a18:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000a1a:	f107 0114 	add.w	r1, r7, #20
 8000a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff ff8e 	bl	8000944 <prints>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	e04a      	b.n	8000ac2 <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00a      	beq.n	8000a48 <printi+0x54>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0a      	cmp	r3, #10
 8000a36:	d107      	bne.n	8000a48 <printi+0x54>
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da04      	bge.n	8000a48 <printi+0x54>
		neg = 1;
 8000a3e:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	425b      	negs	r3, r3
 8000a46:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000a48:	f107 0414 	add.w	r4, r7, #20
 8000a4c:	340b      	adds	r4, #11
	*s = '\0';
 8000a4e:	2300      	movs	r3, #0
 8000a50:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000a52:	e015      	b.n	8000a80 <printi+0x8c>
		t = u % b;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	fbb5 f2f3 	udiv	r2, r5, r3
 8000a5a:	fb02 f303 	mul.w	r3, r2, r3
 8000a5e:	1aeb      	subs	r3, r5, r3
 8000a60:	4698      	mov	r8, r3
		if( t >= 10 )
 8000a62:	f1b8 0f09 	cmp.w	r8, #9
 8000a66:	dd02      	ble.n	8000a6e <printi+0x7a>
			t += letbase - '0' - 10;
 8000a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a6a:	3b3a      	subs	r3, #58	@ 0x3a
 8000a6c:	4498      	add	r8, r3
		*--s = t + '0';
 8000a6e:	fa5f f388 	uxtb.w	r3, r8
 8000a72:	3c01      	subs	r4, #1
 8000a74:	3330      	adds	r3, #48	@ 0x30
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d1e7      	bne.n	8000a54 <printi+0x60>
	}

	if (neg) {
 8000a84:	f1b9 0f00 	cmp.w	r9, #0
 8000a88:	d013      	beq.n	8000ab2 <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00d      	beq.n	8000aac <printi+0xb8>
 8000a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <printi+0xb8>
			printchar (out, '-');
 8000a9a:	212d      	movs	r1, #45	@ 0x2d
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f7ff ff37 	bl	8000910 <printchar>
			++pc;
 8000aa2:	3601      	adds	r6, #1
			--width;
 8000aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aaa:	e002      	b.n	8000ab2 <printi+0xbe>
		}
		else {
			*--s = '-';
 8000aac:	3c01      	subs	r4, #1
 8000aae:	232d      	movs	r3, #45	@ 0x2d
 8000ab0:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff ff43 	bl	8000944 <prints>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4433      	add	r3, r6
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	@ 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000acc <print>:

static int print( char **out, const char *format, va_list args )
{
 8000acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad0:	b08a      	sub	sp, #40	@ 0x28
 8000ad2:	af04      	add	r7, sp, #16
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000ada:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000adc:	e0c4      	b.n	8000c68 <print+0x19c>
		if (*format == '%') {
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b25      	cmp	r3, #37	@ 0x25
 8000ae4:	f040 80b3 	bne.w	8000c4e <print+0x182>
			++format;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000aee:	2600      	movs	r6, #0
 8000af0:	4635      	mov	r5, r6
			if (*format == '\0') break;
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80bc 	beq.w	8000c74 <print+0x1a8>
			if (*format == '%') goto out;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b25      	cmp	r3, #37	@ 0x25
 8000b02:	f000 80a6 	beq.w	8000c52 <print+0x186>
			if (*format == '-') {
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000b0c:	d109      	bne.n	8000b22 <print+0x56>
				++format;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000b14:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000b16:	e004      	b.n	8000b22 <print+0x56>
				++format;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000b1e:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b30      	cmp	r3, #48	@ 0x30
 8000b28:	d0f6      	beq.n	8000b18 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000b2a:	e00b      	b.n	8000b44 <print+0x78>
				width *= 10;
 8000b2c:	462b      	mov	r3, r5
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	442b      	add	r3, r5
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	461d      	mov	r5, r3
				width += *format - '0';
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	3b30      	subs	r3, #48	@ 0x30
 8000b3c:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b4a:	d903      	bls.n	8000b54 <print+0x88>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b39      	cmp	r3, #57	@ 0x39
 8000b52:	d9eb      	bls.n	8000b2c <print+0x60>
			}
			if( *format == 's' ) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b73      	cmp	r3, #115	@ 0x73
 8000b5a:	d112      	bne.n	8000b82 <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	1d1a      	adds	r2, r3, #4
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8000b66:	f1b8 0f00 	cmp.w	r8, #0
 8000b6a:	d001      	beq.n	8000b70 <print+0xa4>
 8000b6c:	4641      	mov	r1, r8
 8000b6e:	e000      	b.n	8000b72 <print+0xa6>
 8000b70:	4947      	ldr	r1, [pc, #284]	@ (8000c90 <print+0x1c4>)
 8000b72:	4633      	mov	r3, r6
 8000b74:	462a      	mov	r2, r5
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fee4 	bl	8000944 <prints>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	441c      	add	r4, r3
				continue;
 8000b80:	e06f      	b.n	8000c62 <print+0x196>
			}
			if( *format == 'd' ) {
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b64      	cmp	r3, #100	@ 0x64
 8000b88:	d10f      	bne.n	8000baa <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	1d1a      	adds	r2, r3, #4
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	2361      	movs	r3, #97	@ 0x61
 8000b94:	9302      	str	r3, [sp, #8]
 8000b96:	9601      	str	r6, [sp, #4]
 8000b98:	9500      	str	r5, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff ff28 	bl	80009f4 <printi>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	441c      	add	r4, r3
				continue;
 8000ba8:	e05b      	b.n	8000c62 <print+0x196>
			}
			if( *format == 'x' ) {
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b78      	cmp	r3, #120	@ 0x78
 8000bb0:	d10f      	bne.n	8000bd2 <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	1d1a      	adds	r2, r3, #4
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	2361      	movs	r3, #97	@ 0x61
 8000bbc:	9302      	str	r3, [sp, #8]
 8000bbe:	9601      	str	r6, [sp, #4]
 8000bc0:	9500      	str	r5, [sp, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2210      	movs	r2, #16
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff ff14 	bl	80009f4 <printi>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	441c      	add	r4, r3
				continue;
 8000bd0:	e047      	b.n	8000c62 <print+0x196>
			}
			if( *format == 'X' ) {
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b58      	cmp	r3, #88	@ 0x58
 8000bd8:	d10f      	bne.n	8000bfa <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	1d1a      	adds	r2, r3, #4
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	2341      	movs	r3, #65	@ 0x41
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	9601      	str	r6, [sp, #4]
 8000be8:	9500      	str	r5, [sp, #0]
 8000bea:	2300      	movs	r3, #0
 8000bec:	2210      	movs	r2, #16
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff ff00 	bl	80009f4 <printi>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	441c      	add	r4, r3
				continue;
 8000bf8:	e033      	b.n	8000c62 <print+0x196>
			}
			if( *format == 'u' ) {
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b75      	cmp	r3, #117	@ 0x75
 8000c00:	d10f      	bne.n	8000c22 <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	1d1a      	adds	r2, r3, #4
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	2361      	movs	r3, #97	@ 0x61
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	9601      	str	r6, [sp, #4]
 8000c10:	9500      	str	r5, [sp, #0]
 8000c12:	2300      	movs	r3, #0
 8000c14:	220a      	movs	r2, #10
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff feec 	bl	80009f4 <printi>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	441c      	add	r4, r3
				continue;
 8000c20:	e01f      	b.n	8000c62 <print+0x196>
			}
			if( *format == 'c' ) {
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b63      	cmp	r3, #99	@ 0x63
 8000c28:	d11b      	bne.n	8000c62 <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1d1a      	adds	r2, r3, #4
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8000c36:	2300      	movs	r3, #0
 8000c38:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8000c3a:	f107 0114 	add.w	r1, r7, #20
 8000c3e:	4633      	mov	r3, r6
 8000c40:	462a      	mov	r2, r5
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fe7e 	bl	8000944 <prints>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	441c      	add	r4, r3
				continue;
 8000c4c:	e009      	b.n	8000c62 <print+0x196>
			}
		}
		else {
		out:
 8000c4e:	bf00      	nop
 8000c50:	e000      	b.n	8000c54 <print+0x188>
			if (*format == '%') goto out;
 8000c52:	bf00      	nop
			printchar (out, *format);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fe58 	bl	8000910 <printchar>
			++pc;
 8000c60:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f af36 	bne.w	8000ade <print+0x12>
 8000c72:	e000      	b.n	8000c76 <print+0x1aa>
			if (*format == '\0') break;
 8000c74:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <print+0x1b8>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000c84:	4623      	mov	r3, r4
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c90:	080184a4 	.word	0x080184a4

08000c94 <printf>:

int printf(const char *format, ...)
{
 8000c94:	b40f      	push	{r0, r1, r2, r3}
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6939      	ldr	r1, [r7, #16]
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ff10 	bl	8000acc <print>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <HAL_SPI_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d16:	23e0      	movs	r3, #224	@ 0xe0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f000 fbbd 	bl	80014b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a11      	ldr	r2, [pc, #68]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_MspInit+0x54>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 fb55 	bl	8001440 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <HAL_InitTick+0xd0>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e74 <HAL_InitTick+0xd0>)
 8000dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_InitTick+0xd0>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd0:	f107 020c 	add.w	r2, r7, #12
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f976 	bl	80020cc <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000de0:	f001 f960 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8000de4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de8:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <HAL_InitTick+0xd4>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	3b01      	subs	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000df6:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <HAL_InitTick+0xdc>)
 8000df8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000dfc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e00:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000e02:	4a1e      	ldr	r2, [pc, #120]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000e1a:	4818      	ldr	r0, [pc, #96]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e1c:	f001 ff5a 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d11b      	bne.n	8000e66 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000e2e:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <HAL_InitTick+0xd8>)
 8000e30:	f001 ffaa 	bl	8002d88 <HAL_TIM_Base_Start_IT>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d111      	bne.n	8000e66 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e42:	2019      	movs	r0, #25
 8000e44:	f000 fb18 	bl	8001478 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d808      	bhi.n	8000e60 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	2019      	movs	r0, #25
 8000e54:	f000 faf4 	bl	8001440 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <HAL_InitTick+0xe0>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	e002      	b.n	8000e66 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3730      	adds	r7, #48	@ 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	20004d8c 	.word	0x20004d8c
 8000e80:	40014400 	.word	0x40014400
 8000e84:	20000004 	.word	0x20000004

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ec6:	f001 ffc1 	bl	8002e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20004d8c 	.word	0x20004d8c

08000ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return 1;
 8000ed8:	2301      	movs	r3, #1
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_kill>:

int _kill(int pid, int sig)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eee:	f016 fbd3 	bl	8017698 <__errno>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2216      	movs	r2, #22
 8000ef6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_exit>:

void _exit (int status)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffe7 	bl	8000ee4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f16:	bf00      	nop
 8000f18:	e7fd      	b.n	8000f16 <_exit+0x12>

08000f1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e00a      	b.n	8000f42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f2c:	f3af 8000 	nop.w
 8000f30:	4601      	mov	r1, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	60ba      	str	r2, [r7, #8]
 8000f38:	b2ca      	uxtb	r2, r1
 8000f3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dbf0      	blt.n	8000f2c <_read+0x12>
  }

  return len;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	e009      	b.n	8000f7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	60ba      	str	r2, [r7, #8]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dbf1      	blt.n	8000f66 <_write+0x12>
  }
  return len;
 8000f82:	687b      	ldr	r3, [r7, #4]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_close>:

int _close(int file)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_isatty>:

int _isatty(int file)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f016 fb38 	bl	8017698 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20018000 	.word	0x20018000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000009c 	.word	0x2000009c
 800105c:	2000d940 	.word	0x2000d940

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_USART2_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010bc:	f002 f87e 	bl	80031bc <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f7ff fc1d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20004dd4 	.word	0x20004dd4
 80010d4:	40004400 	.word	0x40004400

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	@ (800115c <HAL_UART_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_UART_MspInit+0x8c>)
 800114e:	f000 f9af 	bl	80014b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004400 	.word	0x40004400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800116c:	f7ff ff78 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001196:	f016 fa85 	bl	80176a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fa2b 	bl	80005f4 <main>
  bx  lr    
 800119e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011ac:	0801bea0 	.word	0x0801bea0
  ldr r2, =_sbss
 80011b0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011b4:	2000d940 	.word	0x2000d940

080011b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <HAL_Init+0x40>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <HAL_Init+0x40>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <HAL_Init+0x40>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f920 	bl	800142a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f7ff fdda 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff fdac 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20004e1c 	.word	0x20004e1c

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20004e1c 	.word	0x20004e1c

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db12      	blt.n	8001360 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	490a      	ldr	r1, [pc, #40]	@ (800136c <__NVIC_DisableIRQ+0x44>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	3320      	adds	r3, #32
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff28 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001452:	f7ff ff3d 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffb1 	bl	80013c4 <NVIC_EncodePriority>
 8001462:	4602      	mov	r2, r0
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff80 	bl	8001370 <__NVIC_SetPriority>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff30 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff40 	bl	8001328 <__NVIC_DisableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e159      	b.n	8001780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8148 	bne.w	800177a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a2 	beq.w	800177a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b57      	ldr	r3, [pc, #348]	@ (8001798 <HAL_GPIO_Init+0x2e8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a56      	ldr	r2, [pc, #344]	@ (8001798 <HAL_GPIO_Init+0x2e8>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b54      	ldr	r3, [pc, #336]	@ (8001798 <HAL_GPIO_Init+0x2e8>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a52      	ldr	r2, [pc, #328]	@ (800179c <HAL_GPIO_Init+0x2ec>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <HAL_GPIO_Init+0x2f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x202>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a48      	ldr	r2, [pc, #288]	@ (80017a4 <HAL_GPIO_Init+0x2f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1fe>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a47      	ldr	r2, [pc, #284]	@ (80017a8 <HAL_GPIO_Init+0x2f8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1fa>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a46      	ldr	r2, [pc, #280]	@ (80017ac <HAL_GPIO_Init+0x2fc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1f6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a45      	ldr	r2, [pc, #276]	@ (80017b0 <HAL_GPIO_Init+0x300>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1f2>
 800169e:	2304      	movs	r3, #4
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	@ (800179c <HAL_GPIO_Init+0x2ec>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a2f      	ldr	r2, [pc, #188]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a24      	ldr	r2, [pc, #144]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1a      	ldr	r2, [pc, #104]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f aea2 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	@ 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fee6 	bl	80045dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e267      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d075      	beq.n	8001926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800183a:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b85      	ldr	r3, [pc, #532]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800184e:	2b08      	cmp	r3, #8
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b82      	ldr	r3, [pc, #520]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b7e      	ldr	r3, [pc, #504]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x108>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e242      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x74>
 8001882:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a75      	ldr	r2, [pc, #468]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x98>
 800189a:	4b70      	ldr	r3, [pc, #448]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6f      	ldr	r2, [pc, #444]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6c      	ldr	r2, [pc, #432]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xb0>
 80018b4:	4b69      	ldr	r3, [pc, #420]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a68      	ldr	r2, [pc, #416]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b66      	ldr	r3, [pc, #408]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a65      	ldr	r2, [pc, #404]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fca8 	bl	8001228 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fca4 	bl	8001228 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e207      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc94 	bl	8001228 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fc90 	bl	8001228 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1f3      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b51      	ldr	r3, [pc, #324]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0xe8>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194a:	4b44      	ldr	r3, [pc, #272]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x152>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1c7      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4937      	ldr	r1, [pc, #220]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_RCC_OscConfig+0x244>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fc49 	bl	8001228 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fc45 	bl	8001228 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1a8      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b28      	ldr	r3, [pc, #160]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4925      	ldr	r1, [pc, #148]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_RCC_OscConfig+0x244>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc28 	bl	8001228 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc24 	bl	8001228 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e187      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d036      	beq.n	8001a74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_RCC_OscConfig+0x248>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fc08 	bl	8001228 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fc04 	bl	8001228 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e167      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_RCC_OscConfig+0x240>)
 8001a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x200>
 8001a3a:	e01b      	b.n	8001a74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_OscConfig+0x248>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbf1 	bl	8001228 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	e00e      	b.n	8001a68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fbed 	bl	8001228 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d907      	bls.n	8001a68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e150      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	42470000 	.word	0x42470000
 8001a64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b88      	ldr	r3, [pc, #544]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ea      	bne.n	8001a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8097 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b81      	ldr	r3, [pc, #516]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10f      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b7d      	ldr	r3, [pc, #500]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b74      	ldr	r3, [pc, #464]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a73      	ldr	r2, [pc, #460]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fbad 	bl	8001228 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff fba9 	bl	8001228 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e10c      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_OscConfig+0x474>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2ea>
 8001af8:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	4a63      	ldr	r2, [pc, #396]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b04:	e01c      	b.n	8001b40 <HAL_RCC_OscConfig+0x324>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x30c>
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0x324>
 8001b28:	4b58      	ldr	r3, [pc, #352]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b34:	4b55      	ldr	r3, [pc, #340]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b38:	4a54      	ldr	r2, [pc, #336]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f023 0304 	bic.w	r3, r3, #4
 8001b3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d015      	beq.n	8001b74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fb6e 	bl	8001228 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff fb6a 	bl	8001228 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0cb      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0ee      	beq.n	8001b50 <HAL_RCC_OscConfig+0x334>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7ff fb58 	bl	8001228 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fb54 	bl	8001228 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0b5      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ee      	bne.n	8001b7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a38      	ldr	r2, [pc, #224]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a1 	beq.w	8001cfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d05c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d141      	bne.n	8001c52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb28 	bl	8001228 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fb24 	bl	8001228 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e087      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	3b01      	subs	r3, #1
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	491b      	ldr	r1, [pc, #108]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fafd 	bl	8001228 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff faf9 	bl	8001228 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e05c      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x416>
 8001c50:	e054      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_RCC_OscConfig+0x478>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fae6 	bl	8001228 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fae2 	bl	8001228 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e045      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_RCC_OscConfig+0x470>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x444>
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e038      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000
 8001c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_RCC_OscConfig+0x4ec>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d028      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d121      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d11a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d111      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	085b      	lsrs	r3, r3, #1
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0cc      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b68      	ldr	r3, [pc, #416]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d90c      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b65      	ldr	r3, [pc, #404]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4a58      	ldr	r2, [pc, #352]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d044      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d119      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d003      	beq.n	8001dca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e067      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dea:	4b37      	ldr	r3, [pc, #220]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f023 0203 	bic.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4934      	ldr	r1, [pc, #208]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff fa14 	bl	8001228 <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7ff fa10 	bl	8001228 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 020c 	and.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1eb      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d20c      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ff76 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0801bc2c 	.word	0x0801bc2c
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001edc:	b090      	sub	sp, #64	@ 0x40
 8001ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef0:	4b59      	ldr	r3, [pc, #356]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d00d      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	f200 80a1 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x34>
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f0a:	e09b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b53      	ldr	r3, [pc, #332]	@ (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f10:	e09b      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b53      	ldr	r3, [pc, #332]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f16:	e098      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f18:	4b4f      	ldr	r3, [pc, #316]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f22:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d028      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	2200      	movs	r2, #0
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f40:	2100      	movs	r1, #0
 8001f42:	4b47      	ldr	r3, [pc, #284]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f44:	fb03 f201 	mul.w	r2, r3, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	fb00 f303 	mul.w	r3, r0, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a43      	ldr	r2, [pc, #268]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f52:	fba0 1202 	umull	r1, r2, r0, r2
 8001f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f58:	460a      	mov	r2, r1
 8001f5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f5e:	4413      	add	r3, r2
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f64:	2200      	movs	r2, #0
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	61fa      	str	r2, [r7, #28]
 8001f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f72:	f7fe f98d 	bl	8000290 <__aeabi_uldivmod>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7e:	e053      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f80:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	2200      	movs	r2, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	617a      	str	r2, [r7, #20]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f92:	f04f 0b00 	mov.w	fp, #0
 8001f96:	4652      	mov	r2, sl
 8001f98:	465b      	mov	r3, fp
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	ebb2 080a 	subs.w	r8, r2, sl
 8001fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fca:	ebb2 0408 	subs.w	r4, r2, r8
 8001fce:	eb63 0509 	sbc.w	r5, r3, r9
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	00eb      	lsls	r3, r5, #3
 8001fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe0:	00e2      	lsls	r2, r4, #3
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	461d      	mov	r5, r3
 8001fe6:	eb14 030a 	adds.w	r3, r4, sl
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	eb45 030b 	adc.w	r3, r5, fp
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffe:	4629      	mov	r1, r5
 8002000:	028b      	lsls	r3, r1, #10
 8002002:	4621      	mov	r1, r4
 8002004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002008:	4621      	mov	r1, r4
 800200a:	028a      	lsls	r2, r1, #10
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002012:	2200      	movs	r2, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201c:	f7fe f938 	bl	8000290 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002038:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002042:	e002      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_RCC_GetSysClockFreq+0x184>)
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800204c:	4618      	mov	r0, r3
 800204e:	3740      	adds	r7, #64	@ 0x40
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	00f42400 	.word	0x00f42400
 8002060:	017d7840 	.word	0x017d7840

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a9b      	lsrs	r3, r3, #10
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	@ (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	0801bc3c 	.word	0x0801bc3c

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a8:	f7ff ffdc 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0b5b      	lsrs	r3, r3, #13
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	@ (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	0801bc3c 	.word	0x0801bc3c

080020cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	220f      	movs	r2, #15
 80020da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020dc:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_RCC_GetClockConfig+0x60>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07b      	b.n	800223a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002152:	d009      	beq.n	8002168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
 800215a:	e005      	b.n	8002168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fd9a 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800219e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ec:	ea42 0103 	orr.w	r1, r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f003 0104 	and.w	r1, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f003 0210 	and.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b088      	sub	sp, #32
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002252:	f7fe ffe9 	bl	8001228 <HAL_GetTick>
 8002256:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
 800226a:	e12a      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Transmit+0x36>
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e122      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_SPI_Transmit+0x48>
 8002286:	2302      	movs	r3, #2
 8002288:	e11b      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d8:	d10f      	bne.n	80022fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d007      	beq.n	8002318 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002320:	d152      	bne.n	80023c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_SPI_Transmit+0xee>
 800232a:	8b7b      	ldrh	r3, [r7, #26]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d145      	bne.n	80023bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	1c9a      	adds	r2, r3, #2
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002354:	e032      	b.n	80023bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d112      	bne.n	800238a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	1c9a      	adds	r2, r3, #2
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002388:	e018      	b.n	80023bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800238a:	f7fe ff4d 	bl	8001228 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d803      	bhi.n	80023a2 <HAL_SPI_Transmit+0x160>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d102      	bne.n	80023a8 <HAL_SPI_Transmit+0x166>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e082      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1c7      	bne.n	8002356 <HAL_SPI_Transmit+0x114>
 80023c6:	e053      	b.n	8002470 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_SPI_Transmit+0x194>
 80023d0:	8b7b      	ldrh	r3, [r7, #26]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d147      	bne.n	8002466 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	330c      	adds	r3, #12
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023fc:	e033      	b.n	8002466 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b02      	cmp	r3, #2
 800240a:	d113      	bne.n	8002434 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	330c      	adds	r3, #12
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002432:	e018      	b.n	8002466 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002434:	f7fe fef8 	bl	8001228 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d803      	bhi.n	800244c <HAL_SPI_Transmit+0x20a>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d102      	bne.n	8002452 <HAL_SPI_Transmit+0x210>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e02d      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1c6      	bne.n	80023fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fbd9 	bl	8002c2c <SPI_EndRxTxTransaction>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b088      	sub	sp, #32
 80024ce:	af02      	add	r7, sp, #8
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	e104      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f2:	d112      	bne.n	800251a <HAL_SPI_Receive+0x50>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10e      	bne.n	800251a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2204      	movs	r2, #4
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002504:	88fa      	ldrh	r2, [r7, #6]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f8f3 	bl	80026fc <HAL_SPI_TransmitReceive>
 8002516:	4603      	mov	r3, r0
 8002518:	e0ec      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800251a:	f7fe fe85 	bl	8001228 <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_SPI_Receive+0x62>
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0e1      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_SPI_Receive+0x74>
 800253a:	2302      	movs	r3, #2
 800253c:	e0da      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2204      	movs	r2, #4
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800258c:	d10f      	bne.n	80025ae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b8:	2b40      	cmp	r3, #64	@ 0x40
 80025ba:	d007      	beq.n	80025cc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d170      	bne.n	80026b6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025d4:	e035      	b.n	8002642 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d115      	bne.n	8002610 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f103 020c 	add.w	r2, r3, #12
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800260e:	e018      	b.n	8002642 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002610:	f7fe fe0a 	bl	8001228 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d803      	bhi.n	8002628 <HAL_SPI_Receive+0x15e>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d102      	bne.n	800262e <HAL_SPI_Receive+0x164>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e058      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1c4      	bne.n	80025d6 <HAL_SPI_Receive+0x10c>
 800264c:	e038      	b.n	80026c0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d113      	bne.n	8002684 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	b292      	uxth	r2, r2
 8002668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002682:	e018      	b.n	80026b6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002684:	f7fe fdd0 	bl	8001228 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d803      	bhi.n	800269c <HAL_SPI_Receive+0x1d2>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d102      	bne.n	80026a2 <HAL_SPI_Receive+0x1d8>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e01e      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1c6      	bne.n	800264e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fa4b 	bl	8002b60 <SPI_EndRxTransaction>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800270e:	f7fe fd8b 	bl	8001228 <HAL_GetTick>
 8002712:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800271a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d00c      	beq.n	8002746 <HAL_SPI_TransmitReceive+0x4a>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002732:	d106      	bne.n	8002742 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_SPI_TransmitReceive+0x46>
 800273c:	7ffb      	ldrb	r3, [r7, #31]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d001      	beq.n	8002746 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
 8002744:	e17f      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x5c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x5c>
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e174      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_SPI_TransmitReceive+0x6e>
 8002766:	2302      	movs	r3, #2
 8002768:	e16d      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b04      	cmp	r3, #4
 800277c:	d003      	beq.n	8002786 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	887a      	ldrh	r2, [r7, #2]
 80027ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d007      	beq.n	80027da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027e2:	d17e      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0xf6>
 80027ec:	8afb      	ldrh	r3, [r7, #22]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d16c      	bne.n	80028cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002816:	e059      	b.n	80028cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11b      	bne.n	800285e <HAL_SPI_TransmitReceive+0x162>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d016      	beq.n	800285e <HAL_SPI_TransmitReceive+0x162>
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d113      	bne.n	800285e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d119      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x1a4>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d014      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	b292      	uxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028a0:	f7fe fcc2 	bl	8001228 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d80d      	bhi.n	80028cc <HAL_SPI_TransmitReceive+0x1d0>
 80028b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d009      	beq.n	80028cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0bc      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1a0      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x11c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d19b      	bne.n	8002818 <HAL_SPI_TransmitReceive+0x11c>
 80028e0:	e082      	b.n	80029e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x1f4>
 80028ea:	8afb      	ldrh	r3, [r7, #22]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d171      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002916:	e05d      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d11c      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x264>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d017      	beq.n	8002960 <HAL_SPI_TransmitReceive+0x264>
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	2b01      	cmp	r3, #1
 8002934:	d114      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	7812      	ldrb	r2, [r2, #0]
 8002942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d119      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x2a6>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d014      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029a2:	f7fe fc41 	bl	8001228 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d803      	bhi.n	80029ba <HAL_SPI_TransmitReceive+0x2be>
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d102      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x2c4>
 80029ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e038      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d19c      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x21c>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d197      	bne.n	8002918 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f91d 	bl	8002c2c <SPI_EndRxTxTransaction>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e01d      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a60:	f7fe fbe2 	bl	8001228 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a70:	f7fe fbda 	bl	8001228 <HAL_GetTick>
 8002a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a76:	4b39      	ldr	r3, [pc, #228]	@ (8002b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	015b      	lsls	r3, r3, #5
 8002a7c:	0d1b      	lsrs	r3, r3, #20
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a86:	e054      	b.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d050      	beq.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a90:	f7fe fbca 	bl	8001228 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d902      	bls.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d13d      	bne.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002abe:	d111      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ac8:	d004      	beq.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad2:	d107      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aec:	d10f      	bne.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e017      	b.n	8002b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d19b      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b74:	d111      	bne.n	8002b9a <SPI_EndRxTransaction+0x3a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7e:	d004      	beq.n	8002b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b88:	d107      	bne.n	8002b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba2:	d12a      	bne.n	8002bfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bac:	d012      	beq.n	8002bd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ff49 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02d      	beq.n	8002c20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e026      	b.n	8002c22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2101      	movs	r1, #1
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff36 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01a      	beq.n	8002c20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e013      	b.n	8002c22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff ff23 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	2102      	movs	r1, #2
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ff04 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e032      	b.n	8002cc4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <SPI_EndRxTxTransaction+0xa0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <SPI_EndRxTxTransaction+0xa4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0d5b      	lsrs	r3, r3, #21
 8002c6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c7c:	d112      	bne.n	8002ca4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2180      	movs	r1, #128	@ 0x80
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff fee1 	bl	8002a50 <SPI_WaitFlagStateUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d016      	beq.n	8002cc2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e00f      	b.n	8002cc4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cba:	2b80      	cmp	r3, #128	@ 0x80
 8002cbc:	d0f2      	beq.n	8002ca4 <SPI_EndRxTxTransaction+0x78>
 8002cbe:	e000      	b.n	8002cc2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002cc0:	bf00      	nop
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	165e9f81 	.word	0x165e9f81

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f839 	bl	8002d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 f9b2 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e044      	b.n	8002e2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <HAL_TIM_Base_Start_IT+0xb0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dca:	d013      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e3c <HAL_TIM_Base_Start_IT+0xb4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x6c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <HAL_TIM_Base_Start_IT+0xbc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d010      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	e007      	b.n	8002e28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40014000 	.word	0x40014000

08002e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d020      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8d2 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8c4 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f8d5 	bl	8003054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d020      	beq.n	8002efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0204 	mvn.w	r2, #4
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8ac 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f89e 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8af 	bl	8003054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d020      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01b      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0208 	mvn.w	r2, #8
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f886 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f878 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f889 	bl	8003054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d020      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0210 	mvn.w	r2, #16
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f860 	bl	8003040 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f852 	bl	800302c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f863 	bl	8003054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fc94 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00c      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8e6 	bl	80031a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00c      	beq.n	8003000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f834 	bl	8003068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0220 	mvn.w	r2, #32
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8b8 	bl	8003194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3a      	ldr	r2, [pc, #232]	@ (8003178 <TIM_Base_SetConfig+0xfc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00f      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a37      	ldr	r2, [pc, #220]	@ (800317c <TIM_Base_SetConfig+0x100>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a36      	ldr	r2, [pc, #216]	@ (8003180 <TIM_Base_SetConfig+0x104>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a35      	ldr	r2, [pc, #212]	@ (8003184 <TIM_Base_SetConfig+0x108>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <TIM_Base_SetConfig+0xfc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01b      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d4:	d017      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a28      	ldr	r2, [pc, #160]	@ (800317c <TIM_Base_SetConfig+0x100>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <TIM_Base_SetConfig+0x104>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00f      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a26      	ldr	r2, [pc, #152]	@ (8003184 <TIM_Base_SetConfig+0x108>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00b      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a25      	ldr	r2, [pc, #148]	@ (8003188 <TIM_Base_SetConfig+0x10c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a24      	ldr	r2, [pc, #144]	@ (800318c <TIM_Base_SetConfig+0x110>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a23      	ldr	r2, [pc, #140]	@ (8003190 <TIM_Base_SetConfig+0x114>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800310c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0e      	ldr	r2, [pc, #56]	@ (8003178 <TIM_Base_SetConfig+0xfc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	611a      	str	r2, [r3, #16]
  }
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800
 8003184:	40000c00 	.word	0x40000c00
 8003188:	40014000 	.word	0x40014000
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800

08003194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e042      	b.n	8003254 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd ff78 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f973 	bl	80034ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b20      	cmp	r3, #32
 800327a:	d175      	bne.n	8003368 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_UART_Transmit+0x2c>
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e06e      	b.n	800336a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2221      	movs	r2, #33	@ 0x21
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800329a:	f7fd ffc5 	bl	8001228 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d108      	bne.n	80032c8 <HAL_UART_Transmit+0x6c>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d0:	e02e      	b.n	8003330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	@ 0x80
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f848 	bl	8003372 <UART_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03a      	b.n	800336a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3302      	adds	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e007      	b.n	8003322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1cb      	bne.n	80032d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2140      	movs	r1, #64	@ 0x40
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f814 	bl	8003372 <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e006      	b.n	800336a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003382:	e03b      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d037      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fd ff4c 	bl	8001228 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e03a      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b80      	cmp	r3, #128	@ 0x80
 80033b8:	d020      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b40      	cmp	r3, #64	@ 0x40
 80033be:	d01d      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d116      	bne.n	80033fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f81d 	bl	8003424 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2208      	movs	r2, #8
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e00f      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d0b4      	beq.n	8003384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b095      	sub	sp, #84	@ 0x54
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800343c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800344c:	643a      	str	r2, [r7, #64]	@ 0x40
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e5      	bne.n	800342c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3314      	adds	r3, #20
 8003466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3314      	adds	r3, #20
 800347e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	2b01      	cmp	r3, #1
 800349a:	d119      	bne.n	80034d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	330c      	adds	r3, #12
 80034a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f023 0310 	bic.w	r3, r3, #16
 80034b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034bc:	61ba      	str	r2, [r7, #24]
 80034be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6979      	ldr	r1, [r7, #20]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034de:	bf00      	nop
 80034e0:	3754      	adds	r7, #84	@ 0x54
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f0:	b0c0      	sub	sp, #256	@ 0x100
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	68d9      	ldr	r1, [r3, #12]
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	ea40 0301 	orr.w	r3, r0, r1
 8003514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	431a      	orrs	r2, r3
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003544:	f021 010c 	bic.w	r1, r1, #12
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003552:	430b      	orrs	r3, r1
 8003554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003566:	6999      	ldr	r1, [r3, #24]
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	ea40 0301 	orr.w	r3, r0, r1
 8003572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b8f      	ldr	r3, [pc, #572]	@ (80037b8 <UART_SetConfig+0x2cc>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d005      	beq.n	800358c <UART_SetConfig+0xa0>
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b8d      	ldr	r3, [pc, #564]	@ (80037bc <UART_SetConfig+0x2d0>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d104      	bne.n	8003596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7fe fd8a 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003594:	e003      	b.n	800359e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003596:	f7fe fd71 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 800359a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a8:	f040 810c 	bne.w	80037c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	1891      	adds	r1, r2, r2
 80035c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035c6:	415b      	adcs	r3, r3
 80035c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ce:	4621      	mov	r1, r4
 80035d0:	eb12 0801 	adds.w	r8, r2, r1
 80035d4:	4629      	mov	r1, r5
 80035d6:	eb43 0901 	adc.w	r9, r3, r1
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ee:	4690      	mov	r8, r2
 80035f0:	4699      	mov	r9, r3
 80035f2:	4623      	mov	r3, r4
 80035f4:	eb18 0303 	adds.w	r3, r8, r3
 80035f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035fc:	462b      	mov	r3, r5
 80035fe:	eb49 0303 	adc.w	r3, r9, r3
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800361a:	460b      	mov	r3, r1
 800361c:	18db      	adds	r3, r3, r3
 800361e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003620:	4613      	mov	r3, r2
 8003622:	eb42 0303 	adc.w	r3, r2, r3
 8003626:	657b      	str	r3, [r7, #84]	@ 0x54
 8003628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800362c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003630:	f7fc fe2e 	bl	8000290 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4b61      	ldr	r3, [pc, #388]	@ (80037c0 <UART_SetConfig+0x2d4>)
 800363a:	fba3 2302 	umull	r2, r3, r3, r2
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	011c      	lsls	r4, r3, #4
 8003642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800364c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800365c:	415b      	adcs	r3, r3
 800365e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003664:	4641      	mov	r1, r8
 8003666:	eb12 0a01 	adds.w	sl, r2, r1
 800366a:	4649      	mov	r1, r9
 800366c:	eb43 0b01 	adc.w	fp, r3, r1
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800367c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003684:	4692      	mov	sl, r2
 8003686:	469b      	mov	fp, r3
 8003688:	4643      	mov	r3, r8
 800368a:	eb1a 0303 	adds.w	r3, sl, r3
 800368e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003692:	464b      	mov	r3, r9
 8003694:	eb4b 0303 	adc.w	r3, fp, r3
 8003698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036b0:	460b      	mov	r3, r1
 80036b2:	18db      	adds	r3, r3, r3
 80036b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036b6:	4613      	mov	r3, r2
 80036b8:	eb42 0303 	adc.w	r3, r2, r3
 80036bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036c6:	f7fc fde3 	bl	8000290 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <UART_SetConfig+0x2d4>)
 80036d2:	fba3 2301 	umull	r2, r3, r3, r1
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2264      	movs	r2, #100	@ 0x64
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	1acb      	subs	r3, r1, r3
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036e6:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <UART_SetConfig+0x2d4>)
 80036e8:	fba3 2302 	umull	r2, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036f4:	441c      	add	r4, r3
 80036f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036fa:	2200      	movs	r2, #0
 80036fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003708:	4642      	mov	r2, r8
 800370a:	464b      	mov	r3, r9
 800370c:	1891      	adds	r1, r2, r2
 800370e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003710:	415b      	adcs	r3, r3
 8003712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003718:	4641      	mov	r1, r8
 800371a:	1851      	adds	r1, r2, r1
 800371c:	6339      	str	r1, [r7, #48]	@ 0x30
 800371e:	4649      	mov	r1, r9
 8003720:	414b      	adcs	r3, r1
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003730:	4659      	mov	r1, fp
 8003732:	00cb      	lsls	r3, r1, #3
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373a:	4651      	mov	r1, sl
 800373c:	00ca      	lsls	r2, r1, #3
 800373e:	4610      	mov	r0, r2
 8003740:	4619      	mov	r1, r3
 8003742:	4603      	mov	r3, r0
 8003744:	4642      	mov	r2, r8
 8003746:	189b      	adds	r3, r3, r2
 8003748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800374c:	464b      	mov	r3, r9
 800374e:	460a      	mov	r2, r1
 8003750:	eb42 0303 	adc.w	r3, r2, r3
 8003754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800376c:	460b      	mov	r3, r1
 800376e:	18db      	adds	r3, r3, r3
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003772:	4613      	mov	r3, r2
 8003774:	eb42 0303 	adc.w	r3, r2, r3
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800377a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800377e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003782:	f7fc fd85 	bl	8000290 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <UART_SetConfig+0x2d4>)
 800378c:	fba3 1302 	umull	r1, r3, r3, r2
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	2164      	movs	r1, #100	@ 0x64
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	3332      	adds	r3, #50	@ 0x32
 800379e:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <UART_SetConfig+0x2d4>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	f003 0207 	and.w	r2, r3, #7
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4422      	add	r2, r4
 80037b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b4:	e106      	b.n	80039c4 <UART_SetConfig+0x4d8>
 80037b6:	bf00      	nop
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40011400 	.word	0x40011400
 80037c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037d6:	4642      	mov	r2, r8
 80037d8:	464b      	mov	r3, r9
 80037da:	1891      	adds	r1, r2, r2
 80037dc:	6239      	str	r1, [r7, #32]
 80037de:	415b      	adcs	r3, r3
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037e6:	4641      	mov	r1, r8
 80037e8:	1854      	adds	r4, r2, r1
 80037ea:	4649      	mov	r1, r9
 80037ec:	eb43 0501 	adc.w	r5, r3, r1
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	00eb      	lsls	r3, r5, #3
 80037fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fe:	00e2      	lsls	r2, r4, #3
 8003800:	4614      	mov	r4, r2
 8003802:	461d      	mov	r5, r3
 8003804:	4643      	mov	r3, r8
 8003806:	18e3      	adds	r3, r4, r3
 8003808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800380c:	464b      	mov	r3, r9
 800380e:	eb45 0303 	adc.w	r3, r5, r3
 8003812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003832:	4629      	mov	r1, r5
 8003834:	008b      	lsls	r3, r1, #2
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383c:	4621      	mov	r1, r4
 800383e:	008a      	lsls	r2, r1, #2
 8003840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003844:	f7fc fd24 	bl	8000290 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4b60      	ldr	r3, [pc, #384]	@ (80039d0 <UART_SetConfig+0x4e4>)
 800384e:	fba3 2302 	umull	r2, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	011c      	lsls	r4, r3, #4
 8003856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003868:	4642      	mov	r2, r8
 800386a:	464b      	mov	r3, r9
 800386c:	1891      	adds	r1, r2, r2
 800386e:	61b9      	str	r1, [r7, #24]
 8003870:	415b      	adcs	r3, r3
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003878:	4641      	mov	r1, r8
 800387a:	1851      	adds	r1, r2, r1
 800387c:	6139      	str	r1, [r7, #16]
 800387e:	4649      	mov	r1, r9
 8003880:	414b      	adcs	r3, r1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003890:	4659      	mov	r1, fp
 8003892:	00cb      	lsls	r3, r1, #3
 8003894:	4651      	mov	r1, sl
 8003896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389a:	4651      	mov	r1, sl
 800389c:	00ca      	lsls	r2, r1, #3
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	4642      	mov	r2, r8
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038ac:	464b      	mov	r3, r9
 80038ae:	460a      	mov	r2, r1
 80038b0:	eb42 0303 	adc.w	r3, r2, r3
 80038b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038d0:	4649      	mov	r1, r9
 80038d2:	008b      	lsls	r3, r1, #2
 80038d4:	4641      	mov	r1, r8
 80038d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038da:	4641      	mov	r1, r8
 80038dc:	008a      	lsls	r2, r1, #2
 80038de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038e2:	f7fc fcd5 	bl	8000290 <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	4b38      	ldr	r3, [pc, #224]	@ (80039d0 <UART_SetConfig+0x4e4>)
 80038ee:	fba3 2301 	umull	r2, r3, r3, r1
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2264      	movs	r2, #100	@ 0x64
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	1acb      	subs	r3, r1, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	@ 0x32
 8003900:	4a33      	ldr	r2, [pc, #204]	@ (80039d0 <UART_SetConfig+0x4e4>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390c:	441c      	add	r4, r3
 800390e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003912:	2200      	movs	r2, #0
 8003914:	673b      	str	r3, [r7, #112]	@ 0x70
 8003916:	677a      	str	r2, [r7, #116]	@ 0x74
 8003918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	415b      	adcs	r3, r3
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392c:	4641      	mov	r1, r8
 800392e:	1851      	adds	r1, r2, r1
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	4649      	mov	r1, r9
 8003934:	414b      	adcs	r3, r1
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003944:	4659      	mov	r1, fp
 8003946:	00cb      	lsls	r3, r1, #3
 8003948:	4651      	mov	r1, sl
 800394a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394e:	4651      	mov	r1, sl
 8003950:	00ca      	lsls	r2, r1, #3
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4603      	mov	r3, r0
 8003958:	4642      	mov	r2, r8
 800395a:	189b      	adds	r3, r3, r2
 800395c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395e:	464b      	mov	r3, r9
 8003960:	460a      	mov	r2, r1
 8003962:	eb42 0303 	adc.w	r3, r2, r3
 8003966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	663b      	str	r3, [r7, #96]	@ 0x60
 8003972:	667a      	str	r2, [r7, #100]	@ 0x64
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003980:	4649      	mov	r1, r9
 8003982:	008b      	lsls	r3, r1, #2
 8003984:	4641      	mov	r1, r8
 8003986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398a:	4641      	mov	r1, r8
 800398c:	008a      	lsls	r2, r1, #2
 800398e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003992:	f7fc fc7d 	bl	8000290 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <UART_SetConfig+0x4e4>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	@ 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	3332      	adds	r3, #50	@ 0x32
 80039ae:	4a08      	ldr	r2, [pc, #32]	@ (80039d0 <UART_SetConfig+0x4e4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 020f 	and.w	r2, r3, #15
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4422      	add	r2, r4
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039ca:	46bd      	mov	sp, r7
 80039cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d0:	51eb851f 	.word	0x51eb851f

080039d4 <calibrate>:
/**
   Calibrate the constant time
 **/

static void calibrate(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
    uint32_t time;
    volatile uint32_t i;

    iter_per_us = 1000000;
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <calibrate+0x5c>)
 80039dc:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <calibrate+0x60>)
 80039de:	601a      	str	r2, [r3, #0]

    time = HAL_GetTick();
 80039e0:	f7fd fc22 	bl	8001228 <HAL_GetTick>
 80039e4:	6078      	str	r0, [r7, #4]
    /* Wait for next tick */
    while (HAL_GetTick() == time) {
 80039e6:	bf00      	nop
 80039e8:	f7fd fc1e 	bl	8001228 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d0f9      	beq.n	80039e8 <calibrate+0x14>
        /* wait */
    }
    for (i=0; i<iter_per_us; i++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	e002      	b.n	8003a00 <calibrate+0x2c>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <calibrate+0x5c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3f7      	bcc.n	80039fa <calibrate+0x26>
    }
    iter_per_us /= ((HAL_GetTick()-time)*1000);
 8003a0a:	f7fd fc0d 	bl	8001228 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <calibrate+0x5c>)
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	4a02      	ldr	r2, [pc, #8]	@ (8003a30 <calibrate+0x5c>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200000a0 	.word	0x200000a0
 8003a34:	000f4240 	.word	0x000f4240

08003a38 <up_udelay>:
/**
 * Software delay in �s
 *  us: the number of �s to wait
 **/
__inline static void up_udelay(uint32_t us)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for (i=0; i<us*iter_per_us; i++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e002      	b.n	8003a4c <up_udelay+0x14>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <up_udelay+0x34>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	fb03 f202 	mul.w	r2, r3, r2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f4      	bhi.n	8003a46 <up_udelay+0xe>
    }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200000a0 	.word	0x200000a0

08003a70 <enc_rdgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	733b      	strb	r3, [r7, #12]

  /* Send the read command and collect the data.  The sequence requires
   * 16-clocks:  8 to clock out the cmd + 8 to clock in the data.
   */

  ENC_SPI_SendBuf(cmdpdata, cmdpdata, 2);
 8003a7e:	f107 010c 	add.w	r1, r7, #12
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	2202      	movs	r2, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fe0d 	bl	80046a8 <ENC_SPI_SendBuf>

  return cmdpdata[1];
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <enc_wrgreg2>:
 * Assumptions:
 *
 ****************************************************************************/

static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	71bb      	strb	r3, [r7, #6]
    uint8_t cmdpdata[2];
    cmdpdata[0] = cmd;
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	733b      	strb	r3, [r7, #12]
    cmdpdata[1] = wrdata;
 8003aac:	79bb      	ldrb	r3, [r7, #6]
 8003aae:	737b      	strb	r3, [r7, #13]

    /* Send the write command and data.  The sequence requires 16-clocks:
     * 8 to clock out the cmd + 8 to clock out the data.
     */

    ENC_SPI_SendBuf(cmdpdata, NULL, 2);
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fdf5 	bl	80046a8 <ENC_SPI_SendBuf>
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <enc_waitgreg>:
 *
 ****************************************************************************/

static bool enc_waitgreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	71bb      	strb	r3, [r7, #6]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8003ad8:	f7fd fba6 	bl	8001228 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff ffc2 	bl	8003a70 <enc_rdgreg2>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003af0:	f7fd fb9a 	bl	8001228 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8003afc:	7cfa      	ldrb	r2, [r7, #19]
 8003afe:	79bb      	ldrb	r3, [r7, #6]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	797a      	ldrb	r2, [r7, #5]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d002      	beq.n	8003b10 <enc_waitgreg+0x4a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b31      	cmp	r3, #49	@ 0x31
 8003b0e:	d9e6      	bls.n	8003ade <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8003b10:	7cfa      	ldrb	r2, [r7, #19]
 8003b12:	79bb      	ldrb	r3, [r7, #6]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	797a      	ldrb	r2, [r7, #5]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <enc_waitwhilegreg>:
 ****************************************************************************/

#ifndef USE_PROTOTHREADS
static bool enc_waitwhilegreg(uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
 8003b36:	460b      	mov	r3, r1
 8003b38:	71bb      	strb	r3, [r7, #6]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8003b3e:	f7fd fb73 	bl	8001228 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdgreg(ctrlreg);
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff8f 	bl	8003a70 <enc_rdgreg2>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003b56:	f7fd fb67 	bl	8001228 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8003b62:	7cfa      	ldrb	r2, [r7, #19]
 8003b64:	79bb      	ldrb	r3, [r7, #6]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	797a      	ldrb	r2, [r7, #5]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d102      	bne.n	8003b76 <enc_waitwhilegreg+0x4a>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b31      	cmp	r3, #49	@ 0x31
 8003b74:	d9e6      	bls.n	8003b44 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8003b76:	7cfa      	ldrb	r2, [r7, #19]
 8003b78:	79bb      	ldrb	r3, [r7, #6]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	797a      	ldrb	r2, [r7, #5]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <enc_reset>:
  *    SRC operation is terminated by raising the CS pin."
  *
  * @param  None
  * @retval None
  */
void enc_reset(ENC_HandleTypeDef *handle) {
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]

  /* Send the system reset command. */
  ENC_SPI_Send(ENC_SRC);
 8003b9a:	20ff      	movs	r0, #255	@ 0xff
 8003b9c:	f000 fd60 	bl	8004660 <ENC_SPI_Send>
   * written to until at least 50 �s have passed since the Reset has ended.
   * All registers will revert to their Reset default values. The dual
   * port buffer memory will maintain state throughout the System Reset."
   */

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	741a      	strb	r2, [r3, #16]
  //up_mdelay(2);
  HAL_Delay(2); /* >1000 �s, conforms to errata #2 */
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f7fd fb4a 	bl	8001240 <HAL_Delay>
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <enc_setbank>:
 *
 * Assumptions:
 *
 ****************************************************************************/

void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]

  if (bank != handle->bank) {
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7c1b      	ldrb	r3, [r3, #16]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d00e      	beq.n	8003be8 <enc_setbank+0x34>
      /* Select bank 0 (just so that all of the bits are cleared) */

      enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8003bca:	2103      	movs	r1, #3
 8003bcc:	20bf      	movs	r0, #191	@ 0xbf
 8003bce:	f7ff ff63 	bl	8003a98 <enc_wrgreg2>

      /* Then OR in bits to get the correct bank */

      if (bank != 0)
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <enc_setbank+0x2e>
        {
          enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	209f      	movs	r0, #159	@ 0x9f
 8003bde:	f7ff ff5b 	bl	8003a98 <enc_wrgreg2>
        }

      /* Then remember the bank setting */

      handle->bank = bank;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	741a      	strb	r2, [r3, #16]
    }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <enc_rdbreg>:
 * Assumptions:
 *
 ****************************************************************************/

static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ffd2 	bl	8003bb4 <enc_setbank>
  /* Send the RCR command and collect the data.  How we collect the data
   * depends on if this is a PHY/CAN or not.  The normal sequence requires
   * 16-clocks:  8 to clock out the cmd and  8 to clock in the data.
   */

  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	733b      	strb	r3, [r7, #12]

  /* The PHY/MAC sequence requires 24-clocks:  8 to clock out the cmd,
   * 8 dummy bits, and 8 to clock in the PHY/MAC data.
   */

  ENC_SPI_SendBuf(data, data, (ISPHYMAC(ctrlreg))?3:2);
 8003c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da01      	bge.n	8003c26 <enc_rdbreg+0x36>
 8003c22:	2203      	movs	r2, #3
 8003c24:	e000      	b.n	8003c28 <enc_rdbreg+0x38>
 8003c26:	2202      	movs	r2, #2
 8003c28:	f107 010c 	add.w	r1, r7, #12
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fd39 	bl	80046a8 <ENC_SPI_SendBuf>
  return (ISPHYMAC(ctrlreg))?data[2]:data[1];
 8003c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da01      	bge.n	8003c42 <enc_rdbreg+0x52>
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	e000      	b.n	8003c44 <enc_rdbreg+0x54>
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <enc_wrbreg>:
 *
 ****************************************************************************/

static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                       uint8_t wrdata)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];

  /* Set the bank */

  enc_setbank(handle, GETBANK(ctrlreg));
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ffa2 	bl	8003bb4 <enc_setbank>

  /* Send the WCR command and data.  The sequence requires 16-clocks:
   * 8 to clock out the cmd + 8 to clock out the data.
   */

  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8003c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8003c84:	78bb      	ldrb	r3, [r7, #2]
 8003c86:	737b      	strb	r3, [r7, #13]

  ENC_SPI_SendBuf(data, NULL, 2);
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fd09 	bl	80046a8 <ENC_SPI_SendBuf>
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <enc_waitbreg>:
 *
 ****************************************************************************/

static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg,
                        uint8_t bits, uint8_t value)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	4608      	mov	r0, r1
 8003ca8:	4611      	mov	r1, r2
 8003caa:	461a      	mov	r2, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	70fb      	strb	r3, [r7, #3]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70bb      	strb	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8003cb8:	f7fd fab6 	bl	8001228 <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

  do
    {
      /* Read the byte from the requested banked register */

      rddata  = enc_rdbreg(handle, ctrlreg);
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff94 	bl	8003bf0 <enc_rdbreg>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      elapsed = HAL_GetTick() - start;
 8003ccc:	f7fd faac 	bl	8001228 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	60fb      	str	r3, [r7, #12]
    }
  while ((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8003cd8:	7cfa      	ldrb	r2, [r7, #19]
 8003cda:	78bb      	ldrb	r3, [r7, #2]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	787a      	ldrb	r2, [r7, #1]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d002      	beq.n	8003cec <enc_waitbreg+0x4e>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b31      	cmp	r3, #49	@ 0x31
 8003cea:	d9e8      	bls.n	8003cbe <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8003cec:	7cfa      	ldrb	r2, [r7, #19]
 8003cee:	78bb      	ldrb	r3, [r7, #2]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	787a      	ldrb	r2, [r7, #1]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <enc_rdphy>:
 * Assumptions:
 *
 ****************************************************************************/

static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	81fb      	strh	r3, [r7, #14]
   *
   *   1. Write the address of the PHY register to read from into the MIREGADR
   *      register.
   */

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	21d4      	movs	r1, #212	@ 0xd4
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff94 	bl	8003c4c <enc_wrbreg>

  /*   2. Set the MICMD.MIIRD bit. The read operation begins and the
   *      MISTAT.BUSY bit is set.
   */

  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8003d24:	2201      	movs	r2, #1
 8003d26:	21d2      	movs	r1, #210	@ 0xd2
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff8f 	bl	8003c4c <enc_wrbreg>

//  volatile int i;
//  for (i=0; i<12*17; i++) {
//  }

  up_udelay(12);
 8003d2e:	200c      	movs	r0, #12
 8003d30:	f7ff fe82 	bl	8003a38 <up_udelay>

  if (enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8003d34:	2300      	movs	r3, #0
 8003d36:	2201      	movs	r2, #1
 8003d38:	21ea      	movs	r1, #234	@ 0xea
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffaf 	bl	8003c9e <enc_waitbreg>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <enc_rdphy+0x6c>
    {
      /* 4. Clear the MICMD.MIIRD bit. */

      enc_wrbreg(handle, ENC_MICMD, 0x00);
 8003d46:	2200      	movs	r2, #0
 8003d48:	21d2      	movs	r1, #210	@ 0xd2
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff7e 	bl	8003c4c <enc_wrbreg>

      /* 5. Read the desired data from the MIRDL and MIRDH registers. The
       *    order that these bytes are accessed is unimportant."
       */

      data  = (uint16_t)enc_rdbreg(handle, ENC_MIRDL);
 8003d50:	21d8      	movs	r1, #216	@ 0xd8
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff4c 	bl	8003bf0 <enc_rdbreg>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	81fb      	strh	r3, [r7, #14]
      data |= (uint16_t)enc_rdbreg(handle, ENC_MIRDH) << 8;
 8003d5c:	21d9      	movs	r1, #217	@ 0xd9
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ff46 	bl	8003bf0 <enc_rdbreg>
 8003d64:	4603      	mov	r3, r0
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	b21a      	sxth	r2, r3
 8003d6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	81fb      	strh	r3, [r7, #14]
    }

  return data;
 8003d74:	89fb      	ldrh	r3, [r7, #14]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <enc_wrphy>:
 *
 ****************************************************************************/

static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr,
                      uint16_t phydata)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	803b      	strh	r3, [r7, #0]
   *
   *    1. Write the address of the PHY register to write to into the
   *       MIREGADR register.
   */

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	461a      	mov	r2, r3
 8003d92:	21d4      	movs	r1, #212	@ 0xd4
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff59 	bl	8003c4c <enc_wrbreg>

  /*    2. Write the lower 8 bits of data to write into the MIWRL register. */

  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8003d9a:	883b      	ldrh	r3, [r7, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	21d6      	movs	r1, #214	@ 0xd6
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff52 	bl	8003c4c <enc_wrbreg>
   *       Writing to this register automatically begins the MIIM transaction,
   *       so it must be written to after MIWRL. The MISTAT.BUSY bit becomes
   *       set.
   */

  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8003da8:	883b      	ldrh	r3, [r7, #0]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	21d7      	movs	r1, #215	@ 0xd7
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff49 	bl	8003c4c <enc_wrbreg>
  /* wait for approx 12 �s */
//  volatile int i;
//  for (i=0; i<12*17; i++) {
//  }

  up_udelay(12);
 8003dba:	200c      	movs	r0, #12
 8003dbc:	f7ff fe3c 	bl	8003a38 <up_udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	21ea      	movs	r1, #234	@ 0xea
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff69 	bl	8003c9e <enc_waitbreg>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <ENC_Start>:
  * @brief  Initialize the enc28j60 and configure the needed hardware resources
  * @param  handle: Handle on data configuration.
  * @retval None
  */
bool ENC_Start(ENC_HandleTypeDef *handle)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
    /* register value */
    uint8_t regval;

    /* Calibrate time constant */
    calibrate();
 8003ddc:	f7ff fdfa 	bl	80039d4 <calibrate>

    /* System reset */
	enc_reset(handle);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fed6 	bl	8003b92 <enc_reset>

	/* Use bank 0 */
	enc_setbank(handle, 0);
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fee3 	bl	8003bb4 <enc_setbank>
    /* Check if we are actually communicating with the ENC28J60.  If its
     * 0x00 or 0xff, then we are probably not communicating correctly
     * via SPI.
     */

    regval = enc_rdbreg(handle, ENC_EREVID);
 8003dee:	2172      	movs	r1, #114	@ 0x72
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fefd 	bl	8003bf0 <enc_rdbreg>
 8003df6:	4603      	mov	r3, r0
 8003df8:	73fb      	strb	r3, [r7, #15]
    if (regval == 0x00 || regval == 0xff) {
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <ENC_Start+0x32>
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2bff      	cmp	r3, #255	@ 0xff
 8003e04:	d101      	bne.n	8003e0a <ENC_Start+0x36>
      return false;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e0cc      	b.n	8003fa4 <ENC_Start+0x1d0>
    }

    /* Initialize ECON2: Enable address auto increment.
     */

    enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	205e      	movs	r0, #94	@ 0x5e
 8003e0e:	f7ff fe43 	bl	8003a98 <enc_wrgreg2>

    /* Initialize receive buffer.
     * First, set the receive buffer start address.
     */

    handle->nextpkt = PKTMEM_RX_START;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	829a      	strh	r2, [r3, #20]
    enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2108      	movs	r1, #8
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff15 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2109      	movs	r1, #9
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff10 	bl	8003c4c <enc_wrbreg>

    /* Set the receive data pointer */

    /* Errata 14 */
    enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8003e2c:	22ff      	movs	r2, #255	@ 0xff
 8003e2e:	210c      	movs	r1, #12
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff0b 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 8003e36:	2219      	movs	r2, #25
 8003e38:	210d      	movs	r1, #13
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ff06 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_START >> 8);
*/

    /* Set the receive buffer end. */

    enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 8003e40:	22ff      	movs	r2, #255	@ 0xff
 8003e42:	210a      	movs	r1, #10
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff01 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 8003e4a:	2219      	movs	r2, #25
 8003e4c:	210b      	movs	r1, #11
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff fefc 	bl	8003c4c <enc_wrbreg>

    /* Set transmit buffer start. */

    handle->transmitLength = 0;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	831a      	strh	r2, [r3, #24]
    enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fef4 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8003e64:	221a      	movs	r2, #26
 8003e66:	2105      	movs	r1, #5
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff feef 	bl	8003c4c <enc_wrbreg>

    /* Set filter mode: unicast OR broadcast AND crc valid */

    enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 8003e6e:	22a1      	movs	r2, #161	@ 0xa1
 8003e70:	2138      	movs	r1, #56	@ 0x38
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff feea 	bl	8003c4c <enc_wrbreg>

	do {
		HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 8003e78:	200a      	movs	r0, #10
 8003e7a:	f7fd f9e1 	bl	8001240 <HAL_Delay>
		regval = enc_rdbreg(handle, ENC_ESTAT);
 8003e7e:	211d      	movs	r1, #29
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff feb5 	bl	8003bf0 <enc_rdbreg>
 8003e86:	4603      	mov	r3, r0
 8003e88:	73fb      	strb	r3, [r7, #15]
	} while ((regval & ESTAT_CLKRDY) == 0);
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f1      	beq.n	8003e78 <ENC_Start+0xa4>

    /* Enable MAC receive */

    enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 8003e94:	220d      	movs	r2, #13
 8003e96:	21c0      	movs	r1, #192	@ 0xc0
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fed7 	bl	8003c4c <enc_wrbreg>

    /* Enable automatic padding and CRC operations */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d120      	bne.n	8003ee8 <ENC_Start+0x114>
      enc_wrbreg(handle, ENC_MACON3,
                 ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <ENC_Start+0xde>
 8003eae:	2332      	movs	r3, #50	@ 0x32
 8003eb0:	e000      	b.n	8003eb4 <ENC_Start+0xe0>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	21c2      	movs	r1, #194	@ 0xc2
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fec7 	bl	8003c4c <enc_wrbreg>
                 MACON3_FRMLNEN);
      enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER);        /* Defer transmission enable */
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	21c3      	movs	r1, #195	@ 0xc3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fec2 	bl	8003c4c <enc_wrbreg>

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8003ec8:	2212      	movs	r2, #18
 8003eca:	21c6      	movs	r1, #198	@ 0xc6
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff febd 	bl	8003c4c <enc_wrbreg>
      enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	21c7      	movs	r1, #199	@ 0xc7
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff feb8 	bl	8003c4c <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 8003edc:	2212      	movs	r2, #18
 8003ede:	21c4      	movs	r1, #196	@ 0xc4
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff feb3 	bl	8003c4c <enc_wrbreg>
 8003ee6:	e015      	b.n	8003f14 <ENC_Start+0x140>
    } else {
      /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */

      enc_wrbreg(handle, ENC_MACON3,
                ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)?MACON3_PADCFG0 | MACON3_TXCRCEN:0) |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
      enc_wrbreg(handle, ENC_MACON3,
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <ENC_Start+0x120>
 8003ef0:	2333      	movs	r3, #51	@ 0x33
 8003ef2:	e000      	b.n	8003ef6 <ENC_Start+0x122>
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	21c2      	movs	r1, #194	@ 0xc2
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fea6 	bl	8003c4c <enc_wrbreg>
                MACON3_FRMLNEN | MACON3_FULDPX);

      /* Set Non-Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8003f00:	2212      	movs	r2, #18
 8003f02:	21c6      	movs	r1, #198	@ 0xc6
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fea1 	bl	8003c4c <enc_wrbreg>

      /* Set Back-to-Back Inter-Packet Gap */

      enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 8003f0a:	2215      	movs	r2, #21
 8003f0c:	21c4      	movs	r1, #196	@ 0xc4
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fe9c 	bl	8003c4c <enc_wrbreg>
    }

    /* Set the maximum packet size which the controller will accept */

    enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU+18) & 0xff);
 8003f14:	22ee      	movs	r2, #238	@ 0xee
 8003f16:	21ca      	movs	r1, #202	@ 0xca
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff fe97 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU+18) >> 8);
 8003f1e:	2205      	movs	r2, #5
 8003f20:	21cb      	movs	r1, #203	@ 0xcb
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe92 	bl	8003c4c <enc_wrbreg>
  /* Configure LEDs (No, just use the defaults for now) */
  /* enc_wrphy(priv, ENC_PHLCON, ??); */

    /* Setup up PHCON1 & 2 */

    if (handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX) {
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <ENC_Start+0x174>
      enc_wrphy(handle, ENC_PHCON1, 0x00);
 8003f30:	2200      	movs	r2, #0
 8003f32:	2100      	movs	r1, #0
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff22 	bl	8003d7e <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 8003f3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f3e:	2110      	movs	r1, #16
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff1c 	bl	8003d7e <enc_wrphy>
 8003f46:	e00a      	b.n	8003f5e <ENC_Start+0x18a>
    } else {
      enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 8003f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ff15 	bl	8003d7e <enc_wrphy>
      enc_wrphy(handle, ENC_PHCON2, 0x00);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2110      	movs	r1, #16
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff10 	bl	8003d7e <enc_wrphy>

    /* Not used Restore normal operation mode
    enc_pwrfull(handle); */

    /* Process interrupt settings */
    if (handle->Init.InterruptEnableBits & EIE_LINKIE) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7b1b      	ldrb	r3, [r3, #12]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <ENC_Start+0x1a0>
      /* Enable link change interrupt in PHY module */
      enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 8003f6a:	2212      	movs	r2, #18
 8003f6c:	2112      	movs	r1, #18
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff05 	bl	8003d7e <enc_wrphy>
    }

    /* Since we not modify PHLCON register, we don't fall in errata 11 case */

    /* Reset all interrupt flags */
    enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8003f74:	213b      	movs	r1, #59	@ 0x3b
 8003f76:	20bc      	movs	r0, #188	@ 0xbc
 8003f78:	f7ff fd8e 	bl	8003a98 <enc_wrgreg2>

    regval = handle->Init.InterruptEnableBits;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7b1b      	ldrb	r3, [r3, #12]
 8003f80:	73fb      	strb	r3, [r7, #15]
    if (regval) {
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <ENC_Start+0x1bc>
        /* Ensure INTIE is set when at least an interruption is selected */
        regval |= EIE_INTIE;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f8e:	73fb      	strb	r3, [r7, #15]
    }
    /* Enable selected interrupts in ethernet controller module */
    enc_bfsgreg(ENC_EIE, regval);
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	4619      	mov	r1, r3
 8003f94:	209b      	movs	r0, #155	@ 0x9b
 8003f96:	f7ff fd7f 	bl	8003a98 <enc_wrgreg2>

    /* Enable the receiver */
    enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	209f      	movs	r0, #159	@ 0x9f
 8003f9e:	f7ff fd7b 	bl	8003a98 <enc_wrgreg2>

    return true;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <ENC_SetMacAddr>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_SetMacAddr(ENC_HandleTypeDef *handle)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
   *   MAADR4  MAC Address Byte 4 (MAADR<23:16>)
   *   MAADR5  MAC Address Byte 5 (MAADR<15:8>)
   *   MAADR6  MAC Address Byte 6 (MAADR<7:0>)
   */

  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	21e4      	movs	r1, #228	@ 0xe4
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fe44 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	21e5      	movs	r1, #229	@ 0xe5
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fe3b 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	3302      	adds	r3, #2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	21e2      	movs	r1, #226	@ 0xe2
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe32 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	3303      	adds	r3, #3
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	21e3      	movs	r1, #227	@ 0xe3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff fe29 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	21e0      	movs	r1, #224	@ 0xe0
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe20 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	3305      	adds	r3, #5
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	21e1      	movs	r1, #225	@ 0xe1
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fe17 	bl	8003c4c <enc_wrbreg>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <ENC_WriteBuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

void ENC_WriteBuffer(void *buffer, uint16_t buflen)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	807b      	strh	r3, [r7, #2]
   * We explicitly select the ENC28J60 chip because we have to transmits several pieces of
   * information while keeping CS low
   *
   */

  ENC_SPI_Select(true);
 8004032:	2001      	movs	r0, #1
 8004034:	f000 fb76 	bl	8004724 <ENC_SPI_Select>
   * "...The [3-bit]WBM opcode should then be sent to the ENC28J60,
   *  followed by the 5-bit constant, 1Ah."
   */


  ENC_SPI_SendWithoutSelection(ENC_WBM);
 8004038:	207a      	movs	r0, #122	@ 0x7a
 800403a:	f000 fafb 	bl	8004634 <ENC_SPI_SendWithoutSelection>
   *  enabled, it is possible to continuously write sequential bytes
   *  to the buffer memory without any extra SPI command
   *  overhead.
   */

  ENC_SPI_SendBuf(buffer, NULL, buflen);
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	461a      	mov	r2, r3
 8004042:	2100      	movs	r1, #0
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fb2f 	bl	80046a8 <ENC_SPI_SendBuf>
   *
   * "The WBM command is terminated by bringing up the CS pin. ..."
   * done in ENC_SPI_SendBuf callback
   */

}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <enc_rdbuffer>:
 *   Read pointer is set to the correct address
 *
 ****************************************************************************/

static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	807b      	strh	r3, [r7, #2]
  /* Select ENC28J60 chip */

  ENC_SPI_Select(true);
 800405e:	2001      	movs	r0, #1
 8004060:	f000 fb60 	bl	8004724 <ENC_SPI_Select>

  /* Send the read buffer memory command (ignoring the response) */

  ENC_SPI_SendWithoutSelection(ENC_RBM);
 8004064:	203a      	movs	r0, #58	@ 0x3a
 8004066:	f000 fae5 	bl	8004634 <ENC_SPI_SendWithoutSelection>

  /* Then read the buffer data */

  ENC_SPI_SendBuf(NULL, buffer, buflen);
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	461a      	mov	r2, r3
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	2000      	movs	r0, #0
 8004072:	f000 fb19 	bl	80046a8 <ENC_SPI_SendBuf>

  /* De-select ENC28J60 chip: done in ENC_SPI_SendBuf callback */
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <ENC_RestoreTXBuffer>:
 * Assumptions:
 *
 ****************************************************************************/

int8_t ENC_RestoreTXBuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if (!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0)) {
 800408a:	2200      	movs	r2, #0
 800408c:	2108      	movs	r1, #8
 800408e:	201f      	movs	r0, #31
 8004090:	f7ff fd19 	bl	8003ac6 <enc_waitgreg>
 8004094:	4603      	mov	r3, r0
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <ENC_RestoreTXBuffer+0x28>
    return ERR_TIMEOUT;
 80040a0:	f06f 0302 	mvn.w	r3, #2
 80040a4:	e03c      	b.n	8004120 <ENC_RestoreTXBuffer+0xa2>

  /* Send the packet: address=priv->dev.d_buf, length=priv->dev.d_len */

  /* Set transmit buffer start (is this necessary?). */

  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2104      	movs	r1, #4
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fdce 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 80040b0:	221a      	movs	r2, #26
 80040b2:	2105      	movs	r1, #5
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fdc9 	bl	8003c4c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */

  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2102      	movs	r1, #2
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fdc4 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 80040c4:	221a      	movs	r2, #26
 80040c6:	2103      	movs	r1, #3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fdbf 	bl	8003c4c <enc_wrbreg>
  /* Set the TX End pointer based on the size of the packet to send. Note
   * that the offset accounts for the control byte at the beginning the
   * buffer plus the size of the packet data.
   */

  txend = PKTMEM_TX_START + len;
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 80040d4:	81fb      	strh	r3, [r7, #14]

  if (txend+8>PKTMEM_TX_ENDP1) {
 80040d6:	89fb      	ldrh	r3, [r7, #14]
 80040d8:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 80040dc:	4293      	cmp	r3, r2
 80040de:	d902      	bls.n	80040e6 <ENC_RestoreTXBuffer+0x68>
    return ERR_MEM;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	e01c      	b.n	8004120 <ENC_RestoreTXBuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	2106      	movs	r1, #6
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fdac 	bl	8003c4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 80040f4:	89fb      	ldrh	r3, [r7, #14]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	2107      	movs	r1, #7
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fda3 	bl	8003c4c <enc_wrbreg>
   *   POVERRIDE is zero).
   * PHUGEEN: Per Packet Huge Frame Enable bit (Set, but won't be used
   *   because POVERRIDE is zero).
   */

  control_write[0] = ENC_WBM;
 8004106:	237a      	movs	r3, #122	@ 0x7a
 8004108:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 800410a:	230e      	movs	r3, #14
 800410c:	737b      	strb	r3, [r7, #13]
  ENC_SPI_SendBuf(control_write, control_write, 2);
 800410e:	f107 010c 	add.w	r1, r7, #12
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	2202      	movs	r2, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fac5 	bl	80046a8 <ENC_SPI_SendBuf>

  return ERR_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <ENC_Transmit>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_Transmit(ENC_HandleTypeDef *handle)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    if (handle->transmitLength != 0) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8b1b      	ldrh	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d053      	beq.n	80041e0 <ENC_Transmit+0xb8>
        /* Set TXRTS to send the packet in the transmit buffer */

        //enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
        /* Implement erratas 12, 13 and 15 */
        /* Reset transmit logic */
        handle->retries = 16;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2210      	movs	r2, #16
 800413c:	849a      	strh	r2, [r3, #36]	@ 0x24
        do {
            enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	209f      	movs	r0, #159	@ 0x9f
 8004142:	f7ff fca9 	bl	8003a98 <enc_wrgreg2>
            enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8004146:	2180      	movs	r1, #128	@ 0x80
 8004148:	20bf      	movs	r0, #191	@ 0xbf
 800414a:	f7ff fca5 	bl	8003a98 <enc_wrgreg2>
            enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 800414e:	210a      	movs	r1, #10
 8004150:	20bc      	movs	r0, #188	@ 0xbc
 8004152:	f7ff fca1 	bl	8003a98 <enc_wrgreg2>

            /* Start transmission */
            enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8004156:	2108      	movs	r1, #8
 8004158:	209f      	movs	r0, #159	@ 0x9f
 800415a:	f7ff fc9d 	bl	8003a98 <enc_wrgreg2>

            /* Wait for end of transmission */
            enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	210a      	movs	r1, #10
 8004162:	201c      	movs	r0, #28
 8004164:	f7ff fce2 	bl	8003b2c <enc_waitwhilegreg>

            /* Stop transmission */
            enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8004168:	2108      	movs	r1, #8
 800416a:	20bf      	movs	r0, #191	@ 0xbf
 800416c:	f7ff fc94 	bl	8003a98 <enc_wrgreg2>
            {
                uint16_t addtTsv4;
                uint8_t tsv4, regval;

                /* read tsv */
                addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8b1b      	ldrh	r3, [r3, #24]
 8004174:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8004178:	3304      	adds	r3, #4
 800417a:	81fb      	strh	r3, [r7, #14]

                enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 800417c:	89fb      	ldrh	r3, [r7, #14]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	2100      	movs	r1, #0
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fd61 	bl	8003c4c <enc_wrbreg>
                enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	b29b      	uxth	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fd58 	bl	8003c4c <enc_wrbreg>

                enc_rdbuffer(&tsv4, 1);
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff55 	bl	8004052 <enc_rdbuffer>
                regval = enc_rdgreg(ENC_EIR);
 80041a8:	201c      	movs	r0, #28
 80041aa:	f7ff fc61 	bl	8003a70 <enc_rdgreg2>
 80041ae:	4603      	mov	r3, r0
 80041b0:	737b      	strb	r3, [r7, #13]
                if (!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL)) {
 80041b2:	7b7b      	ldrb	r3, [r7, #13]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00e      	beq.n	80041da <ENC_Transmit+0xb2>
 80041bc:	7b3b      	ldrb	r3, [r7, #12]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <ENC_Transmit+0xb2>
                    break;
                }
            }
            handle->retries--;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	849a      	strh	r2, [r3, #36]	@ 0x24
        } while (handle->retries > 0);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1b1      	bne.n	800413e <ENC_Transmit+0x16>
        /* Transmission finished (but can be unsuccessful) */
        handle->transmitLength = 0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	831a      	strh	r2, [r3, #24]
    }
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <ENC_GetReceivedFrame>:
 * Assumptions:
 *
 ****************************************************************************/

bool ENC_GetReceivedFrame(ENC_HandleTypeDef *handle)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    uint16_t pktlen;
    uint16_t rxstat;

    uint8_t pktcnt;

    bool result = true;
 80041f0:	2301      	movs	r3, #1
 80041f2:	757b      	strb	r3, [r7, #21]

    pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 80041f4:	2139      	movs	r1, #57	@ 0x39
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fcfa 	bl	8003bf0 <enc_rdbreg>
 80041fc:	4603      	mov	r3, r0
 80041fe:	753b      	strb	r3, [r7, #20]
    if (pktcnt == 0) {
 8004200:	7d3b      	ldrb	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <ENC_GetReceivedFrame+0x22>
        return false;
 8004206:	2300      	movs	r3, #0
 8004208:	e078      	b.n	80042fc <ENC_GetReceivedFrame+0x114>
    };

    /* Set the read pointer to the start of the received packet (ERDPT) */

    enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8a9b      	ldrh	r3, [r3, #20]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fd19 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8a9b      	ldrh	r3, [r3, #20]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29b      	uxth	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fd0f 	bl	8003c4c <enc_wrbreg>
    /* Read the next packet pointer and the 4 byte read status vector (RSV)
    * at the beginning of the received packet. (ERDPT should auto-increment
    * and wrap to the beginning of the read buffer as necessary)
    */

    enc_rdbuffer(rsv, 6);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2106      	movs	r1, #6
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ff0c 	bl	8004052 <enc_rdbuffer>
    *              padding and CRC fields. This field is stored in little-
    *              endian format.
    *  Bits 16-31: Bit encoded RX status.
    */

    handle->nextpkt = (uint16_t)rsv[1] << 8 | (uint16_t)rsv[0];
 800423a:	7b7b      	ldrb	r3, [r7, #13]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	b21a      	sxth	r2, r3
 8004240:	7b3b      	ldrb	r3, [r7, #12]
 8004242:	b21b      	sxth	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b21b      	sxth	r3, r3
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	829a      	strh	r2, [r3, #20]
    pktlen        = (uint16_t)rsv[3] << 8 | (uint16_t)rsv[2];
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	b21a      	sxth	r2, r3
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	b21b      	sxth	r3, r3
 8004258:	4313      	orrs	r3, r2
 800425a:	b21b      	sxth	r3, r3
 800425c:	827b      	strh	r3, [r7, #18]
    rxstat        = (uint16_t)rsv[5] << 8 | (uint16_t)rsv[4];
 800425e:	7c7b      	ldrb	r3, [r7, #17]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	b21a      	sxth	r2, r3
 8004264:	7c3b      	ldrb	r3, [r7, #16]
 8004266:	b21b      	sxth	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b21b      	sxth	r3, r3
 800426c:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */

    if ((rxstat & RXSTAT_OK) == 0) {
 800426e:	8afb      	ldrh	r3, [r7, #22]
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <ENC_GetReceivedFrame+0x96>
#ifdef CONFIG_ENC28J60_STATS
        priv->stats.rxnotok++;
#endif
        result = false;
 8004278:	2300      	movs	r3, #0
 800427a:	757b      	strb	r3, [r7, #21]
 800427c:	e018      	b.n	80042b0 <ENC_GetReceivedFrame+0xc8>
    } else { /* Check for a usable packet length (4 added for the CRC) */
        if (pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4)) {
 800427e:	8a7b      	ldrh	r3, [r7, #18]
 8004280:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8004284:	d802      	bhi.n	800428c <ENC_GetReceivedFrame+0xa4>
 8004286:	8a7b      	ldrh	r3, [r7, #18]
 8004288:	2b12      	cmp	r3, #18
 800428a:	d802      	bhi.n	8004292 <ENC_GetReceivedFrame+0xaa>
    #ifdef CONFIG_ENC28J60_STATS
            priv->stats.rxpktlen++;
    #endif
            result = false;
 800428c:	2300      	movs	r3, #0
 800428e:	757b      	strb	r3, [r7, #21]
 8004290:	e00e      	b.n	80042b0 <ENC_GetReceivedFrame+0xc8>
        } else { /* Otherwise, read and process the packet */
            /* Save the packet length (without the 4 byte CRC) in handle->RxFrameInfos.length*/

            handle->RxFrameInfos.length = pktlen - 4;
 8004292:	8a7b      	ldrh	r3, [r7, #18]
 8004294:	3b04      	subs	r3, #4
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	@ 0x28
            /* Copy the data data from the receive buffer to priv->dev.d_buf.
            * ERDPT should be correctly positioned from the last call to to
            * end_rdbuffer (above).
            */

            enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	b21b      	sxth	r3, r3
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7ff fed1 	bl	8004052 <enc_rdbuffer>
    /* Move the RX read pointer to the start of the next received packet.
    * This frees the memory we just read.
    */

    /* Errata 14 (on se sert de rxstat comme variable temporaire */
    rxstat = handle->nextpkt;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8a9b      	ldrh	r3, [r3, #20]
 80042b4:	82fb      	strh	r3, [r7, #22]
    if (rxstat == PKTMEM_RX_START) {
 80042b6:	8afb      	ldrh	r3, [r7, #22]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <ENC_GetReceivedFrame+0xdc>
        rxstat = PKTMEM_RX_END;
 80042bc:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 80042c0:	82fb      	strh	r3, [r7, #22]
 80042c2:	e002      	b.n	80042ca <ENC_GetReceivedFrame+0xe2>
    } else {
        rxstat--;
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	82fb      	strh	r3, [r7, #22]
    }
    enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 80042ca:	8afb      	ldrh	r3, [r7, #22]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	210c      	movs	r1, #12
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fcb6 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 80042e0:	8afb      	ldrh	r3, [r7, #22]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	210d      	movs	r1, #13
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fcad 	bl	8003c4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_ERXRDPTH, (handle->nextpkt) >> 8);
*/

    /* Decrement the packet counter indicate we are done with this packet */

    enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 80042f2:	2140      	movs	r1, #64	@ 0x40
 80042f4:	209e      	movs	r0, #158	@ 0x9e
 80042f6:	f7ff fbcf 	bl	8003a98 <enc_wrgreg2>

    return result;
 80042fa:	7d7b      	ldrb	r3, [r7, #21]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <enc_linkstatus>:
 * Assumptions:
 *
 ****************************************************************************/

static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 800430c:	2111      	movs	r1, #17
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fcfa 	bl	8003d08 <enc_rdphy>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	82da      	strh	r2, [r3, #22]
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <ENC_EnableInterrupts>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_EnableInterrupts(uint8_t bits)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
    enc_bfsgreg(ENC_EIE, bits);
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	4619      	mov	r1, r3
 8004332:	209b      	movs	r0, #155	@ 0x9b
 8004334:	f7ff fbb0 	bl	8003a98 <enc_wrgreg2>
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <ENC_IRQHandler>:
 * Assumptions:
 *
 ****************************************************************************/

void ENC_IRQHandler(ENC_HandleTypeDef *handle)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
     * state (high). Doing so will prevent the host controller from missing a
     * falling edge should another interrupt occur while the immediate interrupt
     * is being serviced."
     */

    enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8004348:	2180      	movs	r1, #128	@ 0x80
 800434a:	20bb      	movs	r0, #187	@ 0xbb
 800434c:	f7ff fba4 	bl	8003a98 <enc_wrgreg2>

    /* Read EIR for interrupt flags
     */

    eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8004350:	201c      	movs	r0, #28
 8004352:	f7ff fb8d 	bl	8003a70 <enc_rdgreg2>
 8004356:	4603      	mov	r3, r0
 8004358:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 800435c:	73fb      	strb	r3, [r7, #15]

    /* PKTIF is not reliable, check PKCNT instead */
    if (enc_rdbreg(handle, ENC_EPKTCNT) != 0) {
 800435e:	2139      	movs	r1, #57	@ 0x39
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fc45 	bl	8003bf0 <enc_rdbreg>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <ENC_IRQHandler+0x34>
        /* Manage EIR_PKTIF by software */
        eir |= EIR_PKTIF;
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004372:	73fb      	strb	r3, [r7, #15]
    }

    /* Store interrupt flags in handle */
    handle->interruptFlags = eir;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	745a      	strb	r2, [r3, #17]

    /* If link status has changed, read it */
    if ((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <ENC_IRQHandler+0x52>
    {
        enc_linkstatus(handle);       /* Get current link status */
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ffbd 	bl	8004304 <enc_linkstatus>
        enc_rdphy(handle, ENC_PHIR);  /* Clear the LINKIF interrupt */
 800438a:	2113      	movs	r1, #19
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fcbb 	bl	8003d08 <enc_rdphy>
    }

    /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
    enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8004392:	213b      	movs	r1, #59	@ 0x3b
 8004394:	20bc      	movs	r0, #188	@ 0xbc
 8004396:	f7ff fb7f 	bl	8003a98 <enc_wrgreg2>

    /* Enable Ethernet interrupts */
    /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <up_udelay>:
/**
 * Software delay in �s
 *  us: the number of �s to wait
 **/
__inline static void up_udelay(uint32_t us)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    volatile uint32_t i;

    for (i=0; i<us*_iter_per_us; i++) {
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e002      	b.n	80043b8 <up_udelay+0x14>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <up_udelay+0x34>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	fb03 f202 	mul.w	r2, r3, r2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d8f4      	bhi.n	80043b2 <up_udelay+0xe>
    }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	200000a4 	.word	0x200000a4

080043dc <_calibrate>:

static void _calibrate(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
    uint32_t time;
    volatile uint32_t i;

    _iter_per_us = 1000000;
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <_calibrate+0x5c>)
 80043e4:	4a15      	ldr	r2, [pc, #84]	@ (800443c <_calibrate+0x60>)
 80043e6:	601a      	str	r2, [r3, #0]

    time = HAL_GetTick();
 80043e8:	f7fc ff1e 	bl	8001228 <HAL_GetTick>
 80043ec:	6078      	str	r0, [r7, #4]
    /* Wait for next tick */
    while (HAL_GetTick() == time) {
 80043ee:	bf00      	nop
 80043f0:	f7fc ff1a 	bl	8001228 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d0f9      	beq.n	80043f0 <_calibrate+0x14>
        /* wait */
    }
    for (i=0; i<_iter_per_us; i++) {
 80043fc:	2300      	movs	r3, #0
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	e002      	b.n	8004408 <_calibrate+0x2c>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <_calibrate+0x5c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3f7      	bcc.n	8004402 <_calibrate+0x26>
    }
    _iter_per_us /= ((HAL_GetTick()-time)*1000);
 8004412:	f7fc ff09 	bl	8001228 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <_calibrate+0x5c>)
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	4a02      	ldr	r2, [pc, #8]	@ (8004438 <_calibrate+0x5c>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200000a4 	.word	0x200000a4
 800443c:	000f4240 	.word	0x000f4240

08004440 <ENC28J60SPIInit>:

void ENC28J60SPIInit(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
	//SPI Pins
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_SPI1_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	4a2e      	ldr	r2, [pc, #184]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 8004450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004454:	6453      	str	r3, [r2, #68]	@ 0x44
 8004456:	4b2c      	ldr	r3, [pc, #176]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	4b28      	ldr	r3, [pc, #160]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	4a27      	ldr	r2, [pc, #156]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6313      	str	r3, [r2, #48]	@ 0x30
 8004472:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <ENC28J60SPIInit+0xc8>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800447e:	23e0      	movs	r3, #224	@ 0xe0
 8004480:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800448a:	2303      	movs	r3, #3
 800448c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Alternate = GPIO_AF5_SPI1;
 800448e:	2305      	movs	r3, #5
 8004490:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);//MISO
 8004492:	f107 030c 	add.w	r3, r7, #12
 8004496:	4619      	mov	r1, r3
 8004498:	481c      	ldr	r0, [pc, #112]	@ (800450c <ENC28J60SPIInit+0xcc>)
 800449a:	f7fd f809 	bl	80014b0 <HAL_GPIO_Init>

	hspi_enc28j60.Instance = SPI1;
 800449e:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <ENC28J60SPIInit+0xd4>)
 80044a2:	601a      	str	r2, [r3, #0]
	hspi_enc28j60.Init.Mode = SPI_MODE_MASTER;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044a6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044aa:	605a      	str	r2, [r3, #4]
	hspi_enc28j60.Init.Direction = SPI_DIRECTION_2LINES;
 80044ac:	4b18      	ldr	r3, [pc, #96]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
	hspi_enc28j60.Init.DataSize = SPI_DATASIZE_8BIT;
 80044b2:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	60da      	str	r2, [r3, #12]
	hspi_enc28j60.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	611a      	str	r2, [r3, #16]
	hspi_enc28j60.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044be:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	615a      	str	r2, [r3, #20]
	hspi_enc28j60.Init.NSS = SPI_NSS_SOFT;
 80044c4:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ca:	619a      	str	r2, [r3, #24]
	hspi_enc28j60.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;//84/8=10.5MHz
 80044cc:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044ce:	2210      	movs	r2, #16
 80044d0:	61da      	str	r2, [r3, #28]
	hspi_enc28j60.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
	hspi_enc28j60.Init.TIMode = SPI_TIMODE_DISABLE;
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044da:	2200      	movs	r2, #0
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi_enc28j60.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044de:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi_enc28j60.Init.CRCPolynomial = 10;
 80044e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044e6:	220a      	movs	r2, #10
 80044e8:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (HAL_SPI_Init(&hspi_enc28j60) != HAL_OK)
 80044ea:	4809      	ldr	r0, [pc, #36]	@ (8004510 <ENC28J60SPIInit+0xd0>)
 80044ec:	f7fd fe20 	bl	8002130 <HAL_SPI_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <ENC28J60SPIInit+0xba>
	{
		Error_Handler();
 80044f6:	f7fc fa05 	bl	8000904 <Error_Handler>
	}
	_calibrate();
 80044fa:	f7ff ff6f 	bl	80043dc <_calibrate>
}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	20004e20 	.word	0x20004e20
 8004514:	40013000 	.word	0x40013000

08004518 <ENC28J60GPIOInit>:
 * CS	---------->PA4
 * RESET---------->PA8
 *
 */
void ENC28J60GPIOInit(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4b12      	ldr	r3, [pc, #72]	@ (800456c <ENC28J60GPIOInit+0x54>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4a11      	ldr	r2, [pc, #68]	@ (800456c <ENC28J60GPIOInit+0x54>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6313      	str	r3, [r2, #48]	@ 0x30
 800452e:	4b0f      	ldr	r3, [pc, #60]	@ (800456c <ENC28J60GPIOInit+0x54>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = ENC_CS_PIN|ENC_RESET_PIN;
 800453a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800453e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004540:	2301      	movs	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4807      	ldr	r0, [pc, #28]	@ (8004570 <ENC28J60GPIOInit+0x58>)
 8004552:	f7fc ffad 	bl	80014b0 <HAL_GPIO_Init>

	/* Deselect ENC28J60 module */
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN|ENC_RESET_PIN, GPIO_PIN_SET);
 8004556:	2201      	movs	r2, #1
 8004558:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800455c:	4804      	ldr	r0, [pc, #16]	@ (8004570 <ENC28J60GPIOInit+0x58>)
 800455e:	f7fd f92b 	bl	80017b8 <HAL_GPIO_WritePin>

}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	40020000 	.word	0x40020000

08004574 <ENC28J60INTInit>:
/*
 * Initialize interrupt for INT pin
 */

void ENC28J60INTInit(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	//Interrupt Pin
	GPIO_InitStructure.Pin = ENC_INT_PIN;
 800457a:	2304      	movs	r3, #4
 800457c:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800457e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004582:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;//i have changed this from no pull
 8004584:	2301      	movs	r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4807      	ldr	r0, [pc, #28]	@ (80045ac <ENC28J60INTInit+0x38>)
 800458e:	f7fc ff8f 	bl	80014b0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn , 0x0F, 0x0F);
 8004592:	220f      	movs	r2, #15
 8004594:	210f      	movs	r1, #15
 8004596:	2008      	movs	r0, #8
 8004598:	f7fc ff52 	bl	8001440 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn );
 800459c:	2008      	movs	r0, #8
 800459e:	f7fc ff6b 	bl	8001478 <HAL_NVIC_EnableIRQ>
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40020400 	.word	0x40020400

080045b0 <ENC28J60EnableIRQ>:

void ENC28J60EnableIRQ(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045b4:	2008      	movs	r0, #8
 80045b6:	f7fc ff5f 	bl	8001478 <HAL_NVIC_EnableIRQ>
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}

080045be <ENC28J60DisableIRQ>:

void ENC28J60DisableIRQ(void)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80045c2:	2008      	movs	r0, #8
 80045c4:	f7fc ff66 	bl	8001494 <HAL_NVIC_DisableIRQ>
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}

080045cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(ENC_INT_PIN);
 80045d0:	2004      	movs	r0, #4
 80045d2:	f7fd f90b 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == ENC_INT_PIN)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d104      	bne.n	80045f6 <HAL_GPIO_EXTI_Callback+0x1a>
  {
      ethernet_irq_handler(Netif_IRQSemaphore);
 80045ec:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <HAL_GPIO_EXTI_Callback+0x24>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fa45 	bl	8004a80 <ethernet_irq_handler>
  }
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000098 	.word	0x20000098

08004604 <ENC28J60AssertCS>:

void ENC28J60AssertCS(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN, GPIO_PIN_RESET);
 8004608:	2200      	movs	r2, #0
 800460a:	2110      	movs	r1, #16
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <ENC28J60AssertCS+0x14>)
 800460e:	f7fd f8d3 	bl	80017b8 <HAL_GPIO_WritePin>
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40020000 	.word	0x40020000

0800461c <ENC28J60ReleaseCS>:

void ENC28J60ReleaseCS(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENC_CS_PIN, GPIO_PIN_SET);
 8004620:	2201      	movs	r2, #1
 8004622:	2110      	movs	r1, #16
 8004624:	4802      	ldr	r0, [pc, #8]	@ (8004630 <ENC28J60ReleaseCS+0x14>)
 8004626:	f7fd f8c7 	bl	80017b8 <HAL_GPIO_WritePin>
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40020000 	.word	0x40020000

08004634 <ENC_SPI_SendWithoutSelection>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_SendWithoutSelection(uint8_t command)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af02      	add	r7, sp, #8
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_TransmitReceive(&hspi_enc28j60, &command, &command, 1, 1000);
 800463e:	1dfa      	adds	r2, r7, #7
 8004640:	1df9      	adds	r1, r7, #7
 8004642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	4804      	ldr	r0, [pc, #16]	@ (800465c <ENC_SPI_SendWithoutSelection+0x28>)
 800464c:	f7fe f856 	bl	80026fc <HAL_SPI_TransmitReceive>
    return command;
 8004650:	79fb      	ldrb	r3, [r7, #7]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20004e20 	.word	0x20004e20

08004660 <ENC_SPI_Send>:
  * param  command: command or data to be sent to ENC28J60
  * retval answer from ENC28J60
  */

uint8_t ENC_SPI_Send(uint8_t command)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af02      	add	r7, sp, #8
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
    /* Select ENC28J60 module */
    ENC28J60DisableIRQ();
 800466a:	f7ff ffa8 	bl	80045be <ENC28J60DisableIRQ>
    ENC28J60AssertCS();
 800466e:	f7ff ffc9 	bl	8004604 <ENC28J60AssertCS>
    up_udelay(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f7ff fe96 	bl	80043a4 <up_udelay>

    HAL_SPI_TransmitReceive(&hspi_enc28j60, &command, &command, 1, 1000);
 8004678:	1dfa      	adds	r2, r7, #7
 800467a:	1df9      	adds	r1, r7, #7
 800467c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	2301      	movs	r3, #1
 8004684:	4807      	ldr	r0, [pc, #28]	@ (80046a4 <ENC_SPI_Send+0x44>)
 8004686:	f7fe f839 	bl	80026fc <HAL_SPI_TransmitReceive>

    ENC28J60ReleaseCS();
 800468a:	f7ff ffc7 	bl	800461c <ENC28J60ReleaseCS>
    up_udelay(1);
 800468e:	2001      	movs	r0, #1
 8004690:	f7ff fe88 	bl	80043a4 <up_udelay>

    ENC28J60EnableIRQ();
 8004694:	f7ff ff8c 	bl	80045b0 <ENC28J60EnableIRQ>
    return command;
 8004698:	79fb      	ldrb	r3, [r7, #7]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20004e20 	.word	0x20004e20

080046a8 <ENC_SPI_SendBuf>:
  * param  slave2master: answer from ENC28J60 to host, can be NULL if we only want to send data to slave
  * retval none
  */

void ENC_SPI_SendBuf(uint8_t *master2slave, uint8_t *slave2master, uint16_t bufferSize)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
    /* Select ENC28J60 module */
	ENC28J60DisableIRQ();
 80046b6:	f7ff ff82 	bl	80045be <ENC28J60DisableIRQ>
	ENC28J60AssertCS();
 80046ba:	f7ff ffa3 	bl	8004604 <ENC28J60AssertCS>
    up_udelay(1);
 80046be:	2001      	movs	r0, #1
 80046c0:	f7ff fe70 	bl	80043a4 <up_udelay>

    /* Transmit or receuve data */
    if (slave2master == NULL) {
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <ENC_SPI_SendBuf+0x38>
        if (master2slave != NULL) {
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <ENC_SPI_SendBuf+0x60>
            HAL_SPI_Transmit(&hspi_enc28j60, master2slave, bufferSize, 1000);
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	4811      	ldr	r0, [pc, #68]	@ (8004720 <ENC_SPI_SendBuf+0x78>)
 80046da:	f7fd fdb2 	bl	8002242 <HAL_SPI_Transmit>
 80046de:	e013      	b.n	8004708 <ENC_SPI_SendBuf+0x60>
        }
    } else if (master2slave == NULL) {
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <ENC_SPI_SendBuf+0x4e>
        HAL_SPI_Receive(&hspi_enc28j60, slave2master, bufferSize, 1000);
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	480c      	ldr	r0, [pc, #48]	@ (8004720 <ENC_SPI_SendBuf+0x78>)
 80046f0:	f7fd feeb 	bl	80024ca <HAL_SPI_Receive>
 80046f4:	e008      	b.n	8004708 <ENC_SPI_SendBuf+0x60>
    } else {
        HAL_SPI_TransmitReceive(&hspi_enc28j60, master2slave, slave2master, bufferSize, 1000);
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046fc:	9200      	str	r2, [sp, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	4807      	ldr	r0, [pc, #28]	@ (8004720 <ENC_SPI_SendBuf+0x78>)
 8004704:	f7fd fffa 	bl	80026fc <HAL_SPI_TransmitReceive>
    }

    /* De-select ENC28J60 module */
    ENC28J60ReleaseCS();
 8004708:	f7ff ff88 	bl	800461c <ENC28J60ReleaseCS>
    up_udelay(1);
 800470c:	2001      	movs	r0, #1
 800470e:	f7ff fe49 	bl	80043a4 <up_udelay>
    ENC28J60EnableIRQ();
 8004712:	f7ff ff4d 	bl	80045b0 <ENC28J60EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20004e20 	.word	0x20004e20

08004724 <ENC_SPI_Select>:
  * param  select: true if the ENC28J60 slave SPI if selected, false otherwise
  * retval none
  */

void ENC_SPI_Select(bool select)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
    /* Select or de-select ENC28J60 module */
    if (select) {
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <ENC_SPI_Select+0x20>
        ENC28J60DisableIRQ();
 8004734:	f7ff ff43 	bl	80045be <ENC28J60DisableIRQ>
        ENC28J60AssertCS();
 8004738:	f7ff ff64 	bl	8004604 <ENC28J60AssertCS>
        up_udelay(1);
 800473c:	2001      	movs	r0, #1
 800473e:	f7ff fe31 	bl	80043a4 <up_udelay>
    } else {
        ENC28J60ReleaseCS();
        up_udelay(1);
        ENC28J60EnableIRQ();
    }
}
 8004742:	e006      	b.n	8004752 <ENC_SPI_Select+0x2e>
        ENC28J60ReleaseCS();
 8004744:	f7ff ff6a 	bl	800461c <ENC28J60ReleaseCS>
        up_udelay(1);
 8004748:	2001      	movs	r0, #1
 800474a:	f7ff fe2b 	bl	80043a4 <up_udelay>
        ENC28J60EnableIRQ();
 800474e:	f7ff ff2f 	bl	80045b0 <ENC28J60EnableIRQ>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <sys_now>:
#ifdef USE_PROTOTHREADS
static struct pt transmit_pt;
#endif

u32_t sys_now(void)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800475e:	f7fc fd63 	bl	8001228 <HAL_GetTick>
 8004762:	4603      	mov	r3, r0
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}

08004768 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static err_t low_level_init(struct netif *netif)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  //uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };


  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2206      	movs	r2, #6
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  ENC_MAC_6;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2280      	movs	r2, #128	@ 0x80
 800477c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  ENC_MAC_5;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2234      	movs	r2, #52	@ 0x34
 8004784:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  ENC_MAC_4;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2228      	movs	r2, #40	@ 0x28
 800478c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  ENC_MAC_3;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2274      	movs	r2, #116	@ 0x74
 8004794:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  ENC_MAC_2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2292      	movs	r2, #146	@ 0x92
 800479c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  ENC_MAC_1;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2212      	movs	r2, #18
 80047a4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  EncHandle.Init.MACAddr = netif->hwaddr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	332e      	adds	r3, #46	@ 0x2e
 80047ac:	4a17      	ldr	r2, [pc, #92]	@ (800480c <low_level_init+0xa4>)
 80047ae:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80047b0:	4b16      	ldr	r3, [pc, #88]	@ (800480c <low_level_init+0xa4>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80047b6:	4b15      	ldr	r3, [pc, #84]	@ (800480c <low_level_init+0xa4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits =  EIE_LINKIE | EIE_PKTIE;
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <low_level_init+0xa4>)
 80047be:	2250      	movs	r2, #80	@ 0x50
 80047c0:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC28J60SPIInit();
 80047c2:	f7ff fe3d 	bl	8004440 <ENC28J60SPIInit>
  ENC28J60GPIOInit();
 80047c6:	f7ff fea7 	bl	8004518 <ENC28J60GPIOInit>
  ENC28J60INTInit();
 80047ca:	f7ff fed3 	bl	8004574 <ENC28J60INTInit>

  /* Set netif link flag */
  //  netif->flags |= NETIF_FLAG_LINK_UP;

  /* maximum transfer unit */
  netif->mtu = 1500;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80047d4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047dc:	f043 030a 	orr.w	r3, r3, #10
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Start the EN28J60 module */
  if (ENC_Start(&EncHandle)) {
 80047e8:	4808      	ldr	r0, [pc, #32]	@ (800480c <low_level_init+0xa4>)
 80047ea:	f7ff faf3 	bl	8003dd4 <ENC_Start>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <low_level_init+0x96>
    /* Set the MAC address */
    ENC_SetMacAddr(&EncHandle);//copied MAC address from this handle to actual hardware registers
 80047f4:	4805      	ldr	r0, [pc, #20]	@ (800480c <low_level_init+0xa4>)
 80047f6:	f7ff fbd9 	bl	8003fac <ENC_SetMacAddr>

    /* Set netif link flag */
    //netif->flags |= NETIF_FLAG_LINK_UP;//Avinash says: why this? setting link up flag without any checks?

    return ERR_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e001      	b.n	8004802 <low_level_init+0x9a>
  }
  else
  {
	  return ERR_IF;
 80047fe:	f06f 030b 	mvn.w	r3, #11
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20004e78 	.word	0x20004e78

08004810 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]

  if (EncHandle.transmitLength != 0) {
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <low_level_output+0x9c>)
 8004820:	8b1b      	ldrh	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <low_level_output+0x24>
     while (PT_SCHEDULE(ENC_Transmit(&transmit_pt, &EncHandle))) {
         /* Wait for end of previous transmission */
     }
#else
     do {
         ENC_Transmit(&EncHandle);
 8004826:	4821      	ldr	r0, [pc, #132]	@ (80048ac <low_level_output+0x9c>)
 8004828:	f7ff fc7e 	bl	8004128 <ENC_Transmit>
     } while (EncHandle.transmitLength != 0);
 800482c:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <low_level_output+0x9c>)
 800482e:	8b1b      	ldrh	r3, [r3, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f8      	bne.n	8004826 <low_level_output+0x16>
#endif
  }

  /* Prepare ENC28J60 Tx buffer */
  errval = ENC_RestoreTXBuffer(&EncHandle, p->tot_len);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	891b      	ldrh	r3, [r3, #8]
 8004838:	4619      	mov	r1, r3
 800483a:	481c      	ldr	r0, [pc, #112]	@ (80048ac <low_level_output+0x9c>)
 800483c:	f7ff fc1f 	bl	800407e <ENC_RestoreTXBuffer>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 8004844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <low_level_output+0x42>
      return errval;
 800484c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004850:	e027      	b.n	80048a2 <low_level_output+0x92>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e010      	b.n	800487a <low_level_output+0x6a>
    ENC_WriteBuffer(q->payload, q->len);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	895b      	ldrh	r3, [r3, #10]
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f7ff fbdf 	bl	8004026 <ENC_WriteBuffer>
    framelength += q->len;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	895b      	ldrh	r3, [r3, #10]
 800486c:	461a      	mov	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1eb      	bne.n	8004858 <low_level_output+0x48>
  }

  if (framelength != p->tot_len) {
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	891b      	ldrh	r3, [r3, #8]
 8004884:	461a      	mov	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4293      	cmp	r3, r2
 800488a:	d002      	beq.n	8004892 <low_level_output+0x82>
     return ERR_BUF;
 800488c:	f06f 0301 	mvn.w	r3, #1
 8004890:	e007      	b.n	80048a2 <low_level_output+0x92>
  }

  EncHandle.transmitLength = p->tot_len;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	891a      	ldrh	r2, [r3, #8]
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <low_level_output+0x9c>)
 8004898:	831a      	strh	r2, [r3, #24]

  /* If PROTOTHREADS are use, actual transmission is triggered in main loop */
#ifndef USE_PROTOTHREADS
    ENC_Transmit(&EncHandle);
 800489a:	4804      	ldr	r0, [pc, #16]	@ (80048ac <low_level_output+0x9c>)
 800489c:	f7ff fc44 	bl	8004128 <ENC_Transmit>
#endif

  return ERR_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20004e78 	.word	0x20004e78

080048b0 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

  if (!ENC_GetReceivedFrame(&EncHandle)) {
 80048c0:	481e      	ldr	r0, [pc, #120]	@ (800493c <low_level_input+0x8c>)
 80048c2:	f7ff fc91 	bl	80041e8 <ENC_GetReceivedFrame>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <low_level_input+0x26>
    return NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e02e      	b.n	8004934 <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 80048d6:	4b19      	ldr	r3, [pc, #100]	@ (800493c <low_level_input+0x8c>)
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t *)EncHandle.RxFrameInfos.buffer;
 80048dc:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <low_level_input+0x90>)
 80048de:	60fb      	str	r3, [r7, #12]

  if (len > 0)
 80048e0:	8a7b      	ldrh	r3, [r7, #18]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80048e6:	8a7b      	ldrh	r3, [r7, #18]
 80048e8:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80048ec:	4619      	mov	r1, r3
 80048ee:	2000      	movs	r0, #0
 80048f0:	f007 f8b4 	bl	800ba5c <pbuf_alloc>
 80048f4:	61f8      	str	r0, [r7, #28]
  }

  if (p != NULL)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01a      	beq.n	8004932 <low_level_input+0x82>
  {
    bufferoffset = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

    for(q = p; q != NULL; q = q->next)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	e012      	b.n	800492c <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload), (uint8_t*)((uint8_t*)buffer + bufferoffset), q->len);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	6858      	ldr	r0, [r3, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	18d1      	adds	r1, r2, r3
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	895b      	ldrh	r3, [r3, #10]
 8004914:	461a      	mov	r2, r3
 8004916:	f012 feec 	bl	80176f2 <memcpy>
      bufferoffset = bufferoffset + q->len;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	895b      	ldrh	r3, [r3, #10]
 800491e:	461a      	mov	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
    for(q = p; q != NULL; q = q->next)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e9      	bne.n	8004906 <low_level_input+0x56>
    }
  }

  return p;
 8004932:	69fb      	ldr	r3, [r7, #28]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20004e78 	.word	0x20004e78
 8004940:	20004ea4 	.word	0x20004ea4

08004944 <ethernetif_input_do>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input_do(struct netif * netif)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    struct pbuf *p;

    do {
        p = low_level_input(netif);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ffaf 	bl	80048b0 <low_level_input>
 8004952:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <ethernetif_input_do+0x2c>
        {
          if (netif->input(p, netif) != ERR_OK )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	4798      	blx	r3
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <ethernetif_input_do+0x2c>
          {
            pbuf_free(p);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f007 fb56 	bl	800c01c <pbuf_free>
          }
        }
    }while(p!=NULL);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ea      	bne.n	800494c <ethernetif_input_do+0x8>
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	err_t status;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <ethernetif_init+0x1c>
 800498e:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <ethernetif_init+0x54>)
 8004990:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8004994:	4910      	ldr	r1, [pc, #64]	@ (80049d8 <ethernetif_init+0x58>)
 8004996:	4811      	ldr	r0, [pc, #68]	@ (80049dc <ethernetif_init+0x5c>)
 8004998:	f7fc f97c 	bl	8000c94 <printf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <ethernetif_init+0x60>)
 80049a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2265      	movs	r2, #101	@ 0x65
 80049a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	226e      	movs	r2, #110	@ 0x6e
 80049ae:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  netif->output = etharp_output;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a0b      	ldr	r2, [pc, #44]	@ (80049e4 <ethernetif_init+0x64>)
 80049b6:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <ethernetif_init+0x68>)
 80049bc:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  status=low_level_init(netif);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fed2 	bl	8004768 <low_level_init>
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]


  return status;
 80049c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	080184ac 	.word	0x080184ac
 80049d8:	080184c8 	.word	0x080184c8
 80049dc:	080184d8 	.word	0x080184d8
 80049e0:	08018500 	.word	0x08018500
 80049e4:	08015061 	.word	0x08015061
 80049e8:	08004811 	.word	0x08004811

080049ec <ethernetif_process_irq_do>:
  * @brief  This function actually process pending IRQs.
  * @param  handler: Reference to the driver state structure
  * @retval None
  */
void ethernetif_process_irq_do(void const *argument)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
    struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Handle ENC28J60 interrupt */
    ENC_IRQHandler(&EncHandle);
 80049f8:	4815      	ldr	r0, [pc, #84]	@ (8004a50 <ethernetif_process_irq_do+0x64>)
 80049fa:	f7ff fca1 	bl	8004340 <ENC_IRQHandler>

    /* Check whether the link is up or down*/
    if ((EncHandle.interruptFlags & EIE_LINKIE) != 0) {
 80049fe:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <ethernetif_process_irq_do+0x64>)
 8004a00:	7c5b      	ldrb	r3, [r3, #17]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <ethernetif_process_irq_do+0x40>
        if((EncHandle.LinkStatus & PHSTAT2_LSTAT)!= 0) {
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <ethernetif_process_irq_do+0x64>)
 8004a0c:	8adb      	ldrh	r3, [r3, #22]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <ethernetif_process_irq_do+0x36>
            netif_set_link_up(irq_arg->netif);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f006 ff56 	bl	800b8cc <netif_set_link_up>
 8004a20:	e004      	b.n	8004a2c <ethernetif_process_irq_do+0x40>
        } else {
            netif_set_link_down(irq_arg->netif);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f006 ff80 	bl	800b92c <netif_set_link_down>
        }
    }

    /* Check whether we have received a packet */
    if((EncHandle.interruptFlags & EIR_PKTIF) != 0) {
 8004a2c:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <ethernetif_process_irq_do+0x64>)
 8004a2e:	7c5b      	ldrb	r3, [r3, #17]
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <ethernetif_process_irq_do+0x56>
        ethernetif_input_do(irq_arg->netif);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff81 	bl	8004944 <ethernetif_input_do>
    }

    /* Renable global interrupts */
    ENC_EnableInterrupts(EIE_INTIE);
 8004a42:	2080      	movs	r0, #128	@ 0x80
 8004a44:	f7ff fc6e 	bl	8004324 <ENC_EnableInterrupts>
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20004e78 	.word	0x20004e78

08004a54 <ethernetif_process_irq>:
  * @brief  This function triggers the interrupt service callback.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_process_irq(void *argument)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	//if (osSemaphoreWait(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
	if (osSemaphoreAcquire(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2164      	movs	r1, #100	@ 0x64
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fb1e 	bl	80050a8 <osSemaphoreAcquire>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f6      	bne.n	8004a60 <ethernetif_process_irq+0xc>
    {
        /* Handle ENC28J60 interrupt */
        tcpip_callback((tcpip_callback_fn) ethernetif_process_irq_do, (void *) argument);
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4801      	ldr	r0, [pc, #4]	@ (8004a7c <ethernetif_process_irq+0x28>)
 8004a76:	f005 fdf7 	bl	800a668 <tcpip_callback>
	if (osSemaphoreAcquire(irq_arg->semaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a7a:	e7f1      	b.n	8004a60 <ethernetif_process_irq+0xc>
 8004a7c:	080049ed 	.word	0x080049ed

08004a80 <ethernet_irq_handler>:
  * @brief  This function unblocks ethernetif_process_irq when a new interrupt is received
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_irq_handler(osSemaphoreId Netif_IrqSemaphore)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    /* Release thread to check interrupt flags */
     osSemaphoreRelease(Netif_IrqSemaphore);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fb5f 	bl	800514c <osSemaphoreRelease>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif)) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aa4:	089b      	lsrs	r3, r3, #2
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <ethernetif_update_config+0x20>
      /* Restart the EN28J60 module */
      low_level_init(netif);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fe59 	bl	8004768 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f804 	bl	8004ac4 <ethernetif_notify_conn_changed>
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <__NVIC_SetPriority>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <SysTick_Handler+0x1c>)
 8004b32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b34:	f002 fd6e 	bl	8007614 <xTaskGetSchedulerState>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d001      	beq.n	8004b42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b3e:	f003 fc63 	bl	8008408 <xPortSysTickHandler>
  }
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000e010 	.word	0xe000e010

08004b4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b50:	2100      	movs	r1, #0
 8004b52:	f06f 0004 	mvn.w	r0, #4
 8004b56:	f7ff ffbf 	bl	8004ad8 <__NVIC_SetPriority>
#endif
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b66:	f3ef 8305 	mrs	r3, IPSR
 8004b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b72:	f06f 0305 	mvn.w	r3, #5
 8004b76:	607b      	str	r3, [r7, #4]
 8004b78:	e00c      	b.n	8004b94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <osKernelInitialize+0x44>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <osKernelInitialize+0x44>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	e002      	b.n	8004b94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b94:	687b      	ldr	r3, [r7, #4]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	200000a8 	.word	0x200000a8

08004ba8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bae:	f3ef 8305 	mrs	r3, IPSR
 8004bb2:	603b      	str	r3, [r7, #0]
  return(result);
 8004bb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bba:	f06f 0305 	mvn.w	r3, #5
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	e010      	b.n	8004be4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <osKernelStart+0x48>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d109      	bne.n	8004bde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bca:	f7ff ffbf 	bl	8004b4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bce:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <osKernelStart+0x48>)
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bd4:	f002 f898 	bl	8006d08 <vTaskStartScheduler>
      stat = osOK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e002      	b.n	8004be4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004be4:	687b      	ldr	r3, [r7, #4]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200000a8 	.word	0x200000a8

08004bf4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfa:	f3ef 8305 	mrs	r3, IPSR
 8004bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8004c00:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004c06:	f002 f9ab 	bl	8006f60 <xTaskGetTickCountFromISR>
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	e002      	b.n	8004c14 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004c0e:	f002 f997 	bl	8006f40 <xTaskGetTickCount>
 8004c12:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004c14:	687b      	ldr	r3, [r7, #4]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b08e      	sub	sp, #56	@ 0x38
 8004c22:	af04      	add	r7, sp, #16
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2e:	f3ef 8305 	mrs	r3, IPSR
 8004c32:	617b      	str	r3, [r7, #20]
  return(result);
 8004c34:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d17e      	bne.n	8004d38 <osThreadNew+0x11a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d07b      	beq.n	8004d38 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c44:	2318      	movs	r3, #24
 8004c46:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d045      	beq.n	8004ce4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <osThreadNew+0x48>
        name = attr->name;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <osThreadNew+0x6e>
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b38      	cmp	r3, #56	@ 0x38
 8004c7e:	d805      	bhi.n	8004c8c <osThreadNew+0x6e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <osThreadNew+0x72>
        return (NULL);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e054      	b.n	8004d3a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <osThreadNew+0xa8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2bab      	cmp	r3, #171	@ 0xab
 8004cae:	d90a      	bls.n	8004cc6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <osThreadNew+0xa8>
        mem = 1;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	e010      	b.n	8004ce8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <osThreadNew+0xca>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d108      	bne.n	8004ce8 <osThreadNew+0xca>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <osThreadNew+0xca>
          mem = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e001      	b.n	8004ce8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d110      	bne.n	8004d10 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cf6:	9202      	str	r2, [sp, #8]
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f001 fe09 	bl	800691c <xTaskCreateStatic>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	e013      	b.n	8004d38 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d110      	bne.n	8004d38 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	f107 0310 	add.w	r3, r7, #16
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f001 fe57 	bl	80069dc <xTaskCreate>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <osThreadNew+0x11a>
            hTask = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d38:	693b      	ldr	r3, [r7, #16]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3728      	adds	r7, #40	@ 0x28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4a:	f3ef 8305 	mrs	r3, IPSR
 8004d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <osDelay+0x1c>
    stat = osErrorISR;
 8004d56:	f06f 0305 	mvn.w	r3, #5
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e007      	b.n	8004d6e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 ff97 	bl	8006c9c <vTaskDelay>
    }
  }

  return (stat);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d84:	f3ef 8305 	mrs	r3, IPSR
 8004d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d174      	bne.n	8004e7a <osMutexNew+0x102>
    if (attr != NULL) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <osMutexNew+0x26>
      type = attr->attr_bits;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e001      	b.n	8004da2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <osMutexNew+0x3a>
      rmtx = 1U;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e001      	b.n	8004db6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d15c      	bne.n	8004e7a <osMutexNew+0x102>
      mem = -1;
 8004dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <osMutexNew+0x6a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b4f      	cmp	r3, #79	@ 0x4f
 8004dda:	d902      	bls.n	8004de2 <osMutexNew+0x6a>
          mem = 1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e00c      	b.n	8004dfc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <osMutexNew+0x84>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <osMutexNew+0x84>
            mem = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e001      	b.n	8004dfc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d112      	bne.n	8004e28 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2004      	movs	r0, #4
 8004e10:	f000 fdd9 	bl	80059c6 <xQueueCreateMutexStatic>
 8004e14:	61f8      	str	r0, [r7, #28]
 8004e16:	e016      	b.n	8004e46 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f000 fdd1 	bl	80059c6 <xQueueCreateMutexStatic>
 8004e24:	61f8      	str	r0, [r7, #28]
 8004e26:	e00e      	b.n	8004e46 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e34:	2004      	movs	r0, #4
 8004e36:	f000 fdae 	bl	8005996 <xQueueCreateMutex>
 8004e3a:	61f8      	str	r0, [r7, #28]
 8004e3c:	e003      	b.n	8004e46 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f000 fda9 	bl	8005996 <xQueueCreateMutex>
 8004e44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <osMutexNew+0xee>
        if (attr != NULL) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osMutexNew+0xe2>
          name = attr->name;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e001      	b.n	8004e5e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	69f8      	ldr	r0, [r7, #28]
 8004e62:	f001 fcd3 	bl	800680c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d006      	beq.n	8004e7a <osMutexNew+0x102>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e7a:	69fb      	ldr	r3, [r7, #28]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea2:	f3ef 8305 	mrs	r3, IPSR
 8004ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004eae:	f06f 0305 	mvn.w	r3, #5
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e02c      	b.n	8004f10 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004ebc:	f06f 0303 	mvn.w	r3, #3
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e025      	b.n	8004f10 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d011      	beq.n	8004eee <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6938      	ldr	r0, [r7, #16]
 8004ece:	f000 fdca 	bl	8005a66 <xQueueTakeMutexRecursive>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d01b      	beq.n	8004f10 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004ede:	f06f 0301 	mvn.w	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e014      	b.n	8004f10 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004ee6:	f06f 0302 	mvn.w	r3, #2
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e010      	b.n	8004f10 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6938      	ldr	r0, [r7, #16]
 8004ef2:	f001 f96f 	bl	80061d4 <xQueueSemaphoreTake>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d009      	beq.n	8004f10 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004f02:	f06f 0301 	mvn.w	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e002      	b.n	8004f10 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004f0a:	f06f 0302 	mvn.w	r3, #2
 8004f0e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004f10:	697b      	ldr	r3, [r7, #20]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f36:	f3ef 8305 	mrs	r3, IPSR
 8004f3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f3c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <osMutexRelease+0x30>
    stat = osErrorISR;
 8004f42:	f06f 0305 	mvn.w	r3, #5
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e01f      	b.n	8004f8a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004f50:	f06f 0303 	mvn.w	r3, #3
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e018      	b.n	8004f8a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f5e:	6938      	ldr	r0, [r7, #16]
 8004f60:	f000 fd4c 	bl	80059fc <xQueueGiveMutexRecursive>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d00f      	beq.n	8004f8a <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f6a:	f06f 0302 	mvn.w	r3, #2
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e00b      	b.n	8004f8a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004f72:	2300      	movs	r3, #0
 8004f74:	2200      	movs	r2, #0
 8004f76:	2100      	movs	r1, #0
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f000 fe19 	bl	8005bb0 <xQueueGenericSend>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <osMutexRelease+0x70>
        stat = osErrorResource;
 8004f84:	f06f 0302 	mvn.w	r3, #2
 8004f88:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004f8a:	697b      	ldr	r3, [r7, #20]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	@ 0x28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa4:	f3ef 8305 	mrs	r3, IPSR
 8004fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d175      	bne.n	800509c <osSemaphoreNew+0x108>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d072      	beq.n	800509c <osSemaphoreNew+0x108>
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d86e      	bhi.n	800509c <osSemaphoreNew+0x108>
    mem = -1;
 8004fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d015      	beq.n	8004ff6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <osSemaphoreNew+0x4c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b4f      	cmp	r3, #79	@ 0x4f
 8004fd8:	d902      	bls.n	8004fe0 <osSemaphoreNew+0x4c>
        mem = 1;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e00c      	b.n	8004ffa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d108      	bne.n	8004ffa <osSemaphoreNew+0x66>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <osSemaphoreNew+0x66>
          mem = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
 8004ff4:	e001      	b.n	8004ffa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d04c      	beq.n	800509c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d128      	bne.n	800505a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d10a      	bne.n	8005024 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2203      	movs	r2, #3
 8005014:	9200      	str	r2, [sp, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	2100      	movs	r1, #0
 800501a:	2001      	movs	r0, #1
 800501c:	f000 fbc6 	bl	80057ac <xQueueGenericCreateStatic>
 8005020:	61f8      	str	r0, [r7, #28]
 8005022:	e005      	b.n	8005030 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005024:	2203      	movs	r2, #3
 8005026:	2100      	movs	r1, #0
 8005028:	2001      	movs	r0, #1
 800502a:	f000 fc3c 	bl	80058a6 <xQueueGenericCreate>
 800502e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d022      	beq.n	800507c <osSemaphoreNew+0xe8>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01f      	beq.n	800507c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	69f8      	ldr	r0, [r7, #28]
 8005044:	f000 fdb4 	bl	8005bb0 <xQueueGenericSend>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d016      	beq.n	800507c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800504e:	69f8      	ldr	r0, [r7, #28]
 8005050:	f001 fa90 	bl	8006574 <vQueueDelete>
            hSemaphore = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e010      	b.n	800507c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d108      	bne.n	8005072 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	461a      	mov	r2, r3
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fd33 	bl	8005ad4 <xQueueCreateCountingSemaphoreStatic>
 800506e:	61f8      	str	r0, [r7, #28]
 8005070:	e004      	b.n	800507c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fd66 	bl	8005b46 <xQueueCreateCountingSemaphore>
 800507a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00c      	beq.n	800509c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e001      	b.n	8005094 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	69f8      	ldr	r0, [r7, #28]
 8005098:	f001 fbb8 	bl	800680c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80050c0:	f06f 0303 	mvn.w	r3, #3
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e039      	b.n	800513c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c8:	f3ef 8305 	mrs	r3, IPSR
 80050cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d022      	beq.n	800511a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80050da:	f06f 0303 	mvn.w	r3, #3
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e02c      	b.n	800513c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	461a      	mov	r2, r3
 80050ec:	2100      	movs	r1, #0
 80050ee:	6938      	ldr	r0, [r7, #16]
 80050f0:	f001 f980 	bl	80063f4 <xQueueReceiveFromISR>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d003      	beq.n	8005102 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80050fa:	f06f 0302 	mvn.w	r3, #2
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e01c      	b.n	800513c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d019      	beq.n	800513c <osSemaphoreAcquire+0x94>
 8005108:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <osSemaphoreAcquire+0xa0>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	e010      	b.n	800513c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6938      	ldr	r0, [r7, #16]
 800511e:	f001 f859 	bl	80061d4 <xQueueSemaphoreTake>
 8005122:	4603      	mov	r3, r0
 8005124:	2b01      	cmp	r3, #1
 8005126:	d009      	beq.n	800513c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800512e:	f06f 0301 	mvn.w	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e002      	b.n	800513c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005136:	f06f 0302 	mvn.w	r3, #2
 800513a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005162:	f06f 0303 	mvn.w	r3, #3
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	e02c      	b.n	80051c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516a:	f3ef 8305 	mrs	r3, IPSR
 800516e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005170:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800517a:	f107 0308 	add.w	r3, r7, #8
 800517e:	4619      	mov	r1, r3
 8005180:	6938      	ldr	r0, [r7, #16]
 8005182:	f000 feb5 	bl	8005ef0 <xQueueGiveFromISR>
 8005186:	4603      	mov	r3, r0
 8005188:	2b01      	cmp	r3, #1
 800518a:	d003      	beq.n	8005194 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800518c:	f06f 0302 	mvn.w	r3, #2
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e017      	b.n	80051c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d014      	beq.n	80051c4 <osSemaphoreRelease+0x78>
 800519a:	4b0d      	ldr	r3, [pc, #52]	@ (80051d0 <osSemaphoreRelease+0x84>)
 800519c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	e00b      	b.n	80051c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051ac:	2300      	movs	r3, #0
 80051ae:	2200      	movs	r2, #0
 80051b0:	2100      	movs	r1, #0
 80051b2:	6938      	ldr	r0, [r7, #16]
 80051b4:	f000 fcfc 	bl	8005bb0 <xQueueGenericSend>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d002      	beq.n	80051c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80051be:	f06f 0302 	mvn.w	r3, #2
 80051c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80051c4:	697b      	ldr	r3, [r7, #20]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	e000ed04 	.word	0xe000ed04

080051d4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e0:	f3ef 8305 	mrs	r3, IPSR
 80051e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80051ec:	f06f 0305 	mvn.w	r3, #5
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e00e      	b.n	8005212 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d103      	bne.n	8005202 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80051fa:	f06f 0303 	mvn.w	r3, #3
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e007      	b.n	8005212 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005202:	6938      	ldr	r0, [r7, #16]
 8005204:	f001 fb2c 	bl	8006860 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800520c:	6938      	ldr	r0, [r7, #16]
 800520e:	f001 f9b1 	bl	8006574 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005212:	697b      	ldr	r3, [r7, #20]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	@ 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522c:	f3ef 8305 	mrs	r3, IPSR
 8005230:	613b      	str	r3, [r7, #16]
  return(result);
 8005232:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005234:	2b00      	cmp	r3, #0
 8005236:	d15f      	bne.n	80052f8 <osMessageQueueNew+0xdc>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d05c      	beq.n	80052f8 <osMessageQueueNew+0xdc>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d059      	beq.n	80052f8 <osMessageQueueNew+0xdc>
    mem = -1;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d029      	beq.n	80052a4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d012      	beq.n	800527e <osMessageQueueNew+0x62>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b4f      	cmp	r3, #79	@ 0x4f
 800525e:	d90e      	bls.n	800527e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	429a      	cmp	r2, r3
 8005276:	d302      	bcc.n	800527e <osMessageQueueNew+0x62>
        mem = 1;
 8005278:	2301      	movs	r3, #1
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	e014      	b.n	80052a8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d110      	bne.n	80052a8 <osMessageQueueNew+0x8c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <osMessageQueueNew+0x8c>
          mem = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	e001      	b.n	80052a8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10b      	bne.n	80052c6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2100      	movs	r1, #0
 80052b8:	9100      	str	r1, [sp, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fa75 	bl	80057ac <xQueueGenericCreateStatic>
 80052c2:	61f8      	str	r0, [r7, #28]
 80052c4:	e008      	b.n	80052d8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80052cc:	2200      	movs	r2, #0
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fae8 	bl	80058a6 <xQueueGenericCreate>
 80052d6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <osMessageQueueNew+0xd0>
        name = attr->name;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e001      	b.n	80052f0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	69f8      	ldr	r0, [r7, #28]
 80052f4:	f001 fa8a 	bl	800680c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80052f8:	69fb      	ldr	r3, [r7, #28]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531c:	f3ef 8305 	mrs	r3, IPSR
 8005320:	617b      	str	r3, [r7, #20]
  return(result);
 8005322:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005324:	2b00      	cmp	r3, #0
 8005326:	d028      	beq.n	800537a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <osMessageQueuePut+0x36>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <osMessageQueuePut+0x36>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800533a:	f06f 0303 	mvn.w	r3, #3
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e038      	b.n	80053b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005346:	f107 0210 	add.w	r2, r7, #16
 800534a:	2300      	movs	r3, #0
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f000 fd30 	bl	8005db4 <xQueueGenericSendFromISR>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d003      	beq.n	8005362 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800535a:	f06f 0302 	mvn.w	r3, #2
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e028      	b.n	80053b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d025      	beq.n	80053b4 <osMessageQueuePut+0xb0>
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <osMessageQueuePut+0xbc>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	e01c      	b.n	80053b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <osMessageQueuePut+0x82>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005386:	f06f 0303 	mvn.w	r3, #3
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e012      	b.n	80053b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800538e:	2300      	movs	r3, #0
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f000 fc0b 	bl	8005bb0 <xQueueGenericSend>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d009      	beq.n	80053b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80053a6:	f06f 0301 	mvn.w	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e002      	b.n	80053b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80053ae:	f06f 0302 	mvn.w	r3, #2
 80053b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053b4:	69fb      	ldr	r3, [r7, #28]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053da:	f3ef 8305 	mrs	r3, IPSR
 80053de:	617b      	str	r3, [r7, #20]
  return(result);
 80053e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d028      	beq.n	8005438 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <osMessageQueueGet+0x34>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <osMessageQueueGet+0x34>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80053f8:	f06f 0303 	mvn.w	r3, #3
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	e037      	b.n	8005470 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	69b8      	ldr	r0, [r7, #24]
 800540e:	f000 fff1 	bl	80063f4 <xQueueReceiveFromISR>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d003      	beq.n	8005420 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005418:	f06f 0302 	mvn.w	r3, #2
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	e027      	b.n	8005470 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d024      	beq.n	8005470 <osMessageQueueGet+0xac>
 8005426:	4b15      	ldr	r3, [pc, #84]	@ (800547c <osMessageQueueGet+0xb8>)
 8005428:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	e01b      	b.n	8005470 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <osMessageQueueGet+0x80>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005444:	f06f 0303 	mvn.w	r3, #3
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e011      	b.n	8005470 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	69b8      	ldr	r0, [r7, #24]
 8005452:	f000 fddd 	bl	8006010 <xQueueReceive>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d009      	beq.n	8005470 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005462:	f06f 0301 	mvn.w	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e002      	b.n	8005470 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800546a:	f06f 0302 	mvn.w	r3, #2
 800546e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005470:	69fb      	ldr	r3, [r7, #28]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e00e      	b.n	80054b6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005498:	f3ef 8305 	mrs	r3, IPSR
 800549c:	60fb      	str	r3, [r7, #12]
  return(result);
 800549e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f001 f846 	bl	8006536 <uxQueueMessagesWaitingFromISR>
 80054aa:	6178      	str	r0, [r7, #20]
 80054ac:	e003      	b.n	80054b6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80054ae:	6938      	ldr	r0, [r7, #16]
 80054b0:	f001 f822 	bl	80064f8 <uxQueueMessagesWaiting>
 80054b4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80054b6:	697b      	ldr	r3, [r7, #20]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054cc:	f3ef 8305 	mrs	r3, IPSR
 80054d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80054d8:	f06f 0305 	mvn.w	r3, #5
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e00e      	b.n	80054fe <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80054e6:	f06f 0303 	mvn.w	r3, #3
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e007      	b.n	80054fe <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80054ee:	6938      	ldr	r0, [r7, #16]
 80054f0:	f001 f9b6 	bl	8006860 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f001 f83b 	bl	8006574 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a07      	ldr	r2, [pc, #28]	@ (8005534 <vApplicationGetIdleTaskMemory+0x2c>)
 8005518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4a06      	ldr	r2, [pc, #24]	@ (8005538 <vApplicationGetIdleTaskMemory+0x30>)
 800551e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2280      	movs	r2, #128	@ 0x80
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	200000ac 	.word	0x200000ac
 8005538:	20000158 	.word	0x20000158

0800553c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a07      	ldr	r2, [pc, #28]	@ (8005568 <vApplicationGetTimerTaskMemory+0x2c>)
 800554c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a06      	ldr	r2, [pc, #24]	@ (800556c <vApplicationGetTimerTaskMemory+0x30>)
 8005552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	20000358 	.word	0x20000358
 800556c:	20000404 	.word	0x20000404

08005570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f103 0208 	add.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f103 0208 	add.w	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0208 	add.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d103      	bne.n	8005632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e00c      	b.n	800564c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3308      	adds	r3, #8
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e002      	b.n	8005640 <vListInsert+0x2e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d2f6      	bcs.n	800563a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d103      	bne.n	80056b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005704:	f002 fdf0 	bl	80082e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005734:	3b01      	subs	r3, #1
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	441a      	add	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	22ff      	movs	r2, #255	@ 0xff
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d114      	bne.n	8005784 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d01a      	beq.n	8005798 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3310      	adds	r3, #16
 8005766:	4618      	mov	r0, r3
 8005768:	f001 fd7e 	bl	8007268 <xTaskRemoveFromEventList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d012      	beq.n	8005798 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <xQueueGenericReset+0xd0>)
 8005774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	e009      	b.n	8005798 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3310      	adds	r3, #16
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fef1 	bl	8005570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3324      	adds	r3, #36	@ 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff feec 	bl	8005570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005798:	f002 fdd8 	bl	800834c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800579c:	2301      	movs	r3, #1
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08e      	sub	sp, #56	@ 0x38
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	e7fd      	b.n	80057f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <xQueueGenericCreateStatic+0x56>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <xQueueGenericCreateStatic+0x5a>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <xQueueGenericCreateStatic+0x5c>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	623b      	str	r3, [r7, #32]
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <xQueueGenericCreateStatic+0x84>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <xQueueGenericCreateStatic+0x88>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <xQueueGenericCreateStatic+0x8a>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	61fb      	str	r3, [r7, #28]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005852:	2350      	movs	r3, #80	@ 0x50
 8005854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b50      	cmp	r3, #80	@ 0x50
 800585a:	d00b      	beq.n	8005874 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	61bb      	str	r3, [r7, #24]
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005874:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005888:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f840 	bl	800591c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3730      	adds	r7, #48	@ 0x30
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b08a      	sub	sp, #40	@ 0x28
 80058aa:	af02      	add	r7, sp, #8
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	4613      	mov	r3, r2
 80058b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	613b      	str	r3, [r7, #16]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3350      	adds	r3, #80	@ 0x50
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 fe23 	bl	800852c <pvPortMalloc>
 80058e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	3350      	adds	r3, #80	@ 0x50
 80058f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005900:	79fa      	ldrb	r2, [r7, #7]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f805 	bl	800591c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005912:	69bb      	ldr	r3, [r7, #24]
	}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e002      	b.n	800593e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594a:	2101      	movs	r1, #1
 800594c:	69b8      	ldr	r0, [r7, #24]
 800594e:	f7ff fec3 	bl	80056d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005982:	2300      	movs	r3, #0
 8005984:	2200      	movs	r2, #0
 8005986:	2100      	movs	r1, #0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f911 	bl	8005bb0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6939      	ldr	r1, [r7, #16]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff ff79 	bl	80058a6 <xQueueGenericCreate>
 80059b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ffd3 	bl	8005962 <prvInitialiseMutex>

		return xNewQueue;
 80059bc:	68fb      	ldr	r3, [r7, #12]
	}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b088      	sub	sp, #32
 80059ca:	af02      	add	r7, sp, #8
 80059cc:	4603      	mov	r3, r0
 80059ce:	6039      	str	r1, [r7, #0]
 80059d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	6939      	ldr	r1, [r7, #16]
 80059e4:	6978      	ldr	r0, [r7, #20]
 80059e6:	f7ff fee1 	bl	80057ac <xQueueGenericCreateStatic>
 80059ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff ffb8 	bl	8005962 <prvInitialiseMutex>

		return xNewQueue;
 80059f2:	68fb      	ldr	r3, [r7, #12]
	}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60fb      	str	r3, [r7, #12]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	689c      	ldr	r4, [r3, #8]
 8005a2a:	f001 fde3 	bl	80075f4 <xTaskGetCurrentTaskHandle>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	429c      	cmp	r4, r3
 8005a32:	d111      	bne.n	8005a58 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005a46:	2300      	movs	r3, #0
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6938      	ldr	r0, [r7, #16]
 8005a4e:	f000 f8af 	bl	8005bb0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e001      	b.n	8005a5c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005a5c:	697b      	ldr	r3, [r7, #20]
	}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}

08005a66 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005a66:	b590      	push	{r4, r7, lr}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	689c      	ldr	r4, [r3, #8]
 8005a96:	f001 fdad 	bl	80075f4 <xTaskGetCurrentTaskHandle>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	d107      	bne.n	8005ab0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e00c      	b.n	8005aca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6938      	ldr	r0, [r7, #16]
 8005ab4:	f000 fb8e 	bl	80061d4 <xQueueSemaphoreTake>
 8005ab8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005aca:	697b      	ldr	r3, [r7, #20]
	}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}

08005ad4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08a      	sub	sp, #40	@ 0x28
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61bb      	str	r3, [r7, #24]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d90b      	bls.n	8005b1e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	617b      	str	r3, [r7, #20]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b1e:	2302      	movs	r3, #2
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2100      	movs	r1, #0
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff fe3f 	bl	80057ac <xQueueGenericCreateStatic>
 8005b2e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	613b      	str	r3, [r7, #16]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90b      	bls.n	8005b8e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	60fb      	str	r3, [r7, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	bf00      	nop
 8005b8c:	e7fd      	b.n	8005b8a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b8e:	2202      	movs	r2, #2
 8005b90:	2100      	movs	r1, #0
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fe87 	bl	80058a6 <xQueueGenericCreate>
 8005b98:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ba6:	697b      	ldr	r3, [r7, #20]
	}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	@ 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10b      	bne.n	8005be4 <xQueueGenericSend+0x34>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bde:	bf00      	nop
 8005be0:	bf00      	nop
 8005be2:	e7fd      	b.n	8005be0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <xQueueGenericSend+0x42>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <xQueueGenericSend+0x46>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <xQueueGenericSend+0x48>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10b      	bne.n	8005c14 <xQueueGenericSend+0x64>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d103      	bne.n	8005c22 <xQueueGenericSend+0x72>
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <xQueueGenericSend+0x76>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <xQueueGenericSend+0x78>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <xQueueGenericSend+0x94>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c44:	f001 fce6 	bl	8007614 <xTaskGetSchedulerState>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <xQueueGenericSend+0xa4>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <xQueueGenericSend+0xa8>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <xQueueGenericSend+0xaa>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xQueueGenericSend+0xc6>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	61fb      	str	r3, [r7, #28]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c76:	f002 fb37 	bl	80082e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <xQueueGenericSend+0xdc>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d129      	bne.n	8005ce0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c92:	f000 fcab 	bl	80065ec <prvCopyDataToQueue>
 8005c96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	3324      	adds	r3, #36	@ 0x24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fadf 	bl	8007268 <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d013      	beq.n	8005cd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8005db0 <xQueueGenericSend+0x200>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	e00a      	b.n	8005cd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cc8:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <xQueueGenericSend+0x200>)
 8005cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cd8:	f002 fb38 	bl	800834c <vPortExitCritical>
				return pdPASS;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e063      	b.n	8005da8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ce6:	f002 fb31 	bl	800834c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e05c      	b.n	8005da8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 fb19 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d02:	f002 fb23 	bl	800834c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d06:	f001 f86f 	bl	8006de8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d0a:	f002 faed 	bl	80082e8 <vPortEnterCritical>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <xQueueGenericSend+0x174>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d30:	d103      	bne.n	8005d3a <xQueueGenericSend+0x18a>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d3a:	f002 fb07 	bl	800834c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d3e:	1d3a      	adds	r2, r7, #4
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fb08 	bl	800735c <xTaskCheckForTimeOut>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d124      	bne.n	8005d9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d54:	f000 fd42 	bl	80067dc <prvIsQueueFull>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	3310      	adds	r3, #16
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fa2c 	bl	80071c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d6e:	f000 fccd 	bl	800670c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d72:	f001 f847 	bl	8006e04 <xTaskResumeAll>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f af7c 	bne.w	8005c76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005db0 <xQueueGenericSend+0x200>)
 8005d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	e772      	b.n	8005c76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d92:	f000 fcbb 	bl	800670c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d96:	f001 f835 	bl	8006e04 <xTaskResumeAll>
 8005d9a:	e76c      	b.n	8005c76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d9e:	f000 fcb5 	bl	800670c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005da2:	f001 f82f 	bl	8006e04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005da6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3738      	adds	r7, #56	@ 0x38
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b090      	sub	sp, #64	@ 0x40
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10b      	bne.n	8005de4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <xQueueGenericSendFromISR+0x3e>
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <xQueueGenericSendFromISR+0x42>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueGenericSendFromISR+0x44>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10b      	bne.n	8005e14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSendFromISR+0x6e>
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <xQueueGenericSendFromISR+0x72>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <xQueueGenericSendFromISR+0x74>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	623b      	str	r3, [r7, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e44:	f002 fb30 	bl	80084a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e48:	f3ef 8211 	mrs	r2, BASEPRI
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61fa      	str	r2, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <xQueueGenericSendFromISR+0xc2>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d12f      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e8c:	f000 fbae 	bl	80065ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d112      	bne.n	8005ec0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	3324      	adds	r3, #36	@ 0x24
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f9de 	bl	8007268 <xTaskRemoveFromEventList>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e007      	b.n	8005ed0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	b25a      	sxtb	r2, r3
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ed4:	e001      	b.n	8005eda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005edc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ee4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3740      	adds	r7, #64	@ 0x40
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	@ 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61fb      	str	r3, [r7, #28]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <xQueueGiveFromISR+0x5c>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <xQueueGiveFromISR+0x60>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <xQueueGiveFromISR+0x62>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	61bb      	str	r3, [r7, #24]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f6e:	f002 fa9b 	bl	80084a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f72:	f3ef 8211 	mrs	r2, BASEPRI
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	617a      	str	r2, [r7, #20]
 8005f88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d22b      	bcs.n	8005ff6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d112      	bne.n	8005fe0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	3324      	adds	r3, #36	@ 0x24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 f94e 	bl	8007268 <xTaskRemoveFromEventList>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00e      	beq.n	8005ff0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e007      	b.n	8005ff0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	b25a      	sxtb	r2, r3
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff4:	e001      	b.n	8005ffa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f383 8811 	msr	BASEPRI, r3
}
 8006004:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006008:	4618      	mov	r0, r3
 800600a:	3738      	adds	r7, #56	@ 0x38
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08c      	sub	sp, #48	@ 0x30
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <xQueueReceive+0x32>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	623b      	str	r3, [r7, #32]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <xQueueReceive+0x40>
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <xQueueReceive+0x44>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <xQueueReceive+0x46>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <xQueueReceive+0x62>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61fb      	str	r3, [r7, #28]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006072:	f001 facf 	bl	8007614 <xTaskGetSchedulerState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <xQueueReceive+0x72>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueReceive+0x76>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueReceive+0x78>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xQueueReceive+0x94>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	61bb      	str	r3, [r7, #24]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a4:	f002 f920 	bl	80082e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01f      	beq.n	80060f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b8:	f000 fb02 	bl	80066c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	3310      	adds	r3, #16
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f8c9 	bl	8007268 <xTaskRemoveFromEventList>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060dc:	4b3c      	ldr	r3, [pc, #240]	@ (80061d0 <xQueueReceive+0x1c0>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060ec:	f002 f92e 	bl	800834c <vPortExitCritical>
				return pdPASS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e069      	b.n	80061c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060fa:	f002 f927 	bl	800834c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060fe:	2300      	movs	r3, #0
 8006100:	e062      	b.n	80061c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006108:	f107 0310 	add.w	r3, r7, #16
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f90f 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006112:	2301      	movs	r3, #1
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006116:	f002 f919 	bl	800834c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800611a:	f000 fe65 	bl	8006de8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800611e:	f002 f8e3 	bl	80082e8 <vPortEnterCritical>
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006128:	b25b      	sxtb	r3, r3
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d103      	bne.n	8006138 <xQueueReceive+0x128>
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d103      	bne.n	800614e <xQueueReceive+0x13e>
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800614e:	f002 f8fd 	bl	800834c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006152:	1d3a      	adds	r2, r7, #4
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f8fe 	bl	800735c <xTaskCheckForTimeOut>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d123      	bne.n	80061ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006168:	f000 fb22 	bl	80067b0 <prvIsQueueEmpty>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d017      	beq.n	80061a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006174:	3324      	adds	r3, #36	@ 0x24
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4611      	mov	r1, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f822 	bl	80071c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006182:	f000 fac3 	bl	800670c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006186:	f000 fe3d 	bl	8006e04 <xTaskResumeAll>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d189      	bne.n	80060a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006190:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <xQueueReceive+0x1c0>)
 8006192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	e780      	b.n	80060a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061a4:	f000 fab2 	bl	800670c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061a8:	f000 fe2c 	bl	8006e04 <xTaskResumeAll>
 80061ac:	e77a      	b.n	80060a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b0:	f000 faac 	bl	800670c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b4:	f000 fe26 	bl	8006e04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ba:	f000 faf9 	bl	80067b0 <prvIsQueueEmpty>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f43f af6f 	beq.w	80060a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3730      	adds	r7, #48	@ 0x30
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08e      	sub	sp, #56	@ 0x38
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	623b      	str	r3, [r7, #32]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	61fb      	str	r3, [r7, #28]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006228:	f001 f9f4 	bl	8007614 <xTaskGetSchedulerState>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <xQueueSemaphoreTake+0x64>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <xQueueSemaphoreTake+0x68>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <xQueueSemaphoreTake+0x6a>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	61bb      	str	r3, [r7, #24]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f002 f845 	bl	80082e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d024      	beq.n	80062b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	1e5a      	subs	r2, r3, #1
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800627a:	f001 fb45 	bl	8007908 <pvTaskIncrementMutexHeldCount>
 800627e:	4602      	mov	r2, r0
 8006280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006282:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00f      	beq.n	80062ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800628c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628e:	3310      	adds	r3, #16
 8006290:	4618      	mov	r0, r3
 8006292:	f000 ffe9 	bl	8007268 <xTaskRemoveFromEventList>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800629c:	4b54      	ldr	r3, [pc, #336]	@ (80063f0 <xQueueSemaphoreTake+0x21c>)
 800629e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062ac:	f002 f84e 	bl	800834c <vPortExitCritical>
				return pdPASS;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e098      	b.n	80063e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d112      	bne.n	80062e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	617b      	str	r3, [r7, #20]
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062d8:	f002 f838 	bl	800834c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062dc:	2300      	movs	r3, #0
 80062de:	e082      	b.n	80063e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062e6:	f107 030c 	add.w	r3, r7, #12
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f820 	bl	8007330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062f4:	f002 f82a 	bl	800834c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062f8:	f000 fd76 	bl	8006de8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062fc:	f001 fff4 	bl	80082e8 <vPortEnterCritical>
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <xQueueSemaphoreTake+0x142>
 800630e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <xQueueSemaphoreTake+0x158>
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800632c:	f002 f80e 	bl	800834c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006330:	463a      	mov	r2, r7
 8006332:	f107 030c 	add.w	r3, r7, #12
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f001 f80f 	bl	800735c <xTaskCheckForTimeOut>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d132      	bne.n	80063aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006344:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006346:	f000 fa33 	bl	80067b0 <prvIsQueueEmpty>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d026      	beq.n	800639e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006358:	f001 ffc6 	bl	80082e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f001 f975 	bl	8007650 <xTaskPriorityInherit>
 8006366:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006368:	f001 fff0 	bl	800834c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	3324      	adds	r3, #36	@ 0x24
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 ff25 	bl	80071c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800637a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800637c:	f000 f9c6 	bl	800670c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006380:	f000 fd40 	bl	8006e04 <xTaskResumeAll>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f af67 	bne.w	800625a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800638c:	4b18      	ldr	r3, [pc, #96]	@ (80063f0 <xQueueSemaphoreTake+0x21c>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	e75d      	b.n	800625a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800639e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063a0:	f000 f9b4 	bl	800670c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063a4:	f000 fd2e 	bl	8006e04 <xTaskResumeAll>
 80063a8:	e757      	b.n	800625a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063ac:	f000 f9ae 	bl	800670c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063b0:	f000 fd28 	bl	8006e04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063b6:	f000 f9fb 	bl	80067b0 <prvIsQueueEmpty>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f43f af4c 	beq.w	800625a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00d      	beq.n	80063e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80063c8:	f001 ff8e 	bl	80082e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063ce:	f000 f8f5 	bl	80065bc <prvGetDisinheritPriorityAfterTimeout>
 80063d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fa10 	bl	8007800 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063e0:	f001 ffb4 	bl	800834c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3738      	adds	r7, #56	@ 0x38
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08e      	sub	sp, #56	@ 0x38
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	623b      	str	r3, [r7, #32]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <xQueueReceiveFromISR+0x3c>
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <xQueueReceiveFromISR+0x40>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <xQueueReceiveFromISR+0x42>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61fb      	str	r3, [r7, #28]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006452:	f002 f829 	bl	80084a8 <vPortValidateInterruptPriority>
	__asm volatile
 8006456:	f3ef 8211 	mrs	r2, BASEPRI
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61ba      	str	r2, [r7, #24]
 800646c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800646e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006470:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d02f      	beq.n	80064de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800648c:	f000 f918 	bl	80066c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006492:	1e5a      	subs	r2, r3, #1
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006498:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d112      	bne.n	80064c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d016      	beq.n	80064d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	3310      	adds	r3, #16
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 feda 	bl	8007268 <xTaskRemoveFromEventList>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e007      	b.n	80064d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064cc:	3301      	adds	r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	b25a      	sxtb	r2, r3
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	e001      	b.n	80064e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80064de:	2300      	movs	r3, #0
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f383 8811 	msr	BASEPRI, r3
}
 80064ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3738      	adds	r7, #56	@ 0x38
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	60bb      	str	r3, [r7, #8]
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	e7fd      	b.n	800651a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800651e:	f001 fee3 	bl	80082e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006528:	f001 ff10 	bl	800834c <vPortExitCritical>

	return uxReturn;
 800652c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006564:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006566:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006568:	4618      	mov	r0, r3
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <vQueueDelete+0x2a>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60bb      	str	r3, [r7, #8]
}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	e7fd      	b.n	800659a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f95e 	bl	8006860 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f002 f88a 	bl	80086c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e001      	b.n	80065de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065de:	68fb      	ldr	r3, [r7, #12]
	}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10d      	bne.n	8006626 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d14d      	bne.n	80066ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f001 f882 	bl	8007720 <xTaskPriorityDisinherit>
 800661c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	e043      	b.n	80066ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d119      	bne.n	8006660 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6858      	ldr	r0, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006634:	461a      	mov	r2, r3
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	f011 f85b 	bl	80176f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	d32b      	bcc.n	80066ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	e026      	b.n	80066ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68d8      	ldr	r0, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	461a      	mov	r2, r3
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	f011 f841 	bl	80176f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	425b      	negs	r3, r3
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d207      	bcs.n	800669c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	425b      	negs	r3, r3
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d105      	bne.n	80066ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d018      	beq.n	8006704 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	441a      	add	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d303      	bcc.n	80066f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	461a      	mov	r2, r3
 80066fe:	6838      	ldr	r0, [r7, #0]
 8006700:	f010 fff7 	bl	80176f2 <memcpy>
	}
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006714:	f001 fde8 	bl	80082e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800671e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006720:	e011      	b.n	8006746 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	d012      	beq.n	8006750 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3324      	adds	r3, #36	@ 0x24
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fd9a 	bl	8007268 <xTaskRemoveFromEventList>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800673a:	f000 fe73 	bl	8007424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	3b01      	subs	r3, #1
 8006742:	b2db      	uxtb	r3, r3
 8006744:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	dce9      	bgt.n	8006722 <prvUnlockQueue+0x16>
 800674e:	e000      	b.n	8006752 <prvUnlockQueue+0x46>
					break;
 8006750:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	22ff      	movs	r2, #255	@ 0xff
 8006756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800675a:	f001 fdf7 	bl	800834c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800675e:	f001 fdc3 	bl	80082e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006768:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800676a:	e011      	b.n	8006790 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d012      	beq.n	800679a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3310      	adds	r3, #16
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fd75 	bl	8007268 <xTaskRemoveFromEventList>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006784:	f000 fe4e 	bl	8007424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	3b01      	subs	r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dce9      	bgt.n	800676c <prvUnlockQueue+0x60>
 8006798:	e000      	b.n	800679c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800679a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	22ff      	movs	r2, #255	@ 0xff
 80067a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80067a4:	f001 fdd2 	bl	800834c <vPortExitCritical>
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067b8:	f001 fd96 	bl	80082e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e001      	b.n	80067ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ce:	f001 fdbd 	bl	800834c <vPortExitCritical>

	return xReturn;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067e4:	f001 fd80 	bl	80082e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d102      	bne.n	80067fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e001      	b.n	80067fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067fe:	f001 fda5 	bl	800834c <vPortExitCritical>

	return xReturn;
 8006802:	68fb      	ldr	r3, [r7, #12]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e014      	b.n	8006846 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800681c:	4a0f      	ldr	r2, [pc, #60]	@ (800685c <vQueueAddToRegistry+0x50>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006828:	490c      	ldr	r1, [pc, #48]	@ (800685c <vQueueAddToRegistry+0x50>)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006832:	4a0a      	ldr	r2, [pc, #40]	@ (800685c <vQueueAddToRegistry+0x50>)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	4413      	add	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800683e:	e006      	b.n	800684e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b07      	cmp	r3, #7
 800684a:	d9e7      	bls.n	800681c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200054a8 	.word	0x200054a8

08006860 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e016      	b.n	800689c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800686e:	4a10      	ldr	r2, [pc, #64]	@ (80068b0 <vQueueUnregisterQueue+0x50>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d10b      	bne.n	8006896 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800687e:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <vQueueUnregisterQueue+0x50>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2100      	movs	r1, #0
 8006884:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006888:	4a09      	ldr	r2, [pc, #36]	@ (80068b0 <vQueueUnregisterQueue+0x50>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4413      	add	r3, r2
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]
				break;
 8006894:	e006      	b.n	80068a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d9e5      	bls.n	800686e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	200054a8 	.word	0x200054a8

080068b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068c4:	f001 fd10 	bl	80082e8 <vPortEnterCritical>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068ce:	b25b      	sxtb	r3, r3
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d103      	bne.n	80068de <vQueueWaitForMessageRestricted+0x2a>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d103      	bne.n	80068f4 <vQueueWaitForMessageRestricted+0x40>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068f4:	f001 fd2a 	bl	800834c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	3324      	adds	r3, #36	@ 0x24
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fc81 	bl	8007210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff fefc 	bl	800670c <prvUnlockQueue>
	}
 8006914:	bf00      	nop
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	@ 0x38
 8006920:	af04      	add	r7, sp, #16
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	e7fd      	b.n	8006944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <xTaskCreateStatic+0x4a>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	61fb      	str	r3, [r7, #28]
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	e7fd      	b.n	8006962 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006966:	23ac      	movs	r3, #172	@ 0xac
 8006968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2bac      	cmp	r3, #172	@ 0xac
 800696e:	d00b      	beq.n	8006988 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61bb      	str	r3, [r7, #24]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006988:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01e      	beq.n	80069ce <xTaskCreateStatic+0xb2>
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01b      	beq.n	80069ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800699e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a8:	2300      	movs	r3, #0
 80069aa:	9303      	str	r3, [sp, #12]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f851 	bl	8006a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069c8:	f000 f8f8 	bl	8006bbc <prvAddNewTaskToReadyList>
 80069cc:	e001      	b.n	80069d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
	}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3728      	adds	r7, #40	@ 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	@ 0x30
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fd9b 	bl	800852c <pvPortMalloc>
 80069f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069fe:	20ac      	movs	r0, #172	@ 0xac
 8006a00:	f001 fd94 	bl	800852c <pvPortMalloc>
 8006a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a12:	e005      	b.n	8006a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a14:	6978      	ldr	r0, [r7, #20]
 8006a16:	f001 fe57 	bl	80086c8 <vPortFree>
 8006a1a:	e001      	b.n	8006a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d017      	beq.n	8006a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f80f 	bl	8006a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a4a:	69f8      	ldr	r0, [r7, #28]
 8006a4c:	f000 f8b6 	bl	8006bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e002      	b.n	8006a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	21a5      	movs	r1, #165	@ 0xa5
 8006a82:	f010 fd64 	bl	801754e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	3b01      	subs	r3, #1
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01f      	beq.n	8006b0e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	e012      	b.n	8006afa <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	7819      	ldrb	r1, [r3, #0]
 8006adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3334      	adds	r3, #52	@ 0x34
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	3301      	adds	r3, #1
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d9e9      	bls.n	8006ad4 <prvInitialiseNewTask+0x6c>
 8006b00:	e000      	b.n	8006b04 <prvInitialiseNewTask+0x9c>
			{
				break;
 8006b02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b0c:	e003      	b.n	8006b16 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	2b37      	cmp	r3, #55	@ 0x37
 8006b1a:	d901      	bls.n	8006b20 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b1c:	2337      	movs	r3, #55	@ 0x37
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b2a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	3304      	adds	r3, #4
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fd3a 	bl	80055b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	3318      	adds	r3, #24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fd35 	bl	80055b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	3358      	adds	r3, #88	@ 0x58
 8006b70:	224c      	movs	r2, #76	@ 0x4c
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f010 fcea 	bl	801754e <memset>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb0 <prvInitialiseNewTask+0x148>)
 8006b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb4 <prvInitialiseNewTask+0x14c>)
 8006b84:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	4a0b      	ldr	r2, [pc, #44]	@ (8006bb8 <prvInitialiseNewTask+0x150>)
 8006b8a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	69b8      	ldr	r0, [r7, #24]
 8006b92:	f001 fa7b 	bl	800808c <pxPortInitialiseStack>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ba8:	bf00      	nop
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20004bf8 	.word	0x20004bf8
 8006bb4:	20004c60 	.word	0x20004c60
 8006bb8:	20004cc8 	.word	0x20004cc8

08006bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bc4:	f001 fb90 	bl	80082e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006c80 <prvAddNewTaskToReadyList+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	4a2c      	ldr	r2, [pc, #176]	@ (8006c80 <prvAddNewTaskToReadyList+0xc4>)
 8006bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006c84 <prvAddNewTaskToReadyList+0xc8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bda:	4a2a      	ldr	r2, [pc, #168]	@ (8006c84 <prvAddNewTaskToReadyList+0xc8>)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <prvAddNewTaskToReadyList+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d110      	bne.n	8006c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006be8:	f000 fc40 	bl	800746c <prvInitialiseTaskLists>
 8006bec:	e00d      	b.n	8006c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bee:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <prvAddNewTaskToReadyList+0xcc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bf6:	4b23      	ldr	r3, [pc, #140]	@ (8006c84 <prvAddNewTaskToReadyList+0xc8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d802      	bhi.n	8006c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c04:	4a1f      	ldr	r2, [pc, #124]	@ (8006c84 <prvAddNewTaskToReadyList+0xc8>)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c0a:	4b20      	ldr	r3, [pc, #128]	@ (8006c8c <prvAddNewTaskToReadyList+0xd0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4a1e      	ldr	r2, [pc, #120]	@ (8006c8c <prvAddNewTaskToReadyList+0xd0>)
 8006c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c14:	4b1d      	ldr	r3, [pc, #116]	@ (8006c8c <prvAddNewTaskToReadyList+0xd0>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <prvAddNewTaskToReadyList+0xd4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d903      	bls.n	8006c30 <prvAddNewTaskToReadyList+0x74>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a18      	ldr	r2, [pc, #96]	@ (8006c90 <prvAddNewTaskToReadyList+0xd4>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <prvAddNewTaskToReadyList+0xd8>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fcbf 	bl	80055ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c4c:	f001 fb7e 	bl	800834c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c50:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <prvAddNewTaskToReadyList+0xcc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c58:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <prvAddNewTaskToReadyList+0xc8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d207      	bcs.n	8006c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c66:	4b0c      	ldr	r3, [pc, #48]	@ (8006c98 <prvAddNewTaskToReadyList+0xdc>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000cd8 	.word	0x20000cd8
 8006c84:	20000804 	.word	0x20000804
 8006c88:	20000ce4 	.word	0x20000ce4
 8006c8c:	20000cf4 	.word	0x20000cf4
 8006c90:	20000ce0 	.word	0x20000ce0
 8006c94:	20000808 	.word	0x20000808
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cae:	4b14      	ldr	r3, [pc, #80]	@ (8006d00 <vTaskDelay+0x64>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <vTaskDelay+0x32>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cce:	f000 f88b 	bl	8006de8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fe2b 	bl	8007930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cda:	f000 f893 	bl	8006e04 <xTaskResumeAll>
 8006cde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ce6:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <vTaskDelay+0x68>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000d00 	.word	0x20000d00
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d16:	463a      	mov	r2, r7
 8006d18:	1d39      	adds	r1, r7, #4
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fbf2 	bl	8005508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	9202      	str	r2, [sp, #8]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	460a      	mov	r2, r1
 8006d36:	4924      	ldr	r1, [pc, #144]	@ (8006dc8 <vTaskStartScheduler+0xc0>)
 8006d38:	4824      	ldr	r0, [pc, #144]	@ (8006dcc <vTaskStartScheduler+0xc4>)
 8006d3a:	f7ff fdef 	bl	800691c <xTaskCreateStatic>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4a23      	ldr	r2, [pc, #140]	@ (8006dd0 <vTaskStartScheduler+0xc8>)
 8006d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d44:	4b22      	ldr	r3, [pc, #136]	@ (8006dd0 <vTaskStartScheduler+0xc8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e001      	b.n	8006d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d102      	bne.n	8006d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d5c:	f000 fe3c 	bl	80079d8 <xTimerCreateTimerTask>
 8006d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d11b      	bne.n	8006da0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d7c:	4b15      	ldr	r3, [pc, #84]	@ (8006dd4 <vTaskStartScheduler+0xcc>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3358      	adds	r3, #88	@ 0x58
 8006d82:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <vTaskStartScheduler+0xd0>)
 8006d84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d86:	4b15      	ldr	r3, [pc, #84]	@ (8006ddc <vTaskStartScheduler+0xd4>)
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <vTaskStartScheduler+0xd8>)
 8006d90:	2201      	movs	r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d94:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <vTaskStartScheduler+0xdc>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d9a:	f001 fa01 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d9e:	e00f      	b.n	8006dc0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d10b      	bne.n	8006dc0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <vTaskStartScheduler+0xb4>
}
 8006dc0:	bf00      	nop
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	0801850c 	.word	0x0801850c
 8006dcc:	0800743d 	.word	0x0800743d
 8006dd0:	20000cfc 	.word	0x20000cfc
 8006dd4:	20000804 	.word	0x20000804
 8006dd8:	2000002c 	.word	0x2000002c
 8006ddc:	20000cf8 	.word	0x20000cf8
 8006de0:	20000ce4 	.word	0x20000ce4
 8006de4:	20000cdc 	.word	0x20000cdc

08006de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dec:	4b04      	ldr	r3, [pc, #16]	@ (8006e00 <vTaskSuspendAll+0x18>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a03      	ldr	r2, [pc, #12]	@ (8006e00 <vTaskSuspendAll+0x18>)
 8006df4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000d00 	.word	0x20000d00

08006e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e12:	4b42      	ldr	r3, [pc, #264]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	603b      	str	r3, [r7, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e32:	f001 fa59 	bl	80082e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e36:	4b39      	ldr	r3, [pc, #228]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a37      	ldr	r2, [pc, #220]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e40:	4b36      	ldr	r3, [pc, #216]	@ (8006f1c <xTaskResumeAll+0x118>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d162      	bne.n	8006f0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e48:	4b35      	ldr	r3, [pc, #212]	@ (8006f20 <xTaskResumeAll+0x11c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d05e      	beq.n	8006f0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e50:	e02f      	b.n	8006eb2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e52:	4b34      	ldr	r3, [pc, #208]	@ (8006f24 <xTaskResumeAll+0x120>)
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fc10 	bl	8005684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fc0b 	bl	8005684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e72:	4b2d      	ldr	r3, [pc, #180]	@ (8006f28 <xTaskResumeAll+0x124>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <xTaskResumeAll+0x7e>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f28 <xTaskResumeAll+0x124>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <xTaskResumeAll+0x128>)
 8006e90:	441a      	add	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7fe fb96 	bl	80055ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea2:	4b23      	ldr	r3, [pc, #140]	@ (8006f30 <xTaskResumeAll+0x12c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006eac:	4b21      	ldr	r3, [pc, #132]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f24 <xTaskResumeAll+0x120>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1cb      	bne.n	8006e52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ec0:	f000 fb78 	bl	80075b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f38 <xTaskResumeAll+0x134>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ed0:	f000 f858 	bl	8006f84 <xTaskIncrementTick>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006eda:	4b16      	ldr	r3, [pc, #88]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f1      	bne.n	8006ed0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006eec:	4b12      	ldr	r3, [pc, #72]	@ (8006f38 <xTaskResumeAll+0x134>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ef2:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <xTaskResumeAll+0x130>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006efe:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <xTaskResumeAll+0x138>)
 8006f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f0e:	f001 fa1d 	bl	800834c <vPortExitCritical>

	return xAlreadyYielded;
 8006f12:	68bb      	ldr	r3, [r7, #8]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000d00 	.word	0x20000d00
 8006f20:	20000cd8 	.word	0x20000cd8
 8006f24:	20000c98 	.word	0x20000c98
 8006f28:	20000ce0 	.word	0x20000ce0
 8006f2c:	20000808 	.word	0x20000808
 8006f30:	20000804 	.word	0x20000804
 8006f34:	20000cec 	.word	0x20000cec
 8006f38:	20000ce8 	.word	0x20000ce8
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f46:	4b05      	ldr	r3, [pc, #20]	@ (8006f5c <xTaskGetTickCount+0x1c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f4c:	687b      	ldr	r3, [r7, #4]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000cdc 	.word	0x20000cdc

08006f60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f66:	f001 fa9f 	bl	80084a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006f6e:	4b04      	ldr	r3, [pc, #16]	@ (8006f80 <xTaskGetTickCountFromISR+0x20>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f74:	683b      	ldr	r3, [r7, #0]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000cdc 	.word	0x20000cdc

08006f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8e:	4b4f      	ldr	r3, [pc, #316]	@ (80070cc <xTaskIncrementTick+0x148>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 8090 	bne.w	80070b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f98:	4b4d      	ldr	r3, [pc, #308]	@ (80070d0 <xTaskIncrementTick+0x14c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80070d0 <xTaskIncrementTick+0x14c>)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d121      	bne.n	8006ff0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fac:	4b49      	ldr	r3, [pc, #292]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	603b      	str	r3, [r7, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	e7fd      	b.n	8006fca <xTaskIncrementTick+0x46>
 8006fce:	4b41      	ldr	r3, [pc, #260]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	4b40      	ldr	r3, [pc, #256]	@ (80070d8 <xTaskIncrementTick+0x154>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80070d8 <xTaskIncrementTick+0x154>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80070dc <xTaskIncrementTick+0x158>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	4a3c      	ldr	r2, [pc, #240]	@ (80070dc <xTaskIncrementTick+0x158>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	f000 fae2 	bl	80075b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d349      	bcc.n	800708e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	4b36      	ldr	r3, [pc, #216]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007004:	4b36      	ldr	r3, [pc, #216]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8007006:	f04f 32ff 	mov.w	r2, #4294967295
 800700a:	601a      	str	r2, [r3, #0]
					break;
 800700c:	e03f      	b.n	800708e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b31      	ldr	r3, [pc, #196]	@ (80070d4 <xTaskIncrementTick+0x150>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	429a      	cmp	r2, r3
 8007024:	d203      	bcs.n	800702e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007026:	4a2e      	ldr	r2, [pc, #184]	@ (80070e0 <xTaskIncrementTick+0x15c>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800702c:	e02f      	b.n	800708e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3304      	adds	r3, #4
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fb26 	bl	8005684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3318      	adds	r3, #24
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fb1d 	bl	8005684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704e:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <xTaskIncrementTick+0x160>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d903      	bls.n	800705e <xTaskIncrementTick+0xda>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	4a22      	ldr	r2, [pc, #136]	@ (80070e4 <xTaskIncrementTick+0x160>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a1f      	ldr	r2, [pc, #124]	@ (80070e8 <xTaskIncrementTick+0x164>)
 800706c:	441a      	add	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fe faa8 	bl	80055ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	4b1b      	ldr	r3, [pc, #108]	@ (80070ec <xTaskIncrementTick+0x168>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	429a      	cmp	r2, r3
 8007086:	d3b8      	bcc.n	8006ffa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708c:	e7b5      	b.n	8006ffa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800708e:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <xTaskIncrementTick+0x168>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007094:	4914      	ldr	r1, [pc, #80]	@ (80070e8 <xTaskIncrementTick+0x164>)
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d901      	bls.n	80070aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80070a6:	2301      	movs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070aa:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <xTaskIncrementTick+0x16c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e004      	b.n	80070c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070b8:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <xTaskIncrementTick+0x170>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <xTaskIncrementTick+0x170>)
 80070c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070c2:	697b      	ldr	r3, [r7, #20]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000d00 	.word	0x20000d00
 80070d0:	20000cdc 	.word	0x20000cdc
 80070d4:	20000c90 	.word	0x20000c90
 80070d8:	20000c94 	.word	0x20000c94
 80070dc:	20000cf0 	.word	0x20000cf0
 80070e0:	20000cf8 	.word	0x20000cf8
 80070e4:	20000ce0 	.word	0x20000ce0
 80070e8:	20000808 	.word	0x20000808
 80070ec:	20000804 	.word	0x20000804
 80070f0:	20000cec 	.word	0x20000cec
 80070f4:	20000ce8 	.word	0x20000ce8

080070f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070fe:	4b2b      	ldr	r3, [pc, #172]	@ (80071ac <vTaskSwitchContext+0xb4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007106:	4b2a      	ldr	r3, [pc, #168]	@ (80071b0 <vTaskSwitchContext+0xb8>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800710c:	e047      	b.n	800719e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800710e:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <vTaskSwitchContext+0xb8>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007114:	4b27      	ldr	r3, [pc, #156]	@ (80071b4 <vTaskSwitchContext+0xbc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e011      	b.n	8007140 <vTaskSwitchContext+0x48>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <vTaskSwitchContext+0x42>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	607b      	str	r3, [r7, #4]
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	e7fd      	b.n	8007136 <vTaskSwitchContext+0x3e>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3b01      	subs	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	491d      	ldr	r1, [pc, #116]	@ (80071b8 <vTaskSwitchContext+0xc0>)
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0e3      	beq.n	800711c <vTaskSwitchContext+0x24>
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4a16      	ldr	r2, [pc, #88]	@ (80071b8 <vTaskSwitchContext+0xc0>)
 8007160:	4413      	add	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3308      	adds	r3, #8
 8007176:	429a      	cmp	r2, r3
 8007178:	d104      	bne.n	8007184 <vTaskSwitchContext+0x8c>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	4a0c      	ldr	r2, [pc, #48]	@ (80071bc <vTaskSwitchContext+0xc4>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	4a09      	ldr	r2, [pc, #36]	@ (80071b4 <vTaskSwitchContext+0xbc>)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007194:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <vTaskSwitchContext+0xc4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3358      	adds	r3, #88	@ 0x58
 800719a:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <vTaskSwitchContext+0xc8>)
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000d00 	.word	0x20000d00
 80071b0:	20000cec 	.word	0x20000cec
 80071b4:	20000ce0 	.word	0x20000ce0
 80071b8:	20000808 	.word	0x20000808
 80071bc:	20000804 	.word	0x20000804
 80071c0:	2000002c 	.word	0x2000002c

080071c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071ec:	4b07      	ldr	r3, [pc, #28]	@ (800720c <vTaskPlaceOnEventList+0x48>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3318      	adds	r3, #24
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe fa0c 	bl	8005612 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071fa:	2101      	movs	r1, #1
 80071fc:	6838      	ldr	r0, [r7, #0]
 80071fe:	f000 fb97 	bl	8007930 <prvAddCurrentTaskToDelayedList>
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000804 	.word	0x20000804

08007210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	617b      	str	r3, [r7, #20]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800723a:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <vTaskPlaceOnEventListRestricted+0x54>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3318      	adds	r3, #24
 8007240:	4619      	mov	r1, r3
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f7fe f9c1 	bl	80055ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800724e:	f04f 33ff 	mov.w	r3, #4294967295
 8007252:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	68b8      	ldr	r0, [r7, #8]
 8007258:	f000 fb6a 	bl	8007930 <prvAddCurrentTaskToDelayedList>
	}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000804 	.word	0x20000804

08007268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3318      	adds	r3, #24
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe f9f2 	bl	8005684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007318 <xTaskRemoveFromEventList+0xb0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11d      	bne.n	80072e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f9e9 	bl	8005684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b6:	4b19      	ldr	r3, [pc, #100]	@ (800731c <xTaskRemoveFromEventList+0xb4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d903      	bls.n	80072c6 <xTaskRemoveFromEventList+0x5e>
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	4a16      	ldr	r2, [pc, #88]	@ (800731c <xTaskRemoveFromEventList+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4a13      	ldr	r2, [pc, #76]	@ (8007320 <xTaskRemoveFromEventList+0xb8>)
 80072d4:	441a      	add	r2, r3
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3304      	adds	r3, #4
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f7fe f974 	bl	80055ca <vListInsertEnd>
 80072e2:	e005      	b.n	80072f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3318      	adds	r3, #24
 80072e8:	4619      	mov	r1, r3
 80072ea:	480e      	ldr	r0, [pc, #56]	@ (8007324 <xTaskRemoveFromEventList+0xbc>)
 80072ec:	f7fe f96d 	bl	80055ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <xTaskRemoveFromEventList+0xc0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d905      	bls.n	800730a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007302:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <xTaskRemoveFromEventList+0xc4>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e001      	b.n	800730e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800730e:	697b      	ldr	r3, [r7, #20]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000d00 	.word	0x20000d00
 800731c:	20000ce0 	.word	0x20000ce0
 8007320:	20000808 	.word	0x20000808
 8007324:	20000c98 	.word	0x20000c98
 8007328:	20000804 	.word	0x20000804
 800732c:	20000cec 	.word	0x20000cec

08007330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007338:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <vTaskInternalSetTimeOutState+0x24>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007340:	4b05      	ldr	r3, [pc, #20]	@ (8007358 <vTaskInternalSetTimeOutState+0x28>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20000cf0 	.word	0x20000cf0
 8007358:	20000cdc 	.word	0x20000cdc

0800735c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b088      	sub	sp, #32
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	613b      	str	r3, [r7, #16]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	60fb      	str	r3, [r7, #12]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80073a2:	f000 ffa1 	bl	80082e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073a6:	4b1d      	ldr	r3, [pc, #116]	@ (800741c <xTaskCheckForTimeOut+0xc0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d102      	bne.n	80073c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e023      	b.n	800740e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b15      	ldr	r3, [pc, #84]	@ (8007420 <xTaskCheckForTimeOut+0xc4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d007      	beq.n	80073e2 <xTaskCheckForTimeOut+0x86>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d302      	bcc.n	80073e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	e015      	b.n	800740e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d20b      	bcs.n	8007404 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ff99 	bl	8007330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	e004      	b.n	800740e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800740a:	2301      	movs	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800740e:	f000 ff9d 	bl	800834c <vPortExitCritical>

	return xReturn;
 8007412:	69fb      	ldr	r3, [r7, #28]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20000cdc 	.word	0x20000cdc
 8007420:	20000cf0 	.word	0x20000cf0

08007424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007428:	4b03      	ldr	r3, [pc, #12]	@ (8007438 <vTaskMissedYield+0x14>)
 800742a:	2201      	movs	r2, #1
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000cec 	.word	0x20000cec

0800743c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007444:	f000 f852 	bl	80074ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007448:	4b06      	ldr	r3, [pc, #24]	@ (8007464 <prvIdleTask+0x28>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d9f9      	bls.n	8007444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007450:	4b05      	ldr	r3, [pc, #20]	@ (8007468 <prvIdleTask+0x2c>)
 8007452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007460:	e7f0      	b.n	8007444 <prvIdleTask+0x8>
 8007462:	bf00      	nop
 8007464:	20000808 	.word	0x20000808
 8007468:	e000ed04 	.word	0xe000ed04

0800746c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
 8007476:	e00c      	b.n	8007492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4a12      	ldr	r2, [pc, #72]	@ (80074cc <prvInitialiseTaskLists+0x60>)
 8007484:	4413      	add	r3, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe f872 	bl	8005570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3301      	adds	r3, #1
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b37      	cmp	r3, #55	@ 0x37
 8007496:	d9ef      	bls.n	8007478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007498:	480d      	ldr	r0, [pc, #52]	@ (80074d0 <prvInitialiseTaskLists+0x64>)
 800749a:	f7fe f869 	bl	8005570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800749e:	480d      	ldr	r0, [pc, #52]	@ (80074d4 <prvInitialiseTaskLists+0x68>)
 80074a0:	f7fe f866 	bl	8005570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074a4:	480c      	ldr	r0, [pc, #48]	@ (80074d8 <prvInitialiseTaskLists+0x6c>)
 80074a6:	f7fe f863 	bl	8005570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074aa:	480c      	ldr	r0, [pc, #48]	@ (80074dc <prvInitialiseTaskLists+0x70>)
 80074ac:	f7fe f860 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074b0:	480b      	ldr	r0, [pc, #44]	@ (80074e0 <prvInitialiseTaskLists+0x74>)
 80074b2:	f7fe f85d 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074b6:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <prvInitialiseTaskLists+0x78>)
 80074b8:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <prvInitialiseTaskLists+0x64>)
 80074ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <prvInitialiseTaskLists+0x7c>)
 80074be:	4a05      	ldr	r2, [pc, #20]	@ (80074d4 <prvInitialiseTaskLists+0x68>)
 80074c0:	601a      	str	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	20000808 	.word	0x20000808
 80074d0:	20000c68 	.word	0x20000c68
 80074d4:	20000c7c 	.word	0x20000c7c
 80074d8:	20000c98 	.word	0x20000c98
 80074dc:	20000cac 	.word	0x20000cac
 80074e0:	20000cc4 	.word	0x20000cc4
 80074e4:	20000c90 	.word	0x20000c90
 80074e8:	20000c94 	.word	0x20000c94

080074ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074f2:	e019      	b.n	8007528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074f4:	f000 fef8 	bl	80082e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f8:	4b10      	ldr	r3, [pc, #64]	@ (800753c <prvCheckTasksWaitingTermination+0x50>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe f8bd 	bl	8005684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <prvCheckTasksWaitingTermination+0x54>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3b01      	subs	r3, #1
 8007510:	4a0b      	ldr	r2, [pc, #44]	@ (8007540 <prvCheckTasksWaitingTermination+0x54>)
 8007512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007514:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <prvCheckTasksWaitingTermination+0x58>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3b01      	subs	r3, #1
 800751a:	4a0a      	ldr	r2, [pc, #40]	@ (8007544 <prvCheckTasksWaitingTermination+0x58>)
 800751c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800751e:	f000 ff15 	bl	800834c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f810 	bl	8007548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <prvCheckTasksWaitingTermination+0x58>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e1      	bne.n	80074f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000cac 	.word	0x20000cac
 8007540:	20000cd8 	.word	0x20000cd8
 8007544:	20000cc0 	.word	0x20000cc0

08007548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3358      	adds	r3, #88	@ 0x58
 8007554:	4618      	mov	r0, r3
 8007556:	f010 f813 	bl	8017580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8007560:	2b00      	cmp	r3, #0
 8007562:	d108      	bne.n	8007576 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f8ad 	bl	80086c8 <vPortFree>
				vPortFree( pxTCB );
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f8aa 	bl	80086c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007574:	e019      	b.n	80075aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800757c:	2b01      	cmp	r3, #1
 800757e:	d103      	bne.n	8007588 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f8a1 	bl	80086c8 <vPortFree>
	}
 8007586:	e010      	b.n	80075aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800758e:	2b02      	cmp	r3, #2
 8007590:	d00b      	beq.n	80075aa <prvDeleteTCB+0x62>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <prvDeleteTCB+0x5e>
	}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ba:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <prvResetNextTaskUnblockTime+0x38>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075c4:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <prvResetNextTaskUnblockTime+0x3c>)
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075cc:	e008      	b.n	80075e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ce:	4b07      	ldr	r3, [pc, #28]	@ (80075ec <prvResetNextTaskUnblockTime+0x38>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <prvResetNextTaskUnblockTime+0x3c>)
 80075de:	6013      	str	r3, [r2, #0]
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000c90 	.word	0x20000c90
 80075f0:	20000cf8 	.word	0x20000cf8

080075f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80075fa:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <xTaskGetCurrentTaskHandle+0x1c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007600:	687b      	ldr	r3, [r7, #4]
	}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000804 	.word	0x20000804

08007614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800761a:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <xTaskGetSchedulerState+0x34>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007622:	2301      	movs	r3, #1
 8007624:	607b      	str	r3, [r7, #4]
 8007626:	e008      	b.n	800763a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007628:	4b08      	ldr	r3, [pc, #32]	@ (800764c <xTaskGetSchedulerState+0x38>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007630:	2302      	movs	r3, #2
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	e001      	b.n	800763a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007636:	2300      	movs	r3, #0
 8007638:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800763a:	687b      	ldr	r3, [r7, #4]
	}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000ce4 	.word	0x20000ce4
 800764c:	20000d00 	.word	0x20000d00

08007650 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d051      	beq.n	800770a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766a:	4b2a      	ldr	r3, [pc, #168]	@ (8007714 <xTaskPriorityInherit+0xc4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	429a      	cmp	r2, r3
 8007672:	d241      	bcs.n	80076f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	db06      	blt.n	800768a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <xTaskPriorityInherit+0xc4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6959      	ldr	r1, [r3, #20]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <xTaskPriorityInherit+0xc8>)
 800769c:	4413      	add	r3, r2
 800769e:	4299      	cmp	r1, r3
 80076a0:	d122      	bne.n	80076e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fd ffec 	bl	8005684 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <xTaskPriorityInherit+0xc4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ba:	4b18      	ldr	r3, [pc, #96]	@ (800771c <xTaskPriorityInherit+0xcc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d903      	bls.n	80076ca <xTaskPriorityInherit+0x7a>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	4a15      	ldr	r2, [pc, #84]	@ (800771c <xTaskPriorityInherit+0xcc>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4a10      	ldr	r2, [pc, #64]	@ (8007718 <xTaskPriorityInherit+0xc8>)
 80076d8:	441a      	add	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3304      	adds	r3, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7fd ff72 	bl	80055ca <vListInsertEnd>
 80076e6:	e004      	b.n	80076f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <xTaskPriorityInherit+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e008      	b.n	800770a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076fc:	4b05      	ldr	r3, [pc, #20]	@ (8007714 <xTaskPriorityInherit+0xc4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	429a      	cmp	r2, r3
 8007704:	d201      	bcs.n	800770a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800770a:	68fb      	ldr	r3, [r7, #12]
	}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20000804 	.word	0x20000804
 8007718:	20000808 	.word	0x20000808
 800771c:	20000ce0 	.word	0x20000ce0

08007720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d058      	beq.n	80077e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <xTaskPriorityDisinherit+0xd4>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	429a      	cmp	r2, r3
 800773e:	d00b      	beq.n	8007758 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10b      	bne.n	8007778 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60bb      	str	r3, [r7, #8]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777c:	1e5a      	subs	r2, r3, #1
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778a:	429a      	cmp	r2, r3
 800778c:	d02c      	beq.n	80077e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	2b00      	cmp	r3, #0
 8007794:	d128      	bne.n	80077e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7fd ff72 	bl	8005684 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b8:	4b0f      	ldr	r3, [pc, #60]	@ (80077f8 <xTaskPriorityDisinherit+0xd8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d903      	bls.n	80077c8 <xTaskPriorityDisinherit+0xa8>
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <xTaskPriorityDisinherit+0xd8>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a09      	ldr	r2, [pc, #36]	@ (80077fc <xTaskPriorityDisinherit+0xdc>)
 80077d6:	441a      	add	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fd fef3 	bl	80055ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e8:	697b      	ldr	r3, [r7, #20]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000804 	.word	0x20000804
 80077f8:	20000ce0 	.word	0x20000ce0
 80077fc:	20000808 	.word	0x20000808

08007800 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800780e:	2301      	movs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d06c      	beq.n	80078f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10b      	bne.n	8007838 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	e7fd      	b.n	8007834 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d902      	bls.n	8007848 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e002      	b.n	800784e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	429a      	cmp	r2, r3
 8007856:	d04c      	beq.n	80078f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	429a      	cmp	r2, r3
 8007860:	d147      	bne.n	80078f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007862:	4b26      	ldr	r3, [pc, #152]	@ (80078fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	429a      	cmp	r2, r3
 800786a:	d10b      	bne.n	8007884 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60bb      	str	r3, [r7, #8]
}
 800787e:	bf00      	nop
 8007880:	bf00      	nop
 8007882:	e7fd      	b.n	8007880 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	db04      	blt.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	6959      	ldr	r1, [r3, #20]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a13      	ldr	r2, [pc, #76]	@ (8007900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078b2:	4413      	add	r3, r2
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d11c      	bne.n	80078f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd fee1 	bl	8005684 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007904 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a07      	ldr	r2, [pc, #28]	@ (8007900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80078e4:	441a      	add	r2, r3
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fd fe6c 	bl	80055ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078f2:	bf00      	nop
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000804 	.word	0x20000804
 8007900:	20000808 	.word	0x20000808
 8007904:	20000ce0 	.word	0x20000ce0

08007908 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800790c:	4b07      	ldr	r3, [pc, #28]	@ (800792c <pvTaskIncrementMutexHeldCount+0x24>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <pvTaskIncrementMutexHeldCount+0x24>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800791a:	3201      	adds	r2, #1
 800791c:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800791e:	4b03      	ldr	r3, [pc, #12]	@ (800792c <pvTaskIncrementMutexHeldCount+0x24>)
 8007920:	681b      	ldr	r3, [r3, #0]
	}
 8007922:	4618      	mov	r0, r3
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000804 	.word	0x20000804

08007930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800793a:	4b21      	ldr	r3, [pc, #132]	@ (80079c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007940:	4b20      	ldr	r3, [pc, #128]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3304      	adds	r3, #4
 8007946:	4618      	mov	r0, r3
 8007948:	f7fd fe9c 	bl	8005684 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d10a      	bne.n	800796a <prvAddCurrentTaskToDelayedList+0x3a>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800795a:	4b1a      	ldr	r3, [pc, #104]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4819      	ldr	r0, [pc, #100]	@ (80079c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007964:	f7fd fe31 	bl	80055ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007968:	e026      	b.n	80079b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007972:	4b14      	ldr	r3, [pc, #80]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	429a      	cmp	r2, r3
 8007980:	d209      	bcs.n	8007996 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007982:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7fd fe3f 	bl	8005612 <vListInsert>
}
 8007994:	e010      	b.n	80079b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007996:	4b0e      	ldr	r3, [pc, #56]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b0a      	ldr	r3, [pc, #40]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fd fe35 	bl	8005612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079a8:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d202      	bcs.n	80079b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079b2:	4a08      	ldr	r2, [pc, #32]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6013      	str	r3, [r2, #0]
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000cdc 	.word	0x20000cdc
 80079c4:	20000804 	.word	0x20000804
 80079c8:	20000cc4 	.word	0x20000cc4
 80079cc:	20000c94 	.word	0x20000c94
 80079d0:	20000c90 	.word	0x20000c90
 80079d4:	20000cf8 	.word	0x20000cf8

080079d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	@ 0x28
 80079dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079e2:	f000 fb13 	bl	800800c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079e6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a5c <xTimerCreateTimerTask+0x84>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d021      	beq.n	8007a32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079f6:	1d3a      	adds	r2, r7, #4
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	f107 030c 	add.w	r3, r7, #12
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fd fd9b 	bl	800553c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	9202      	str	r2, [sp, #8]
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	2302      	movs	r3, #2
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	460a      	mov	r2, r1
 8007a18:	4911      	ldr	r1, [pc, #68]	@ (8007a60 <xTimerCreateTimerTask+0x88>)
 8007a1a:	4812      	ldr	r0, [pc, #72]	@ (8007a64 <xTimerCreateTimerTask+0x8c>)
 8007a1c:	f7fe ff7e 	bl	800691c <xTaskCreateStatic>
 8007a20:	4603      	mov	r3, r0
 8007a22:	4a11      	ldr	r2, [pc, #68]	@ (8007a68 <xTimerCreateTimerTask+0x90>)
 8007a24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a26:	4b10      	ldr	r3, [pc, #64]	@ (8007a68 <xTimerCreateTimerTask+0x90>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10b      	bne.n	8007a50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	613b      	str	r3, [r7, #16]
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	e7fd      	b.n	8007a4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a50:	697b      	ldr	r3, [r7, #20]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000d34 	.word	0x20000d34
 8007a60:	08018514 	.word	0x08018514
 8007a64:	08007ba5 	.word	0x08007ba5
 8007a68:	20000d38 	.word	0x20000d38

08007a6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	@ 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <xTimerGenericCommand+0x30>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a9c:	4b19      	ldr	r3, [pc, #100]	@ (8007b04 <xTimerGenericCommand+0x98>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02a      	beq.n	8007afa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	dc18      	bgt.n	8007ae8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ab6:	f7ff fdad 	bl	8007614 <xTaskGetSchedulerState>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d109      	bne.n	8007ad4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ac0:	4b10      	ldr	r3, [pc, #64]	@ (8007b04 <xTimerGenericCommand+0x98>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	f107 0110 	add.w	r1, r7, #16
 8007ac8:	2300      	movs	r3, #0
 8007aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007acc:	f7fe f870 	bl	8005bb0 <xQueueGenericSend>
 8007ad0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ad2:	e012      	b.n	8007afa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b04 <xTimerGenericCommand+0x98>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	f107 0110 	add.w	r1, r7, #16
 8007adc:	2300      	movs	r3, #0
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f7fe f866 	bl	8005bb0 <xQueueGenericSend>
 8007ae4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ae6:	e008      	b.n	8007afa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ae8:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <xTimerGenericCommand+0x98>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	f107 0110 	add.w	r1, r7, #16
 8007af0:	2300      	movs	r3, #0
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	f7fe f95e 	bl	8005db4 <xQueueGenericSendFromISR>
 8007af8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3728      	adds	r7, #40	@ 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000d34 	.word	0x20000d34

08007b08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b12:	4b23      	ldr	r3, [pc, #140]	@ (8007ba0 <prvProcessExpiredTimer+0x98>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fdaf 	bl	8005684 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d023      	beq.n	8007b7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	18d1      	adds	r1, r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	6978      	ldr	r0, [r7, #20]
 8007b42:	f000 f8d5 	bl	8007cf0 <prvInsertTimerInActiveList>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d020      	beq.n	8007b8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	2100      	movs	r1, #0
 8007b56:	6978      	ldr	r0, [r7, #20]
 8007b58:	f7ff ff88 	bl	8007a6c <xTimerGenericCommand>
 8007b5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d114      	bne.n	8007b8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	6978      	ldr	r0, [r7, #20]
 8007b94:	4798      	blx	r3
}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	20000d2c 	.word	0x20000d2c

08007ba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bac:	f107 0308 	add.w	r3, r7, #8
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f859 	bl	8007c68 <prvGetNextExpireTime>
 8007bb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f805 	bl	8007bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bc2:	f000 f8d7 	bl	8007d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bc6:	bf00      	nop
 8007bc8:	e7f0      	b.n	8007bac <prvTimerTask+0x8>
	...

08007bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bd6:	f7ff f907 	bl	8006de8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f866 	bl	8007cb0 <prvSampleTimeNow>
 8007be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d130      	bne.n	8007c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <prvProcessTimerOrBlockTask+0x3c>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d806      	bhi.n	8007c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bfa:	f7ff f903 	bl	8006e04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff81 	bl	8007b08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c06:	e024      	b.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c0e:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <prvProcessTimerOrBlockTask+0x90>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <prvProcessTimerOrBlockTask+0x50>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <prvProcessTimerOrBlockTask+0x52>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c20:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <prvProcessTimerOrBlockTask+0x94>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7fe fe41 	bl	80068b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c32:	f7ff f8e7 	bl	8006e04 <xTaskResumeAll>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c3c:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <prvProcessTimerOrBlockTask+0x98>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
}
 8007c4c:	e001      	b.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c4e:	f7ff f8d9 	bl	8006e04 <xTaskResumeAll>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000d30 	.word	0x20000d30
 8007c60:	20000d34 	.word	0x20000d34
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c70:	4b0e      	ldr	r3, [pc, #56]	@ (8007cac <prvGetNextExpireTime+0x44>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <prvGetNextExpireTime+0x16>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	e000      	b.n	8007c80 <prvGetNextExpireTime+0x18>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <prvGetNextExpireTime+0x44>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e001      	b.n	8007c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20000d2c 	.word	0x20000d2c

08007cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cb8:	f7ff f942 	bl	8006f40 <xTaskGetTickCount>
 8007cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <prvSampleTimeNow+0x3c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d205      	bcs.n	8007cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cc8:	f000 f93a 	bl	8007f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e002      	b.n	8007cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cda:	4a04      	ldr	r2, [pc, #16]	@ (8007cec <prvSampleTimeNow+0x3c>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000d3c 	.word	0x20000d3c

08007cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d812      	bhi.n	8007d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e01b      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d2a:	4b10      	ldr	r3, [pc, #64]	@ (8007d6c <prvInsertTimerInActiveList+0x7c>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f7fd fc6c 	bl	8005612 <vListInsert>
 8007d3a:	e012      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d206      	bcs.n	8007d52 <prvInsertTimerInActiveList+0x62>
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e007      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d52:	4b07      	ldr	r3, [pc, #28]	@ (8007d70 <prvInsertTimerInActiveList+0x80>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fd fc58 	bl	8005612 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000d30 	.word	0x20000d30
 8007d70:	20000d2c 	.word	0x20000d2c

08007d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	@ 0x38
 8007d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d7a:	e0ce      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da19      	bge.n	8007db6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	3304      	adds	r3, #4
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	61fb      	str	r3, [r7, #28]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dac:	6850      	ldr	r0, [r2, #4]
 8007dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db0:	6892      	ldr	r2, [r2, #8]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f2c0 80ae 	blt.w	8007f1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd fc58 	bl	8005684 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ff6a 	bl	8007cb0 <prvSampleTimeNow>
 8007ddc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b09      	cmp	r3, #9
 8007de2:	f200 8097 	bhi.w	8007f14 <prvProcessReceivedCommands+0x1a0>
 8007de6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <prvProcessReceivedCommands+0x78>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e15 	.word	0x08007e15
 8007df8:	08007e8b 	.word	0x08007e8b
 8007dfc:	08007e9f 	.word	0x08007e9f
 8007e00:	08007eeb 	.word	0x08007eeb
 8007e04:	08007e15 	.word	0x08007e15
 8007e08:	08007e15 	.word	0x08007e15
 8007e0c:	08007e8b 	.word	0x08007e8b
 8007e10:	08007e9f 	.word	0x08007e9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e1a:	f043 0301 	orr.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	18d1      	adds	r1, r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e34:	f7ff ff5c 	bl	8007cf0 <prvInsertTimerInActiveList>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d06c      	beq.n	8007f18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d061      	beq.n	8007f18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	441a      	add	r2, r3
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	2100      	movs	r1, #0
 8007e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e66:	f7ff fe01 	bl	8007a6c <xTimerGenericCommand>
 8007e6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d152      	bne.n	8007f18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	61bb      	str	r3, [r7, #24]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e9c:	e03d      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ea4:	f043 0301 	orr.w	r3, r3, #1
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	617b      	str	r3, [r7, #20]
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	e7fd      	b.n	8007ed2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	18d1      	adds	r1, r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ee4:	f7ff ff04 	bl	8007cf0 <prvInsertTimerInActiveList>
					break;
 8007ee8:	e017      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ef8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007efa:	f000 fbe5 	bl	80086c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007efe:	e00c      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f12:	e002      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f14:	bf00      	nop
 8007f16:	e000      	b.n	8007f1a <prvProcessReceivedCommands+0x1a6>
					break;
 8007f18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f1a:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <prvProcessReceivedCommands+0x1c8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	1d39      	adds	r1, r7, #4
 8007f20:	2200      	movs	r2, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe f874 	bl	8006010 <xQueueReceive>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f47f af26 	bne.w	8007d7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	3730      	adds	r7, #48	@ 0x30
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000d34 	.word	0x20000d34

08007f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f46:	e049      	b.n	8007fdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f48:	4b2e      	ldr	r3, [pc, #184]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f52:	4b2c      	ldr	r3, [pc, #176]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fd fb8f 	bl	8005684 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d02f      	beq.n	8007fdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4413      	add	r3, r2
 8007f84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d90e      	bls.n	8007fac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f7fd fb34 	bl	8005612 <vListInsert>
 8007faa:	e017      	b.n	8007fdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fac:	2300      	movs	r3, #0
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff fd58 	bl	8007a6c <xTimerGenericCommand>
 8007fbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	603b      	str	r3, [r7, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1b0      	bne.n	8007f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fe6:	4b07      	ldr	r3, [pc, #28]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fec:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <prvSwitchTimerLists+0xc8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a04      	ldr	r2, [pc, #16]	@ (8008004 <prvSwitchTimerLists+0xc4>)
 8007ff2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ff4:	4a04      	ldr	r2, [pc, #16]	@ (8008008 <prvSwitchTimerLists+0xc8>)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	6013      	str	r3, [r2, #0]
}
 8007ffa:	bf00      	nop
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000d2c 	.word	0x20000d2c
 8008008:	20000d30 	.word	0x20000d30

0800800c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008012:	f000 f969 	bl	80082e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <prvCheckForValidListAndQueue+0x60>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d120      	bne.n	8008060 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800801e:	4814      	ldr	r0, [pc, #80]	@ (8008070 <prvCheckForValidListAndQueue+0x64>)
 8008020:	f7fd faa6 	bl	8005570 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008024:	4813      	ldr	r0, [pc, #76]	@ (8008074 <prvCheckForValidListAndQueue+0x68>)
 8008026:	f7fd faa3 	bl	8005570 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800802a:	4b13      	ldr	r3, [pc, #76]	@ (8008078 <prvCheckForValidListAndQueue+0x6c>)
 800802c:	4a10      	ldr	r2, [pc, #64]	@ (8008070 <prvCheckForValidListAndQueue+0x64>)
 800802e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008030:	4b12      	ldr	r3, [pc, #72]	@ (800807c <prvCheckForValidListAndQueue+0x70>)
 8008032:	4a10      	ldr	r2, [pc, #64]	@ (8008074 <prvCheckForValidListAndQueue+0x68>)
 8008034:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008036:	2300      	movs	r3, #0
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	4b11      	ldr	r3, [pc, #68]	@ (8008080 <prvCheckForValidListAndQueue+0x74>)
 800803c:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <prvCheckForValidListAndQueue+0x78>)
 800803e:	2110      	movs	r1, #16
 8008040:	200a      	movs	r0, #10
 8008042:	f7fd fbb3 	bl	80057ac <xQueueGenericCreateStatic>
 8008046:	4603      	mov	r3, r0
 8008048:	4a08      	ldr	r2, [pc, #32]	@ (800806c <prvCheckForValidListAndQueue+0x60>)
 800804a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <prvCheckForValidListAndQueue+0x60>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <prvCheckForValidListAndQueue+0x60>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	490b      	ldr	r1, [pc, #44]	@ (8008088 <prvCheckForValidListAndQueue+0x7c>)
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fbd6 	bl	800680c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008060:	f000 f974 	bl	800834c <vPortExitCritical>
}
 8008064:	bf00      	nop
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000d34 	.word	0x20000d34
 8008070:	20000d04 	.word	0x20000d04
 8008074:	20000d18 	.word	0x20000d18
 8008078:	20000d2c 	.word	0x20000d2c
 800807c:	20000d30 	.word	0x20000d30
 8008080:	20000de0 	.word	0x20000de0
 8008084:	20000d40 	.word	0x20000d40
 8008088:	0801851c 	.word	0x0801851c

0800808c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3b04      	subs	r3, #4
 800809c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b04      	subs	r3, #4
 80080aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f023 0201 	bic.w	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080bc:	4a0c      	ldr	r2, [pc, #48]	@ (80080f0 <pxPortInitialiseStack+0x64>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b14      	subs	r3, #20
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f06f 0202 	mvn.w	r2, #2
 80080da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3b20      	subs	r3, #32
 80080e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	080080f5 	.word	0x080080f5

080080f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080fe:	4b13      	ldr	r3, [pc, #76]	@ (800814c <prvTaskExitError+0x58>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d00b      	beq.n	8008120 <prvTaskExitError+0x2c>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <prvTaskExitError+0x28>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	60bb      	str	r3, [r7, #8]
}
 8008132:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008134:	bf00      	nop
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0fc      	beq.n	8008136 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	2000000c 	.word	0x2000000c

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	@ (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081a6:	4b47      	ldr	r3, [pc, #284]	@ (80082c4 <xPortStartScheduler+0x124>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a47      	ldr	r2, [pc, #284]	@ (80082c8 <xPortStartScheduler+0x128>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10b      	bne.n	80081c8 <xPortStartScheduler+0x28>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081c8:	4b3e      	ldr	r3, [pc, #248]	@ (80082c4 <xPortStartScheduler+0x124>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3f      	ldr	r2, [pc, #252]	@ (80082cc <xPortStartScheduler+0x12c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10b      	bne.n	80081ea <xPortStartScheduler+0x4a>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60fb      	str	r3, [r7, #12]
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081ea:	4b39      	ldr	r3, [pc, #228]	@ (80082d0 <xPortStartScheduler+0x130>)
 80081ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	22ff      	movs	r2, #255	@ 0xff
 80081fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <xPortStartScheduler+0x134>)
 8008210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008214:	2207      	movs	r2, #7
 8008216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008218:	e009      	b.n	800822e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800821a:	4b2f      	ldr	r3, [pc, #188]	@ (80082d8 <xPortStartScheduler+0x138>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3b01      	subs	r3, #1
 8008220:	4a2d      	ldr	r2, [pc, #180]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	b2db      	uxtb	r3, r3
 800822c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b80      	cmp	r3, #128	@ 0x80
 8008238:	d0ef      	beq.n	800821a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800823a:	4b27      	ldr	r3, [pc, #156]	@ (80082d8 <xPortStartScheduler+0x138>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1c3 0307 	rsb	r3, r3, #7
 8008242:	2b04      	cmp	r3, #4
 8008244:	d00b      	beq.n	800825e <xPortStartScheduler+0xbe>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60bb      	str	r3, [r7, #8]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800825e:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008268:	4b1b      	ldr	r3, [pc, #108]	@ (80082d8 <xPortStartScheduler+0x138>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008270:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800827c:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <xPortStartScheduler+0x13c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <xPortStartScheduler+0x13c>)
 8008282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008288:	4b14      	ldr	r3, [pc, #80]	@ (80082dc <xPortStartScheduler+0x13c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a13      	ldr	r2, [pc, #76]	@ (80082dc <xPortStartScheduler+0x13c>)
 800828e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008294:	f000 f8da 	bl	800844c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <xPortStartScheduler+0x140>)
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800829e:	f000 f8f9 	bl	8008494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082a2:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <xPortStartScheduler+0x144>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a0f      	ldr	r2, [pc, #60]	@ (80082e4 <xPortStartScheduler+0x144>)
 80082a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ae:	f7ff ff63 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082b2:	f7fe ff21 	bl	80070f8 <vTaskSwitchContext>
	prvTaskExitError();
 80082b6:	f7ff ff1d 	bl	80080f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	e000ed00 	.word	0xe000ed00
 80082c8:	410fc271 	.word	0x410fc271
 80082cc:	410fc270 	.word	0x410fc270
 80082d0:	e000e400 	.word	0xe000e400
 80082d4:	20000e30 	.word	0x20000e30
 80082d8:	20000e34 	.word	0x20000e34
 80082dc:	e000ed20 	.word	0xe000ed20
 80082e0:	2000000c 	.word	0x2000000c
 80082e4:	e000ef34 	.word	0xe000ef34

080082e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <vPortEnterCritical+0x5c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	4a0e      	ldr	r2, [pc, #56]	@ (8008344 <vPortEnterCritical+0x5c>)
 800830a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <vPortEnterCritical+0x5c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d110      	bne.n	8008336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <vPortEnterCritical+0x60>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <vPortEnterCritical+0x4e>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	603b      	str	r3, [r7, #0]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <vPortEnterCritical+0x4a>
	}
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	2000000c 	.word	0x2000000c
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <vPortExitCritical+0x50>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <vPortExitCritical+0x26>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3b01      	subs	r3, #1
 8008378:	4a08      	ldr	r2, [pc, #32]	@ (800839c <vPortExitCritical+0x50>)
 800837a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <vPortExitCritical+0x50>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <vPortExitCritical+0x44>
 8008384:	2300      	movs	r3, #0
 8008386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000000c 	.word	0x2000000c

080083a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083a0:	f3ef 8009 	mrs	r0, PSP
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4b15      	ldr	r3, [pc, #84]	@ (8008400 <pxCurrentTCBConst>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f01e 0f10 	tst.w	lr, #16
 80083b0:	bf08      	it	eq
 80083b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083c4:	f380 8811 	msr	BASEPRI, r0
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f7fe fe92 	bl	80070f8 <vTaskSwitchContext>
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f380 8811 	msr	BASEPRI, r0
 80083dc:	bc09      	pop	{r0, r3}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f01e 0f10 	tst.w	lr, #16
 80083ea:	bf08      	it	eq
 80083ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083f0:	f380 8809 	msr	PSP, r0
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst>:
 8008400:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008422:	f7fe fdaf 	bl	8006f84 <xTaskIncrementTick>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <xPortSysTickHandler+0x40>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f383 8811 	msr	BASEPRI, r3
}
 800843e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <vPortSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <vPortSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	@ (800848c <vPortSetupTimerInterrupt+0x40>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	4a09      	ldr	r2, [pc, #36]	@ (8008490 <vPortSetupTimerInterrupt+0x44>)
 800846a:	3b01      	subs	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800846e:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000000 	.word	0x20000000
 800848c:	10624dd3 	.word	0x10624dd3
 8008490:	e000e014 	.word	0xe000e014

08008494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084a4 <vPortEnableVFP+0x10>
 8008498:	6801      	ldr	r1, [r0, #0]
 800849a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800849e:	6001      	str	r1, [r0, #0]
 80084a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084a2:	bf00      	nop
 80084a4:	e000ed88 	.word	0xe000ed88

080084a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	d915      	bls.n	80084e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ba:	4a18      	ldr	r2, [pc, #96]	@ (800851c <vPortValidateInterruptPriority+0x74>)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084c4:	4b16      	ldr	r3, [pc, #88]	@ (8008520 <vPortValidateInterruptPriority+0x78>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	7afa      	ldrb	r2, [r7, #11]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d20b      	bcs.n	80084e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008524 <vPortValidateInterruptPriority+0x7c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008528 <vPortValidateInterruptPriority+0x80>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90b      	bls.n	800850e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	603b      	str	r3, [r7, #0]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vPortValidateInterruptPriority+0x62>
	}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	e000e3f0 	.word	0xe000e3f0
 8008520:	20000e30 	.word	0x20000e30
 8008524:	e000ed0c 	.word	0xe000ed0c
 8008528:	20000e34 	.word	0x20000e34

0800852c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	@ 0x28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008538:	f7fe fc56 	bl	8006de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800853c:	4b5c      	ldr	r3, [pc, #368]	@ (80086b0 <pvPortMalloc+0x184>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008544:	f000 f924 	bl	8008790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008548:	4b5a      	ldr	r3, [pc, #360]	@ (80086b4 <pvPortMalloc+0x188>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 8095 	bne.w	8008680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01e      	beq.n	800859a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800855c:	2208      	movs	r2, #8
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d015      	beq.n	800859a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f023 0307 	bic.w	r3, r3, #7
 8008574:	3308      	adds	r3, #8
 8008576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <pvPortMalloc+0x6e>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	617b      	str	r3, [r7, #20]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d06f      	beq.n	8008680 <pvPortMalloc+0x154>
 80085a0:	4b45      	ldr	r3, [pc, #276]	@ (80086b8 <pvPortMalloc+0x18c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d86a      	bhi.n	8008680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085aa:	4b44      	ldr	r3, [pc, #272]	@ (80086bc <pvPortMalloc+0x190>)
 80085ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ae:	4b43      	ldr	r3, [pc, #268]	@ (80086bc <pvPortMalloc+0x190>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085b4:	e004      	b.n	80085c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d903      	bls.n	80085d2 <pvPortMalloc+0xa6>
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f1      	bne.n	80085b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085d2:	4b37      	ldr	r3, [pc, #220]	@ (80086b0 <pvPortMalloc+0x184>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d8:	429a      	cmp	r2, r3
 80085da:	d051      	beq.n	8008680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2208      	movs	r2, #8
 80085e2:	4413      	add	r3, r2
 80085e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	2308      	movs	r3, #8
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d920      	bls.n	8008640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4413      	add	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <pvPortMalloc+0xfc>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800863a:	69b8      	ldr	r0, [r7, #24]
 800863c:	f000 f90a 	bl	8008854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008640:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <pvPortMalloc+0x18c>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <pvPortMalloc+0x18c>)
 800864c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800864e:	4b1a      	ldr	r3, [pc, #104]	@ (80086b8 <pvPortMalloc+0x18c>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b1b      	ldr	r3, [pc, #108]	@ (80086c0 <pvPortMalloc+0x194>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d203      	bcs.n	8008662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800865a:	4b17      	ldr	r3, [pc, #92]	@ (80086b8 <pvPortMalloc+0x18c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a18      	ldr	r2, [pc, #96]	@ (80086c0 <pvPortMalloc+0x194>)
 8008660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <pvPortMalloc+0x188>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	431a      	orrs	r2, r3
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008676:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <pvPortMalloc+0x198>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	4a11      	ldr	r2, [pc, #68]	@ (80086c4 <pvPortMalloc+0x198>)
 800867e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008680:	f7fe fbc0 	bl	8006e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <pvPortMalloc+0x17a>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	e7fd      	b.n	80086a2 <pvPortMalloc+0x176>
	return pvReturn;
 80086a6:	69fb      	ldr	r3, [r7, #28]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3728      	adds	r7, #40	@ 0x28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20004a40 	.word	0x20004a40
 80086b4:	20004a54 	.word	0x20004a54
 80086b8:	20004a44 	.word	0x20004a44
 80086bc:	20004a38 	.word	0x20004a38
 80086c0:	20004a48 	.word	0x20004a48
 80086c4:	20004a4c 	.word	0x20004a4c

080086c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d04f      	beq.n	800877a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086da:	2308      	movs	r3, #8
 80086dc:	425b      	negs	r3, r3
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4413      	add	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	4b25      	ldr	r3, [pc, #148]	@ (8008784 <vPortFree+0xbc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4013      	ands	r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <vPortFree+0x46>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00b      	beq.n	800872e <vPortFree+0x66>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	4b14      	ldr	r3, [pc, #80]	@ (8008784 <vPortFree+0xbc>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4013      	ands	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01e      	beq.n	800877a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11a      	bne.n	800877a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <vPortFree+0xbc>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	43db      	mvns	r3, r3
 800874e:	401a      	ands	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008754:	f7fe fb48 	bl	8006de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <vPortFree+0xc0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4413      	add	r3, r2
 8008762:	4a09      	ldr	r2, [pc, #36]	@ (8008788 <vPortFree+0xc0>)
 8008764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008766:	6938      	ldr	r0, [r7, #16]
 8008768:	f000 f874 	bl	8008854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <vPortFree+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3301      	adds	r3, #1
 8008772:	4a06      	ldr	r2, [pc, #24]	@ (800878c <vPortFree+0xc4>)
 8008774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008776:	f7fe fb45 	bl	8006e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800877a:	bf00      	nop
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20004a54 	.word	0x20004a54
 8008788:	20004a44 	.word	0x20004a44
 800878c:	20004a50 	.word	0x20004a50

08008790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800879a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800879c:	4b27      	ldr	r3, [pc, #156]	@ (800883c <prvHeapInit+0xac>)
 800879e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3307      	adds	r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	4a1f      	ldr	r2, [pc, #124]	@ (800883c <prvHeapInit+0xac>)
 80087c0:	4413      	add	r3, r2
 80087c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008840 <prvHeapInit+0xb0>)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <prvHeapInit+0xb0>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087dc:	2208      	movs	r2, #8
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4a15      	ldr	r2, [pc, #84]	@ (8008844 <prvHeapInit+0xb4>)
 80087f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <prvHeapInit+0xb4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087fa:	4b12      	ldr	r3, [pc, #72]	@ (8008844 <prvHeapInit+0xb4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <prvHeapInit+0xb4>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a0a      	ldr	r2, [pc, #40]	@ (8008848 <prvHeapInit+0xb8>)
 800881e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4a09      	ldr	r2, [pc, #36]	@ (800884c <prvHeapInit+0xbc>)
 8008826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008828:	4b09      	ldr	r3, [pc, #36]	@ (8008850 <prvHeapInit+0xc0>)
 800882a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	20000e38 	.word	0x20000e38
 8008840:	20004a38 	.word	0x20004a38
 8008844:	20004a40 	.word	0x20004a40
 8008848:	20004a48 	.word	0x20004a48
 800884c:	20004a44 	.word	0x20004a44
 8008850:	20004a54 	.word	0x20004a54

08008854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800885c:	4b28      	ldr	r3, [pc, #160]	@ (8008900 <prvInsertBlockIntoFreeList+0xac>)
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e002      	b.n	8008868 <prvInsertBlockIntoFreeList+0x14>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d8f7      	bhi.n	8008862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4413      	add	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d108      	bne.n	8008896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	441a      	add	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d118      	bne.n	80088dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <prvInsertBlockIntoFreeList+0xb0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d00d      	beq.n	80088d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e008      	b.n	80088e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <prvInsertBlockIntoFreeList+0xb0>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e003      	b.n	80088e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d002      	beq.n	80088f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f2:	bf00      	nop
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20004a38 	.word	0x20004a38
 8008904:	20004a40 	.word	0x20004a40

08008908 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	22fa      	movs	r2, #250	@ 0xfa
 8008916:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	461a      	mov	r2, r3
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fed6 	bl	800a6d4 <tcpip_send_msg_wait_sem>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800892c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d103      	bne.n	800893c <netconn_apimsg+0x34>
    return apimsg->err;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800893a:	e001      	b.n	8008940 <netconn_apimsg+0x38>
  }
  return err;
 800893c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08c      	sub	sp, #48	@ 0x30
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	603a      	str	r2, [r7, #0]
 8008952:	71fb      	strb	r3, [r7, #7]
 8008954:	460b      	mov	r3, r1
 8008956:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fd9b 	bl	8009498 <netconn_alloc>
 8008962:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d054      	beq.n	8008a14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800896a:	79bb      	ldrb	r3, [r7, #6]
 800896c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008972:	f107 0308 	add.w	r3, r7, #8
 8008976:	4619      	mov	r1, r3
 8008978:	4829      	ldr	r0, [pc, #164]	@ (8008a20 <netconn_new_with_proto_and_callback+0xd8>)
 800897a:	f7ff ffc5 	bl	8008908 <netconn_apimsg>
 800897e:	4603      	mov	r3, r0
 8008980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008984:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008988:	2b00      	cmp	r3, #0
 800898a:	d043      	beq.n	8008a14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <netconn_new_with_proto_and_callback+0x58>
 8008994:	4b23      	ldr	r3, [pc, #140]	@ (8008a24 <netconn_new_with_proto_and_callback+0xdc>)
 8008996:	22a3      	movs	r2, #163	@ 0xa3
 8008998:	4923      	ldr	r1, [pc, #140]	@ (8008a28 <netconn_new_with_proto_and_callback+0xe0>)
 800899a:	4824      	ldr	r0, [pc, #144]	@ (8008a2c <netconn_new_with_proto_and_callback+0xe4>)
 800899c:	f7f8 f97a 	bl	8000c94 <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a2:	3310      	adds	r3, #16
 80089a4:	4618      	mov	r0, r3
 80089a6:	f00e fb75 	bl	8017094 <sys_mbox_valid>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d105      	bne.n	80089bc <netconn_new_with_proto_and_callback+0x74>
 80089b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a24 <netconn_new_with_proto_and_callback+0xdc>)
 80089b2:	22a4      	movs	r2, #164	@ 0xa4
 80089b4:	491e      	ldr	r1, [pc, #120]	@ (8008a30 <netconn_new_with_proto_and_callback+0xe8>)
 80089b6:	481d      	ldr	r0, [pc, #116]	@ (8008a2c <netconn_new_with_proto_and_callback+0xe4>)
 80089b8:	f7f8 f96c 	bl	8000c94 <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80089bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089be:	3314      	adds	r3, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00e fb67 	bl	8017094 <sys_mbox_valid>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <netconn_new_with_proto_and_callback+0x90>
 80089cc:	4b15      	ldr	r3, [pc, #84]	@ (8008a24 <netconn_new_with_proto_and_callback+0xdc>)
 80089ce:	22a6      	movs	r2, #166	@ 0xa6
 80089d0:	4918      	ldr	r1, [pc, #96]	@ (8008a34 <netconn_new_with_proto_and_callback+0xec>)
 80089d2:	4816      	ldr	r0, [pc, #88]	@ (8008a2c <netconn_new_with_proto_and_callback+0xe4>)
 80089d4:	f7f8 f95e 	bl	8000c94 <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	330c      	adds	r3, #12
 80089dc:	4618      	mov	r0, r3
 80089de:	f00e fbe7 	bl	80171b0 <sys_sem_valid>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d105      	bne.n	80089f4 <netconn_new_with_proto_and_callback+0xac>
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <netconn_new_with_proto_and_callback+0xdc>)
 80089ea:	22a9      	movs	r2, #169	@ 0xa9
 80089ec:	4912      	ldr	r1, [pc, #72]	@ (8008a38 <netconn_new_with_proto_and_callback+0xf0>)
 80089ee:	480f      	ldr	r0, [pc, #60]	@ (8008a2c <netconn_new_with_proto_and_callback+0xe4>)
 80089f0:	f7f8 f950 	bl	8000c94 <printf>
      sys_sem_free(&conn->op_completed);
 80089f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f6:	330c      	adds	r3, #12
 80089f8:	4618      	mov	r0, r3
 80089fa:	f00e fbcc 	bl	8017196 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	3310      	adds	r3, #16
 8008a02:	4618      	mov	r0, r3
 8008a04:	f00e fabc 	bl	8016f80 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a0a:	2007      	movs	r0, #7
 8008a0c:	f002 fd0e 	bl	800b42c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	e000      	b.n	8008a16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3730      	adds	r7, #48	@ 0x30
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	0800946d 	.word	0x0800946d
 8008a24:	08018524 	.word	0x08018524
 8008a28:	08018554 	.word	0x08018554
 8008a2c:	08018578 	.word	0x08018578
 8008a30:	080185a0 	.word	0x080185a0
 8008a34:	080185b8 	.word	0x080185b8
 8008a38:	080185dc 	.word	0x080185dc

08008a3c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08c      	sub	sp, #48	@ 0x30
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	e014      	b.n	8008a78 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60fb      	str	r3, [r7, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a52:	2329      	movs	r3, #41	@ 0x29
 8008a54:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a56:	f107 030c 	add.w	r3, r7, #12
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4808      	ldr	r0, [pc, #32]	@ (8008a80 <netconn_prepare_delete+0x44>)
 8008a5e:	f7ff ff53 	bl	8008908 <netconn_apimsg>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008a68:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <netconn_prepare_delete+0x3a>
    return err;
 8008a70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008a74:	e000      	b.n	8008a78 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3730      	adds	r7, #48	@ 0x30
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	080099d1 	.word	0x080099d1

08008a84 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <netconn_delete+0x12>
    return ERR_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e00d      	b.n	8008ab2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff ffd0 	bl	8008a3c <netconn_prepare_delete>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <netconn_delete+0x2a>
    netconn_free(conn);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fd5f 	bl	800956c <netconn_free>
  }
  return err;
 8008aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	@ 0x38
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d105      	bne.n	8008adc <netconn_connect+0x20>
 8008ad0:	480f      	ldr	r0, [pc, #60]	@ (8008b10 <netconn_connect+0x54>)
 8008ad2:	f7f8 f8df 	bl	8000c94 <printf>
 8008ad6:	f06f 030f 	mvn.w	r3, #15
 8008ada:	e015      	b.n	8008b08 <netconn_connect+0x4c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <netconn_connect+0x2a>
    addr = IP4_ADDR_ANY;
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <netconn_connect+0x58>)
 8008ae4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	4619      	mov	r1, r3
 8008af8:	4807      	ldr	r0, [pc, #28]	@ (8008b18 <netconn_connect+0x5c>)
 8008afa:	f7ff ff05 	bl	8008908 <netconn_apimsg>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3738      	adds	r7, #56	@ 0x38
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	08018694 	.word	0x08018694
 8008b14:	0801bd9c 	.word	0x0801bd9c
 8008b18:	08009cb9 	.word	0x08009cb9

08008b1c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af02      	add	r7, sp, #8
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	f107 0110 	add.w	r1, r7, #16
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	2201      	movs	r2, #1
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 f805 	bl	8008b50 <netconn_write_vectors_partly>
 8008b46:	4603      	mov	r3, r0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b092      	sub	sp, #72	@ 0x48
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	460b      	mov	r3, r1
 8008b60:	80fb      	strh	r3, [r7, #6]
 8008b62:	4613      	mov	r3, r2
 8008b64:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <netconn_write_vectors_partly+0x28>
 8008b6c:	484a      	ldr	r0, [pc, #296]	@ (8008c98 <netconn_write_vectors_partly+0x148>)
 8008b6e:	f7f8 f891 	bl	8000c94 <printf>
 8008b72:	f06f 030f 	mvn.w	r3, #15
 8008b76:	e08a      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b80:	2b10      	cmp	r3, #16
 8008b82:	d005      	beq.n	8008b90 <netconn_write_vectors_partly+0x40>
 8008b84:	4845      	ldr	r0, [pc, #276]	@ (8008c9c <netconn_write_vectors_partly+0x14c>)
 8008b86:	f7f8 f885 	bl	8000c94 <printf>
 8008b8a:	f06f 0305 	mvn.w	r3, #5
 8008b8e:	e07e      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	7e1b      	ldrb	r3, [r3, #24]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <netconn_write_vectors_partly+0x56>
 8008b9c:	797b      	ldrb	r3, [r7, #5]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <netconn_write_vectors_partly+0x5a>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <netconn_write_vectors_partly+0x5c>
 8008baa:	2300      	movs	r3, #0
 8008bac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008bb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <netconn_write_vectors_partly+0x74>
 8008bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <netconn_write_vectors_partly+0x74>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008bbe:	f06f 0305 	mvn.w	r3, #5
 8008bc2:	e064      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
  }

  /* sum up the total size */
  size = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008bc8:	2300      	movs	r3, #0
 8008bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bcc:	e015      	b.n	8008bfa <netconn_write_vectors_partly+0xaa>
    size += vectors[i].len;
 8008bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bda:	4413      	add	r3, r2
 8008bdc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8008bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	4413      	add	r3, r2
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d202      	bcs.n	8008bf4 <netconn_write_vectors_partly+0xa4>
      /* overflow */
      return ERR_VAL;
 8008bee:	f06f 0305 	mvn.w	r3, #5
 8008bf2:	e04c      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
  for (i = 0; i < vectorcnt; i++) {
 8008bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	dbe5      	blt.n	8008bce <netconn_write_vectors_partly+0x7e>
    }
  }
  if (size == 0) {
 8008c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <netconn_write_vectors_partly+0xbc>
    return ERR_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e040      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
  } else if (size > SSIZE_MAX) {
 8008c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	da0a      	bge.n	8008c28 <netconn_write_vectors_partly+0xd8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <netconn_write_vectors_partly+0xce>
      return ERR_VAL;
 8008c18:	f06f 0305 	mvn.w	r3, #5
 8008c1c:	e037      	b.n	8008c8e <netconn_write_vectors_partly+0x13e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008c1e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008c22:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008c30:	88fb      	ldrh	r3, [r7, #6]
 8008c32:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008c38:	797b      	ldrb	r3, [r7, #5]
 8008c3a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008c46:	f107 0314 	add.w	r3, r7, #20
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4814      	ldr	r0, [pc, #80]	@ (8008ca0 <netconn_write_vectors_partly+0x150>)
 8008c4e:	f7ff fe5b 	bl	8008908 <netconn_apimsg>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008c58:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d114      	bne.n	8008c8a <netconn_write_vectors_partly+0x13a>
    if (bytes_written != NULL) {
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <netconn_write_vectors_partly+0x11c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008c6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <netconn_write_vectors_partly+0x13a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d006      	beq.n	8008c8a <netconn_write_vectors_partly+0x13a>
 8008c7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ca4 <netconn_write_vectors_partly+0x154>)
 8008c7e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008c82:	4909      	ldr	r1, [pc, #36]	@ (8008ca8 <netconn_write_vectors_partly+0x158>)
 8008c84:	4809      	ldr	r0, [pc, #36]	@ (8008cac <netconn_write_vectors_partly+0x15c>)
 8008c86:	f7f8 f805 	bl	8000c94 <printf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008c8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3748      	adds	r7, #72	@ 0x48
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	080187f8 	.word	0x080187f8
 8008c9c:	08018814 	.word	0x08018814
 8008ca0:	0800a1c9 	.word	0x0800a1c9
 8008ca4:	08018524 	.word	0x08018524
 8008ca8:	08018838 	.word	0x08018838
 8008cac:	08018578 	.word	0x08018578

08008cb0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08c      	sub	sp, #48	@ 0x30
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d105      	bne.n	8008cce <netconn_close_shutdown+0x1e>
 8008cc2:	480d      	ldr	r0, [pc, #52]	@ (8008cf8 <netconn_close_shutdown+0x48>)
 8008cc4:	f7f7 ffe6 	bl	8000c94 <printf>
 8008cc8:	f06f 030f 	mvn.w	r3, #15
 8008ccc:	e010      	b.n	8008cf0 <netconn_close_shutdown+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008cd6:	2329      	movs	r3, #41	@ 0x29
 8008cd8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008cda:	f107 030c 	add.w	r3, r7, #12
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4806      	ldr	r0, [pc, #24]	@ (8008cfc <netconn_close_shutdown+0x4c>)
 8008ce2:	f7ff fe11 	bl	8008908 <netconn_apimsg>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008cec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3730      	adds	r7, #48	@ 0x30
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	0801885c 	.word	0x0801885c
 8008cfc:	0800a2e1 	.word	0x0800a2e1

08008d00 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008d08:	2103      	movs	r1, #3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ffd0 	bl	8008cb0 <netconn_close_shutdown>
 8008d10:	4603      	mov	r3, r0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <netconn_err+0x12>
    return ERR_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e007      	b.n	8008d3c <netconn_err+0x22>
  }
  SYS_ARCH_PROTECT(lev);
  err = conn->pending_err;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7a1b      	ldrb	r3, [r3, #8]
 8008d30:	73fb      	strb	r3, [r7, #15]
  conn->pending_err = ERR_OK;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
  return err;
 8008d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d56:	f113 0f0d 	cmn.w	r3, #13
 8008d5a:	d009      	beq.n	8008d70 <lwip_netconn_err_to_msg+0x28>
 8008d5c:	f113 0f0d 	cmn.w	r3, #13
 8008d60:	dc0c      	bgt.n	8008d7c <lwip_netconn_err_to_msg+0x34>
 8008d62:	f113 0f0f 	cmn.w	r3, #15
 8008d66:	d007      	beq.n	8008d78 <lwip_netconn_err_to_msg+0x30>
 8008d68:	f113 0f0e 	cmn.w	r3, #14
 8008d6c:	d002      	beq.n	8008d74 <lwip_netconn_err_to_msg+0x2c>
 8008d6e:	e005      	b.n	8008d7c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008d70:	4b0a      	ldr	r3, [pc, #40]	@ (8008d9c <lwip_netconn_err_to_msg+0x54>)
 8008d72:	e00e      	b.n	8008d92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008d74:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <lwip_netconn_err_to_msg+0x58>)
 8008d76:	e00c      	b.n	8008d92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008d78:	4b0a      	ldr	r3, [pc, #40]	@ (8008da4 <lwip_netconn_err_to_msg+0x5c>)
 8008d7a:	e00a      	b.n	8008d92 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <lwip_netconn_err_to_msg+0x48>
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <lwip_netconn_err_to_msg+0x60>)
 8008d86:	227d      	movs	r2, #125	@ 0x7d
 8008d88:	4908      	ldr	r1, [pc, #32]	@ (8008dac <lwip_netconn_err_to_msg+0x64>)
 8008d8a:	4809      	ldr	r0, [pc, #36]	@ (8008db0 <lwip_netconn_err_to_msg+0x68>)
 8008d8c:	f7f7 ff82 	bl	8000c94 <printf>
      return NULL;
 8008d90:	2300      	movs	r3, #0
  }
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0801bc44 	.word	0x0801bc44
 8008da0:	0801bc45 	.word	0x0801bc45
 8008da4:	0801bc46 	.word	0x0801bc46
 8008da8:	08018878 	.word	0x08018878
 8008dac:	080188a8 	.word	0x080188a8
 8008db0:	080188b8 	.word	0x080188b8

08008db4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <lwip_netconn_is_err_msg+0x1c>
 8008dc4:	4b12      	ldr	r3, [pc, #72]	@ (8008e10 <lwip_netconn_is_err_msg+0x5c>)
 8008dc6:	2285      	movs	r2, #133	@ 0x85
 8008dc8:	4912      	ldr	r1, [pc, #72]	@ (8008e14 <lwip_netconn_is_err_msg+0x60>)
 8008dca:	4813      	ldr	r0, [pc, #76]	@ (8008e18 <lwip_netconn_is_err_msg+0x64>)
 8008dcc:	f7f7 ff62 	bl	8000c94 <printf>

  if (msg == &netconn_aborted) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a12      	ldr	r2, [pc, #72]	@ (8008e1c <lwip_netconn_is_err_msg+0x68>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d104      	bne.n	8008de2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	22f3      	movs	r2, #243	@ 0xf3
 8008ddc:	701a      	strb	r2, [r3, #0]
    return 1;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e012      	b.n	8008e08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a0e      	ldr	r2, [pc, #56]	@ (8008e20 <lwip_netconn_is_err_msg+0x6c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d104      	bne.n	8008df4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	22f2      	movs	r2, #242	@ 0xf2
 8008dee:	701a      	strb	r2, [r3, #0]
    return 1;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e009      	b.n	8008e08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0b      	ldr	r2, [pc, #44]	@ (8008e24 <lwip_netconn_is_err_msg+0x70>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d104      	bne.n	8008e06 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	22f1      	movs	r2, #241	@ 0xf1
 8008e00:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	08018878 	.word	0x08018878
 8008e14:	080188e0 	.word	0x080188e0
 8008e18:	080188b8 	.word	0x080188b8
 8008e1c:	0801bc44 	.word	0x0801bc44
 8008e20:	0801bc45 	.word	0x0801bc45
 8008e24:	0801bc46 	.word	0x0801bc46

08008e28 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d105      	bne.n	8008e48 <recv_udp+0x20>
 8008e3c:	4b34      	ldr	r3, [pc, #208]	@ (8008f10 <recv_udp+0xe8>)
 8008e3e:	22e5      	movs	r2, #229	@ 0xe5
 8008e40:	4934      	ldr	r1, [pc, #208]	@ (8008f14 <recv_udp+0xec>)
 8008e42:	4835      	ldr	r0, [pc, #212]	@ (8008f18 <recv_udp+0xf0>)
 8008e44:	f7f7 ff26 	bl	8000c94 <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <recv_udp+0x32>
 8008e4e:	4b30      	ldr	r3, [pc, #192]	@ (8008f10 <recv_udp+0xe8>)
 8008e50:	22e6      	movs	r2, #230	@ 0xe6
 8008e52:	4932      	ldr	r1, [pc, #200]	@ (8008f1c <recv_udp+0xf4>)
 8008e54:	4830      	ldr	r0, [pc, #192]	@ (8008f18 <recv_udp+0xf0>)
 8008e56:	f7f7 ff1d 	bl	8000c94 <printf>
  conn = (struct netconn *)arg;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d103      	bne.n	8008e6c <recv_udp+0x44>
    pbuf_free(p);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f003 f8d9 	bl	800c01c <pbuf_free>
    return;
 8008e6a:	e04d      	b.n	8008f08 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d005      	beq.n	8008e82 <recv_udp+0x5a>
 8008e76:	4b26      	ldr	r3, [pc, #152]	@ (8008f10 <recv_udp+0xe8>)
 8008e78:	22ee      	movs	r2, #238	@ 0xee
 8008e7a:	4929      	ldr	r1, [pc, #164]	@ (8008f20 <recv_udp+0xf8>)
 8008e7c:	4826      	ldr	r0, [pc, #152]	@ (8008f18 <recv_udp+0xf0>)
 8008e7e:	f7f7 ff09 	bl	8000c94 <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	3310      	adds	r3, #16
 8008e86:	4618      	mov	r0, r3
 8008e88:	f00e f904 	bl	8017094 <sys_mbox_valid>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f003 f8c2 	bl	800c01c <pbuf_free>
    return;
 8008e98:	e036      	b.n	8008f08 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008e9a:	2006      	movs	r0, #6
 8008e9c:	f002 fa82 	bl	800b3a4 <memp_malloc>
 8008ea0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <recv_udp+0x88>
    pbuf_free(p);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f003 f8b7 	bl	800c01c <pbuf_free>
    return;
 8008eae:	e02b      	b.n	8008f08 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <recv_udp+0xa0>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	e000      	b.n	8008eca <recv_udp+0xa2>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008ed2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	891b      	ldrh	r3, [r3, #8]
 8008ed8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	3310      	adds	r3, #16
 8008ede:	69b9      	ldr	r1, [r7, #24]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f00e f875 	bl	8016fd0 <sys_mbox_trypost>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008eec:	69b8      	ldr	r0, [r7, #24]
 8008eee:	f001 fa83 	bl	800a3f8 <netbuf_delete>
    return;
 8008ef2:	e009      	b.n	8008f08 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <recv_udp+0xe0>
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	8afa      	ldrh	r2, [r7, #22]
 8008f02:	2100      	movs	r1, #0
 8008f04:	69f8      	ldr	r0, [r7, #28]
 8008f06:	4798      	blx	r3
  }
}
 8008f08:	3720      	adds	r7, #32
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	08018878 	.word	0x08018878
 8008f14:	080188ec 	.word	0x080188ec
 8008f18:	080188b8 	.word	0x080188b8
 8008f1c:	08018910 	.word	0x08018910
 8008f20:	08018930 	.word	0x08018930

08008f24 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <recv_tcp+0x22>
 8008f38:	4b36      	ldr	r3, [pc, #216]	@ (8009014 <recv_tcp+0xf0>)
 8008f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008f3e:	4936      	ldr	r1, [pc, #216]	@ (8009018 <recv_tcp+0xf4>)
 8008f40:	4836      	ldr	r0, [pc, #216]	@ (800901c <recv_tcp+0xf8>)
 8008f42:	f7f7 fea7 	bl	8000c94 <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d106      	bne.n	8008f5a <recv_tcp+0x36>
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <recv_tcp+0xf0>)
 8008f4e:	f240 122d 	movw	r2, #301	@ 0x12d
 8008f52:	4933      	ldr	r1, [pc, #204]	@ (8009020 <recv_tcp+0xfc>)
 8008f54:	4831      	ldr	r0, [pc, #196]	@ (800901c <recv_tcp+0xf8>)
 8008f56:	f7f7 fe9d 	bl	8000c94 <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d006      	beq.n	8008f70 <recv_tcp+0x4c>
 8008f62:	4b2c      	ldr	r3, [pc, #176]	@ (8009014 <recv_tcp+0xf0>)
 8008f64:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8008f68:	492e      	ldr	r1, [pc, #184]	@ (8009024 <recv_tcp+0x100>)
 8008f6a:	482c      	ldr	r0, [pc, #176]	@ (800901c <recv_tcp+0xf8>)
 8008f6c:	f7f7 fe92 	bl	8000c94 <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <recv_tcp+0x5c>
    return ERR_VAL;
 8008f7a:	f06f 0305 	mvn.w	r3, #5
 8008f7e:	e045      	b.n	800900c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d006      	beq.n	8008f98 <recv_tcp+0x74>
 8008f8a:	4b22      	ldr	r3, [pc, #136]	@ (8009014 <recv_tcp+0xf0>)
 8008f8c:	f240 1235 	movw	r2, #309	@ 0x135
 8008f90:	4925      	ldr	r1, [pc, #148]	@ (8009028 <recv_tcp+0x104>)
 8008f92:	4822      	ldr	r0, [pc, #136]	@ (800901c <recv_tcp+0xf8>)
 8008f94:	f7f7 fe7e 	bl	8000c94 <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	3310      	adds	r3, #16
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f00e f879 	bl	8017094 <sys_mbox_valid>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10d      	bne.n	8008fc4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d008      	beq.n	8008fc0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	891b      	ldrh	r3, [r3, #8]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f003 fe99 	bl	800ccec <tcp_recved>
      pbuf_free(p);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f003 f82e 	bl	800c01c <pbuf_free>
    }
    return ERR_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e023      	b.n	800900c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <recv_tcp+0xb2>
    msg = p;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	891b      	ldrh	r3, [r3, #8]
 8008fd2:	83fb      	strh	r3, [r7, #30]
 8008fd4:	e003      	b.n	8008fde <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008fd6:	4b15      	ldr	r3, [pc, #84]	@ (800902c <recv_tcp+0x108>)
 8008fd8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	3310      	adds	r3, #16
 8008fe2:	69b9      	ldr	r1, [r7, #24]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f00d fff3 	bl	8016fd0 <sys_mbox_trypost>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff4:	e00a      	b.n	800900c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <recv_tcp+0xe6>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	8bfa      	ldrh	r2, [r7, #30]
 8009004:	2100      	movs	r1, #0
 8009006:	6978      	ldr	r0, [r7, #20]
 8009008:	4798      	blx	r3
  }

  return ERR_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	08018878 	.word	0x08018878
 8009018:	08018950 	.word	0x08018950
 800901c:	080188b8 	.word	0x080188b8
 8009020:	08018974 	.word	0x08018974
 8009024:	08018994 	.word	0x08018994
 8009028:	080189ac 	.word	0x080189ac
 800902c:	0801bc46 	.word	0x0801bc46

08009030 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <poll_tcp+0x22>
 8009044:	4b2a      	ldr	r3, [pc, #168]	@ (80090f0 <poll_tcp+0xc0>)
 8009046:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800904a:	492a      	ldr	r1, [pc, #168]	@ (80090f4 <poll_tcp+0xc4>)
 800904c:	482a      	ldr	r0, [pc, #168]	@ (80090f8 <poll_tcp+0xc8>)
 800904e:	f7f7 fe21 	bl	8000c94 <printf>

  if (conn->state == NETCONN_WRITE) {
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d104      	bne.n	8009064 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800905a:	2101      	movs	r1, #1
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 fee5 	bl	8009e2c <lwip_netconn_do_writemore>
 8009062:	e016      	b.n	8009092 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d112      	bne.n	8009092 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <poll_tcp+0x5a>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	7a5b      	ldrb	r3, [r3, #9]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	7a5a      	ldrb	r2, [r3, #9]
 8009084:	3a01      	subs	r2, #1
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800908a:	2101      	movs	r1, #1
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 fb35 	bl	80096fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	7e1b      	ldrb	r3, [r3, #24]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b00      	cmp	r3, #0
 800909c:	d022      	beq.n	80090e4 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01e      	beq.n	80090e4 <poll_tcp+0xb4>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80090ae:	f640 3269 	movw	r2, #2921	@ 0xb69
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d916      	bls.n	80090e4 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d810      	bhi.n	80090e4 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	7e1b      	ldrb	r3, [r3, #24]
 80090c6:	f023 0310 	bic.w	r3, r3, #16
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <poll_tcp+0xb4>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	2200      	movs	r2, #0
 80090de:	2102      	movs	r1, #2
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08018878 	.word	0x08018878
 80090f4:	080189cc 	.word	0x080189cc
 80090f8:	080188b8 	.word	0x080188b8

080090fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <sent_tcp+0x26>
 8009114:	4b21      	ldr	r3, [pc, #132]	@ (800919c <sent_tcp+0xa0>)
 8009116:	f240 1293 	movw	r2, #403	@ 0x193
 800911a:	4921      	ldr	r1, [pc, #132]	@ (80091a0 <sent_tcp+0xa4>)
 800911c:	4821      	ldr	r0, [pc, #132]	@ (80091a4 <sent_tcp+0xa8>)
 800911e:	f7f7 fdb9 	bl	8000c94 <printf>

  if (conn) {
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d033      	beq.n	8009190 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d104      	bne.n	800913a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009130:	2101      	movs	r1, #1
 8009132:	6978      	ldr	r0, [r7, #20]
 8009134:	f000 fe7a 	bl	8009e2c <lwip_netconn_do_writemore>
 8009138:	e007      	b.n	800914a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b04      	cmp	r3, #4
 8009140:	d103      	bne.n	800914a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009142:	2101      	movs	r1, #1
 8009144:	6978      	ldr	r0, [r7, #20]
 8009146:	f000 fad9 	bl	80096fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d01e      	beq.n	8009190 <sent_tcp+0x94>
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800915a:	f640 3269 	movw	r2, #2921	@ 0xb69
 800915e:	4293      	cmp	r3, r2
 8009160:	d916      	bls.n	8009190 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800916a:	2b04      	cmp	r3, #4
 800916c:	d810      	bhi.n	8009190 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	7e1b      	ldrb	r3, [r3, #24]
 8009172:	f023 0310 	bic.w	r3, r3, #16
 8009176:	b2da      	uxtb	r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <sent_tcp+0x94>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	2102      	movs	r1, #2
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	08018878 	.word	0x08018878
 80091a0:	080189cc 	.word	0x080189cc
 80091a4:	080188b8 	.word	0x080188b8

080091a8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d106      	bne.n	80091cc <err_tcp+0x24>
 80091be:	4b5c      	ldr	r3, [pc, #368]	@ (8009330 <err_tcp+0x188>)
 80091c0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80091c4:	495b      	ldr	r1, [pc, #364]	@ (8009334 <err_tcp+0x18c>)
 80091c6:	485c      	ldr	r0, [pc, #368]	@ (8009338 <err_tcp+0x190>)
 80091c8:	f7f7 fd64 	bl	8000c94 <printf>

  SYS_ARCH_PROTECT(lev);

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	2200      	movs	r2, #0
 80091d0:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	7e1b      	ldrb	r3, [r3, #24]
 80091dc:	f043 0301 	orr.w	r3, r3, #1
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	76fb      	strb	r3, [r7, #27]
  conn->state = NETCONN_NONE;
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	2200      	movs	r2, #0
 80091f0:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <err_tcp+0x5e>
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	2200      	movs	r2, #0
 8009200:	2104      	movs	r1, #4
 8009202:	69f8      	ldr	r0, [r7, #28]
 8009204:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <err_tcp+0x72>
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	69f8      	ldr	r0, [r7, #28]
 8009218:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <err_tcp+0x86>
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	2200      	movs	r2, #0
 8009228:	2102      	movs	r1, #2
 800922a:	69f8      	ldr	r0, [r7, #28]
 800922c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800922e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff fd88 	bl	8008d48 <lwip_netconn_err_to_msg>
 8009238:	6178      	str	r0, [r7, #20]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	3310      	adds	r3, #16
 800923e:	4618      	mov	r0, r3
 8009240:	f00d ff28 	bl	8017094 <sys_mbox_valid>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d005      	beq.n	8009256 <err_tcp+0xae>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3310      	adds	r3, #16
 800924e:	6979      	ldr	r1, [r7, #20]
 8009250:	4618      	mov	r0, r3
 8009252:	f00d febd 	bl	8016fd0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3314      	adds	r3, #20
 800925a:	4618      	mov	r0, r3
 800925c:	f00d ff1a 	bl	8017094 <sys_mbox_valid>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d005      	beq.n	8009272 <err_tcp+0xca>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	3314      	adds	r3, #20
 800926a:	6979      	ldr	r1, [r7, #20]
 800926c:	4618      	mov	r0, r3
 800926e:	f00d feaf 	bl	8016fd0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009272:	7efb      	ldrb	r3, [r7, #27]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d005      	beq.n	8009284 <err_tcp+0xdc>
 8009278:	7efb      	ldrb	r3, [r7, #27]
 800927a:	2b04      	cmp	r3, #4
 800927c:	d002      	beq.n	8009284 <err_tcp+0xdc>
 800927e:	7efb      	ldrb	r3, [r7, #27]
 8009280:	2b03      	cmp	r3, #3
 8009282:	d143      	bne.n	800930c <err_tcp+0x164>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	7e1b      	ldrb	r3, [r3, #24]
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	613b      	str	r3, [r7, #16]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	7e1b      	ldrb	r3, [r3, #24]
 800929c:	f023 0304 	bic.w	r3, r3, #4
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d13b      	bne.n	8009324 <err_tcp+0x17c>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <err_tcp+0x11a>
 80092b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009330 <err_tcp+0x188>)
 80092b6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80092ba:	4920      	ldr	r1, [pc, #128]	@ (800933c <err_tcp+0x194>)
 80092bc:	481e      	ldr	r0, [pc, #120]	@ (8009338 <err_tcp+0x190>)
 80092be:	f7f7 fce9 	bl	8000c94 <printf>
      if (old_state == NETCONN_CLOSE) {
 80092c2:	7efb      	ldrb	r3, [r7, #27]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d104      	bne.n	80092d2 <err_tcp+0x12a>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	2200      	movs	r2, #0
 80092ce:	711a      	strb	r2, [r3, #4]
 80092d0:	e003      	b.n	80092da <err_tcp+0x132>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	60fb      	str	r3, [r7, #12]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f00d ff63 	bl	80171b0 <sys_sem_valid>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <err_tcp+0x156>
 80092f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009330 <err_tcp+0x188>)
 80092f2:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80092f6:	4912      	ldr	r1, [pc, #72]	@ (8009340 <err_tcp+0x198>)
 80092f8:	480f      	ldr	r0, [pc, #60]	@ (8009338 <err_tcp+0x190>)
 80092fa:	f7f7 fccb 	bl	8000c94 <printf>
      conn->current_msg = NULL;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2200      	movs	r2, #0
 8009302:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f00d ff39 	bl	801717c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800930a:	e00b      	b.n	8009324 <err_tcp+0x17c>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <err_tcp+0x17e>
 8009314:	4b06      	ldr	r3, [pc, #24]	@ (8009330 <err_tcp+0x188>)
 8009316:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800931a:	490a      	ldr	r1, [pc, #40]	@ (8009344 <err_tcp+0x19c>)
 800931c:	4806      	ldr	r0, [pc, #24]	@ (8009338 <err_tcp+0x190>)
 800931e:	f7f7 fcb9 	bl	8000c94 <printf>
  }
}
 8009322:	e000      	b.n	8009326 <err_tcp+0x17e>
      (old_state == NETCONN_CONNECT)) {
 8009324:	bf00      	nop
}
 8009326:	bf00      	nop
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	08018878 	.word	0x08018878
 8009334:	080189cc 	.word	0x080189cc
 8009338:	080188b8 	.word	0x080188b8
 800933c:	080189dc 	.word	0x080189dc
 8009340:	080189f8 	.word	0x080189f8
 8009344:	08018a14 	.word	0x08018a14

08009348 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f004 fc45 	bl	800dbe8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800935e:	490a      	ldr	r1, [pc, #40]	@ (8009388 <setup_tcp+0x40>)
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f004 fc53 	bl	800dc0c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009366:	4909      	ldr	r1, [pc, #36]	@ (800938c <setup_tcp+0x44>)
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f004 fc71 	bl	800dc50 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800936e:	2202      	movs	r2, #2
 8009370:	4907      	ldr	r1, [pc, #28]	@ (8009390 <setup_tcp+0x48>)
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f004 fcc6 	bl	800dd04 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009378:	4906      	ldr	r1, [pc, #24]	@ (8009394 <setup_tcp+0x4c>)
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f004 fc88 	bl	800dc90 <tcp_err>
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	08008f25 	.word	0x08008f25
 800938c:	080090fd 	.word	0x080090fd
 8009390:	08009031 	.word	0x08009031
 8009394:	080091a9 	.word	0x080091a9

08009398 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d006      	beq.n	80093bc <pcb_new+0x24>
 80093ae:	4b2b      	ldr	r3, [pc, #172]	@ (800945c <pcb_new+0xc4>)
 80093b0:	f240 2265 	movw	r2, #613	@ 0x265
 80093b4:	492a      	ldr	r1, [pc, #168]	@ (8009460 <pcb_new+0xc8>)
 80093b6:	482b      	ldr	r0, [pc, #172]	@ (8009464 <pcb_new+0xcc>)
 80093b8:	f7f7 fc6c 	bl	8000c94 <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d022      	beq.n	8009410 <pcb_new+0x78>
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d133      	bne.n	8009436 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681c      	ldr	r4, [r3, #0]
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f009 fb46 	bl	8012a66 <udp_new_ip_type>
 80093da:	4603      	mov	r3, r0
 80093dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02a      	beq.n	800943e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b22      	cmp	r3, #34	@ 0x22
 80093f0:	d104      	bne.n	80093fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6858      	ldr	r0, [r3, #4]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	4917      	ldr	r1, [pc, #92]	@ (8009468 <pcb_new+0xd0>)
 800940a:	f009 fac3 	bl	8012994 <udp_recv>
      }
      break;
 800940e:	e016      	b.n	800943e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4618      	mov	r0, r3
 8009418:	f004 fbd8 	bl	800dbcc <tcp_new_ip_type>
 800941c:	4603      	mov	r3, r0
 800941e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ff8a 	bl	8009348 <setup_tcp>
      }
      break;
 8009434:	e005      	b.n	8009442 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	22fa      	movs	r2, #250	@ 0xfa
 800943a:	711a      	strb	r2, [r3, #4]
      return;
 800943c:	e00a      	b.n	8009454 <pcb_new+0xbc>
      break;
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <pcb_new+0xac>
      break;
 8009442:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	22ff      	movs	r2, #255	@ 0xff
 8009452:	711a      	strb	r2, [r3, #4]
  }
}
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	bd90      	pop	{r4, r7, pc}
 800945a:	bf00      	nop
 800945c:	08018878 	.word	0x08018878
 8009460:	08018a58 	.word	0x08018a58
 8009464:	080188b8 	.word	0x080188b8
 8009468:	08008e29 	.word	0x08008e29

0800946c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff ff85 	bl	8009398 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80094a8:	2007      	movs	r0, #7
 80094aa:	f001 ff7b 	bl	800b3a4 <memp_malloc>
 80094ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <netconn_alloc+0x22>
    return NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e04e      	b.n	8009558 <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	79fa      	ldrb	r2, [r7, #7]
 80094c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	605a      	str	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
  conn->mbox_threads_waiting = 0;
#endif

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d004      	beq.n	80094e0 <netconn_alloc+0x48>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d105      	bne.n	80094e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80094da:	2364      	movs	r3, #100	@ 0x64
 80094dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80094de:	e00a      	b.n	80094f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80094e0:	2364      	movs	r3, #100	@ 0x64
 80094e2:	617b      	str	r3, [r7, #20]
      break;
 80094e4:	e007      	b.n	80094f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80094e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009560 <netconn_alloc+0xc8>)
 80094e8:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80094ec:	491d      	ldr	r1, [pc, #116]	@ (8009564 <netconn_alloc+0xcc>)
 80094ee:	481e      	ldr	r0, [pc, #120]	@ (8009568 <netconn_alloc+0xd0>)
 80094f0:	f7f7 fbd0 	bl	8000c94 <printf>
      goto free_and_return;
 80094f4:	e02b      	b.n	800954e <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3310      	adds	r3, #16
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f00d fd25 	bl	8016f4c <sys_mbox_new>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d121      	bne.n	800954c <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	330c      	adds	r3, #12
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f00d fdde 	bl	80170d0 <sys_sem_new>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3310      	adds	r3, #16
 800951e:	4618      	mov	r0, r3
 8009520:	f00d fd2e 	bl	8016f80 <sys_mbox_free>
    goto free_and_return;
 8009524:	e013      	b.n	800954e <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3314      	adds	r3, #20
 800952a:	4618      	mov	r0, r3
 800952c:	f00d fdc3 	bl	80170b6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	7cfa      	ldrb	r2, [r7, #19]
 8009546:	761a      	strb	r2, [r3, #24]
  return conn;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	e005      	b.n	8009558 <netconn_alloc+0xc0>
    goto free_and_return;
 800954c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	2007      	movs	r0, #7
 8009552:	f001 ff6b 	bl	800b42c <memp_free>
  return NULL;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	08018878 	.word	0x08018878
 8009564:	08018a78 	.word	0x08018a78
 8009568:	080188b8 	.word	0x080188b8

0800956c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <netconn_free+0x1e>
 800957c:	4b1b      	ldr	r3, [pc, #108]	@ (80095ec <netconn_free+0x80>)
 800957e:	f240 321f 	movw	r2, #799	@ 0x31f
 8009582:	491b      	ldr	r1, [pc, #108]	@ (80095f0 <netconn_free+0x84>)
 8009584:	481b      	ldr	r0, [pc, #108]	@ (80095f4 <netconn_free+0x88>)
 8009586:	f7f7 fb85 	bl	8000c94 <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3310      	adds	r3, #16
 800958e:	4618      	mov	r0, r3
 8009590:	f00d fd80 	bl	8017094 <sys_mbox_valid>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <netconn_free+0x3c>
 800959a:	4b14      	ldr	r3, [pc, #80]	@ (80095ec <netconn_free+0x80>)
 800959c:	f240 3226 	movw	r2, #806	@ 0x326
 80095a0:	4915      	ldr	r1, [pc, #84]	@ (80095f8 <netconn_free+0x8c>)
 80095a2:	4814      	ldr	r0, [pc, #80]	@ (80095f4 <netconn_free+0x88>)
 80095a4:	f7f7 fb76 	bl	8000c94 <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3314      	adds	r3, #20
 80095ac:	4618      	mov	r0, r3
 80095ae:	f00d fd71 	bl	8017094 <sys_mbox_valid>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <netconn_free+0x5a>
 80095b8:	4b0c      	ldr	r3, [pc, #48]	@ (80095ec <netconn_free+0x80>)
 80095ba:	f240 3229 	movw	r2, #809	@ 0x329
 80095be:	490f      	ldr	r1, [pc, #60]	@ (80095fc <netconn_free+0x90>)
 80095c0:	480c      	ldr	r0, [pc, #48]	@ (80095f4 <netconn_free+0x88>)
 80095c2:	f7f7 fb67 	bl	8000c94 <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	330c      	adds	r3, #12
 80095ca:	4618      	mov	r0, r3
 80095cc:	f00d fde3 	bl	8017196 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	330c      	adds	r3, #12
 80095d4:	4618      	mov	r0, r3
 80095d6:	f00d fdfc 	bl	80171d2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	2007      	movs	r0, #7
 80095de:	f001 ff25 	bl	800b42c <memp_free>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	08018878 	.word	0x08018878
 80095f0:	08018aa0 	.word	0x08018aa0
 80095f4:	080188b8 	.word	0x080188b8
 80095f8:	08018ad0 	.word	0x08018ad0
 80095fc:	08018b0c 	.word	0x08018b0c

08009600 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3310      	adds	r3, #16
 800960c:	4618      	mov	r0, r3
 800960e:	f00d fd41 	bl	8017094 <sys_mbox_valid>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d02f      	beq.n	8009678 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009618:	e018      	b.n	800964c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009622:	2b10      	cmp	r3, #16
 8009624:	d10e      	bne.n	8009644 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f107 020f 	add.w	r2, r7, #15
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff fbc0 	bl	8008db4 <lwip_netconn_is_err_msg>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d108      	bne.n	800964c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	4618      	mov	r0, r3
 800963e:	f002 fced 	bl	800c01c <pbuf_free>
 8009642:	e003      	b.n	800964c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fed6 	bl	800a3f8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3310      	adds	r3, #16
 8009650:	f107 0210 	add.w	r2, r7, #16
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f00d fd05 	bl	8017066 <sys_arch_mbox_tryfetch>
 800965c:	4603      	mov	r3, r0
 800965e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009662:	d1da      	bne.n	800961a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3310      	adds	r3, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f00d fc89 	bl	8016f80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3310      	adds	r3, #16
 8009672:	4618      	mov	r0, r3
 8009674:	f00d fd1f 	bl	80170b6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3314      	adds	r3, #20
 800967c:	4618      	mov	r0, r3
 800967e:	f00d fd09 	bl	8017094 <sys_mbox_valid>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d034      	beq.n	80096f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009688:	e01d      	b.n	80096c6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f107 020e 	add.w	r2, r7, #14
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fb8e 	bl	8008db4 <lwip_netconn_is_err_msg>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d113      	bne.n	80096c6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80096a2:	6978      	ldr	r0, [r7, #20]
 80096a4:	f7ff ffac 	bl	8009600 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f003 fab3 	bl	800cc20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80096c0:	6978      	ldr	r0, [r7, #20]
 80096c2:	f7ff ff53 	bl	800956c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3314      	adds	r3, #20
 80096ca:	f107 0210 	add.w	r2, r7, #16
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f00d fcc8 	bl	8017066 <sys_arch_mbox_tryfetch>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096dc:	d1d5      	bne.n	800968a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3314      	adds	r3, #20
 80096e2:	4618      	mov	r0, r3
 80096e4:	f00d fc4c 	bl	8016f80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3314      	adds	r3, #20
 80096ec:	4618      	mov	r0, r3
 80096ee:	f00d fce2 	bl	80170b6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <lwip_netconn_do_close_internal+0x24>
 8009712:	4b87      	ldr	r3, [pc, #540]	@ (8009930 <lwip_netconn_do_close_internal+0x234>)
 8009714:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8009718:	4986      	ldr	r1, [pc, #536]	@ (8009934 <lwip_netconn_do_close_internal+0x238>)
 800971a:	4887      	ldr	r0, [pc, #540]	@ (8009938 <lwip_netconn_do_close_internal+0x23c>)
 800971c:	f7f7 faba 	bl	8000c94 <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009728:	2b10      	cmp	r3, #16
 800972a:	d006      	beq.n	800973a <lwip_netconn_do_close_internal+0x3e>
 800972c:	4b80      	ldr	r3, [pc, #512]	@ (8009930 <lwip_netconn_do_close_internal+0x234>)
 800972e:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009732:	4982      	ldr	r1, [pc, #520]	@ (800993c <lwip_netconn_do_close_internal+0x240>)
 8009734:	4880      	ldr	r0, [pc, #512]	@ (8009938 <lwip_netconn_do_close_internal+0x23c>)
 8009736:	f7f7 faad 	bl	8000c94 <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b04      	cmp	r3, #4
 8009740:	d006      	beq.n	8009750 <lwip_netconn_do_close_internal+0x54>
 8009742:	4b7b      	ldr	r3, [pc, #492]	@ (8009930 <lwip_netconn_do_close_internal+0x234>)
 8009744:	f240 32a7 	movw	r2, #935	@ 0x3a7
 8009748:	497d      	ldr	r1, [pc, #500]	@ (8009940 <lwip_netconn_do_close_internal+0x244>)
 800974a:	487b      	ldr	r0, [pc, #492]	@ (8009938 <lwip_netconn_do_close_internal+0x23c>)
 800974c:	f7f7 faa2 	bl	8000c94 <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <lwip_netconn_do_close_internal+0x6a>
 8009758:	4b75      	ldr	r3, [pc, #468]	@ (8009930 <lwip_netconn_do_close_internal+0x234>)
 800975a:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800975e:	4979      	ldr	r1, [pc, #484]	@ (8009944 <lwip_netconn_do_close_internal+0x248>)
 8009760:	4875      	ldr	r0, [pc, #468]	@ (8009938 <lwip_netconn_do_close_internal+0x23c>)
 8009762:	f7f7 fa97 	bl	8000c94 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	69db      	ldr	r3, [r3, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <lwip_netconn_do_close_internal+0x80>
 800976e:	4b70      	ldr	r3, [pc, #448]	@ (8009930 <lwip_netconn_do_close_internal+0x234>)
 8009770:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8009774:	4974      	ldr	r1, [pc, #464]	@ (8009948 <lwip_netconn_do_close_internal+0x24c>)
 8009776:	4870      	ldr	r0, [pc, #448]	@ (8009938 <lwip_netconn_do_close_internal+0x23c>)
 8009778:	f7f7 fa8c 	bl	8000c94 <printf>

  tpcb = conn->pcb.tcp;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	7a1b      	ldrb	r3, [r3, #8]
 8009788:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d102      	bne.n	80097a6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80097a0:	2301      	movs	r3, #1
 80097a2:	75bb      	strb	r3, [r7, #22]
 80097a4:	e01f      	b.n	80097e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00e      	beq.n	80097ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d007      	beq.n	80097c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80097b8:	2b06      	cmp	r3, #6
 80097ba:	d003      	beq.n	80097c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d102      	bne.n	80097ca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80097c4:	2301      	movs	r3, #1
 80097c6:	75bb      	strb	r3, [r7, #22]
 80097c8:	e00d      	b.n	80097e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80097ca:	7b7b      	ldrb	r3, [r7, #13]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <lwip_netconn_do_close_internal+0xe6>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	8b5b      	ldrh	r3, [r3, #26]
 80097d4:	f003 0310 	and.w	r3, r3, #16
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	75bb      	strb	r3, [r7, #22]
 80097e0:	e001      	b.n	80097e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80097e6:	7dbb      	ldrb	r3, [r7, #22]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80097ec:	2100      	movs	r1, #0
 80097ee:	6938      	ldr	r0, [r7, #16]
 80097f0:	f004 f9fa 	bl	800dbe8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	7d1b      	ldrb	r3, [r3, #20]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d104      	bne.n	8009806 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6938      	ldr	r0, [r7, #16]
 8009800:	f004 fa68 	bl	800dcd4 <tcp_accept>
 8009804:	e01d      	b.n	8009842 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d007      	beq.n	800981c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800980c:	2100      	movs	r1, #0
 800980e:	6938      	ldr	r0, [r7, #16]
 8009810:	f004 f9fc 	bl	800dc0c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009814:	2100      	movs	r1, #0
 8009816:	6938      	ldr	r0, [r7, #16]
 8009818:	f004 fa5c 	bl	800dcd4 <tcp_accept>
    }
    if (shut_tx) {
 800981c:	7b7b      	ldrb	r3, [r7, #13]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009822:	2100      	movs	r1, #0
 8009824:	6938      	ldr	r0, [r7, #16]
 8009826:	f004 fa13 	bl	800dc50 <tcp_sent>
    }
    if (shut_close) {
 800982a:	7dbb      	ldrb	r3, [r7, #22]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d008      	beq.n	8009842 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009830:	2200      	movs	r2, #0
 8009832:	2100      	movs	r1, #0
 8009834:	6938      	ldr	r0, [r7, #16]
 8009836:	f004 fa65 	bl	800dd04 <tcp_poll>
      tcp_err(tpcb, NULL);
 800983a:	2100      	movs	r1, #0
 800983c:	6938      	ldr	r0, [r7, #16]
 800983e:	f004 fa27 	bl	800dc90 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009842:	7dbb      	ldrb	r3, [r7, #22]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009848:	6938      	ldr	r0, [r7, #16]
 800984a:	f003 f8c1 	bl	800c9d0 <tcp_close>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]
 8009852:	e007      	b.n	8009864 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	7b7a      	ldrb	r2, [r7, #13]
 8009858:	4619      	mov	r1, r3
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	f003 f8dc 	bl	800ca18 <tcp_shutdown>
 8009860:	4603      	mov	r3, r0
 8009862:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800986c:	2301      	movs	r3, #1
 800986e:	757b      	strb	r3, [r7, #21]
 8009870:	e016      	b.n	80098a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d10f      	bne.n	800989c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	7a5b      	ldrb	r3, [r3, #9]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10c      	bne.n	80098a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009886:	2301      	movs	r3, #1
 8009888:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800988a:	7dbb      	ldrb	r3, [r7, #22]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d007      	beq.n	80098a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009890:	6938      	ldr	r0, [r7, #16]
 8009892:	f003 f9c5 	bl	800cc20 <tcp_abort>
          err = ERR_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	75fb      	strb	r3, [r7, #23]
 800989a:	e001      	b.n	80098a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800989c:	2301      	movs	r3, #1
 800989e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80098a0:	7d7b      	ldrb	r3, [r7, #21]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d052      	beq.n	800994c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	7dfa      	ldrb	r2, [r7, #23]
 80098b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80098c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d129      	bne.n	8009920 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80098cc:	7dbb      	ldrb	r3, [r7, #22]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00c      	beq.n	80098ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d005      	beq.n	80098ec <lwip_netconn_do_close_internal+0x1f0>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	2200      	movs	r2, #0
 80098e6:	2104      	movs	r1, #4
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	4798      	blx	r3
      }
      if (shut_rx) {
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <lwip_netconn_do_close_internal+0x20a>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	2200      	movs	r2, #0
 8009900:	2100      	movs	r1, #0
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      }
      if (shut_tx) {
 8009906:	7b7b      	ldrb	r3, [r7, #13]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d009      	beq.n	8009920 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d005      	beq.n	8009920 <lwip_netconn_do_close_internal+0x224>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	2200      	movs	r2, #0
 800991a:	2102      	movs	r1, #2
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009926:	68b8      	ldr	r0, [r7, #8]
 8009928:	f00d fc28 	bl	801717c <sys_sem_signal>
    }
    return ERR_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	e03c      	b.n	80099aa <lwip_netconn_do_close_internal+0x2ae>
 8009930:	08018878 	.word	0x08018878
 8009934:	08018b48 	.word	0x08018b48
 8009938:	080188b8 	.word	0x080188b8
 800993c:	08018b58 	.word	0x08018b58
 8009940:	08018b78 	.word	0x08018b78
 8009944:	08018b9c 	.word	0x08018b9c
 8009948:	080189dc 	.word	0x080189dc
  }
  if (!close_finished) {
 800994c:	7d7b      	ldrb	r3, [r7, #21]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d11e      	bne.n	8009990 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	7d1b      	ldrb	r3, [r3, #20]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d106      	bne.n	8009968 <lwip_netconn_do_close_internal+0x26c>
 800995a:	4b16      	ldr	r3, [pc, #88]	@ (80099b4 <lwip_netconn_do_close_internal+0x2b8>)
 800995c:	f240 4244 	movw	r2, #1092	@ 0x444
 8009960:	4915      	ldr	r1, [pc, #84]	@ (80099b8 <lwip_netconn_do_close_internal+0x2bc>)
 8009962:	4816      	ldr	r0, [pc, #88]	@ (80099bc <lwip_netconn_do_close_internal+0x2c0>)
 8009964:	f7f7 f996 	bl	8000c94 <printf>
    if (shut_tx) {
 8009968:	7b7b      	ldrb	r3, [r7, #13]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800996e:	4914      	ldr	r1, [pc, #80]	@ (80099c0 <lwip_netconn_do_close_internal+0x2c4>)
 8009970:	6938      	ldr	r0, [r7, #16]
 8009972:	f004 f96d 	bl	800dc50 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009976:	2201      	movs	r2, #1
 8009978:	4912      	ldr	r1, [pc, #72]	@ (80099c4 <lwip_netconn_do_close_internal+0x2c8>)
 800997a:	6938      	ldr	r0, [r7, #16]
 800997c:	f004 f9c2 	bl	800dd04 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009980:	4911      	ldr	r1, [pc, #68]	@ (80099c8 <lwip_netconn_do_close_internal+0x2cc>)
 8009982:	6938      	ldr	r0, [r7, #16]
 8009984:	f004 f984 	bl	800dc90 <tcp_err>
    tcp_arg(tpcb, conn);
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	6938      	ldr	r0, [r7, #16]
 800998c:	f004 f92c 	bl	800dbe8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <lwip_netconn_do_close_internal+0x2aa>
 8009998:	4b06      	ldr	r3, [pc, #24]	@ (80099b4 <lwip_netconn_do_close_internal+0x2b8>)
 800999a:	f44f 628a 	mov.w	r2, #1104	@ 0x450
 800999e:	490b      	ldr	r1, [pc, #44]	@ (80099cc <lwip_netconn_do_close_internal+0x2d0>)
 80099a0:	4806      	ldr	r0, [pc, #24]	@ (80099bc <lwip_netconn_do_close_internal+0x2c0>)
 80099a2:	f7f7 f977 	bl	8000c94 <printf>
  return err;
 80099a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	08018878 	.word	0x08018878
 80099b8:	08018bb0 	.word	0x08018bb0
 80099bc:	080188b8 	.word	0x080188b8
 80099c0:	080090fd 	.word	0x080090fd
 80099c4:	08009031 	.word	0x08009031
 80099c8:	080091a9 	.word	0x080091a9
 80099cc:	08018bd4 	.word	0x08018bd4

080099d0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	785b      	ldrb	r3, [r3, #1]
 80099e2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00d      	beq.n	8009a06 <lwip_netconn_do_delconn+0x36>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d006      	beq.n	8009a06 <lwip_netconn_do_delconn+0x36>
 80099f8:	4b60      	ldr	r3, [pc, #384]	@ (8009b7c <lwip_netconn_do_delconn+0x1ac>)
 80099fa:	f240 4261 	movw	r2, #1121	@ 0x461
 80099fe:	4960      	ldr	r1, [pc, #384]	@ (8009b80 <lwip_netconn_do_delconn+0x1b0>)
 8009a00:	4860      	ldr	r0, [pc, #384]	@ (8009b84 <lwip_netconn_do_delconn+0x1b4>)
 8009a02:	f7f7 f947 	bl	8000c94 <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <lwip_netconn_do_delconn+0x48>
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d002      	beq.n	8009a18 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d109      	bne.n	8009a2c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d10a      	bne.n	8009a34 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	7e1b      	ldrb	r3, [r3, #24]
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d103      	bne.n	8009a34 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	22fb      	movs	r2, #251	@ 0xfb
 8009a30:	711a      	strb	r2, [r3, #4]
 8009a32:	e097      	b.n	8009b64 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d10d      	bne.n	8009a56 <lwip_netconn_do_delconn+0x86>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	7e1b      	ldrb	r3, [r3, #24]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d106      	bne.n	8009a56 <lwip_netconn_do_delconn+0x86>
 8009a48:	4b4c      	ldr	r3, [pc, #304]	@ (8009b7c <lwip_netconn_do_delconn+0x1ac>)
 8009a4a:	f240 427d 	movw	r2, #1149	@ 0x47d
 8009a4e:	494e      	ldr	r1, [pc, #312]	@ (8009b88 <lwip_netconn_do_delconn+0x1b8>)
 8009a50:	484c      	ldr	r0, [pc, #304]	@ (8009b84 <lwip_netconn_do_delconn+0x1b4>)
 8009a52:	f7f7 f91f 	bl	8000c94 <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fdcd 	bl	8009600 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d05f      	beq.n	8009b30 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d00d      	beq.n	8009a9a <lwip_netconn_do_delconn+0xca>
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d151      	bne.n	8009b26 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f008 ff96 	bl	80129c4 <udp_remove>
          break;
 8009a98:	e046      	b.n	8009b28 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <lwip_netconn_do_delconn+0xe2>
 8009aa4:	4b35      	ldr	r3, [pc, #212]	@ (8009b7c <lwip_netconn_do_delconn+0x1ac>)
 8009aa6:	f240 4297 	movw	r2, #1175	@ 0x497
 8009aaa:	4938      	ldr	r1, [pc, #224]	@ (8009b8c <lwip_netconn_do_delconn+0x1bc>)
 8009aac:	4835      	ldr	r0, [pc, #212]	@ (8009b84 <lwip_netconn_do_delconn+0x1b4>)
 8009aae:	f7f7 f8f1 	bl	8000c94 <printf>
          msg->conn->state = NETCONN_CLOSE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2203      	movs	r2, #3
 8009abe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fe14 	bl	80096fc <lwip_netconn_do_close_internal>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04b      	beq.n	8009b72 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	d006      	beq.n	8009af2 <lwip_netconn_do_delconn+0x122>
 8009ae4:	4b25      	ldr	r3, [pc, #148]	@ (8009b7c <lwip_netconn_do_delconn+0x1ac>)
 8009ae6:	f240 429d 	movw	r2, #1181	@ 0x49d
 8009aea:	4929      	ldr	r1, [pc, #164]	@ (8009b90 <lwip_netconn_do_delconn+0x1c0>)
 8009aec:	4825      	ldr	r0, [pc, #148]	@ (8009b84 <lwip_netconn_do_delconn+0x1b4>)
 8009aee:	f7f7 f8d1 	bl	8000c94 <printf>
            UNLOCK_TCPIP_CORE();
 8009af2:	4828      	ldr	r0, [pc, #160]	@ (8009b94 <lwip_netconn_do_delconn+0x1c4>)
 8009af4:	f00d fbab 	bl	801724e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	330c      	adds	r3, #12
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f00d fb0a 	bl	801711a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009b06:	4823      	ldr	r0, [pc, #140]	@ (8009b94 <lwip_netconn_do_delconn+0x1c4>)
 8009b08:	f00d fb92 	bl	8017230 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d02d      	beq.n	8009b72 <lwip_netconn_do_delconn+0x1a2>
 8009b16:	4b19      	ldr	r3, [pc, #100]	@ (8009b7c <lwip_netconn_do_delconn+0x1ac>)
 8009b18:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8009b1c:	491c      	ldr	r1, [pc, #112]	@ (8009b90 <lwip_netconn_do_delconn+0x1c0>)
 8009b1e:	4819      	ldr	r0, [pc, #100]	@ (8009b84 <lwip_netconn_do_delconn+0x1b4>)
 8009b20:	f7f7 f8b8 	bl	8000c94 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009b24:	e025      	b.n	8009b72 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009b26:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d007      	beq.n	8009b4a <lwip_netconn_do_delconn+0x17a>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	6810      	ldr	r0, [r2, #0]
 8009b44:	2200      	movs	r2, #0
 8009b46:	2100      	movs	r1, #0
 8009b48:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <lwip_netconn_do_delconn+0x194>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	6810      	ldr	r0, [r2, #0]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2102      	movs	r1, #2
 8009b62:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	330c      	adds	r3, #12
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f00d fb20 	bl	80171b0 <sys_sem_valid>
 8009b70:	e000      	b.n	8009b74 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009b72:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	08018878 	.word	0x08018878
 8009b80:	08018be4 	.word	0x08018be4
 8009b84:	080188b8 	.word	0x080188b8
 8009b88:	08018bf8 	.word	0x08018bf8
 8009b8c:	08018c18 	.word	0x08018c18
 8009b90:	08018c34 	.word	0x08018c34
 8009b94:	200054e8 	.word	0x200054e8

08009b98 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009bb4:	f06f 0305 	mvn.w	r3, #5
 8009bb8:	e070      	b.n	8009c9c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d006      	beq.n	8009bd0 <lwip_netconn_do_connected+0x38>
 8009bc2:	4b38      	ldr	r3, [pc, #224]	@ (8009ca4 <lwip_netconn_do_connected+0x10c>)
 8009bc4:	f240 5226 	movw	r2, #1318	@ 0x526
 8009bc8:	4937      	ldr	r1, [pc, #220]	@ (8009ca8 <lwip_netconn_do_connected+0x110>)
 8009bca:	4838      	ldr	r0, [pc, #224]	@ (8009cac <lwip_netconn_do_connected+0x114>)
 8009bcc:	f7f7 f862 	bl	8000c94 <printf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10c      	bne.n	8009bf2 <lwip_netconn_do_connected+0x5a>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	7e1b      	ldrb	r3, [r3, #24]
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <lwip_netconn_do_connected+0x5a>
 8009be4:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca4 <lwip_netconn_do_connected+0x10c>)
 8009be6:	f240 5227 	movw	r2, #1319	@ 0x527
 8009bea:	4931      	ldr	r1, [pc, #196]	@ (8009cb0 <lwip_netconn_do_connected+0x118>)
 8009bec:	482f      	ldr	r0, [pc, #188]	@ (8009cac <lwip_netconn_do_connected+0x114>)
 8009bee:	f7f7 f851 	bl	8000c94 <printf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d008      	beq.n	8009c0c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	79fa      	ldrb	r2, [r7, #7]
 8009c00:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	330c      	adds	r3, #12
 8009c0a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c14:	2b10      	cmp	r3, #16
 8009c16:	d106      	bne.n	8009c26 <lwip_netconn_do_connected+0x8e>
 8009c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009c20:	69b8      	ldr	r0, [r7, #24]
 8009c22:	f7ff fb91 	bl	8009348 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	7e1b      	ldrb	r3, [r3, #24]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	7e1b      	ldrb	r3, [r3, #24]
 8009c3e:	f023 0304 	bic.w	r3, r3, #4
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	761a      	strb	r2, [r3, #24]
  LWIP_ASSERT("blocking connect state error",
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <lwip_netconn_do_connected+0xbc>
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10c      	bne.n	8009c6e <lwip_netconn_do_connected+0xd6>
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <lwip_netconn_do_connected+0xc8>
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <lwip_netconn_do_connected+0xd6>
 8009c60:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <lwip_netconn_do_connected+0x10c>)
 8009c62:	f240 5233 	movw	r2, #1331	@ 0x533
 8009c66:	4913      	ldr	r1, [pc, #76]	@ (8009cb4 <lwip_netconn_do_connected+0x11c>)
 8009c68:	4810      	ldr	r0, [pc, #64]	@ (8009cac <lwip_netconn_do_connected+0x114>)
 8009c6a:	f7f7 f813 	bl	8000c94 <printf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2200      	movs	r2, #0
 8009c72:	61da      	str	r2, [r3, #28]
  conn->state = NETCONN_NONE;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2200      	movs	r2, #0
 8009c78:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <lwip_netconn_do_connected+0xf6>
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2102      	movs	r1, #2
 8009c8a:	69b8      	ldr	r0, [r7, #24]
 8009c8c:	4798      	blx	r3

  if (was_blocking) {
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009c94:	69f8      	ldr	r0, [r7, #28]
 8009c96:	f00d fa71 	bl	801717c <sys_sem_signal>
  }
  return ERR_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	08018878 	.word	0x08018878
 8009ca8:	08018c3c 	.word	0x08018c3c
 8009cac:	080188b8 	.word	0x080188b8
 8009cb0:	08018c5c 	.word	0x08018c5c
 8009cb4:	08018c9c 	.word	0x08018c9c

08009cb8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009cce:	23f1      	movs	r3, #241	@ 0xf1
 8009cd0:	75fb      	strb	r3, [r7, #23]
 8009cd2:	e097      	b.n	8009e04 <lwip_netconn_do_connect+0x14c>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cde:	2b10      	cmp	r3, #16
 8009ce0:	d00f      	beq.n	8009d02 <lwip_netconn_do_connect+0x4a>
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	f040 8087 	bne.w	8009df6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6858      	ldr	r0, [r3, #4]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6899      	ldr	r1, [r3, #8]
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	899b      	ldrh	r3, [r3, #12]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f008 fdea 	bl	80128d0 <udp_connect>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75fb      	strb	r3, [r7, #23]
        break;
 8009d00:	e080      	b.n	8009e04 <lwip_netconn_do_connect+0x14c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d102      	bne.n	8009d12 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009d0c:	23f7      	movs	r3, #247	@ 0xf7
 8009d0e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009d10:	e077      	b.n	8009e02 <lwip_netconn_do_connect+0x14a>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	785b      	ldrb	r3, [r3, #1]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009d1c:	23f6      	movs	r3, #246	@ 0xf6
 8009d1e:	75fb      	strb	r3, [r7, #23]
        break;
 8009d20:	e06f      	b.n	8009e02 <lwip_netconn_do_connect+0x14a>
          setup_tcp(msg->conn);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fb0e 	bl	8009348 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6858      	ldr	r0, [r3, #4]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	6899      	ldr	r1, [r3, #8]
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	899a      	ldrh	r2, [r3, #12]
 8009d3a:	4b36      	ldr	r3, [pc, #216]	@ (8009e14 <lwip_netconn_do_connect+0x15c>)
 8009d3c:	f003 f86a 	bl	800ce14 <tcp_connect>
 8009d40:	4603      	mov	r3, r0
 8009d42:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d15a      	bne.n	8009e02 <lwip_netconn_do_connect+0x14a>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	7e1b      	ldrb	r3, [r3, #24]
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bf14      	ite	ne
 8009d5a:	2301      	movne	r3, #1
 8009d5c:	2300      	moveq	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2203      	movs	r2, #3
 8009d68:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <lwip_netconn_do_connect+0xcc>
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	7e1a      	ldrb	r2, [r3, #24]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0204 	orr.w	r2, r2, #4
 8009d7e:	b2d2      	uxtb	r2, r2
 8009d80:	761a      	strb	r2, [r3, #24]
 8009d82:	e008      	b.n	8009d96 <lwip_netconn_do_connect+0xde>
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	7e1a      	ldrb	r2, [r3, #24]
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0204 	bic.w	r2, r2, #4
 8009d92:	b2d2      	uxtb	r2, r2
 8009d94:	761a      	strb	r2, [r3, #24]
            if (non_blocking) {
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009d9c:	23fb      	movs	r3, #251	@ 0xfb
 8009d9e:	75fb      	strb	r3, [r7, #23]
        break;
 8009da0:	e02f      	b.n	8009e02 <lwip_netconn_do_connect+0x14a>
              msg->conn->current_msg = msg;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	61da      	str	r2, [r3, #28]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d006      	beq.n	8009dc2 <lwip_netconn_do_connect+0x10a>
 8009db4:	4b18      	ldr	r3, [pc, #96]	@ (8009e18 <lwip_netconn_do_connect+0x160>)
 8009db6:	f240 5273 	movw	r2, #1395	@ 0x573
 8009dba:	4918      	ldr	r1, [pc, #96]	@ (8009e1c <lwip_netconn_do_connect+0x164>)
 8009dbc:	4818      	ldr	r0, [pc, #96]	@ (8009e20 <lwip_netconn_do_connect+0x168>)
 8009dbe:	f7f6 ff69 	bl	8000c94 <printf>
              UNLOCK_TCPIP_CORE();
 8009dc2:	4818      	ldr	r0, [pc, #96]	@ (8009e24 <lwip_netconn_do_connect+0x16c>)
 8009dc4:	f00d fa43 	bl	801724e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	330c      	adds	r3, #12
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f00d f9a2 	bl	801711a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009dd6:	4813      	ldr	r0, [pc, #76]	@ (8009e24 <lwip_netconn_do_connect+0x16c>)
 8009dd8:	f00d fa2a 	bl	8017230 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d112      	bne.n	8009e0c <lwip_netconn_do_connect+0x154>
 8009de6:	4b0c      	ldr	r3, [pc, #48]	@ (8009e18 <lwip_netconn_do_connect+0x160>)
 8009de8:	f240 5277 	movw	r2, #1399	@ 0x577
 8009dec:	490b      	ldr	r1, [pc, #44]	@ (8009e1c <lwip_netconn_do_connect+0x164>)
 8009dee:	480c      	ldr	r0, [pc, #48]	@ (8009e20 <lwip_netconn_do_connect+0x168>)
 8009df0:	f7f6 ff50 	bl	8000c94 <printf>
              return;
 8009df4:	e00a      	b.n	8009e0c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009df6:	480c      	ldr	r0, [pc, #48]	@ (8009e28 <lwip_netconn_do_connect+0x170>)
 8009df8:	f7f6 ff4c 	bl	8000c94 <printf>
 8009dfc:	23fa      	movs	r3, #250	@ 0xfa
 8009dfe:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009e00:	e000      	b.n	8009e04 <lwip_netconn_do_connect+0x14c>
        break;
 8009e02:	bf00      	nop
    }
  }
  msg->err = err;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	7dfa      	ldrb	r2, [r7, #23]
 8009e08:	711a      	strb	r2, [r3, #4]
 8009e0a:	e000      	b.n	8009e0e <lwip_netconn_do_connect+0x156>
              return;
 8009e0c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08009b99 	.word	0x08009b99
 8009e18:	08018878 	.word	0x08018878
 8009e1c:	08018c34 	.word	0x08018c34
 8009e20:	080188b8 	.word	0x080188b8
 8009e24:	200054e8 	.word	0x200054e8
 8009e28:	08018cbc 	.word	0x08018cbc

08009e2c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <lwip_netconn_do_writemore+0x24>
 8009e42:	4b96      	ldr	r3, [pc, #600]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e44:	f240 6276 	movw	r2, #1654	@ 0x676
 8009e48:	4995      	ldr	r1, [pc, #596]	@ (800a0a0 <lwip_netconn_do_writemore+0x274>)
 8009e4a:	4896      	ldr	r0, [pc, #600]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e4c:	f7f6 ff22 	bl	8000c94 <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d006      	beq.n	8009e66 <lwip_netconn_do_writemore+0x3a>
 8009e58:	4b90      	ldr	r3, [pc, #576]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e5a:	f240 6277 	movw	r2, #1655	@ 0x677
 8009e5e:	4992      	ldr	r1, [pc, #584]	@ (800a0a8 <lwip_netconn_do_writemore+0x27c>)
 8009e60:	4890      	ldr	r0, [pc, #576]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e62:	f7f6 ff17 	bl	8000c94 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <lwip_netconn_do_writemore+0x50>
 8009e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e70:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8009e74:	498d      	ldr	r1, [pc, #564]	@ (800a0ac <lwip_netconn_do_writemore+0x280>)
 8009e76:	488b      	ldr	r0, [pc, #556]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e78:	f7f6 ff0c 	bl	8000c94 <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <lwip_netconn_do_writemore+0x66>
 8009e84:	4b85      	ldr	r3, [pc, #532]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009e86:	f240 6279 	movw	r2, #1657	@ 0x679
 8009e8a:	4989      	ldr	r1, [pc, #548]	@ (800a0b0 <lwip_netconn_do_writemore+0x284>)
 8009e8c:	4885      	ldr	r0, [pc, #532]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009e8e:	f7f6 ff01 	bl	8000c94 <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d306      	bcc.n	8009eb0 <lwip_netconn_do_writemore+0x84>
 8009ea2:	4b7e      	ldr	r3, [pc, #504]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009ea4:	f240 627a 	movw	r2, #1658	@ 0x67a
 8009ea8:	4982      	ldr	r1, [pc, #520]	@ (800a0b4 <lwip_netconn_do_writemore+0x288>)
 8009eaa:	487e      	ldr	r0, [pc, #504]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009eac:	f7f6 fef2 	bl	8000c94 <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	899b      	ldrh	r3, [r3, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <lwip_netconn_do_writemore+0x9c>
 8009eba:	4b78      	ldr	r3, [pc, #480]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009ebc:	f240 627c 	movw	r2, #1660	@ 0x67c
 8009ec0:	497d      	ldr	r1, [pc, #500]	@ (800a0b8 <lwip_netconn_do_writemore+0x28c>)
 8009ec2:	4878      	ldr	r0, [pc, #480]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009ec4:	f7f6 fee6 	bl	8000c94 <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	7f1b      	ldrb	r3, [r3, #28]
 8009ece:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7e1b      	ldrb	r3, [r3, #24]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <lwip_netconn_do_writemore+0xba>
 8009edc:	7ebb      	ldrb	r3, [r7, #26]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <lwip_netconn_do_writemore+0xbe>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <lwip_netconn_do_writemore+0xc0>
 8009eea:	2300      	movs	r3, #0
 8009eec:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f18:	d307      	bcc.n	8009f2a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f1e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f20:	7ebb      	ldrb	r3, [r7, #26]
 8009f22:	f043 0302 	orr.w	r3, r3, #2
 8009f26:	76bb      	strb	r3, [r7, #26]
 8009f28:	e001      	b.n	8009f2e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009f36:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f38:	89fa      	ldrh	r2, [r7, #14]
 8009f3a:	8bbb      	ldrh	r3, [r7, #28]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d216      	bcs.n	8009f6e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009f40:	89fb      	ldrh	r3, [r7, #14]
 8009f42:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f44:	7e3b      	ldrb	r3, [r7, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00d      	beq.n	8009f66 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009f4a:	8bbb      	ldrh	r3, [r7, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10e      	bne.n	8009f6e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <lwip_netconn_do_writemore+0x134>
 8009f5a:	f06f 0306 	mvn.w	r3, #6
 8009f5e:	e000      	b.n	8009f62 <lwip_netconn_do_writemore+0x136>
 8009f60:	2300      	movs	r3, #0
 8009f62:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009f64:	e07d      	b.n	800a062 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009f66:	7ebb      	ldrb	r3, [r7, #26]
 8009f68:	f043 0302 	orr.w	r3, r3, #2
 8009f6c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	8bbb      	ldrh	r3, [r7, #28]
 8009f76:	441a      	add	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d906      	bls.n	8009f92 <lwip_netconn_do_writemore+0x166>
 8009f84:	4b45      	ldr	r3, [pc, #276]	@ (800a09c <lwip_netconn_do_writemore+0x270>)
 8009f86:	f240 62a6 	movw	r2, #1702	@ 0x6a6
 8009f8a:	494c      	ldr	r1, [pc, #304]	@ (800a0bc <lwip_netconn_do_writemore+0x290>)
 8009f8c:	4845      	ldr	r0, [pc, #276]	@ (800a0a4 <lwip_netconn_do_writemore+0x278>)
 8009f8e:	f7f6 fe81 	bl	8000c94 <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009f92:	8bbb      	ldrh	r3, [r7, #28]
 8009f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d103      	bne.n	8009fa4 <lwip_netconn_do_writemore+0x178>
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa2:	d209      	bcs.n	8009fb8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fa8:	8bba      	ldrh	r2, [r7, #28]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d10b      	bne.n	8009fc6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	899b      	ldrh	r3, [r3, #12]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d906      	bls.n	8009fc6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fbc:	7ebb      	ldrb	r3, [r7, #26]
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	76bb      	strb	r3, [r7, #26]
 8009fc4:	e001      	b.n	8009fca <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6858      	ldr	r0, [r3, #4]
 8009fce:	7ebb      	ldrb	r3, [r7, #26]
 8009fd0:	8bba      	ldrh	r2, [r7, #28]
 8009fd2:	6979      	ldr	r1, [r7, #20]
 8009fd4:	f006 f970 	bl	80102b8 <tcp_write>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d12c      	bne.n	800a03e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	69db      	ldr	r3, [r3, #28]
 8009fe8:	6999      	ldr	r1, [r3, #24]
 8009fea:	8bba      	ldrh	r2, [r7, #28]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	6919      	ldr	r1, [r3, #16]
 8009ffa:	8bba      	ldrh	r2, [r7, #28]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	440a      	add	r2, r1
 800a002:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	691a      	ldr	r2, [r3, #16]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d113      	bne.n	800a03e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	899a      	ldrh	r2, [r3, #12]
 800a01c:	3a01      	subs	r2, #1
 800a01e:	b292      	uxth	r2, r2
 800a020:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	899b      	ldrh	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	3208      	adds	r2, #8
 800a034:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	2200      	movs	r2, #0
 800a03c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a03e:	7e7b      	ldrb	r3, [r7, #25]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <lwip_netconn_do_writemore+0x222>
 800a044:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f43f af50 	beq.w	8009eee <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a04e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <lwip_netconn_do_writemore+0x234>
 800a056:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d147      	bne.n	800a0f0 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800a060:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a062:	7e3b      	ldrb	r3, [r7, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02b      	beq.n	800a0c0 <lwip_netconn_do_writemore+0x294>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d223      	bcs.n	800a0c0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <lwip_netconn_do_writemore+0x260>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	2200      	movs	r2, #0
 800a086:	2103      	movs	r1, #3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7e1b      	ldrb	r3, [r3, #24]
 800a090:	f043 0310 	orr.w	r3, r3, #16
 800a094:	b2da      	uxtb	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	761a      	strb	r2, [r3, #24]
 800a09a:	e029      	b.n	800a0f0 <lwip_netconn_do_writemore+0x2c4>
 800a09c:	08018878 	.word	0x08018878
 800a0a0:	080189cc 	.word	0x080189cc
 800a0a4:	080188b8 	.word	0x080188b8
 800a0a8:	08018cd4 	.word	0x08018cd4
 800a0ac:	080189dc 	.word	0x080189dc
 800a0b0:	08018cf4 	.word	0x08018cf4
 800a0b4:	08018d0c 	.word	0x08018d0c
 800a0b8:	08018d4c 	.word	0x08018d4c
 800a0bc:	08018d74 	.word	0x08018d74
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a0c8:	f640 3269 	movw	r2, #2921	@ 0xb69
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d905      	bls.n	800a0dc <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d909      	bls.n	800a0f0 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <lwip_netconn_do_writemore+0x2c4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2103      	movs	r1, #3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a0f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11d      	bne.n	800a134 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	699a      	ldr	r2, [r3, #24]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	429a      	cmp	r2, r3
 800a106:	d002      	beq.n	800a10e <lwip_netconn_do_writemore+0x2e2>
 800a108:	7e3b      	ldrb	r3, [r7, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a10e:	2301      	movs	r3, #1
 800a110:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	4618      	mov	r0, r3
 800a118:	f006 ff16 	bl	8010f48 <tcp_output>
 800a11c:	4603      	mov	r3, r0
 800a11e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a120:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a124:	f113 0f04 	cmn.w	r3, #4
 800a128:	d12c      	bne.n	800a184 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a12a:	7b3b      	ldrb	r3, [r7, #12]
 800a12c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a12e:	2301      	movs	r3, #1
 800a130:	76fb      	strb	r3, [r7, #27]
 800a132:	e027      	b.n	800a184 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800a134:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13c:	d120      	bne.n	800a180 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	4618      	mov	r0, r3
 800a144:	f006 ff00 	bl	8010f48 <tcp_output>
 800a148:	4603      	mov	r3, r0
 800a14a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a14c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a150:	f113 0f04 	cmn.w	r3, #4
 800a154:	d104      	bne.n	800a160 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a156:	7b7b      	ldrb	r3, [r7, #13]
 800a158:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a15a:	2301      	movs	r3, #1
 800a15c:	76fb      	strb	r3, [r7, #27]
 800a15e:	e011      	b.n	800a184 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800a160:	7e3b      	ldrb	r3, [r7, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00e      	beq.n	800a184 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <lwip_netconn_do_writemore+0x34a>
 800a170:	f06f 0306 	mvn.w	r3, #6
 800a174:	e000      	b.n	800a178 <lwip_netconn_do_writemore+0x34c>
 800a176:	2300      	movs	r3, #0
 800a178:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a17a:	2301      	movs	r3, #1
 800a17c:	76fb      	strb	r3, [r7, #27]
 800a17e:	e001      	b.n	800a184 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a184:	7efb      	ldrb	r3, [r7, #27]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d015      	beq.n	800a1b6 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	330c      	adds	r3, #12
 800a192:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	7ffa      	ldrb	r2, [r7, #31]
 800a19a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d006      	beq.n	800a1bc <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a1ae:	68b8      	ldr	r0, [r7, #8]
 800a1b0:	f00c ffe4 	bl	801717c <sys_sem_signal>
 800a1b4:	e002      	b.n	800a1bc <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ba:	e000      	b.n	800a1be <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3720      	adds	r7, #32
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop

0800a1c8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fd9e 	bl	8008d1a <netconn_err>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d166      	bne.n	800a2b8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d15d      	bne.n	800a2b4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a202:	23fb      	movs	r3, #251	@ 0xfb
 800a204:	73fb      	strb	r3, [r7, #15]
 800a206:	e057      	b.n	800a2b8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04d      	beq.n	800a2ae <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2201      	movs	r2, #1
 800a218:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d006      	beq.n	800a232 <lwip_netconn_do_write+0x6a>
 800a224:	4b28      	ldr	r3, [pc, #160]	@ (800a2c8 <lwip_netconn_do_write+0x100>)
 800a226:	f240 7226 	movw	r2, #1830	@ 0x726
 800a22a:	4928      	ldr	r1, [pc, #160]	@ (800a2cc <lwip_netconn_do_write+0x104>)
 800a22c:	4828      	ldr	r0, [pc, #160]	@ (800a2d0 <lwip_netconn_do_write+0x108>)
 800a22e:	f7f6 fd31 	bl	8000c94 <printf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <lwip_netconn_do_write+0x80>
 800a23a:	4b23      	ldr	r3, [pc, #140]	@ (800a2c8 <lwip_netconn_do_write+0x100>)
 800a23c:	f240 7227 	movw	r2, #1831	@ 0x727
 800a240:	4924      	ldr	r1, [pc, #144]	@ (800a2d4 <lwip_netconn_do_write+0x10c>)
 800a242:	4823      	ldr	r0, [pc, #140]	@ (800a2d0 <lwip_netconn_do_write+0x108>)
 800a244:	f7f6 fd26 	bl	8000c94 <printf>
        msg->conn->current_msg = msg;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fde8 	bl	8009e2c <lwip_netconn_do_writemore>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d02e      	beq.n	800a2c0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d006      	beq.n	800a27a <lwip_netconn_do_write+0xb2>
 800a26c:	4b16      	ldr	r3, [pc, #88]	@ (800a2c8 <lwip_netconn_do_write+0x100>)
 800a26e:	f240 722b 	movw	r2, #1835	@ 0x72b
 800a272:	4919      	ldr	r1, [pc, #100]	@ (800a2d8 <lwip_netconn_do_write+0x110>)
 800a274:	4816      	ldr	r0, [pc, #88]	@ (800a2d0 <lwip_netconn_do_write+0x108>)
 800a276:	f7f6 fd0d 	bl	8000c94 <printf>
          UNLOCK_TCPIP_CORE();
 800a27a:	4818      	ldr	r0, [pc, #96]	@ (800a2dc <lwip_netconn_do_write+0x114>)
 800a27c:	f00c ffe7 	bl	801724e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	330c      	adds	r3, #12
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f00c ff46 	bl	801711a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a28e:	4813      	ldr	r0, [pc, #76]	@ (800a2dc <lwip_netconn_do_write+0x114>)
 800a290:	f00c ffce 	bl	8017230 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d110      	bne.n	800a2c0 <lwip_netconn_do_write+0xf8>
 800a29e:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <lwip_netconn_do_write+0x100>)
 800a2a0:	f240 722f 	movw	r2, #1839	@ 0x72f
 800a2a4:	490c      	ldr	r1, [pc, #48]	@ (800a2d8 <lwip_netconn_do_write+0x110>)
 800a2a6:	480a      	ldr	r0, [pc, #40]	@ (800a2d0 <lwip_netconn_do_write+0x108>)
 800a2a8:	f7f6 fcf4 	bl	8000c94 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a2ac:	e008      	b.n	800a2c0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a2ae:	23f5      	movs	r3, #245	@ 0xf5
 800a2b0:	73fb      	strb	r3, [r7, #15]
 800a2b2:	e001      	b.n	800a2b8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a2b4:	23fa      	movs	r3, #250	@ 0xfa
 800a2b6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	e000      	b.n	800a2c2 <lwip_netconn_do_write+0xfa>
        return;
 800a2c0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	08018878 	.word	0x08018878
 800a2cc:	08018c18 	.word	0x08018c18
 800a2d0:	080188b8 	.word	0x080188b8
 800a2d4:	08018da0 	.word	0x08018da0
 800a2d8:	08018c34 	.word	0x08018c34
 800a2dc:	200054e8 	.word	0x200054e8

0800a2e0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d069      	beq.n	800a3d2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d162      	bne.n	800a3d2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a310:	2b03      	cmp	r3, #3
 800a312:	d002      	beq.n	800a31a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d05b      	beq.n	800a3d2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	d103      	bne.n	800a328 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	22f5      	movs	r2, #245	@ 0xf5
 800a324:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a326:	e059      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d103      	bne.n	800a336 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	22fb      	movs	r2, #251	@ 0xfb
 800a332:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a334:	e052      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	7a1b      	ldrb	r3, [r3, #8]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff f95a 	bl	8009600 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <lwip_netconn_do_close+0x84>
 800a356:	4b23      	ldr	r3, [pc, #140]	@ (800a3e4 <lwip_netconn_do_close+0x104>)
 800a358:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800a35c:	4922      	ldr	r1, [pc, #136]	@ (800a3e8 <lwip_netconn_do_close+0x108>)
 800a35e:	4823      	ldr	r0, [pc, #140]	@ (800a3ec <lwip_netconn_do_close+0x10c>)
 800a360:	f7f6 fc98 	bl	8000c94 <printf>
      msg->conn->state = NETCONN_CLOSE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2204      	movs	r2, #4
 800a36a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f9be 	bl	80096fc <lwip_netconn_do_close_internal>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d029      	beq.n	800a3da <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d006      	beq.n	800a39e <lwip_netconn_do_close+0xbe>
 800a390:	4b14      	ldr	r3, [pc, #80]	@ (800a3e4 <lwip_netconn_do_close+0x104>)
 800a392:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800a396:	4916      	ldr	r1, [pc, #88]	@ (800a3f0 <lwip_netconn_do_close+0x110>)
 800a398:	4814      	ldr	r0, [pc, #80]	@ (800a3ec <lwip_netconn_do_close+0x10c>)
 800a39a:	f7f6 fc7b 	bl	8000c94 <printf>
        UNLOCK_TCPIP_CORE();
 800a39e:	4815      	ldr	r0, [pc, #84]	@ (800a3f4 <lwip_netconn_do_close+0x114>)
 800a3a0:	f00c ff55 	bl	801724e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f00c feb4 	bl	801711a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a3b2:	4810      	ldr	r0, [pc, #64]	@ (800a3f4 <lwip_netconn_do_close+0x114>)
 800a3b4:	f00c ff3c 	bl	8017230 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <lwip_netconn_do_close+0xfa>
 800a3c2:	4b08      	ldr	r3, [pc, #32]	@ (800a3e4 <lwip_netconn_do_close+0x104>)
 800a3c4:	f240 72c9 	movw	r2, #1993	@ 0x7c9
 800a3c8:	4909      	ldr	r1, [pc, #36]	@ (800a3f0 <lwip_netconn_do_close+0x110>)
 800a3ca:	4808      	ldr	r0, [pc, #32]	@ (800a3ec <lwip_netconn_do_close+0x10c>)
 800a3cc:	f7f6 fc62 	bl	8000c94 <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a3d0:	e003      	b.n	800a3da <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22f5      	movs	r2, #245	@ 0xf5
 800a3d6:	711a      	strb	r2, [r3, #4]
 800a3d8:	e000      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
      return;
 800a3da:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	08018878 	.word	0x08018878
 800a3e8:	08018c18 	.word	0x08018c18
 800a3ec:	080188b8 	.word	0x080188b8
 800a3f0:	08018c34 	.word	0x08018c34
 800a3f4:	200054e8 	.word	0x200054e8

0800a3f8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d013      	beq.n	800a42e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00b      	beq.n	800a426 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f001 fe02 	bl	800c01c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	2006      	movs	r0, #6
 800a42a:	f000 ffff 	bl	800b42c <memp_free>
  }
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a442:	f007 fe67 	bl	8012114 <sys_timeouts_sleeptime>
 800a446:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d10b      	bne.n	800a468 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a450:	4813      	ldr	r0, [pc, #76]	@ (800a4a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a452:	f00c fefc 	bl	801724e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a456:	2200      	movs	r2, #0
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f00c fdd2 	bl	8017004 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a460:	480f      	ldr	r0, [pc, #60]	@ (800a4a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a462:	f00c fee5 	bl	8017230 <sys_mutex_lock>
    return;
 800a466:	e018      	b.n	800a49a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a46e:	f007 fe17 	bl	80120a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a472:	e7e6      	b.n	800a442 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a474:	480a      	ldr	r0, [pc, #40]	@ (800a4a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a476:	f00c feea 	bl	801724e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f00c fdc0 	bl	8017004 <sys_arch_mbox_fetch>
 800a484:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a486:	4806      	ldr	r0, [pc, #24]	@ (800a4a0 <tcpip_timeouts_mbox_fetch+0x68>)
 800a488:	f00c fed2 	bl	8017230 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a492:	d102      	bne.n	800a49a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a494:	f007 fe04 	bl	80120a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a498:	e7d3      	b.n	800a442 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200054e8 	.word	0x200054e8

0800a4a4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a4ac:	4810      	ldr	r0, [pc, #64]	@ (800a4f0 <tcpip_thread+0x4c>)
 800a4ae:	f00c febf 	bl	8017230 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a4b2:	4b10      	ldr	r3, [pc, #64]	@ (800a4f4 <tcpip_thread+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <tcpip_thread+0x50>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a0e      	ldr	r2, [pc, #56]	@ (800a4f8 <tcpip_thread+0x54>)
 800a4c0:	6812      	ldr	r2, [r2, #0]
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	480b      	ldr	r0, [pc, #44]	@ (800a4fc <tcpip_thread+0x58>)
 800a4ce:	f7ff ffb3 	bl	800a438 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a4d8:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <tcpip_thread+0x5c>)
 800a4da:	2291      	movs	r2, #145	@ 0x91
 800a4dc:	4909      	ldr	r1, [pc, #36]	@ (800a504 <tcpip_thread+0x60>)
 800a4de:	480a      	ldr	r0, [pc, #40]	@ (800a508 <tcpip_thread+0x64>)
 800a4e0:	f7f6 fbd8 	bl	8000c94 <printf>
      continue;
 800a4e4:	e003      	b.n	800a4ee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f80f 	bl	800a50c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a4ee:	e7ea      	b.n	800a4c6 <tcpip_thread+0x22>
 800a4f0:	200054e8 	.word	0x200054e8
 800a4f4:	20004a58 	.word	0x20004a58
 800a4f8:	20004a5c 	.word	0x20004a5c
 800a4fc:	20004a60 	.word	0x20004a60
 800a500:	08018dcc 	.word	0x08018dcc
 800a504:	08018df8 	.word	0x08018df8
 800a508:	08018e18 	.word	0x08018e18

0800a50c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d026      	beq.n	800a56a <tcpip_thread_handle_msg+0x5e>
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	dc2b      	bgt.n	800a578 <tcpip_thread_handle_msg+0x6c>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <tcpip_thread_handle_msg+0x1e>
 800a524:	2b01      	cmp	r3, #1
 800a526:	d015      	beq.n	800a554 <tcpip_thread_handle_msg+0x48>
 800a528:	e026      	b.n	800a578 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6850      	ldr	r0, [r2, #4]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6892      	ldr	r2, [r2, #8]
 800a536:	4611      	mov	r1, r2
 800a538:	4798      	blx	r3
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	f001 fd69 	bl	800c01c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	2009      	movs	r0, #9
 800a54e:	f000 ff6d 	bl	800b42c <memp_free>
      break;
 800a552:	e018      	b.n	800a586 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6892      	ldr	r2, [r2, #8]
 800a55c:	4610      	mov	r0, r2
 800a55e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a560:	6879      	ldr	r1, [r7, #4]
 800a562:	2008      	movs	r0, #8
 800a564:	f000 ff62 	bl	800b42c <memp_free>
      break;
 800a568:	e00d      	b.n	800a586 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6892      	ldr	r2, [r2, #8]
 800a572:	4610      	mov	r0, r2
 800a574:	4798      	blx	r3
      break;
 800a576:	e006      	b.n	800a586 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a578:	4b05      	ldr	r3, [pc, #20]	@ (800a590 <tcpip_thread_handle_msg+0x84>)
 800a57a:	22cf      	movs	r2, #207	@ 0xcf
 800a57c:	4905      	ldr	r1, [pc, #20]	@ (800a594 <tcpip_thread_handle_msg+0x88>)
 800a57e:	4806      	ldr	r0, [pc, #24]	@ (800a598 <tcpip_thread_handle_msg+0x8c>)
 800a580:	f7f6 fb88 	bl	8000c94 <printf>
      break;
 800a584:	bf00      	nop
  }
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	08018dcc 	.word	0x08018dcc
 800a594:	08018df8 	.word	0x08018df8
 800a598:	08018e18 	.word	0x08018e18

0800a59c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a5a8:	481a      	ldr	r0, [pc, #104]	@ (800a614 <tcpip_inpkt+0x78>)
 800a5aa:	f00c fd73 	bl	8017094 <sys_mbox_valid>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d105      	bne.n	800a5c0 <tcpip_inpkt+0x24>
 800a5b4:	4b18      	ldr	r3, [pc, #96]	@ (800a618 <tcpip_inpkt+0x7c>)
 800a5b6:	22fc      	movs	r2, #252	@ 0xfc
 800a5b8:	4918      	ldr	r1, [pc, #96]	@ (800a61c <tcpip_inpkt+0x80>)
 800a5ba:	4819      	ldr	r0, [pc, #100]	@ (800a620 <tcpip_inpkt+0x84>)
 800a5bc:	f7f6 fb6a 	bl	8000c94 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a5c0:	2009      	movs	r0, #9
 800a5c2:	f000 feef 	bl	800b3a4 <memp_malloc>
 800a5c6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d102      	bne.n	800a5d4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d2:	e01a      	b.n	800a60a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a5ec:	6979      	ldr	r1, [r7, #20]
 800a5ee:	4809      	ldr	r0, [pc, #36]	@ (800a614 <tcpip_inpkt+0x78>)
 800a5f0:	f00c fcee 	bl	8016fd0 <sys_mbox_trypost>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d006      	beq.n	800a608 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a5fa:	6979      	ldr	r1, [r7, #20]
 800a5fc:	2009      	movs	r0, #9
 800a5fe:	f000 ff15 	bl	800b42c <memp_free>
    return ERR_MEM;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	e000      	b.n	800a60a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a608:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20004a60 	.word	0x20004a60
 800a618:	08018dcc 	.word	0x08018dcc
 800a61c:	08018e40 	.word	0x08018e40
 800a620:	08018e18 	.word	0x08018e18

0800a624 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a634:	f003 0318 	and.w	r3, r3, #24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a63c:	4a08      	ldr	r2, [pc, #32]	@ (800a660 <tcpip_input+0x3c>)
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff ffab 	bl	800a59c <tcpip_inpkt>
 800a646:	4603      	mov	r3, r0
 800a648:	e005      	b.n	800a656 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a64a:	4a06      	ldr	r2, [pc, #24]	@ (800a664 <tcpip_input+0x40>)
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff ffa4 	bl	800a59c <tcpip_inpkt>
 800a654:	4603      	mov	r3, r0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	08016da1 	.word	0x08016da1
 800a664:	08015b71 	.word	0x08015b71

0800a668 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a672:	4814      	ldr	r0, [pc, #80]	@ (800a6c4 <tcpip_callback+0x5c>)
 800a674:	f00c fd0e 	bl	8017094 <sys_mbox_valid>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <tcpip_callback+0x24>
 800a67e:	4b12      	ldr	r3, [pc, #72]	@ (800a6c8 <tcpip_callback+0x60>)
 800a680:	f240 1239 	movw	r2, #313	@ 0x139
 800a684:	4911      	ldr	r1, [pc, #68]	@ (800a6cc <tcpip_callback+0x64>)
 800a686:	4812      	ldr	r0, [pc, #72]	@ (800a6d0 <tcpip_callback+0x68>)
 800a688:	f7f6 fb04 	bl	8000c94 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a68c:	2008      	movs	r0, #8
 800a68e:	f000 fe89 	bl	800b3a4 <memp_malloc>
 800a692:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <tcpip_callback+0x38>
    return ERR_MEM;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	e00d      	b.n	800a6bc <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800a6b2:	68f9      	ldr	r1, [r7, #12]
 800a6b4:	4803      	ldr	r0, [pc, #12]	@ (800a6c4 <tcpip_callback+0x5c>)
 800a6b6:	f00c fc75 	bl	8016fa4 <sys_mbox_post>
  return ERR_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20004a60 	.word	0x20004a60
 800a6c8:	08018dcc 	.word	0x08018dcc
 800a6cc:	08018e40 	.word	0x08018e40
 800a6d0:	08018e18 	.word	0x08018e18

0800a6d4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a6e0:	4806      	ldr	r0, [pc, #24]	@ (800a6fc <tcpip_send_msg_wait_sem+0x28>)
 800a6e2:	f00c fda5 	bl	8017230 <sys_mutex_lock>
  fn(apimsg);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	68b8      	ldr	r0, [r7, #8]
 800a6ea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a6ec:	4803      	ldr	r0, [pc, #12]	@ (800a6fc <tcpip_send_msg_wait_sem+0x28>)
 800a6ee:	f00c fdae 	bl	801724e <sys_mutex_unlock>
  return ERR_OK;
 800a6f2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200054e8 	.word	0x200054e8

0800a700 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af02      	add	r7, sp, #8
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a70a:	f000 f9ea 	bl	800aae2 <lwip_init>

  tcpip_init_done = initfunc;
 800a70e:	4a17      	ldr	r2, [pc, #92]	@ (800a76c <tcpip_init+0x6c>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a714:	4a16      	ldr	r2, [pc, #88]	@ (800a770 <tcpip_init+0x70>)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a71a:	2105      	movs	r1, #5
 800a71c:	4815      	ldr	r0, [pc, #84]	@ (800a774 <tcpip_init+0x74>)
 800a71e:	f00c fc15 	bl	8016f4c <sys_mbox_new>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d006      	beq.n	800a736 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a728:	4b13      	ldr	r3, [pc, #76]	@ (800a778 <tcpip_init+0x78>)
 800a72a:	f240 2261 	movw	r2, #609	@ 0x261
 800a72e:	4913      	ldr	r1, [pc, #76]	@ (800a77c <tcpip_init+0x7c>)
 800a730:	4813      	ldr	r0, [pc, #76]	@ (800a780 <tcpip_init+0x80>)
 800a732:	f7f6 faaf 	bl	8000c94 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a736:	4813      	ldr	r0, [pc, #76]	@ (800a784 <tcpip_init+0x84>)
 800a738:	f00c fd64 	bl	8017204 <sys_mutex_new>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <tcpip_init+0x78>)
 800a744:	f240 2265 	movw	r2, #613	@ 0x265
 800a748:	490f      	ldr	r1, [pc, #60]	@ (800a788 <tcpip_init+0x88>)
 800a74a:	480d      	ldr	r0, [pc, #52]	@ (800a780 <tcpip_init+0x80>)
 800a74c:	f7f6 faa2 	bl	8000c94 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a750:	2330      	movs	r3, #48	@ 0x30
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a758:	2200      	movs	r2, #0
 800a75a:	490c      	ldr	r1, [pc, #48]	@ (800a78c <tcpip_init+0x8c>)
 800a75c:	480c      	ldr	r0, [pc, #48]	@ (800a790 <tcpip_init+0x90>)
 800a75e:	f00c fd83 	bl	8017268 <sys_thread_new>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20004a58 	.word	0x20004a58
 800a770:	20004a5c 	.word	0x20004a5c
 800a774:	20004a60 	.word	0x20004a60
 800a778:	08018dcc 	.word	0x08018dcc
 800a77c:	08018e50 	.word	0x08018e50
 800a780:	08018e18 	.word	0x08018e18
 800a784:	200054e8 	.word	0x200054e8
 800a788:	08018e74 	.word	0x08018e74
 800a78c:	0800a4a5 	.word	0x0800a4a5
 800a790:	08018e98 	.word	0x08018e98

0800a794 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	b21a      	sxth	r2, r3
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	0a1b      	lsrs	r3, r3, #8
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	b21b      	sxth	r3, r3
 800a7b0:	b29b      	uxth	r3, r3
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	061a      	lsls	r2, r3, #24
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	0a1b      	lsrs	r3, r3, #8
 800a7d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	0e1b      	lsrs	r3, r3, #24
 800a7e2:	4313      	orrs	r3, r2
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b089      	sub	sp, #36	@ 0x24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00d      	beq.n	800a830 <lwip_standard_chksum+0x40>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dd0a      	ble.n	800a830 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	1c53      	adds	r3, r2, #1
 800a81e:	61fb      	str	r3, [r7, #28]
 800a820:	f107 030e 	add.w	r3, r7, #14
 800a824:	3301      	adds	r3, #1
 800a826:	7812      	ldrb	r2, [r2, #0]
 800a828:	701a      	strb	r2, [r3, #0]
    len--;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a834:	e00a      	b.n	800a84c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	1c9a      	adds	r2, r3, #2
 800a83a:	61ba      	str	r2, [r7, #24]
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	461a      	mov	r2, r3
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	4413      	add	r3, r2
 800a844:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	3b02      	subs	r3, #2
 800a84a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	dcf1      	bgt.n	800a836 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd04      	ble.n	800a862 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a858:	f107 030e 	add.w	r3, r7, #14
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	7812      	ldrb	r2, [r2, #0]
 800a860:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a862:	89fb      	ldrh	r3, [r7, #14]
 800a864:	461a      	mov	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	4413      	add	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	0c1a      	lsrs	r2, r3, #16
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	b29b      	uxth	r3, r3
 800a874:	4413      	add	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	0c1a      	lsrs	r2, r3, #16
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4413      	add	r3, r2
 800a882:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	b29a      	uxth	r2, r3
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b2db      	uxtb	r3, r3
 800a896:	4313      	orrs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	b29b      	uxth	r3, r3
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3724      	adds	r7, #36	@ 0x24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	607b      	str	r3, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	72fb      	strb	r3, [r7, #11]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e02b      	b.n	800a91e <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	895b      	ldrh	r3, [r3, #10]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f7ff ff8d 	bl	800a7f0 <lwip_standard_chksum>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	461a      	mov	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	0c1a      	lsrs	r2, r3, #16
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	4413      	add	r3, r2
 800a8ea:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	895b      	ldrh	r3, [r3, #10]
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bf0c      	ite	eq
 800a900:	2301      	moveq	r3, #1
 800a902:	2300      	movne	r3, #0
 800a904:	b2db      	uxtb	r3, r3
 800a906:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	0a1b      	lsrs	r3, r3, #8
 800a912:	b2db      	uxtb	r3, r3
 800a914:	4313      	orrs	r3, r2
 800a916:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1d0      	bne.n	800a8c6 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	b2db      	uxtb	r3, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff ff28 	bl	800a794 <lwip_htons>
 800a944:	4603      	mov	r3, r0
 800a946:	461a      	mov	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4413      	add	r3, r2
 800a94c:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800a94e:	893b      	ldrh	r3, [r7, #8]
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff ff1f 	bl	800a794 <lwip_htons>
 800a956:	4603      	mov	r3, r0
 800a958:	461a      	mov	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	0c1a      	lsrs	r2, r3, #16
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	b29b      	uxth	r3, r3
 800a968:	4413      	add	r3, r2
 800a96a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	0c1a      	lsrs	r2, r3, #16
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	b29b      	uxth	r3, r3
 800a974:	4413      	add	r3, r2
 800a976:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	43db      	mvns	r3, r3
 800a97e:	b29b      	uxth	r3, r3
}
 800a980:	4618      	mov	r0, r3
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	72fb      	strb	r3, [r7, #11]
 800a996:	4613      	mov	r3, r2
 800a998:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	0c1b      	lsrs	r3, r3, #16
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4413      	add	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	0c1b      	lsrs	r3, r3, #16
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	0c1a      	lsrs	r2, r3, #16
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	0c1a      	lsrs	r2, r3, #16
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	4413      	add	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800a9e2:	893a      	ldrh	r2, [r7, #8]
 800a9e4:	7af9      	ldrb	r1, [r7, #11]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff ff5e 	bl	800a8aa <inet_cksum_pseudo_base>
 800a9ee:	4603      	mov	r3, r0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	607b      	str	r3, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	72fb      	strb	r3, [r7, #11]
 800aa06:	4613      	mov	r3, r2
 800aa08:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800aa0a:	893a      	ldrh	r2, [r7, #8]
 800aa0c:	7af9      	ldrb	r1, [r7, #11]
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f7ff ffb7 	bl	800a988 <inet_chksum_pseudo>
 800aa1a:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800aa30:	887b      	ldrh	r3, [r7, #2]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fedb 	bl	800a7f0 <lwip_standard_chksum>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	b29b      	uxth	r3, r3
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	613b      	str	r3, [r7, #16]
 800aa5c:	e02b      	b.n	800aab6 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	895b      	ldrh	r3, [r3, #10]
 800aa66:	4619      	mov	r1, r3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	f7ff fec1 	bl	800a7f0 <lwip_standard_chksum>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	461a      	mov	r2, r3
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	4413      	add	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	0c1a      	lsrs	r2, r3, #16
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	4413      	add	r3, r2
 800aa82:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	895b      	ldrh	r3, [r3, #10]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00e      	beq.n	800aab0 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bf0c      	ite	eq
 800aa98:	2301      	moveq	r3, #1
 800aa9a:	2300      	movne	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1d0      	bne.n	800aa5e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	4313      	orrs	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	43db      	mvns	r3, r3
 800aad8:	b29b      	uxth	r3, r3
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aaec:	f00c fb7e 	bl	80171ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aaf0:	f000 f8d4 	bl	800ac9c <mem_init>
  memp_init();
 800aaf4:	f000 fc12 	bl	800b31c <memp_init>
  pbuf_init();
  netif_init();
 800aaf8:	f000 fcba 	bl	800b470 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aafc:	f007 fb42 	bl	8012184 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ab00:	f001 fd56 	bl	800c5b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ab04:	f007 fa84 	bl	8012010 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ab1a:	4b05      	ldr	r3, [pc, #20]	@ (800ab30 <ptr_to_mem+0x20>)
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	88fb      	ldrh	r3, [r7, #6]
 800ab20:	4413      	add	r3, r2
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	20004a64 	.word	0x20004a64

0800ab34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ab3c:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <mem_to_ptr+0x20>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	b29b      	uxth	r3, r3
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20004a64 	.word	0x20004a64

0800ab58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ab58:	b590      	push	{r4, r7, lr}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ab60:	4b45      	ldr	r3, [pc, #276]	@ (800ac78 <plug_holes+0x120>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d206      	bcs.n	800ab78 <plug_holes+0x20>
 800ab6a:	4b44      	ldr	r3, [pc, #272]	@ (800ac7c <plug_holes+0x124>)
 800ab6c:	f240 12df 	movw	r2, #479	@ 0x1df
 800ab70:	4943      	ldr	r1, [pc, #268]	@ (800ac80 <plug_holes+0x128>)
 800ab72:	4844      	ldr	r0, [pc, #272]	@ (800ac84 <plug_holes+0x12c>)
 800ab74:	f7f6 f88e 	bl	8000c94 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ab78:	4b43      	ldr	r3, [pc, #268]	@ (800ac88 <plug_holes+0x130>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d306      	bcc.n	800ab90 <plug_holes+0x38>
 800ab82:	4b3e      	ldr	r3, [pc, #248]	@ (800ac7c <plug_holes+0x124>)
 800ab84:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ab88:	4940      	ldr	r1, [pc, #256]	@ (800ac8c <plug_holes+0x134>)
 800ab8a:	483e      	ldr	r0, [pc, #248]	@ (800ac84 <plug_holes+0x12c>)
 800ab8c:	f7f6 f882 	bl	8000c94 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	791b      	ldrb	r3, [r3, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d006      	beq.n	800aba6 <plug_holes+0x4e>
 800ab98:	4b38      	ldr	r3, [pc, #224]	@ (800ac7c <plug_holes+0x124>)
 800ab9a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ab9e:	493c      	ldr	r1, [pc, #240]	@ (800ac90 <plug_holes+0x138>)
 800aba0:	4838      	ldr	r0, [pc, #224]	@ (800ac84 <plug_holes+0x12c>)
 800aba2:	f7f6 f877 	bl	8000c94 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800abae:	d906      	bls.n	800abbe <plug_holes+0x66>
 800abb0:	4b32      	ldr	r3, [pc, #200]	@ (800ac7c <plug_holes+0x124>)
 800abb2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800abb6:	4937      	ldr	r1, [pc, #220]	@ (800ac94 <plug_holes+0x13c>)
 800abb8:	4832      	ldr	r0, [pc, #200]	@ (800ac84 <plug_holes+0x12c>)
 800abba:	f7f6 f86b 	bl	8000c94 <printf>

  nmem = ptr_to_mem(mem->next);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff ffa4 	bl	800ab10 <ptr_to_mem>
 800abc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d024      	beq.n	800ac1c <plug_holes+0xc4>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	791b      	ldrb	r3, [r3, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d120      	bne.n	800ac1c <plug_holes+0xc4>
 800abda:	4b2b      	ldr	r3, [pc, #172]	@ (800ac88 <plug_holes+0x130>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d01b      	beq.n	800ac1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800abe4:	4b2c      	ldr	r3, [pc, #176]	@ (800ac98 <plug_holes+0x140>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	429a      	cmp	r2, r3
 800abec:	d102      	bne.n	800abf4 <plug_holes+0x9c>
      lfree = mem;
 800abee:	4a2a      	ldr	r2, [pc, #168]	@ (800ac98 <plug_holes+0x140>)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	881a      	ldrh	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ac04:	d00a      	beq.n	800ac1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff ff80 	bl	800ab10 <ptr_to_mem>
 800ac10:	4604      	mov	r4, r0
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff ff8e 	bl	800ab34 <mem_to_ptr>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ff75 	bl	800ab10 <ptr_to_mem>
 800ac26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d01f      	beq.n	800ac70 <plug_holes+0x118>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	791b      	ldrb	r3, [r3, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d11b      	bne.n	800ac70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ac38:	4b17      	ldr	r3, [pc, #92]	@ (800ac98 <plug_holes+0x140>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d102      	bne.n	800ac48 <plug_holes+0xf0>
      lfree = pmem;
 800ac42:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <plug_holes+0x140>)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	881a      	ldrh	r2, [r3, #0]
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ac58:	d00a      	beq.n	800ac70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff ff56 	bl	800ab10 <ptr_to_mem>
 800ac64:	4604      	mov	r4, r0
 800ac66:	68b8      	ldr	r0, [r7, #8]
 800ac68:	f7ff ff64 	bl	800ab34 <mem_to_ptr>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ac70:	bf00      	nop
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd90      	pop	{r4, r7, pc}
 800ac78:	20004a64 	.word	0x20004a64
 800ac7c:	08018ea0 	.word	0x08018ea0
 800ac80:	08018ecc 	.word	0x08018ecc
 800ac84:	08018ee4 	.word	0x08018ee4
 800ac88:	20004a68 	.word	0x20004a68
 800ac8c:	08018f0c 	.word	0x08018f0c
 800ac90:	08018f28 	.word	0x08018f28
 800ac94:	08018f44 	.word	0x08018f44
 800ac98:	20004a70 	.word	0x20004a70

0800ac9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aca2:	4b1f      	ldr	r3, [pc, #124]	@ (800ad20 <mem_init+0x84>)
 800aca4:	3303      	adds	r3, #3
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	461a      	mov	r2, r3
 800acac:	4b1d      	ldr	r3, [pc, #116]	@ (800ad24 <mem_init+0x88>)
 800acae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800acb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad24 <mem_init+0x88>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800acbc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800acca:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800acce:	f7ff ff1f 	bl	800ab10 <ptr_to_mem>
 800acd2:	4603      	mov	r3, r0
 800acd4:	4a14      	ldr	r2, [pc, #80]	@ (800ad28 <mem_init+0x8c>)
 800acd6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800acd8:	4b13      	ldr	r3, [pc, #76]	@ (800ad28 <mem_init+0x8c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2201      	movs	r2, #1
 800acde:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ace0:	4b11      	ldr	r3, [pc, #68]	@ (800ad28 <mem_init+0x8c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800ace8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800acea:	4b0f      	ldr	r3, [pc, #60]	@ (800ad28 <mem_init+0x8c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800acf2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800acf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ad24 <mem_init+0x88>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ad2c <mem_init+0x90>)
 800acfa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800acfc:	480c      	ldr	r0, [pc, #48]	@ (800ad30 <mem_init+0x94>)
 800acfe:	f00c fa81 	bl	8017204 <sys_mutex_new>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d006      	beq.n	800ad16 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ad08:	4b0a      	ldr	r3, [pc, #40]	@ (800ad34 <mem_init+0x98>)
 800ad0a:	f240 221f 	movw	r2, #543	@ 0x21f
 800ad0e:	490a      	ldr	r1, [pc, #40]	@ (800ad38 <mem_init+0x9c>)
 800ad10:	480a      	ldr	r0, [pc, #40]	@ (800ad3c <mem_init+0xa0>)
 800ad12:	f7f5 ffbf 	bl	8000c94 <printf>
  }
}
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20005504 	.word	0x20005504
 800ad24:	20004a64 	.word	0x20004a64
 800ad28:	20004a68 	.word	0x20004a68
 800ad2c:	20004a70 	.word	0x20004a70
 800ad30:	20004a6c 	.word	0x20004a6c
 800ad34:	08018ea0 	.word	0x08018ea0
 800ad38:	08018f70 	.word	0x08018f70
 800ad3c:	08018ee4 	.word	0x08018ee4

0800ad40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fef3 	bl	800ab34 <mem_to_ptr>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	881b      	ldrh	r3, [r3, #0]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff feda 	bl	800ab10 <ptr_to_mem>
 800ad5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	885b      	ldrh	r3, [r3, #2]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fed4 	bl	800ab10 <ptr_to_mem>
 800ad68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ad72:	d818      	bhi.n	800ada6 <mem_link_valid+0x66>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	885b      	ldrh	r3, [r3, #2]
 800ad78:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ad7c:	d813      	bhi.n	800ada6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad82:	8afa      	ldrh	r2, [r7, #22]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d004      	beq.n	800ad92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	8afa      	ldrh	r2, [r7, #22]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d109      	bne.n	800ada6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad92:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <mem_link_valid+0x74>)
 800ad94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d006      	beq.n	800adaa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	885b      	ldrh	r3, [r3, #2]
 800ada0:	8afa      	ldrh	r2, [r7, #22]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d001      	beq.n	800adaa <mem_link_valid+0x6a>
    return 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e000      	b.n	800adac <mem_link_valid+0x6c>
  }
  return 1;
 800adaa:	2301      	movs	r3, #1
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20004a68 	.word	0x20004a68

0800adb8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d058      	beq.n	800ae78 <mem_free+0xc0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d007      	beq.n	800ade0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800add0:	4b2b      	ldr	r3, [pc, #172]	@ (800ae80 <mem_free+0xc8>)
 800add2:	f240 2273 	movw	r2, #627	@ 0x273
 800add6:	492b      	ldr	r1, [pc, #172]	@ (800ae84 <mem_free+0xcc>)
 800add8:	482b      	ldr	r0, [pc, #172]	@ (800ae88 <mem_free+0xd0>)
 800adda:	f7f5 ff5b 	bl	8000c94 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800adde:	e04c      	b.n	800ae7a <mem_free+0xc2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3b08      	subs	r3, #8
 800ade4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ade6:	4b29      	ldr	r3, [pc, #164]	@ (800ae8c <mem_free+0xd4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	429a      	cmp	r2, r3
 800adee:	d306      	bcc.n	800adfe <mem_free+0x46>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f103 020c 	add.w	r2, r3, #12
 800adf6:	4b26      	ldr	r3, [pc, #152]	@ (800ae90 <mem_free+0xd8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d907      	bls.n	800ae0e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800adfe:	4b20      	ldr	r3, [pc, #128]	@ (800ae80 <mem_free+0xc8>)
 800ae00:	f240 227f 	movw	r2, #639	@ 0x27f
 800ae04:	4923      	ldr	r1, [pc, #140]	@ (800ae94 <mem_free+0xdc>)
 800ae06:	4820      	ldr	r0, [pc, #128]	@ (800ae88 <mem_free+0xd0>)
 800ae08:	f7f5 ff44 	bl	8000c94 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae0c:	e035      	b.n	800ae7a <mem_free+0xc2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ae0e:	4822      	ldr	r0, [pc, #136]	@ (800ae98 <mem_free+0xe0>)
 800ae10:	f00c fa0e 	bl	8017230 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	791b      	ldrb	r3, [r3, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ae1c:	4b18      	ldr	r3, [pc, #96]	@ (800ae80 <mem_free+0xc8>)
 800ae1e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ae22:	491e      	ldr	r1, [pc, #120]	@ (800ae9c <mem_free+0xe4>)
 800ae24:	4818      	ldr	r0, [pc, #96]	@ (800ae88 <mem_free+0xd0>)
 800ae26:	f7f5 ff35 	bl	8000c94 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae2a:	481b      	ldr	r0, [pc, #108]	@ (800ae98 <mem_free+0xe0>)
 800ae2c:	f00c fa0f 	bl	801724e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae30:	e023      	b.n	800ae7a <mem_free+0xc2>
  }

  if (!mem_link_valid(mem)) {
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff ff84 	bl	800ad40 <mem_link_valid>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <mem_free+0x9c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae3e:	4b10      	ldr	r3, [pc, #64]	@ (800ae80 <mem_free+0xc8>)
 800ae40:	f240 2295 	movw	r2, #661	@ 0x295
 800ae44:	4916      	ldr	r1, [pc, #88]	@ (800aea0 <mem_free+0xe8>)
 800ae46:	4810      	ldr	r0, [pc, #64]	@ (800ae88 <mem_free+0xd0>)
 800ae48:	f7f5 ff24 	bl	8000c94 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae4c:	4812      	ldr	r0, [pc, #72]	@ (800ae98 <mem_free+0xe0>)
 800ae4e:	f00c f9fe 	bl	801724e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ae52:	e012      	b.n	800ae7a <mem_free+0xc2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae5a:	4b12      	ldr	r3, [pc, #72]	@ (800aea4 <mem_free+0xec>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d202      	bcs.n	800ae6a <mem_free+0xb2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae64:	4a0f      	ldr	r2, [pc, #60]	@ (800aea4 <mem_free+0xec>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f7ff fe74 	bl	800ab58 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae70:	4809      	ldr	r0, [pc, #36]	@ (800ae98 <mem_free+0xe0>)
 800ae72:	f00c f9ec 	bl	801724e <sys_mutex_unlock>
 800ae76:	e000      	b.n	800ae7a <mem_free+0xc2>
    return;
 800ae78:	bf00      	nop
}
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	08018ea0 	.word	0x08018ea0
 800ae84:	08018f8c 	.word	0x08018f8c
 800ae88:	08018ee4 	.word	0x08018ee4
 800ae8c:	20004a64 	.word	0x20004a64
 800ae90:	20004a68 	.word	0x20004a68
 800ae94:	08018fb0 	.word	0x08018fb0
 800ae98:	20004a6c 	.word	0x20004a6c
 800ae9c:	08018fcc 	.word	0x08018fcc
 800aea0:	08018ff4 	.word	0x08018ff4
 800aea4:	20004a70 	.word	0x20004a70

0800aea8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b088      	sub	sp, #32
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aeb4:	887b      	ldrh	r3, [r7, #2]
 800aeb6:	3303      	adds	r3, #3
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aec0:	8bfb      	ldrh	r3, [r7, #30]
 800aec2:	2b0b      	cmp	r3, #11
 800aec4:	d801      	bhi.n	800aeca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aec6:	230c      	movs	r3, #12
 800aec8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aeca:	8bfb      	ldrh	r3, [r7, #30]
 800aecc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800aed0:	d803      	bhi.n	800aeda <mem_trim+0x32>
 800aed2:	8bfa      	ldrh	r2, [r7, #30]
 800aed4:	887b      	ldrh	r3, [r7, #2]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d201      	bcs.n	800aede <mem_trim+0x36>
    return NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e0d2      	b.n	800b084 <mem_trim+0x1dc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aede:	4b6b      	ldr	r3, [pc, #428]	@ (800b08c <mem_trim+0x1e4>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d304      	bcc.n	800aef2 <mem_trim+0x4a>
 800aee8:	4b69      	ldr	r3, [pc, #420]	@ (800b090 <mem_trim+0x1e8>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d306      	bcc.n	800af00 <mem_trim+0x58>
 800aef2:	4b68      	ldr	r3, [pc, #416]	@ (800b094 <mem_trim+0x1ec>)
 800aef4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800aef8:	4967      	ldr	r1, [pc, #412]	@ (800b098 <mem_trim+0x1f0>)
 800aefa:	4868      	ldr	r0, [pc, #416]	@ (800b09c <mem_trim+0x1f4>)
 800aefc:	f7f5 feca 	bl	8000c94 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800af00:	4b62      	ldr	r3, [pc, #392]	@ (800b08c <mem_trim+0x1e4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	d304      	bcc.n	800af14 <mem_trim+0x6c>
 800af0a:	4b61      	ldr	r3, [pc, #388]	@ (800b090 <mem_trim+0x1e8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d301      	bcc.n	800af18 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	e0b5      	b.n	800b084 <mem_trim+0x1dc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3b08      	subs	r3, #8
 800af1c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af1e:	69b8      	ldr	r0, [r7, #24]
 800af20:	f7ff fe08 	bl	800ab34 <mem_to_ptr>
 800af24:	4603      	mov	r3, r0
 800af26:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	881a      	ldrh	r2, [r3, #0]
 800af2c:	8afb      	ldrh	r3, [r7, #22]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	b29b      	uxth	r3, r3
 800af32:	3b08      	subs	r3, #8
 800af34:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af36:	8bfa      	ldrh	r2, [r7, #30]
 800af38:	8abb      	ldrh	r3, [r7, #20]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d906      	bls.n	800af4c <mem_trim+0xa4>
 800af3e:	4b55      	ldr	r3, [pc, #340]	@ (800b094 <mem_trim+0x1ec>)
 800af40:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800af44:	4956      	ldr	r1, [pc, #344]	@ (800b0a0 <mem_trim+0x1f8>)
 800af46:	4855      	ldr	r0, [pc, #340]	@ (800b09c <mem_trim+0x1f4>)
 800af48:	f7f5 fea4 	bl	8000c94 <printf>
  if (newsize > size) {
 800af4c:	8bfa      	ldrh	r2, [r7, #30]
 800af4e:	8abb      	ldrh	r3, [r7, #20]
 800af50:	429a      	cmp	r2, r3
 800af52:	d901      	bls.n	800af58 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800af54:	2300      	movs	r3, #0
 800af56:	e095      	b.n	800b084 <mem_trim+0x1dc>
  }
  if (newsize == size) {
 800af58:	8bfa      	ldrh	r2, [r7, #30]
 800af5a:	8abb      	ldrh	r3, [r7, #20]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d101      	bne.n	800af64 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	e08f      	b.n	800b084 <mem_trim+0x1dc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af64:	484f      	ldr	r0, [pc, #316]	@ (800b0a4 <mem_trim+0x1fc>)
 800af66:	f00c f963 	bl	8017230 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fdce 	bl	800ab10 <ptr_to_mem>
 800af74:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	791b      	ldrb	r3, [r3, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d13f      	bne.n	800affe <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af86:	d106      	bne.n	800af96 <mem_trim+0xee>
 800af88:	4b42      	ldr	r3, [pc, #264]	@ (800b094 <mem_trim+0x1ec>)
 800af8a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800af8e:	4946      	ldr	r1, [pc, #280]	@ (800b0a8 <mem_trim+0x200>)
 800af90:	4842      	ldr	r0, [pc, #264]	@ (800b09c <mem_trim+0x1f4>)
 800af92:	f7f5 fe7f 	bl	8000c94 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af9c:	8afa      	ldrh	r2, [r7, #22]
 800af9e:	8bfb      	ldrh	r3, [r7, #30]
 800afa0:	4413      	add	r3, r2
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	3308      	adds	r3, #8
 800afa6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800afa8:	4b40      	ldr	r3, [pc, #256]	@ (800b0ac <mem_trim+0x204>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d106      	bne.n	800afc0 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800afb2:	89fb      	ldrh	r3, [r7, #14]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fdab 	bl	800ab10 <ptr_to_mem>
 800afba:	4603      	mov	r3, r0
 800afbc:	4a3b      	ldr	r2, [pc, #236]	@ (800b0ac <mem_trim+0x204>)
 800afbe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800afc0:	89fb      	ldrh	r3, [r7, #14]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff fda4 	bl	800ab10 <ptr_to_mem>
 800afc8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2200      	movs	r2, #0
 800afce:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	89ba      	ldrh	r2, [r7, #12]
 800afd4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	8afa      	ldrh	r2, [r7, #22]
 800afda:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	89fa      	ldrh	r2, [r7, #14]
 800afe0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800afea:	d047      	beq.n	800b07c <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff fd8d 	bl	800ab10 <ptr_to_mem>
 800aff6:	4602      	mov	r2, r0
 800aff8:	89fb      	ldrh	r3, [r7, #14]
 800affa:	8053      	strh	r3, [r2, #2]
 800affc:	e03e      	b.n	800b07c <mem_trim+0x1d4>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800affe:	8bfb      	ldrh	r3, [r7, #30]
 800b000:	f103 0214 	add.w	r2, r3, #20
 800b004:	8abb      	ldrh	r3, [r7, #20]
 800b006:	429a      	cmp	r2, r3
 800b008:	d838      	bhi.n	800b07c <mem_trim+0x1d4>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b00a:	8afa      	ldrh	r2, [r7, #22]
 800b00c:	8bfb      	ldrh	r3, [r7, #30]
 800b00e:	4413      	add	r3, r2
 800b010:	b29b      	uxth	r3, r3
 800b012:	3308      	adds	r3, #8
 800b014:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	881b      	ldrh	r3, [r3, #0]
 800b01a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b01e:	d106      	bne.n	800b02e <mem_trim+0x186>
 800b020:	4b1c      	ldr	r3, [pc, #112]	@ (800b094 <mem_trim+0x1ec>)
 800b022:	f240 3216 	movw	r2, #790	@ 0x316
 800b026:	4920      	ldr	r1, [pc, #128]	@ (800b0a8 <mem_trim+0x200>)
 800b028:	481c      	ldr	r0, [pc, #112]	@ (800b09c <mem_trim+0x1f4>)
 800b02a:	f7f5 fe33 	bl	8000c94 <printf>
    mem2 = ptr_to_mem(ptr2);
 800b02e:	89fb      	ldrh	r3, [r7, #14]
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fd6d 	bl	800ab10 <ptr_to_mem>
 800b036:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b038:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ac <mem_trim+0x204>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d202      	bcs.n	800b048 <mem_trim+0x1a0>
      lfree = mem2;
 800b042:	4a1a      	ldr	r2, [pc, #104]	@ (800b0ac <mem_trim+0x204>)
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2200      	movs	r2, #0
 800b04c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	881a      	ldrh	r2, [r3, #0]
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	8afa      	ldrh	r2, [r7, #22]
 800b05a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	89fa      	ldrh	r2, [r7, #14]
 800b060:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b06a:	d007      	beq.n	800b07c <mem_trim+0x1d4>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff fd4d 	bl	800ab10 <ptr_to_mem>
 800b076:	4602      	mov	r2, r0
 800b078:	89fb      	ldrh	r3, [r7, #14]
 800b07a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b07c:	4809      	ldr	r0, [pc, #36]	@ (800b0a4 <mem_trim+0x1fc>)
 800b07e:	f00c f8e6 	bl	801724e <sys_mutex_unlock>
  return rmem;
 800b082:	687b      	ldr	r3, [r7, #4]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3720      	adds	r7, #32
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20004a64 	.word	0x20004a64
 800b090:	20004a68 	.word	0x20004a68
 800b094:	08018ea0 	.word	0x08018ea0
 800b098:	08019028 	.word	0x08019028
 800b09c:	08018ee4 	.word	0x08018ee4
 800b0a0:	08019040 	.word	0x08019040
 800b0a4:	20004a6c 	.word	0x20004a6c
 800b0a8:	08019060 	.word	0x08019060
 800b0ac:	20004a70 	.word	0x20004a70

0800b0b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b0ba:	88fb      	ldrh	r3, [r7, #6]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <mem_malloc+0x14>
    return NULL;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e0e2      	b.n	800b28a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b0c4:	88fb      	ldrh	r3, [r7, #6]
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	f023 0303 	bic.w	r3, r3, #3
 800b0ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b0d0:	8bbb      	ldrh	r3, [r7, #28]
 800b0d2:	2b0b      	cmp	r3, #11
 800b0d4:	d801      	bhi.n	800b0da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b0da:	8bbb      	ldrh	r3, [r7, #28]
 800b0dc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b0e0:	d803      	bhi.n	800b0ea <mem_malloc+0x3a>
 800b0e2:	8bba      	ldrh	r2, [r7, #28]
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d201      	bcs.n	800b0ee <mem_malloc+0x3e>
    return NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e0cd      	b.n	800b28a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b0ee:	4869      	ldr	r0, [pc, #420]	@ (800b294 <mem_malloc+0x1e4>)
 800b0f0:	f00c f89e 	bl	8017230 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b0f4:	4b68      	ldr	r3, [pc, #416]	@ (800b298 <mem_malloc+0x1e8>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff fd1b 	bl	800ab34 <mem_to_ptr>
 800b0fe:	4603      	mov	r3, r0
 800b100:	83fb      	strh	r3, [r7, #30]
 800b102:	e0b7      	b.n	800b274 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b104:	8bfb      	ldrh	r3, [r7, #30]
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff fd02 	bl	800ab10 <ptr_to_mem>
 800b10c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	791b      	ldrb	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 80a7 	bne.w	800b266 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	461a      	mov	r2, r3
 800b11e:	8bfb      	ldrh	r3, [r7, #30]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	f1a3 0208 	sub.w	r2, r3, #8
 800b126:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b128:	429a      	cmp	r2, r3
 800b12a:	f0c0 809c 	bcc.w	800b266 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	8bfb      	ldrh	r3, [r7, #30]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	f1a3 0208 	sub.w	r2, r3, #8
 800b13c:	8bbb      	ldrh	r3, [r7, #28]
 800b13e:	3314      	adds	r3, #20
 800b140:	429a      	cmp	r2, r3
 800b142:	d333      	bcc.n	800b1ac <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b144:	8bfa      	ldrh	r2, [r7, #30]
 800b146:	8bbb      	ldrh	r3, [r7, #28]
 800b148:	4413      	add	r3, r2
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	3308      	adds	r3, #8
 800b14e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b150:	8a7b      	ldrh	r3, [r7, #18]
 800b152:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b156:	d106      	bne.n	800b166 <mem_malloc+0xb6>
 800b158:	4b50      	ldr	r3, [pc, #320]	@ (800b29c <mem_malloc+0x1ec>)
 800b15a:	f240 3287 	movw	r2, #903	@ 0x387
 800b15e:	4950      	ldr	r1, [pc, #320]	@ (800b2a0 <mem_malloc+0x1f0>)
 800b160:	4850      	ldr	r0, [pc, #320]	@ (800b2a4 <mem_malloc+0x1f4>)
 800b162:	f7f5 fd97 	bl	8000c94 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b166:	8a7b      	ldrh	r3, [r7, #18]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fcd1 	bl	800ab10 <ptr_to_mem>
 800b16e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	881a      	ldrh	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8bfa      	ldrh	r2, [r7, #30]
 800b182:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	8a7a      	ldrh	r2, [r7, #18]
 800b188:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2201      	movs	r2, #1
 800b18e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b198:	d00b      	beq.n	800b1b2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fcb6 	bl	800ab10 <ptr_to_mem>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	8a7b      	ldrh	r3, [r7, #18]
 800b1a8:	8053      	strh	r3, [r2, #2]
 800b1aa:	e002      	b.n	800b1b2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b1b2:	4b39      	ldr	r3, [pc, #228]	@ (800b298 <mem_malloc+0x1e8>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d127      	bne.n	800b20c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b1bc:	4b36      	ldr	r3, [pc, #216]	@ (800b298 <mem_malloc+0x1e8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b1c2:	e005      	b.n	800b1d0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7ff fca1 	bl	800ab10 <ptr_to_mem>
 800b1ce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	791b      	ldrb	r3, [r3, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <mem_malloc+0x132>
 800b1d8:	4b33      	ldr	r3, [pc, #204]	@ (800b2a8 <mem_malloc+0x1f8>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d1f0      	bne.n	800b1c4 <mem_malloc+0x114>
          }
          lfree = cur;
 800b1e2:	4a2d      	ldr	r2, [pc, #180]	@ (800b298 <mem_malloc+0x1e8>)
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b1e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b298 <mem_malloc+0x1e8>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a8 <mem_malloc+0x1f8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d00b      	beq.n	800b20c <mem_malloc+0x15c>
 800b1f4:	4b28      	ldr	r3, [pc, #160]	@ (800b298 <mem_malloc+0x1e8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	791b      	ldrb	r3, [r3, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d006      	beq.n	800b20c <mem_malloc+0x15c>
 800b1fe:	4b27      	ldr	r3, [pc, #156]	@ (800b29c <mem_malloc+0x1ec>)
 800b200:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b204:	4929      	ldr	r1, [pc, #164]	@ (800b2ac <mem_malloc+0x1fc>)
 800b206:	4827      	ldr	r0, [pc, #156]	@ (800b2a4 <mem_malloc+0x1f4>)
 800b208:	f7f5 fd44 	bl	8000c94 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b20c:	4821      	ldr	r0, [pc, #132]	@ (800b294 <mem_malloc+0x1e4>)
 800b20e:	f00c f81e 	bl	801724e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b212:	8bba      	ldrh	r2, [r7, #28]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	4413      	add	r3, r2
 800b218:	3308      	adds	r3, #8
 800b21a:	4a23      	ldr	r2, [pc, #140]	@ (800b2a8 <mem_malloc+0x1f8>)
 800b21c:	6812      	ldr	r2, [r2, #0]
 800b21e:	4293      	cmp	r3, r2
 800b220:	d906      	bls.n	800b230 <mem_malloc+0x180>
 800b222:	4b1e      	ldr	r3, [pc, #120]	@ (800b29c <mem_malloc+0x1ec>)
 800b224:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b228:	4921      	ldr	r1, [pc, #132]	@ (800b2b0 <mem_malloc+0x200>)
 800b22a:	481e      	ldr	r0, [pc, #120]	@ (800b2a4 <mem_malloc+0x1f4>)
 800b22c:	f7f5 fd32 	bl	8000c94 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f003 0303 	and.w	r3, r3, #3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d006      	beq.n	800b248 <mem_malloc+0x198>
 800b23a:	4b18      	ldr	r3, [pc, #96]	@ (800b29c <mem_malloc+0x1ec>)
 800b23c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b240:	491c      	ldr	r1, [pc, #112]	@ (800b2b4 <mem_malloc+0x204>)
 800b242:	4818      	ldr	r0, [pc, #96]	@ (800b2a4 <mem_malloc+0x1f4>)
 800b244:	f7f5 fd26 	bl	8000c94 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	f003 0303 	and.w	r3, r3, #3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d006      	beq.n	800b260 <mem_malloc+0x1b0>
 800b252:	4b12      	ldr	r3, [pc, #72]	@ (800b29c <mem_malloc+0x1ec>)
 800b254:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b258:	4917      	ldr	r1, [pc, #92]	@ (800b2b8 <mem_malloc+0x208>)
 800b25a:	4812      	ldr	r0, [pc, #72]	@ (800b2a4 <mem_malloc+0x1f4>)
 800b25c:	f7f5 fd1a 	bl	8000c94 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	3308      	adds	r3, #8
 800b264:	e011      	b.n	800b28a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b266:	8bfb      	ldrh	r3, [r7, #30]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fc51 	bl	800ab10 <ptr_to_mem>
 800b26e:	4603      	mov	r3, r0
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b274:	8bfa      	ldrh	r2, [r7, #30]
 800b276:	8bbb      	ldrh	r3, [r7, #28]
 800b278:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b27c:	429a      	cmp	r2, r3
 800b27e:	f4ff af41 	bcc.w	800b104 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b282:	4804      	ldr	r0, [pc, #16]	@ (800b294 <mem_malloc+0x1e4>)
 800b284:	f00b ffe3 	bl	801724e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20004a6c 	.word	0x20004a6c
 800b298:	20004a70 	.word	0x20004a70
 800b29c:	08018ea0 	.word	0x08018ea0
 800b2a0:	08019060 	.word	0x08019060
 800b2a4:	08018ee4 	.word	0x08018ee4
 800b2a8:	20004a68 	.word	0x20004a68
 800b2ac:	08019074 	.word	0x08019074
 800b2b0:	08019090 	.word	0x08019090
 800b2b4:	080190c0 	.word	0x080190c0
 800b2b8:	080190f0 	.word	0x080190f0

0800b2bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	3303      	adds	r3, #3
 800b2d2:	f023 0303 	bic.w	r3, r3, #3
 800b2d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e011      	b.n	800b302 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	889b      	ldrh	r3, [r3, #4]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3301      	adds	r3, #1
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	88db      	ldrh	r3, [r3, #6]
 800b306:	461a      	mov	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	dbe7      	blt.n	800b2de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b322:	2300      	movs	r3, #0
 800b324:	80fb      	strh	r3, [r7, #6]
 800b326:	e009      	b.n	800b33c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b328:	88fb      	ldrh	r3, [r7, #6]
 800b32a:	4a08      	ldr	r2, [pc, #32]	@ (800b34c <memp_init+0x30>)
 800b32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffc3 	bl	800b2bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b336:	88fb      	ldrh	r3, [r7, #6]
 800b338:	3301      	adds	r3, #1
 800b33a:	80fb      	strh	r3, [r7, #6]
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	2b0c      	cmp	r3, #12
 800b340:	d9f2      	bls.n	800b328 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	0801bd18 	.word	0x0801bd18

0800b350 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d012      	beq.n	800b38c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	6812      	ldr	r2, [r2, #0]
 800b36e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d006      	beq.n	800b388 <do_memp_malloc_pool+0x38>
 800b37a:	4b07      	ldr	r3, [pc, #28]	@ (800b398 <do_memp_malloc_pool+0x48>)
 800b37c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b380:	4906      	ldr	r1, [pc, #24]	@ (800b39c <do_memp_malloc_pool+0x4c>)
 800b382:	4807      	ldr	r0, [pc, #28]	@ (800b3a0 <do_memp_malloc_pool+0x50>)
 800b384:	f7f5 fc86 	bl	8000c94 <printf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	e000      	b.n	800b38e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	080191ac 	.word	0x080191ac
 800b39c:	080191d8 	.word	0x080191d8
 800b3a0:	080191fc 	.word	0x080191fc

0800b3a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b3ae:	79fb      	ldrb	r3, [r7, #7]
 800b3b0:	2b0c      	cmp	r3, #12
 800b3b2:	d904      	bls.n	800b3be <memp_malloc+0x1a>
 800b3b4:	4808      	ldr	r0, [pc, #32]	@ (800b3d8 <memp_malloc+0x34>)
 800b3b6:	f7f5 fc6d 	bl	8000c94 <printf>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e008      	b.n	800b3d0 <memp_malloc+0x2c>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	4a06      	ldr	r2, [pc, #24]	@ (800b3dc <memp_malloc+0x38>)
 800b3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff ffc2 	bl	800b350 <do_memp_malloc_pool>
 800b3cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	08019238 	.word	0x08019238
 800b3dc:	0801bd18 	.word	0x0801bd18

0800b3e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	f003 0303 	and.w	r3, r3, #3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d006      	beq.n	800b402 <do_memp_free_pool+0x22>
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <do_memp_free_pool+0x40>)
 800b3f6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b3fa:	490a      	ldr	r1, [pc, #40]	@ (800b424 <do_memp_free_pool+0x44>)
 800b3fc:	480a      	ldr	r0, [pc, #40]	@ (800b428 <do_memp_free_pool+0x48>)
 800b3fe:	f7f5 fc49 	bl	8000c94 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	080191ac 	.word	0x080191ac
 800b424:	08019258 	.word	0x08019258
 800b428:	080191fc 	.word	0x080191fc

0800b42c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	6039      	str	r1, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	2b0c      	cmp	r3, #12
 800b43c:	d903      	bls.n	800b446 <memp_free+0x1a>
 800b43e:	480a      	ldr	r0, [pc, #40]	@ (800b468 <memp_free+0x3c>)
 800b440:	f7f5 fc28 	bl	8000c94 <printf>
 800b444:	e00c      	b.n	800b460 <memp_free+0x34>

  if (mem == NULL) {
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d008      	beq.n	800b45e <memp_free+0x32>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	4a07      	ldr	r2, [pc, #28]	@ (800b46c <memp_free+0x40>)
 800b450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff ffc2 	bl	800b3e0 <do_memp_free_pool>
 800b45c:	e000      	b.n	800b460 <memp_free+0x34>
    return;
 800b45e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	08019278 	.word	0x08019278
 800b46c:	0801bd18 	.word	0x0801bd18

0800b470 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b474:	bf00      	nop
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d104      	bne.n	800b49e <netif_add+0x1e>
 800b494:	4857      	ldr	r0, [pc, #348]	@ (800b5f4 <netif_add+0x174>)
 800b496:	f7f5 fbfd 	bl	8000c94 <printf>
 800b49a:	2300      	movs	r3, #0
 800b49c:	e0a5      	b.n	800b5ea <netif_add+0x16a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <netif_add+0x2e>
 800b4a4:	4854      	ldr	r0, [pc, #336]	@ (800b5f8 <netif_add+0x178>)
 800b4a6:	f7f5 fbf5 	bl	8000c94 <printf>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e09d      	b.n	800b5ea <netif_add+0x16a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <netif_add+0x38>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b4b4:	4b51      	ldr	r3, [pc, #324]	@ (800b5fc <netif_add+0x17c>)
 800b4b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <netif_add+0x42>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b4be:	4b4f      	ldr	r3, [pc, #316]	@ (800b5fc <netif_add+0x17c>)
 800b4c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <netif_add+0x4c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b4c8:	4b4c      	ldr	r3, [pc, #304]	@ (800b5fc <netif_add+0x17c>)
 800b4ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4a47      	ldr	r2, [pc, #284]	@ (800b600 <netif_add+0x180>)
 800b4e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3324      	adds	r3, #36	@ 0x24
 800b4f6:	2204      	movs	r2, #4
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f00c f827 	bl	801754e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6a3a      	ldr	r2, [r7, #32]
 800b50a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b50c:	4b3d      	ldr	r3, [pc, #244]	@ (800b604 <netif_add+0x184>)
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b51a:	611a      	str	r2, [r3, #16]
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	68b9      	ldr	r1, [r7, #8]
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f914 	bl	800b750 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <netif_add+0xb8>
    return NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	e058      	b.n	800b5ea <netif_add+0x16a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b53e:	2bff      	cmp	r3, #255	@ 0xff
 800b540:	d103      	bne.n	800b54a <netif_add+0xca>
        netif->num = 0;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b54e:	4b2e      	ldr	r3, [pc, #184]	@ (800b608 <netif_add+0x188>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	e02b      	b.n	800b5ae <netif_add+0x12e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d106      	bne.n	800b56c <netif_add+0xec>
 800b55e:	4b2b      	ldr	r3, [pc, #172]	@ (800b60c <netif_add+0x18c>)
 800b560:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800b564:	492a      	ldr	r1, [pc, #168]	@ (800b610 <netif_add+0x190>)
 800b566:	482b      	ldr	r0, [pc, #172]	@ (800b614 <netif_add+0x194>)
 800b568:	f7f5 fb94 	bl	8000c94 <printf>
        num_netifs++;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	3301      	adds	r3, #1
 800b570:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2bff      	cmp	r3, #255	@ 0xff
 800b576:	dd06      	ble.n	800b586 <netif_add+0x106>
 800b578:	4b24      	ldr	r3, [pc, #144]	@ (800b60c <netif_add+0x18c>)
 800b57a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b57e:	4926      	ldr	r1, [pc, #152]	@ (800b618 <netif_add+0x198>)
 800b580:	4824      	ldr	r0, [pc, #144]	@ (800b614 <netif_add+0x194>)
 800b582:	f7f5 fb87 	bl	8000c94 <printf>
        if (netif2->num == netif->num) {
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b592:	429a      	cmp	r2, r3
 800b594:	d108      	bne.n	800b5a8 <netif_add+0x128>
          netif->num++;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b59c:	3301      	adds	r3, #1
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 800b5a6:	e005      	b.n	800b5b4 <netif_add+0x134>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1d0      	bne.n	800b556 <netif_add+0xd6>
        }
      }
    } while (netif2 != NULL);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1be      	bne.n	800b538 <netif_add+0xb8>
  }
  if (netif->num == 254) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5c0:	2bfe      	cmp	r3, #254	@ 0xfe
 800b5c2:	d103      	bne.n	800b5cc <netif_add+0x14c>
    netif_num = 0;
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b604 <netif_add+0x184>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	e006      	b.n	800b5da <netif_add+0x15a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b604 <netif_add+0x184>)
 800b5d8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b5da:	4b0b      	ldr	r3, [pc, #44]	@ (800b608 <netif_add+0x188>)
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b5e2:	4a09      	ldr	r2, [pc, #36]	@ (800b608 <netif_add+0x188>)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	08019324 	.word	0x08019324
 800b5f8:	08019340 	.word	0x08019340
 800b5fc:	0801bd9c 	.word	0x0801bd9c
 800b600:	0800b99f 	.word	0x0800b99f
 800b604:	20004aa8 	.word	0x20004aa8
 800b608:	2000d8ec 	.word	0x2000d8ec
 800b60c:	08019294 	.word	0x08019294
 800b610:	08019364 	.word	0x08019364
 800b614:	080192e0 	.word	0x080192e0
 800b618:	08019378 	.word	0x08019378

0800b61c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f002 fcf1 	bl	800e010 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f007 fa25 	bl	8012a80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b636:	bf00      	nop
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
	...

0800b640 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <netif_do_set_ipaddr+0x20>
 800b652:	4b1d      	ldr	r3, [pc, #116]	@ (800b6c8 <netif_do_set_ipaddr+0x88>)
 800b654:	f44f 72e7 	mov.w	r2, #462	@ 0x1ce
 800b658:	491c      	ldr	r1, [pc, #112]	@ (800b6cc <netif_do_set_ipaddr+0x8c>)
 800b65a:	481d      	ldr	r0, [pc, #116]	@ (800b6d0 <netif_do_set_ipaddr+0x90>)
 800b65c:	f7f5 fb1a 	bl	8000c94 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <netif_do_set_ipaddr+0x34>
 800b666:	4b18      	ldr	r3, [pc, #96]	@ (800b6c8 <netif_do_set_ipaddr+0x88>)
 800b668:	f240 12cf 	movw	r2, #463	@ 0x1cf
 800b66c:	4917      	ldr	r1, [pc, #92]	@ (800b6cc <netif_do_set_ipaddr+0x8c>)
 800b66e:	4818      	ldr	r0, [pc, #96]	@ (800b6d0 <netif_do_set_ipaddr+0x90>)
 800b670:	f7f5 fb10 	bl	8000c94 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3304      	adds	r3, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d01c      	beq.n	800b6bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3304      	adds	r3, #4
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b692:	f107 0314 	add.w	r3, r7, #20
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff ffbf 	bl	800b61c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <netif_do_set_ipaddr+0x6a>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	e000      	b.n	800b6ac <netif_do_set_ipaddr+0x6c>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 f8ca 	bl	800b84c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08019294 	.word	0x08019294
 800b6cc:	080193a8 	.word	0x080193a8
 800b6d0:	080192e0 	.word	0x080192e0

0800b6d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d00a      	beq.n	800b704 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <netif_do_set_netmask+0x26>
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	e000      	b.n	800b6fc <netif_do_set_netmask+0x28>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b700:	2301      	movs	r3, #1
 800b702:	e000      	b.n	800b706 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b712:	b480      	push	{r7}
 800b714:	b085      	sub	sp, #20
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	330c      	adds	r3, #12
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d00a      	beq.n	800b742 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <netif_do_set_gw+0x26>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	e000      	b.n	800b73a <netif_do_set_gw+0x28>
 800b738:	2300      	movs	r3, #0
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b75e:	2300      	movs	r3, #0
 800b760:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b76c:	4b1c      	ldr	r3, [pc, #112]	@ (800b7e0 <netif_set_addr+0x90>)
 800b76e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b776:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e0 <netif_set_addr+0x90>)
 800b778:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b780:	4b17      	ldr	r3, [pc, #92]	@ (800b7e0 <netif_set_addr+0x90>)
 800b782:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <netif_set_addr+0x42>
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <netif_set_addr+0x46>
 800b792:	2301      	movs	r3, #1
 800b794:	e000      	b.n	800b798 <netif_set_addr+0x48>
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b7a0:	f107 0310 	add.w	r3, r7, #16
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff ff49 	bl	800b640 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ff8e 	bl	800b6d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7ff ffa8 	bl	800b712 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b7c8:	f107 0310 	add.w	r3, r7, #16
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	68b9      	ldr	r1, [r7, #8]
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7ff ff35 	bl	800b640 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b7d6:	bf00      	nop
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	0801bd9c 	.word	0x0801bd9c

0800b7e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b7ec:	4a04      	ldr	r2, [pc, #16]	@ (800b800 <netif_set_default+0x1c>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	2000d8f0 	.word	0x2000d8f0

0800b804 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d103      	bne.n	800b81a <netif_set_up+0x16>
 800b812:	480d      	ldr	r0, [pc, #52]	@ (800b848 <netif_set_up+0x44>)
 800b814:	f7f5 fa3e 	bl	8000c94 <printf>
 800b818:	e013      	b.n	800b842 <netif_set_up+0x3e>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10c      	bne.n	800b842 <netif_set_up+0x3e>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	b2da      	uxtb	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b83a:	2103      	movs	r1, #3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f805 	bl	800b84c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	08019418 	.word	0x08019418

0800b84c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <netif_issue_reports+0x20>
 800b85e:	4b18      	ldr	r3, [pc, #96]	@ (800b8c0 <netif_issue_reports+0x74>)
 800b860:	f44f 725c 	mov.w	r2, #880	@ 0x370
 800b864:	4917      	ldr	r1, [pc, #92]	@ (800b8c4 <netif_issue_reports+0x78>)
 800b866:	4818      	ldr	r0, [pc, #96]	@ (800b8c8 <netif_issue_reports+0x7c>)
 800b868:	f7f5 fa14 	bl	8000c94 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b872:	f003 0304 	and.w	r3, r3, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	d01e      	beq.n	800b8b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b880:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d013      	beq.n	800b8ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3304      	adds	r3, #4
 800b896:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00e      	beq.n	800b8ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b8a2:	f003 0308 	and.w	r3, r3, #8
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d007      	beq.n	800b8ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f009 fedf 	bl	8015674 <etharp_request>
 800b8b6:	e000      	b.n	800b8ba <netif_issue_reports+0x6e>
    return;
 800b8b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	08019294 	.word	0x08019294
 800b8c4:	08019434 	.word	0x08019434
 800b8c8:	080192e0 	.word	0x080192e0

0800b8cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d103      	bne.n	800b8e2 <netif_set_link_up+0x16>
 800b8da:	4813      	ldr	r0, [pc, #76]	@ (800b928 <netif_set_link_up+0x5c>)
 800b8dc:	f7f5 f9da 	bl	8000c94 <printf>
 800b8e0:	e01e      	b.n	800b920 <netif_set_link_up+0x54>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d117      	bne.n	800b920 <netif_set_link_up+0x54>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b8f6:	f043 0304 	orr.w	r3, r3, #4
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f007 fcd8 	bl	80132b8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b908:	2103      	movs	r1, #3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff9e 	bl	800b84c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <netif_set_link_up+0x54>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	08019478 	.word	0x08019478

0800b92c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d103      	bne.n	800b942 <netif_set_link_down+0x16>
 800b93a:	480f      	ldr	r0, [pc, #60]	@ (800b978 <netif_set_link_down+0x4c>)
 800b93c:	f7f5 f9aa 	bl	8000c94 <printf>
 800b940:	e017      	b.n	800b972 <netif_set_link_down+0x46>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d010      	beq.n	800b972 <netif_set_link_down+0x46>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b956:	f023 0304 	bic.w	r3, r3, #4
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
    netif->mtu6 = netif->mtu;
#endif

    NETIF_LINK_CALLBACK(netif);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <netif_set_link_down+0x46>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	0801949c 	.word	0x0801949c

0800b97c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	61da      	str	r2, [r3, #28]
  }
}
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b9aa:	f06f 030b 	mvn.w	r3, #11
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
	...

0800b9bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d013      	beq.n	800b9f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800ba04 <netif_get_by_index+0x48>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	e00c      	b.n	800b9ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9da:	3301      	adds	r3, #1
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d101      	bne.n	800b9e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	e006      	b.n	800b9f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1ef      	bne.n	800b9d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	2000d8ec 	.word	0x2000d8ec

0800ba08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	460b      	mov	r3, r1
 800ba18:	80fb      	strh	r3, [r7, #6]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	88fa      	ldrh	r2, [r7, #6]
 800ba2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	88ba      	ldrh	r2, [r7, #4]
 800ba34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ba36:	8b3b      	ldrh	r3, [r7, #24]
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	7f3a      	ldrb	r2, [r7, #28]
 800ba42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	73da      	strb	r2, [r3, #15]
}
 800ba50:	bf00      	nop
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b08c      	sub	sp, #48	@ 0x30
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
 800ba66:	460b      	mov	r3, r1
 800ba68:	80bb      	strh	r3, [r7, #4]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ba72:	887b      	ldrh	r3, [r7, #2]
 800ba74:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ba78:	d07f      	beq.n	800bb7a <pbuf_alloc+0x11e>
 800ba7a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ba7e:	f300 80c8 	bgt.w	800bc12 <pbuf_alloc+0x1b6>
 800ba82:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ba86:	d010      	beq.n	800baaa <pbuf_alloc+0x4e>
 800ba88:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ba8c:	f300 80c1 	bgt.w	800bc12 <pbuf_alloc+0x1b6>
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d002      	beq.n	800ba9a <pbuf_alloc+0x3e>
 800ba94:	2b41      	cmp	r3, #65	@ 0x41
 800ba96:	f040 80bc 	bne.w	800bc12 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ba9a:	887a      	ldrh	r2, [r7, #2]
 800ba9c:	88bb      	ldrh	r3, [r7, #4]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	2000      	movs	r0, #0
 800baa2:	f000 f8d1 	bl	800bc48 <pbuf_alloc_reference>
 800baa6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800baa8:	e0bd      	b.n	800bc26 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bab2:	88bb      	ldrh	r3, [r7, #4]
 800bab4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bab6:	200c      	movs	r0, #12
 800bab8:	f7ff fc74 	bl	800b3a4 <memp_malloc>
 800babc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d107      	bne.n	800bad4 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800bac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <pbuf_alloc+0x74>
            pbuf_free(p);
 800baca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bacc:	f000 faa6 	bl	800c01c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	e0a9      	b.n	800bc28 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bad4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bad6:	3303      	adds	r3, #3
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f023 0303 	bic.w	r3, r3, #3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800bae4:	3304      	adds	r3, #4
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	8b7a      	ldrh	r2, [r7, #26]
 800baea:	4293      	cmp	r3, r2
 800baec:	bf28      	it	cs
 800baee:	4613      	movcs	r3, r2
 800baf0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800baf2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800baf4:	3310      	adds	r3, #16
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	4413      	add	r3, r2
 800bafa:	3303      	adds	r3, #3
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	4618      	mov	r0, r3
 800bb02:	89f9      	ldrh	r1, [r7, #14]
 800bb04:	8b7a      	ldrh	r2, [r7, #26]
 800bb06:	2300      	movs	r3, #0
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	887b      	ldrh	r3, [r7, #2]
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4601      	mov	r1, r0
 800bb12:	6938      	ldr	r0, [r7, #16]
 800bb14:	f7ff ff78 	bl	800ba08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f003 0303 	and.w	r3, r3, #3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <pbuf_alloc+0xd6>
 800bb24:	4b42      	ldr	r3, [pc, #264]	@ (800bc30 <pbuf_alloc+0x1d4>)
 800bb26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb2a:	4942      	ldr	r1, [pc, #264]	@ (800bc34 <pbuf_alloc+0x1d8>)
 800bb2c:	4842      	ldr	r0, [pc, #264]	@ (800bc38 <pbuf_alloc+0x1dc>)
 800bb2e:	f7f5 f8b1 	bl	8000c94 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bb32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb34:	3303      	adds	r3, #3
 800bb36:	f023 0303 	bic.w	r3, r3, #3
 800bb3a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d106      	bne.n	800bb50 <pbuf_alloc+0xf4>
 800bb42:	4b3b      	ldr	r3, [pc, #236]	@ (800bc30 <pbuf_alloc+0x1d4>)
 800bb44:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800bb48:	493c      	ldr	r1, [pc, #240]	@ (800bc3c <pbuf_alloc+0x1e0>)
 800bb4a:	483b      	ldr	r0, [pc, #236]	@ (800bc38 <pbuf_alloc+0x1dc>)
 800bb4c:	f7f5 f8a2 	bl	8000c94 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb5a:	e002      	b.n	800bb62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bb66:	8b7a      	ldrh	r2, [r7, #26]
 800bb68:	89fb      	ldrh	r3, [r7, #14]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bb72:	8b7b      	ldrh	r3, [r7, #26]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d19e      	bne.n	800bab6 <pbuf_alloc+0x5a>
      break;
 800bb78:	e055      	b.n	800bc26 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bb7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb7c:	3303      	adds	r3, #3
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	f023 0303 	bic.w	r3, r3, #3
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	88bb      	ldrh	r3, [r7, #4]
 800bb88:	3303      	adds	r3, #3
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	f023 0303 	bic.w	r3, r3, #3
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	4413      	add	r3, r2
 800bb94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bb96:	8b3b      	ldrh	r3, [r7, #24]
 800bb98:	3310      	adds	r3, #16
 800bb9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb9c:	8b3a      	ldrh	r2, [r7, #24]
 800bb9e:	88bb      	ldrh	r3, [r7, #4]
 800bba0:	3303      	adds	r3, #3
 800bba2:	f023 0303 	bic.w	r3, r3, #3
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d306      	bcc.n	800bbb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bbaa:	8afa      	ldrh	r2, [r7, #22]
 800bbac:	88bb      	ldrh	r3, [r7, #4]
 800bbae:	3303      	adds	r3, #3
 800bbb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d201      	bcs.n	800bbbc <pbuf_alloc+0x160>
        return NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e035      	b.n	800bc28 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bbbc:	8afb      	ldrh	r3, [r7, #22]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fa76 	bl	800b0b0 <mem_malloc>
 800bbc4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <pbuf_alloc+0x174>
        return NULL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e02b      	b.n	800bc28 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bbd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bbd2:	3310      	adds	r3, #16
 800bbd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbd6:	4413      	add	r3, r2
 800bbd8:	3303      	adds	r3, #3
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	4618      	mov	r0, r3
 800bbe0:	88b9      	ldrh	r1, [r7, #4]
 800bbe2:	88ba      	ldrh	r2, [r7, #4]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	887b      	ldrh	r3, [r7, #2]
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	460b      	mov	r3, r1
 800bbee:	4601      	mov	r1, r0
 800bbf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbf2:	f7ff ff09 	bl	800ba08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f003 0303 	and.w	r3, r3, #3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d010      	beq.n	800bc24 <pbuf_alloc+0x1c8>
 800bc02:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <pbuf_alloc+0x1d4>)
 800bc04:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bc08:	490d      	ldr	r1, [pc, #52]	@ (800bc40 <pbuf_alloc+0x1e4>)
 800bc0a:	480b      	ldr	r0, [pc, #44]	@ (800bc38 <pbuf_alloc+0x1dc>)
 800bc0c:	f7f5 f842 	bl	8000c94 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bc10:	e008      	b.n	800bc24 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bc12:	4b07      	ldr	r3, [pc, #28]	@ (800bc30 <pbuf_alloc+0x1d4>)
 800bc14:	f240 1227 	movw	r2, #295	@ 0x127
 800bc18:	490a      	ldr	r1, [pc, #40]	@ (800bc44 <pbuf_alloc+0x1e8>)
 800bc1a:	4807      	ldr	r0, [pc, #28]	@ (800bc38 <pbuf_alloc+0x1dc>)
 800bc1c:	f7f5 f83a 	bl	8000c94 <printf>
      return NULL;
 800bc20:	2300      	movs	r3, #0
 800bc22:	e001      	b.n	800bc28 <pbuf_alloc+0x1cc>
      break;
 800bc24:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3728      	adds	r7, #40	@ 0x28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	080194c0 	.word	0x080194c0
 800bc34:	080194ec 	.word	0x080194ec
 800bc38:	0801951c 	.word	0x0801951c
 800bc3c:	08019544 	.word	0x08019544
 800bc40:	08019578 	.word	0x08019578
 800bc44:	080195a4 	.word	0x080195a4

0800bc48 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	807b      	strh	r3, [r7, #2]
 800bc54:	4613      	mov	r3, r2
 800bc56:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bc58:	883b      	ldrh	r3, [r7, #0]
 800bc5a:	2b41      	cmp	r3, #65	@ 0x41
 800bc5c:	d009      	beq.n	800bc72 <pbuf_alloc_reference+0x2a>
 800bc5e:	883b      	ldrh	r3, [r7, #0]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d006      	beq.n	800bc72 <pbuf_alloc_reference+0x2a>
 800bc64:	4b0f      	ldr	r3, [pc, #60]	@ (800bca4 <pbuf_alloc_reference+0x5c>)
 800bc66:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bc6a:	490f      	ldr	r1, [pc, #60]	@ (800bca8 <pbuf_alloc_reference+0x60>)
 800bc6c:	480f      	ldr	r0, [pc, #60]	@ (800bcac <pbuf_alloc_reference+0x64>)
 800bc6e:	f7f5 f811 	bl	8000c94 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bc72:	200b      	movs	r0, #11
 800bc74:	f7ff fb96 	bl	800b3a4 <memp_malloc>
 800bc78:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bc80:	2300      	movs	r3, #0
 800bc82:	e00b      	b.n	800bc9c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bc84:	8879      	ldrh	r1, [r7, #2]
 800bc86:	887a      	ldrh	r2, [r7, #2]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	883b      	ldrh	r3, [r7, #0]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	460b      	mov	r3, r1
 800bc92:	6879      	ldr	r1, [r7, #4]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f7ff feb7 	bl	800ba08 <pbuf_init_alloced_pbuf>
  return p;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	080194c0 	.word	0x080194c0
 800bca8:	080195c0 	.word	0x080195c0
 800bcac:	0801951c 	.word	0x0801951c

0800bcb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	607b      	str	r3, [r7, #4]
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	81bb      	strh	r3, [r7, #12]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
 800bcc6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bcc8:	8a7b      	ldrh	r3, [r7, #18]
 800bcca:	3303      	adds	r3, #3
 800bccc:	f023 0203 	bic.w	r2, r3, #3
 800bcd0:	89bb      	ldrh	r3, [r7, #12]
 800bcd2:	441a      	add	r2, r3
 800bcd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d901      	bls.n	800bcde <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e018      	b.n	800bd10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bce4:	8a7b      	ldrh	r3, [r7, #18]
 800bce6:	3303      	adds	r3, #3
 800bce8:	f023 0303 	bic.w	r3, r3, #3
 800bcec:	6a3a      	ldr	r2, [r7, #32]
 800bcee:	4413      	add	r3, r2
 800bcf0:	617b      	str	r3, [r7, #20]
 800bcf2:	e001      	b.n	800bcf8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	89b9      	ldrh	r1, [r7, #12]
 800bcfc:	89ba      	ldrh	r2, [r7, #12]
 800bcfe:	2302      	movs	r3, #2
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	897b      	ldrh	r3, [r7, #10]
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	460b      	mov	r3, r1
 800bd08:	6979      	ldr	r1, [r7, #20]
 800bd0a:	f7ff fe7d 	bl	800ba08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bd0e:	687b      	ldr	r3, [r7, #4]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d106      	bne.n	800bd38 <pbuf_realloc+0x20>
 800bd2a:	4b3a      	ldr	r3, [pc, #232]	@ (800be14 <pbuf_realloc+0xfc>)
 800bd2c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bd30:	4939      	ldr	r1, [pc, #228]	@ (800be18 <pbuf_realloc+0x100>)
 800bd32:	483a      	ldr	r0, [pc, #232]	@ (800be1c <pbuf_realloc+0x104>)
 800bd34:	f7f4 ffae 	bl	8000c94 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	891b      	ldrh	r3, [r3, #8]
 800bd3c:	887a      	ldrh	r2, [r7, #2]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d263      	bcs.n	800be0a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	891a      	ldrh	r2, [r3, #8]
 800bd46:	887b      	ldrh	r3, [r7, #2]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bd4c:	887b      	ldrh	r3, [r7, #2]
 800bd4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bd54:	e018      	b.n	800bd88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	895b      	ldrh	r3, [r3, #10]
 800bd5a:	897a      	ldrh	r2, [r7, #10]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	891a      	ldrh	r2, [r3, #8]
 800bd64:	893b      	ldrh	r3, [r7, #8]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <pbuf_realloc+0x70>
 800bd7a:	4b26      	ldr	r3, [pc, #152]	@ (800be14 <pbuf_realloc+0xfc>)
 800bd7c:	f240 12af 	movw	r2, #431	@ 0x1af
 800bd80:	4927      	ldr	r1, [pc, #156]	@ (800be20 <pbuf_realloc+0x108>)
 800bd82:	4826      	ldr	r0, [pc, #152]	@ (800be1c <pbuf_realloc+0x104>)
 800bd84:	f7f4 ff86 	bl	8000c94 <printf>
  while (rem_len > q->len) {
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	895b      	ldrh	r3, [r3, #10]
 800bd8c:	897a      	ldrh	r2, [r7, #10]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d8e1      	bhi.n	800bd56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	7b1b      	ldrb	r3, [r3, #12]
 800bd96:	f003 030f 	and.w	r3, r3, #15
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d121      	bne.n	800bde2 <pbuf_realloc+0xca>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	895b      	ldrh	r3, [r3, #10]
 800bda2:	897a      	ldrh	r2, [r7, #10]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d01c      	beq.n	800bde2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	7b5b      	ldrb	r3, [r3, #13]
 800bdac:	f003 0302 	and.w	r3, r3, #2
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d116      	bne.n	800bde2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	897b      	ldrh	r3, [r7, #10]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff f86e 	bl	800aea8 <mem_trim>
 800bdcc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d106      	bne.n	800bde2 <pbuf_realloc+0xca>
 800bdd4:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <pbuf_realloc+0xfc>)
 800bdd6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800bdda:	4912      	ldr	r1, [pc, #72]	@ (800be24 <pbuf_realloc+0x10c>)
 800bddc:	480f      	ldr	r0, [pc, #60]	@ (800be1c <pbuf_realloc+0x104>)
 800bdde:	f7f4 ff59 	bl	8000c94 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	897a      	ldrh	r2, [r7, #10]
 800bde6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	895a      	ldrh	r2, [r3, #10]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f90d 	bl	800c01c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	e000      	b.n	800be0c <pbuf_realloc+0xf4>
    return;
 800be0a:	bf00      	nop

}
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	080194c0 	.word	0x080194c0
 800be18:	080195d4 	.word	0x080195d4
 800be1c:	0801951c 	.word	0x0801951c
 800be20:	080195ec 	.word	0x080195ec
 800be24:	08019604 	.word	0x08019604

0800be28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4613      	mov	r3, r2
 800be34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d106      	bne.n	800be4a <pbuf_add_header_impl+0x22>
 800be3c:	4b2b      	ldr	r3, [pc, #172]	@ (800beec <pbuf_add_header_impl+0xc4>)
 800be3e:	f240 12df 	movw	r2, #479	@ 0x1df
 800be42:	492b      	ldr	r1, [pc, #172]	@ (800bef0 <pbuf_add_header_impl+0xc8>)
 800be44:	482b      	ldr	r0, [pc, #172]	@ (800bef4 <pbuf_add_header_impl+0xcc>)
 800be46:	f7f4 ff25 	bl	8000c94 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <pbuf_add_header_impl+0x30>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be56:	d301      	bcc.n	800be5c <pbuf_add_header_impl+0x34>
    return 1;
 800be58:	2301      	movs	r3, #1
 800be5a:	e043      	b.n	800bee4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <pbuf_add_header_impl+0x3e>
    return 0;
 800be62:	2300      	movs	r3, #0
 800be64:	e03e      	b.n	800bee4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	891a      	ldrh	r2, [r3, #8]
 800be6e:	8a7b      	ldrh	r3, [r7, #18]
 800be70:	4413      	add	r3, r2
 800be72:	b29b      	uxth	r3, r3
 800be74:	8a7a      	ldrh	r2, [r7, #18]
 800be76:	429a      	cmp	r2, r3
 800be78:	d901      	bls.n	800be7e <pbuf_add_header_impl+0x56>
    return 1;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e032      	b.n	800bee4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	7b1b      	ldrb	r3, [r3, #12]
 800be82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800be84:	8a3b      	ldrh	r3, [r7, #16]
 800be86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00c      	beq.n	800bea8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	425b      	negs	r3, r3
 800be96:	4413      	add	r3, r2
 800be98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3310      	adds	r3, #16
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d20d      	bcs.n	800bec0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e01d      	b.n	800bee4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d006      	beq.n	800bebc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	425b      	negs	r3, r3
 800beb6:	4413      	add	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e001      	b.n	800bec0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e011      	b.n	800bee4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	895a      	ldrh	r2, [r3, #10]
 800beca:	8a7b      	ldrh	r3, [r7, #18]
 800becc:	4413      	add	r3, r2
 800bece:	b29a      	uxth	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	891a      	ldrh	r2, [r3, #8]
 800bed8:	8a7b      	ldrh	r3, [r7, #18]
 800beda:	4413      	add	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	811a      	strh	r2, [r3, #8]


  return 0;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	080194c0 	.word	0x080194c0
 800bef0:	08019620 	.word	0x08019620
 800bef4:	0801951c 	.word	0x0801951c

0800bef8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bf02:	2200      	movs	r2, #0
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff ff8e 	bl	800be28 <pbuf_add_header_impl>
 800bf0c:	4603      	mov	r3, r0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <pbuf_remove_header+0x1e>
 800bf28:	4b1e      	ldr	r3, [pc, #120]	@ (800bfa4 <pbuf_remove_header+0x8c>)
 800bf2a:	f240 224b 	movw	r2, #587	@ 0x24b
 800bf2e:	491e      	ldr	r1, [pc, #120]	@ (800bfa8 <pbuf_remove_header+0x90>)
 800bf30:	481e      	ldr	r0, [pc, #120]	@ (800bfac <pbuf_remove_header+0x94>)
 800bf32:	f7f4 feaf 	bl	8000c94 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d003      	beq.n	800bf44 <pbuf_remove_header+0x2c>
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf42:	d301      	bcc.n	800bf48 <pbuf_remove_header+0x30>
    return 1;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e028      	b.n	800bf9a <pbuf_remove_header+0x82>
  }
  if (header_size_decrement == 0) {
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <pbuf_remove_header+0x3a>
    return 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e023      	b.n	800bf9a <pbuf_remove_header+0x82>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	895b      	ldrh	r3, [r3, #10]
 800bf5a:	89fa      	ldrh	r2, [r7, #14]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d904      	bls.n	800bf6a <pbuf_remove_header+0x52>
 800bf60:	4813      	ldr	r0, [pc, #76]	@ (800bfb0 <pbuf_remove_header+0x98>)
 800bf62:	f7f4 fe97 	bl	8000c94 <printf>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e017      	b.n	800bf9a <pbuf_remove_header+0x82>

  /* remember current payload pointer */
  payload = p->payload;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	441a      	add	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	895a      	ldrh	r2, [r3, #10]
 800bf80:	89fb      	ldrh	r3, [r7, #14]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	891a      	ldrh	r2, [r3, #8]
 800bf8e:	89fb      	ldrh	r3, [r7, #14]
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	080194c0 	.word	0x080194c0
 800bfa8:	08019620 	.word	0x08019620
 800bfac:	0801951c 	.word	0x0801951c
 800bfb0:	0801962c 	.word	0x0801962c

0800bfb4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	807b      	strh	r3, [r7, #2]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bfc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	da08      	bge.n	800bfde <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bfcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff9f 	bl	800bf18 <pbuf_remove_header>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	e007      	b.n	800bfee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bfde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfe2:	787a      	ldrb	r2, [r7, #1]
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ff1e 	bl	800be28 <pbuf_add_header_impl>
 800bfec:	4603      	mov	r3, r0
  }
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b082      	sub	sp, #8
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	460b      	mov	r3, r1
 800c000:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c006:	2201      	movs	r2, #1
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff ffd2 	bl	800bfb4 <pbuf_header_impl>
 800c010:	4603      	mov	r3, r0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10b      	bne.n	800c042 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d106      	bne.n	800c03e <pbuf_free+0x22>
 800c030:	4b38      	ldr	r3, [pc, #224]	@ (800c114 <pbuf_free+0xf8>)
 800c032:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c036:	4938      	ldr	r1, [pc, #224]	@ (800c118 <pbuf_free+0xfc>)
 800c038:	4838      	ldr	r0, [pc, #224]	@ (800c11c <pbuf_free+0x100>)
 800c03a:	f7f4 fe2b 	bl	8000c94 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	e063      	b.n	800c10a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c046:	e05c      	b.n	800c102 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7b9b      	ldrb	r3, [r3, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d106      	bne.n	800c05e <pbuf_free+0x42>
 800c050:	4b30      	ldr	r3, [pc, #192]	@ (800c114 <pbuf_free+0xf8>)
 800c052:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c056:	4932      	ldr	r1, [pc, #200]	@ (800c120 <pbuf_free+0x104>)
 800c058:	4830      	ldr	r0, [pc, #192]	@ (800c11c <pbuf_free+0x100>)
 800c05a:	f7f4 fe1b 	bl	8000c94 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7b9b      	ldrb	r3, [r3, #14]
 800c062:	3b01      	subs	r3, #1
 800c064:	b2da      	uxtb	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	739a      	strb	r2, [r3, #14]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	7b9b      	ldrb	r3, [r3, #14]
 800c06e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c070:	7dbb      	ldrb	r3, [r7, #22]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d143      	bne.n	800c0fe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	7b1b      	ldrb	r3, [r3, #12]
 800c080:	f003 030f 	and.w	r3, r3, #15
 800c084:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7b5b      	ldrb	r3, [r3, #13]
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d011      	beq.n	800c0b6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <pbuf_free+0x90>
 800c09e:	4b1d      	ldr	r3, [pc, #116]	@ (800c114 <pbuf_free+0xf8>)
 800c0a0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c0a4:	491f      	ldr	r1, [pc, #124]	@ (800c124 <pbuf_free+0x108>)
 800c0a6:	481d      	ldr	r0, [pc, #116]	@ (800c11c <pbuf_free+0x100>)
 800c0a8:	f7f4 fdf4 	bl	8000c94 <printf>
        pc->custom_free_function(p);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	4798      	blx	r3
 800c0b4:	e01d      	b.n	800c0f2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d104      	bne.n	800c0c6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	200c      	movs	r0, #12
 800c0c0:	f7ff f9b4 	bl	800b42c <memp_free>
 800c0c4:	e015      	b.n	800c0f2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d104      	bne.n	800c0d6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	200b      	movs	r0, #11
 800c0d0:	f7ff f9ac 	bl	800b42c <memp_free>
 800c0d4:	e00d      	b.n	800c0f2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d103      	bne.n	800c0e4 <pbuf_free+0xc8>
          mem_free(p);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7fe fe6b 	bl	800adb8 <mem_free>
 800c0e2:	e006      	b.n	800c0f2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c114 <pbuf_free+0xf8>)
 800c0e6:	f240 320f 	movw	r2, #783	@ 0x30f
 800c0ea:	490f      	ldr	r1, [pc, #60]	@ (800c128 <pbuf_free+0x10c>)
 800c0ec:	480b      	ldr	r0, [pc, #44]	@ (800c11c <pbuf_free+0x100>)
 800c0ee:	f7f4 fdd1 	bl	8000c94 <printf>
        }
      }
      count++;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	607b      	str	r3, [r7, #4]
 800c0fc:	e001      	b.n	800c102 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d19f      	bne.n	800c048 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c108:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	080194c0 	.word	0x080194c0
 800c118:	08019620 	.word	0x08019620
 800c11c:	0801951c 	.word	0x0801951c
 800c120:	0801964c 	.word	0x0801964c
 800c124:	08019664 	.word	0x08019664
 800c128:	08019688 	.word	0x08019688

0800c12c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c138:	e005      	b.n	800c146 <pbuf_clen+0x1a>
    ++len;
 800c13a:	89fb      	ldrh	r3, [r7, #14]
 800c13c:	3301      	adds	r3, #1
 800c13e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1f6      	bne.n	800c13a <pbuf_clen+0xe>
  }
  return len;
 800c14c:	89fb      	ldrh	r3, [r7, #14]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d010      	beq.n	800c18c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7b9b      	ldrb	r3, [r3, #14]
 800c16e:	3301      	adds	r3, #1
 800c170:	b2da      	uxtb	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	7b9b      	ldrb	r3, [r3, #14]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <pbuf_ref+0x30>
 800c17e:	4b05      	ldr	r3, [pc, #20]	@ (800c194 <pbuf_ref+0x38>)
 800c180:	f240 3242 	movw	r2, #834	@ 0x342
 800c184:	4904      	ldr	r1, [pc, #16]	@ (800c198 <pbuf_ref+0x3c>)
 800c186:	4805      	ldr	r0, [pc, #20]	@ (800c19c <pbuf_ref+0x40>)
 800c188:	f7f4 fd84 	bl	8000c94 <printf>
  }
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	080194c0 	.word	0x080194c0
 800c198:	0801969c 	.word	0x0801969c
 800c19c:	0801951c 	.word	0x0801951c

0800c1a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d002      	beq.n	800c1b6 <pbuf_cat+0x16>
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d103      	bne.n	800c1be <pbuf_cat+0x1e>
 800c1b6:	481e      	ldr	r0, [pc, #120]	@ (800c230 <pbuf_cat+0x90>)
 800c1b8:	f7f4 fd6c 	bl	8000c94 <printf>
 800c1bc:	e034      	b.n	800c228 <pbuf_cat+0x88>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	e00a      	b.n	800c1da <pbuf_cat+0x3a>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	891a      	ldrh	r2, [r3, #8]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	891b      	ldrh	r3, [r3, #8]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60fb      	str	r3, [r7, #12]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1f0      	bne.n	800c1c4 <pbuf_cat+0x24>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	891a      	ldrh	r2, [r3, #8]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	895b      	ldrh	r3, [r3, #10]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d006      	beq.n	800c1fc <pbuf_cat+0x5c>
 800c1ee:	4b11      	ldr	r3, [pc, #68]	@ (800c234 <pbuf_cat+0x94>)
 800c1f0:	f240 3262 	movw	r2, #866	@ 0x362
 800c1f4:	4910      	ldr	r1, [pc, #64]	@ (800c238 <pbuf_cat+0x98>)
 800c1f6:	4811      	ldr	r0, [pc, #68]	@ (800c23c <pbuf_cat+0x9c>)
 800c1f8:	f7f4 fd4c 	bl	8000c94 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <pbuf_cat+0x72>
 800c204:	4b0b      	ldr	r3, [pc, #44]	@ (800c234 <pbuf_cat+0x94>)
 800c206:	f240 3263 	movw	r2, #867	@ 0x363
 800c20a:	490d      	ldr	r1, [pc, #52]	@ (800c240 <pbuf_cat+0xa0>)
 800c20c:	480b      	ldr	r0, [pc, #44]	@ (800c23c <pbuf_cat+0x9c>)
 800c20e:	f7f4 fd41 	bl	8000c94 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	891a      	ldrh	r2, [r3, #8]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	891b      	ldrh	r3, [r3, #8]
 800c21a:	4413      	add	r3, r2
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	080196b0 	.word	0x080196b0
 800c234:	080194c0 	.word	0x080194c0
 800c238:	080196e8 	.word	0x080196e8
 800c23c:	0801951c 	.word	0x0801951c
 800c240:	08019718 	.word	0x08019718

0800c244 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff ffa5 	bl	800c1a0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c256:	6838      	ldr	r0, [r7, #0]
 800c258:	f7ff ff80 	bl	800c15c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d105      	bne.n	800c280 <pbuf_copy+0x1c>
 800c274:	4808      	ldr	r0, [pc, #32]	@ (800c298 <pbuf_copy+0x34>)
 800c276:	f7f4 fd0d 	bl	8000c94 <printf>
 800c27a:	f06f 030f 	mvn.w	r3, #15
 800c27e:	e007      	b.n	800c290 <pbuf_copy+0x2c>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	891a      	ldrh	r2, [r3, #8]
 800c284:	2300      	movs	r3, #0
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f807 	bl	800c29c <pbuf_copy_partial_pbuf>
 800c28e:	4603      	mov	r3, r0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	08019764 	.word	0x08019764

0800c29c <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	80fb      	strh	r3, [r7, #6]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len_calc;
 800c2b2:	88bb      	ldrh	r3, [r7, #4]
 800c2b4:	61fb      	str	r3, [r7, #28]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d004      	beq.n	800c2ca <pbuf_copy_partial_pbuf+0x2e>
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	891b      	ldrh	r3, [r3, #8]
 800c2c4:	88fa      	ldrh	r2, [r7, #6]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d905      	bls.n	800c2d6 <pbuf_copy_partial_pbuf+0x3a>
 800c2ca:	4864      	ldr	r0, [pc, #400]	@ (800c45c <pbuf_copy_partial_pbuf+0x1c0>)
 800c2cc:	f7f4 fce2 	bl	8000c94 <printf>
 800c2d0:	f06f 030f 	mvn.w	r3, #15
 800c2d4:	e0bd      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <pbuf_copy_partial_pbuf+0x50>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	891b      	ldrh	r3, [r3, #8]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	88ba      	ldrh	r2, [r7, #4]
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	da05      	bge.n	800c2f8 <pbuf_copy_partial_pbuf+0x5c>
 800c2ec:	485c      	ldr	r0, [pc, #368]	@ (800c460 <pbuf_copy_partial_pbuf+0x1c4>)
 800c2ee:	f7f4 fcd1 	bl	8000c94 <printf>
 800c2f2:	f06f 030f 	mvn.w	r3, #15
 800c2f6:	e0ac      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	895b      	ldrh	r3, [r3, #10]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	1ad2      	subs	r2, r2, r3
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	895b      	ldrh	r3, [r3, #10]
 800c306:	4619      	mov	r1, r3
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	1acb      	subs	r3, r1, r3
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d306      	bcc.n	800c31e <pbuf_copy_partial_pbuf+0x82>
      /* complete current p_from fits into current p_to */
      len_calc = p_from->len - offset_from;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	895b      	ldrh	r3, [r3, #10]
 800c314:	461a      	mov	r2, r3
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	e005      	b.n	800c32a <pbuf_copy_partial_pbuf+0x8e>
    } else {
      /* current p_from does not fit into current p_to */
      len_calc = p_to->len - offset_to;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	895b      	ldrh	r3, [r3, #10]
 800c322:	461a      	mov	r2, r3
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	617b      	str	r3, [r7, #20]
    }
    len = (u16_t)LWIP_MIN(copy_len, len_calc);
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d802      	bhi.n	800c338 <pbuf_copy_partial_pbuf+0x9c>
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	b29b      	uxth	r3, r3
 800c336:	e000      	b.n	800c33a <pbuf_copy_partial_pbuf+0x9e>
 800c338:	88fb      	ldrh	r3, [r7, #6]
 800c33a:	827b      	strh	r3, [r7, #18]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	18d0      	adds	r0, r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	4413      	add	r3, r2
 800c34c:	8a7a      	ldrh	r2, [r7, #18]
 800c34e:	4619      	mov	r1, r3
 800c350:	f00b f9cf 	bl	80176f2 <memcpy>
    offset_to += len;
 800c354:	8a7b      	ldrh	r3, [r7, #18]
 800c356:	69fa      	ldr	r2, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800c35c:	8a7b      	ldrh	r3, [r7, #18]
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	4413      	add	r3, r2
 800c362:	61bb      	str	r3, [r7, #24]
    copy_len -= len;
 800c364:	88fa      	ldrh	r2, [r7, #6]
 800c366:	8a7b      	ldrh	r3, [r7, #18]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	895b      	ldrh	r3, [r3, #10]
 800c370:	461a      	mov	r2, r3
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	4293      	cmp	r3, r2
 800c376:	d906      	bls.n	800c386 <pbuf_copy_partial_pbuf+0xea>
 800c378:	4b3a      	ldr	r3, [pc, #232]	@ (800c464 <pbuf_copy_partial_pbuf+0x1c8>)
 800c37a:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 800c37e:	493a      	ldr	r1, [pc, #232]	@ (800c468 <pbuf_copy_partial_pbuf+0x1cc>)
 800c380:	483a      	ldr	r0, [pc, #232]	@ (800c46c <pbuf_copy_partial_pbuf+0x1d0>)
 800c382:	f7f4 fc87 	bl	8000c94 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	895b      	ldrh	r3, [r3, #10]
 800c38a:	461a      	mov	r2, r3
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	4293      	cmp	r3, r2
 800c390:	d906      	bls.n	800c3a0 <pbuf_copy_partial_pbuf+0x104>
 800c392:	4b34      	ldr	r3, [pc, #208]	@ (800c464 <pbuf_copy_partial_pbuf+0x1c8>)
 800c394:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 800c398:	4935      	ldr	r1, [pc, #212]	@ (800c470 <pbuf_copy_partial_pbuf+0x1d4>)
 800c39a:	4834      	ldr	r0, [pc, #208]	@ (800c46c <pbuf_copy_partial_pbuf+0x1d0>)
 800c39c:	f7f4 fc7a 	bl	8000c94 <printf>
    if (offset_from >= p_from->len) {
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d310      	bcc.n	800c3ce <pbuf_copy_partial_pbuf+0x132>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d108      	bne.n	800c3ce <pbuf_copy_partial_pbuf+0x132>
 800c3bc:	88fb      	ldrh	r3, [r7, #6]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d005      	beq.n	800c3ce <pbuf_copy_partial_pbuf+0x132>
 800c3c2:	482c      	ldr	r0, [pc, #176]	@ (800c474 <pbuf_copy_partial_pbuf+0x1d8>)
 800c3c4:	f7f4 fc66 	bl	8000c94 <printf>
 800c3c8:	f06f 030f 	mvn.w	r3, #15
 800c3cc:	e041      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
    }
    if (offset_to == p_to->len) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	895b      	ldrh	r3, [r3, #10]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d110      	bne.n	800c3fc <pbuf_copy_partial_pbuf+0x160>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d108      	bne.n	800c3fc <pbuf_copy_partial_pbuf+0x160>
 800c3ea:	88fb      	ldrh	r3, [r7, #6]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <pbuf_copy_partial_pbuf+0x160>
 800c3f0:	4821      	ldr	r0, [pc, #132]	@ (800c478 <pbuf_copy_partial_pbuf+0x1dc>)
 800c3f2:	f7f4 fc4f 	bl	8000c94 <printf>
 800c3f6:	f06f 030f 	mvn.w	r3, #15
 800c3fa:	e02a      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00f      	beq.n	800c422 <pbuf_copy_partial_pbuf+0x186>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	895a      	ldrh	r2, [r3, #10]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d109      	bne.n	800c422 <pbuf_copy_partial_pbuf+0x186>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <pbuf_copy_partial_pbuf+0x186>
 800c416:	4819      	ldr	r0, [pc, #100]	@ (800c47c <pbuf_copy_partial_pbuf+0x1e0>)
 800c418:	f7f4 fc3c 	bl	8000c94 <printf>
 800c41c:	f06f 0305 	mvn.w	r3, #5
 800c420:	e017      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00f      	beq.n	800c448 <pbuf_copy_partial_pbuf+0x1ac>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	895a      	ldrh	r2, [r3, #10]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	891b      	ldrh	r3, [r3, #8]
 800c430:	429a      	cmp	r2, r3
 800c432:	d109      	bne.n	800c448 <pbuf_copy_partial_pbuf+0x1ac>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <pbuf_copy_partial_pbuf+0x1ac>
 800c43c:	480f      	ldr	r0, [pc, #60]	@ (800c47c <pbuf_copy_partial_pbuf+0x1e0>)
 800c43e:	f7f4 fc29 	bl	8000c94 <printf>
 800c442:	f06f 0305 	mvn.w	r3, #5
 800c446:	e004      	b.n	800c452 <pbuf_copy_partial_pbuf+0x1b6>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f47f af54 	bne.w	800c2f8 <pbuf_copy_partial_pbuf+0x5c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3720      	adds	r7, #32
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	08019780 	.word	0x08019780
 800c460:	080197b4 	.word	0x080197b4
 800c464:	080194c0 	.word	0x080194c0
 800c468:	080197e4 	.word	0x080197e4
 800c46c:	0801951c 	.word	0x0801951c
 800c470:	080197fc 	.word	0x080197fc
 800c474:	08019818 	.word	0x08019818
 800c478:	08019828 	.word	0x08019828
 800c47c:	08019838 	.word	0x08019838

0800c480 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4611      	mov	r1, r2
 800c48c:	461a      	mov	r2, r3
 800c48e:	460b      	mov	r3, r1
 800c490:	80fb      	strh	r3, [r7, #6]
 800c492:	4613      	mov	r3, r2
 800c494:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d104      	bne.n	800c4ae <pbuf_copy_partial+0x2e>
 800c4a4:	4827      	ldr	r0, [pc, #156]	@ (800c544 <pbuf_copy_partial+0xc4>)
 800c4a6:	f7f4 fbf5 	bl	8000c94 <printf>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e046      	b.n	800c53c <pbuf_copy_partial+0xbc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d104      	bne.n	800c4be <pbuf_copy_partial+0x3e>
 800c4b4:	4824      	ldr	r0, [pc, #144]	@ (800c548 <pbuf_copy_partial+0xc8>)
 800c4b6:	f7f4 fbed 	bl	8000c94 <printf>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e03e      	b.n	800c53c <pbuf_copy_partial+0xbc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	e034      	b.n	800c52e <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
 800c4c4:	88bb      	ldrh	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <pbuf_copy_partial+0x60>
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	895b      	ldrh	r3, [r3, #10]
 800c4ce:	88ba      	ldrh	r2, [r7, #4]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d305      	bcc.n	800c4e0 <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	895b      	ldrh	r3, [r3, #10]
 800c4d8:	88ba      	ldrh	r2, [r7, #4]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	80bb      	strh	r3, [r7, #4]
 800c4de:	e023      	b.n	800c528 <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	895a      	ldrh	r2, [r3, #10]
 800c4e4:	88bb      	ldrh	r3, [r7, #4]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c4ea:	8b3a      	ldrh	r2, [r7, #24]
 800c4ec:	88fb      	ldrh	r3, [r7, #6]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d901      	bls.n	800c4f6 <pbuf_copy_partial+0x76>
        buf_copy_len = len;
 800c4f2:	88fb      	ldrh	r3, [r7, #6]
 800c4f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c4f6:	8b7b      	ldrh	r3, [r7, #26]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	18d0      	adds	r0, r2, r3
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	88bb      	ldrh	r3, [r7, #4]
 800c502:	4413      	add	r3, r2
 800c504:	8b3a      	ldrh	r2, [r7, #24]
 800c506:	4619      	mov	r1, r3
 800c508:	f00b f8f3 	bl	80176f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c50c:	8afa      	ldrh	r2, [r7, #22]
 800c50e:	8b3b      	ldrh	r3, [r7, #24]
 800c510:	4413      	add	r3, r2
 800c512:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c514:	8b7a      	ldrh	r2, [r7, #26]
 800c516:	8b3b      	ldrh	r3, [r7, #24]
 800c518:	4413      	add	r3, r2
 800c51a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c51c:	88fa      	ldrh	r2, [r7, #6]
 800c51e:	8b3b      	ldrh	r3, [r7, #24]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	88fb      	ldrh	r3, [r7, #6]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <pbuf_copy_partial+0xba>
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1c4      	bne.n	800c4c4 <pbuf_copy_partial+0x44>
    }
  }
  return copied_total;
 800c53a:	8afb      	ldrh	r3, [r7, #22]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	08019870 	.word	0x08019870
 800c548:	08019890 	.word	0x08019890

0800c54c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	4603      	mov	r3, r0
 800c554:	603a      	str	r2, [r7, #0]
 800c556:	71fb      	strb	r3, [r7, #7]
 800c558:	460b      	mov	r3, r1
 800c55a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	8919      	ldrh	r1, [r3, #8]
 800c560:	88ba      	ldrh	r2, [r7, #4]
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff fa79 	bl	800ba5c <pbuf_alloc>
 800c56a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <pbuf_clone+0x2a>
    return NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	e011      	b.n	800c59a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7ff fe73 	bl	800c264 <pbuf_copy>
 800c57e:	4603      	mov	r3, r0
 800c580:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c582:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d006      	beq.n	800c598 <pbuf_clone+0x4c>
 800c58a:	4b06      	ldr	r3, [pc, #24]	@ (800c5a4 <pbuf_clone+0x58>)
 800c58c:	f240 5246 	movw	r2, #1350	@ 0x546
 800c590:	4905      	ldr	r1, [pc, #20]	@ (800c5a8 <pbuf_clone+0x5c>)
 800c592:	4806      	ldr	r0, [pc, #24]	@ (800c5ac <pbuf_clone+0x60>)
 800c594:	f7f4 fb7e 	bl	8000c94 <printf>
  return q;
 800c598:	68fb      	ldr	r3, [r7, #12]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	080194c0 	.word	0x080194c0
 800c5a8:	0801999c 	.word	0x0801999c
 800c5ac:	0801951c 	.word	0x0801951c

0800c5b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c5b4:	f00a fe78 	bl	80172a8 <rand>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	4b01      	ldr	r3, [pc, #4]	@ (800c5d0 <tcp_init+0x20>)
 800c5ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c5cc:	bf00      	nop
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	20000010 	.word	0x20000010

0800c5d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7d1b      	ldrb	r3, [r3, #20]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d105      	bne.n	800c5f0 <tcp_free+0x1c>
 800c5e4:	4b06      	ldr	r3, [pc, #24]	@ (800c600 <tcp_free+0x2c>)
 800c5e6:	22d4      	movs	r2, #212	@ 0xd4
 800c5e8:	4906      	ldr	r1, [pc, #24]	@ (800c604 <tcp_free+0x30>)
 800c5ea:	4807      	ldr	r0, [pc, #28]	@ (800c608 <tcp_free+0x34>)
 800c5ec:	f7f4 fb52 	bl	8000c94 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	2001      	movs	r0, #1
 800c5f4:	f7fe ff1a 	bl	800b42c <memp_free>
}
 800c5f8:	bf00      	nop
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08019a28 	.word	0x08019a28
 800c604:	08019a54 	.word	0x08019a54
 800c608:	08019a68 	.word	0x08019a68

0800c60c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7d1b      	ldrb	r3, [r3, #20]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d105      	bne.n	800c628 <tcp_free_listen+0x1c>
 800c61c:	4b06      	ldr	r3, [pc, #24]	@ (800c638 <tcp_free_listen+0x2c>)
 800c61e:	22df      	movs	r2, #223	@ 0xdf
 800c620:	4906      	ldr	r1, [pc, #24]	@ (800c63c <tcp_free_listen+0x30>)
 800c622:	4807      	ldr	r0, [pc, #28]	@ (800c640 <tcp_free_listen+0x34>)
 800c624:	f7f4 fb36 	bl	8000c94 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c628:	6879      	ldr	r1, [r7, #4]
 800c62a:	2002      	movs	r0, #2
 800c62c:	f7fe fefe 	bl	800b42c <memp_free>
}
 800c630:	bf00      	nop
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	08019a28 	.word	0x08019a28
 800c63c:	08019a90 	.word	0x08019a90
 800c640:	08019a68 	.word	0x08019a68

0800c644 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c648:	f001 f818 	bl	800d67c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c64c:	4b07      	ldr	r3, [pc, #28]	@ (800c66c <tcp_tmr+0x28>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	3301      	adds	r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	4b05      	ldr	r3, [pc, #20]	@ (800c66c <tcp_tmr+0x28>)
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	4b04      	ldr	r3, [pc, #16]	@ (800c66c <tcp_tmr+0x28>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c664:	f000 fcde 	bl	800d024 <tcp_slowtmr>
  }
}
 800c668:	bf00      	nop
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20004aa9 	.word	0x20004aa9

0800c670 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d105      	bne.n	800c68c <tcp_remove_listener+0x1c>
 800c680:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b8 <tcp_remove_listener+0x48>)
 800c682:	22ff      	movs	r2, #255	@ 0xff
 800c684:	490d      	ldr	r1, [pc, #52]	@ (800c6bc <tcp_remove_listener+0x4c>)
 800c686:	480e      	ldr	r0, [pc, #56]	@ (800c6c0 <tcp_remove_listener+0x50>)
 800c688:	f7f4 fb04 	bl	8000c94 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e00a      	b.n	800c6a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d102      	bne.n	800c6a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f1      	bne.n	800c692 <tcp_remove_listener+0x22>
    }
  }
}
 800c6ae:	bf00      	nop
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	08019a28 	.word	0x08019a28
 800c6bc:	08019aac 	.word	0x08019aac
 800c6c0:	08019a68 	.word	0x08019a68

0800c6c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <tcp_listen_closed+0x1c>
 800c6d2:	4b14      	ldr	r3, [pc, #80]	@ (800c724 <tcp_listen_closed+0x60>)
 800c6d4:	f240 1211 	movw	r2, #273	@ 0x111
 800c6d8:	4913      	ldr	r1, [pc, #76]	@ (800c728 <tcp_listen_closed+0x64>)
 800c6da:	4814      	ldr	r0, [pc, #80]	@ (800c72c <tcp_listen_closed+0x68>)
 800c6dc:	f7f4 fada 	bl	8000c94 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d006      	beq.n	800c6f6 <tcp_listen_closed+0x32>
 800c6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c724 <tcp_listen_closed+0x60>)
 800c6ea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c6ee:	4910      	ldr	r1, [pc, #64]	@ (800c730 <tcp_listen_closed+0x6c>)
 800c6f0:	480e      	ldr	r0, [pc, #56]	@ (800c72c <tcp_listen_closed+0x68>)
 800c6f2:	f7f4 facf 	bl	8000c94 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	e00b      	b.n	800c714 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c6fc:	4a0d      	ldr	r2, [pc, #52]	@ (800c734 <tcp_listen_closed+0x70>)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6879      	ldr	r1, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff ffb1 	bl	800c670 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3301      	adds	r3, #1
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b03      	cmp	r3, #3
 800c718:	d9f0      	bls.n	800c6fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	08019a28 	.word	0x08019a28
 800c728:	08019ad4 	.word	0x08019ad4
 800c72c:	08019a68 	.word	0x08019a68
 800c730:	08019ae0 	.word	0x08019ae0
 800c734:	0801bd64 	.word	0x0801bd64

0800c738 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c738:	b5b0      	push	{r4, r5, r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af04      	add	r7, sp, #16
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	460b      	mov	r3, r1
 800c742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <tcp_close_shutdown+0x20>
 800c74a:	4b63      	ldr	r3, [pc, #396]	@ (800c8d8 <tcp_close_shutdown+0x1a0>)
 800c74c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c750:	4962      	ldr	r1, [pc, #392]	@ (800c8dc <tcp_close_shutdown+0x1a4>)
 800c752:	4863      	ldr	r0, [pc, #396]	@ (800c8e0 <tcp_close_shutdown+0x1a8>)
 800c754:	f7f4 fa9e 	bl	8000c94 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d067      	beq.n	800c82e <tcp_close_shutdown+0xf6>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	7d1b      	ldrb	r3, [r3, #20]
 800c762:	2b04      	cmp	r3, #4
 800c764:	d003      	beq.n	800c76e <tcp_close_shutdown+0x36>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	7d1b      	ldrb	r3, [r3, #20]
 800c76a:	2b07      	cmp	r3, #7
 800c76c:	d15f      	bne.n	800c82e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c772:	2b00      	cmp	r3, #0
 800c774:	d105      	bne.n	800c782 <tcp_close_shutdown+0x4a>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c77a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800c77e:	4293      	cmp	r3, r2
 800c780:	d055      	beq.n	800c82e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8b5b      	ldrh	r3, [r3, #26]
 800c786:	f003 0310 	and.w	r3, r3, #16
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d106      	bne.n	800c79c <tcp_close_shutdown+0x64>
 800c78e:	4b52      	ldr	r3, [pc, #328]	@ (800c8d8 <tcp_close_shutdown+0x1a0>)
 800c790:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c794:	4953      	ldr	r1, [pc, #332]	@ (800c8e4 <tcp_close_shutdown+0x1ac>)
 800c796:	4852      	ldr	r0, [pc, #328]	@ (800c8e0 <tcp_close_shutdown+0x1a8>)
 800c798:	f7f4 fa7c 	bl	8000c94 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c7a4:	687d      	ldr	r5, [r7, #4]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	8ad2      	ldrh	r2, [r2, #22]
 800c7ae:	6879      	ldr	r1, [r7, #4]
 800c7b0:	8b09      	ldrh	r1, [r1, #24]
 800c7b2:	9102      	str	r1, [sp, #8]
 800c7b4:	9201      	str	r2, [sp, #4]
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	4601      	mov	r1, r0
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f005 f9a4 	bl	8011b0c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 fac9 	bl	800dd5c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c7ca:	4b47      	ldr	r3, [pc, #284]	@ (800c8e8 <tcp_close_shutdown+0x1b0>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d105      	bne.n	800c7e0 <tcp_close_shutdown+0xa8>
 800c7d4:	4b44      	ldr	r3, [pc, #272]	@ (800c8e8 <tcp_close_shutdown+0x1b0>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	4a43      	ldr	r2, [pc, #268]	@ (800c8e8 <tcp_close_shutdown+0x1b0>)
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	e013      	b.n	800c808 <tcp_close_shutdown+0xd0>
 800c7e0:	4b41      	ldr	r3, [pc, #260]	@ (800c8e8 <tcp_close_shutdown+0x1b0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	e00c      	b.n	800c802 <tcp_close_shutdown+0xca>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d104      	bne.n	800c7fc <tcp_close_shutdown+0xc4>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68da      	ldr	r2, [r3, #12]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	60da      	str	r2, [r3, #12]
 800c7fa:	e005      	b.n	800c808 <tcp_close_shutdown+0xd0>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1ef      	bne.n	800c7e8 <tcp_close_shutdown+0xb0>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	60da      	str	r2, [r3, #12]
 800c80e:	4b37      	ldr	r3, [pc, #220]	@ (800c8ec <tcp_close_shutdown+0x1b4>)
 800c810:	2201      	movs	r2, #1
 800c812:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c814:	4b36      	ldr	r3, [pc, #216]	@ (800c8f0 <tcp_close_shutdown+0x1b8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d102      	bne.n	800c824 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c81e:	f003 fb8b 	bl	800ff38 <tcp_trigger_input_pcb_close>
 800c822:	e002      	b.n	800c82a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff fed5 	bl	800c5d4 <tcp_free>
      }
      return ERR_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e050      	b.n	800c8d0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7d1b      	ldrb	r3, [r3, #20]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d03b      	beq.n	800c8ae <tcp_close_shutdown+0x176>
 800c836:	2b02      	cmp	r3, #2
 800c838:	dc44      	bgt.n	800c8c4 <tcp_close_shutdown+0x18c>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <tcp_close_shutdown+0x10c>
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d02a      	beq.n	800c898 <tcp_close_shutdown+0x160>
 800c842:	e03f      	b.n	800c8c4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	8adb      	ldrh	r3, [r3, #22]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d021      	beq.n	800c890 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c84c:	4b29      	ldr	r3, [pc, #164]	@ (800c8f4 <tcp_close_shutdown+0x1bc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	429a      	cmp	r2, r3
 800c854:	d105      	bne.n	800c862 <tcp_close_shutdown+0x12a>
 800c856:	4b27      	ldr	r3, [pc, #156]	@ (800c8f4 <tcp_close_shutdown+0x1bc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	4a25      	ldr	r2, [pc, #148]	@ (800c8f4 <tcp_close_shutdown+0x1bc>)
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	e013      	b.n	800c88a <tcp_close_shutdown+0x152>
 800c862:	4b24      	ldr	r3, [pc, #144]	@ (800c8f4 <tcp_close_shutdown+0x1bc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	60bb      	str	r3, [r7, #8]
 800c868:	e00c      	b.n	800c884 <tcp_close_shutdown+0x14c>
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	429a      	cmp	r2, r3
 800c872:	d104      	bne.n	800c87e <tcp_close_shutdown+0x146>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68da      	ldr	r2, [r3, #12]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	60da      	str	r2, [r3, #12]
 800c87c:	e005      	b.n	800c88a <tcp_close_shutdown+0x152>
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	60bb      	str	r3, [r7, #8]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1ef      	bne.n	800c86a <tcp_close_shutdown+0x132>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7ff fe9f 	bl	800c5d4 <tcp_free>
      break;
 800c896:	e01a      	b.n	800c8ce <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7ff ff13 	bl	800c6c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	4815      	ldr	r0, [pc, #84]	@ (800c8f8 <tcp_close_shutdown+0x1c0>)
 800c8a2:	f001 fa9d 	bl	800dde0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff feb0 	bl	800c60c <tcp_free_listen>
      break;
 800c8ac:	e00f      	b.n	800c8ce <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	480d      	ldr	r0, [pc, #52]	@ (800c8e8 <tcp_close_shutdown+0x1b0>)
 800c8b2:	f001 fa95 	bl	800dde0 <tcp_pcb_remove>
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c8ec <tcp_close_shutdown+0x1b4>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff fe89 	bl	800c5d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c8c2:	e004      	b.n	800c8ce <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f819 	bl	800c8fc <tcp_close_shutdown_fin>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	e000      	b.n	800c8d0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c8d8:	08019a28 	.word	0x08019a28
 800c8dc:	08019af8 	.word	0x08019af8
 800c8e0:	08019a68 	.word	0x08019a68
 800c8e4:	08019b18 	.word	0x08019b18
 800c8e8:	2000d8f8 	.word	0x2000d8f8
 800c8ec:	2000d8f4 	.word	0x2000d8f4
 800c8f0:	2000d90c 	.word	0x2000d90c
 800c8f4:	2000d904 	.word	0x2000d904
 800c8f8:	2000d900 	.word	0x2000d900

0800c8fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d106      	bne.n	800c918 <tcp_close_shutdown_fin+0x1c>
 800c90a:	4b2e      	ldr	r3, [pc, #184]	@ (800c9c4 <tcp_close_shutdown_fin+0xc8>)
 800c90c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c910:	492d      	ldr	r1, [pc, #180]	@ (800c9c8 <tcp_close_shutdown_fin+0xcc>)
 800c912:	482e      	ldr	r0, [pc, #184]	@ (800c9cc <tcp_close_shutdown_fin+0xd0>)
 800c914:	f7f4 f9be 	bl	8000c94 <printf>

  switch (pcb->state) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7d1b      	ldrb	r3, [r3, #20]
 800c91c:	2b07      	cmp	r3, #7
 800c91e:	d020      	beq.n	800c962 <tcp_close_shutdown_fin+0x66>
 800c920:	2b07      	cmp	r3, #7
 800c922:	dc2b      	bgt.n	800c97c <tcp_close_shutdown_fin+0x80>
 800c924:	2b03      	cmp	r3, #3
 800c926:	d002      	beq.n	800c92e <tcp_close_shutdown_fin+0x32>
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d00d      	beq.n	800c948 <tcp_close_shutdown_fin+0x4c>
 800c92c:	e026      	b.n	800c97c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f004 f9cc 	bl	8010ccc <tcp_send_fin>
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d11f      	bne.n	800c980 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2205      	movs	r2, #5
 800c944:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c946:	e01b      	b.n	800c980 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f004 f9bf 	bl	8010ccc <tcp_send_fin>
 800c94e:	4603      	mov	r3, r0
 800c950:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d114      	bne.n	800c984 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2205      	movs	r2, #5
 800c95e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c960:	e010      	b.n	800c984 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f004 f9b2 	bl	8010ccc <tcp_send_fin>
 800c968:	4603      	mov	r3, r0
 800c96a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d109      	bne.n	800c988 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2209      	movs	r2, #9
 800c978:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c97a:	e005      	b.n	800c988 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e01c      	b.n	800c9ba <tcp_close_shutdown_fin+0xbe>
      break;
 800c980:	bf00      	nop
 800c982:	e002      	b.n	800c98a <tcp_close_shutdown_fin+0x8e>
      break;
 800c984:	bf00      	nop
 800c986:	e000      	b.n	800c98a <tcp_close_shutdown_fin+0x8e>
      break;
 800c988:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d103      	bne.n	800c99a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f004 fad8 	bl	8010f48 <tcp_output>
 800c998:	e00d      	b.n	800c9b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a2:	d108      	bne.n	800c9b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8b5b      	ldrh	r3, [r3, #26]
 800c9a8:	f043 0308 	orr.w	r3, r3, #8
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e001      	b.n	800c9ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	08019a28 	.word	0x08019a28
 800c9c8:	08019ad4 	.word	0x08019ad4
 800c9cc:	08019a68 	.word	0x08019a68

0800c9d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d105      	bne.n	800c9ea <tcp_close+0x1a>
 800c9de:	480d      	ldr	r0, [pc, #52]	@ (800ca14 <tcp_close+0x44>)
 800c9e0:	f7f4 f958 	bl	8000c94 <printf>
 800c9e4:	f06f 030f 	mvn.w	r3, #15
 800c9e8:	e00f      	b.n	800ca0a <tcp_close+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7d1b      	ldrb	r3, [r3, #20]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d006      	beq.n	800ca00 <tcp_close+0x30>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	8b5b      	ldrh	r3, [r3, #26]
 800c9f6:	f043 0310 	orr.w	r3, r3, #16
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ca00:	2101      	movs	r1, #1
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff fe98 	bl	800c738 <tcp_close_shutdown>
 800ca08:	4603      	mov	r3, r0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	08019b34 	.word	0x08019b34

0800ca18 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d105      	bne.n	800ca36 <tcp_shutdown+0x1e>
 800ca2a:	4824      	ldr	r0, [pc, #144]	@ (800cabc <tcp_shutdown+0xa4>)
 800ca2c:	f7f4 f932 	bl	8000c94 <printf>
 800ca30:	f06f 030f 	mvn.w	r3, #15
 800ca34:	e03d      	b.n	800cab2 <tcp_shutdown+0x9a>

  if (pcb->state == LISTEN) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	7d1b      	ldrb	r3, [r3, #20]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d102      	bne.n	800ca44 <tcp_shutdown+0x2c>
    return ERR_CONN;
 800ca3e:	f06f 030a 	mvn.w	r3, #10
 800ca42:	e036      	b.n	800cab2 <tcp_shutdown+0x9a>
  }
  if (shut_rx) {
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d01b      	beq.n	800ca82 <tcp_shutdown+0x6a>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	8b5b      	ldrh	r3, [r3, #26]
 800ca4e:	f043 0310 	orr.w	r3, r3, #16
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <tcp_shutdown+0x52>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ca5e:	2101      	movs	r1, #1
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7ff fe69 	bl	800c738 <tcp_close_shutdown>
 800ca66:	4603      	mov	r3, r0
 800ca68:	e023      	b.n	800cab2 <tcp_shutdown+0x9a>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d007      	beq.n	800ca82 <tcp_shutdown+0x6a>
      pbuf_free(pcb->refused_data);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff fad0 	bl	800c01c <pbuf_free>
      pcb->refused_data = NULL;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d013      	beq.n	800cab0 <tcp_shutdown+0x98>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	7d1b      	ldrb	r3, [r3, #20]
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	dc02      	bgt.n	800ca96 <tcp_shutdown+0x7e>
 800ca90:	2b03      	cmp	r3, #3
 800ca92:	da02      	bge.n	800ca9a <tcp_shutdown+0x82>
 800ca94:	e009      	b.n	800caaa <tcp_shutdown+0x92>
 800ca96:	2b07      	cmp	r3, #7
 800ca98:	d107      	bne.n	800caaa <tcp_shutdown+0x92>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	4619      	mov	r1, r3
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff fe49 	bl	800c738 <tcp_close_shutdown>
 800caa6:	4603      	mov	r3, r0
 800caa8:	e003      	b.n	800cab2 <tcp_shutdown+0x9a>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800caaa:	f06f 030a 	mvn.w	r3, #10
 800caae:	e000      	b.n	800cab2 <tcp_shutdown+0x9a>
    }
  }
  return ERR_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	08019b4c 	.word	0x08019b4c

0800cac0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08e      	sub	sp, #56	@ 0x38
 800cac4:	af04      	add	r7, sp, #16
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d103      	bne.n	800cad8 <tcp_abandon+0x18>
 800cad0:	484b      	ldr	r0, [pc, #300]	@ (800cc00 <tcp_abandon+0x140>)
 800cad2:	f7f4 f8df 	bl	8000c94 <printf>
 800cad6:	e090      	b.n	800cbfa <tcp_abandon+0x13a>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d106      	bne.n	800caee <tcp_abandon+0x2e>
 800cae0:	4b48      	ldr	r3, [pc, #288]	@ (800cc04 <tcp_abandon+0x144>)
 800cae2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cae6:	4948      	ldr	r1, [pc, #288]	@ (800cc08 <tcp_abandon+0x148>)
 800cae8:	4848      	ldr	r0, [pc, #288]	@ (800cc0c <tcp_abandon+0x14c>)
 800caea:	f7f4 f8d3 	bl	8000c94 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7d1b      	ldrb	r3, [r3, #20]
 800caf2:	2b0a      	cmp	r3, #10
 800caf4:	d107      	bne.n	800cb06 <tcp_abandon+0x46>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	4845      	ldr	r0, [pc, #276]	@ (800cc10 <tcp_abandon+0x150>)
 800cafa:	f001 f971 	bl	800dde0 <tcp_pcb_remove>
    tcp_free(pcb);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff fd68 	bl	800c5d4 <tcp_free>
 800cb04:	e079      	b.n	800cbfa <tcp_abandon+0x13a>
  } else {
    int send_rst = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb12:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb18:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb20:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7d1b      	ldrb	r3, [r3, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d126      	bne.n	800cb7e <tcp_abandon+0xbe>
      if (pcb->local_port != 0) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	8adb      	ldrh	r3, [r3, #22]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d02e      	beq.n	800cb96 <tcp_abandon+0xd6>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb38:	4b36      	ldr	r3, [pc, #216]	@ (800cc14 <tcp_abandon+0x154>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d105      	bne.n	800cb4e <tcp_abandon+0x8e>
 800cb42:	4b34      	ldr	r3, [pc, #208]	@ (800cc14 <tcp_abandon+0x154>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	4a32      	ldr	r2, [pc, #200]	@ (800cc14 <tcp_abandon+0x154>)
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	e013      	b.n	800cb76 <tcp_abandon+0xb6>
 800cb4e:	4b31      	ldr	r3, [pc, #196]	@ (800cc14 <tcp_abandon+0x154>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	61fb      	str	r3, [r7, #28]
 800cb54:	e00c      	b.n	800cb70 <tcp_abandon+0xb0>
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d104      	bne.n	800cb6a <tcp_abandon+0xaa>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68da      	ldr	r2, [r3, #12]
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	60da      	str	r2, [r3, #12]
 800cb68:	e005      	b.n	800cb76 <tcp_abandon+0xb6>
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	61fb      	str	r3, [r7, #28]
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1ef      	bne.n	800cb56 <tcp_abandon+0x96>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	60da      	str	r2, [r3, #12]
 800cb7c:	e00b      	b.n	800cb96 <tcp_abandon+0xd6>
      }
    } else {
      send_rst = reset;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8adb      	ldrh	r3, [r3, #22]
 800cb86:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	4823      	ldr	r0, [pc, #140]	@ (800cc18 <tcp_abandon+0x158>)
 800cb8c:	f001 f928 	bl	800dde0 <tcp_pcb_remove>
 800cb90:	4b22      	ldr	r3, [pc, #136]	@ (800cc1c <tcp_abandon+0x15c>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d004      	beq.n	800cba8 <tcp_abandon+0xe8>
      tcp_segs_free(pcb->unacked);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fe44 	bl	800d830 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <tcp_abandon+0xfa>
      tcp_segs_free(pcb->unsent);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fe3b 	bl	800d830 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00e      	beq.n	800cbde <tcp_abandon+0x11e>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cbc0:	6879      	ldr	r1, [r7, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	8b12      	ldrh	r2, [r2, #24]
 800cbca:	9202      	str	r2, [sp, #8]
 800cbcc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cbce:	9201      	str	r2, [sp, #4]
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	69b9      	ldr	r1, [r7, #24]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f004 ff97 	bl	8011b0c <tcp_rst>
    }
    last_state = pcb->state;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7d1b      	ldrb	r3, [r3, #20]
 800cbe2:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff fcf5 	bl	800c5d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d004      	beq.n	800cbfa <tcp_abandon+0x13a>
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f06f 010c 	mvn.w	r1, #12
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	4798      	blx	r3
  }
}
 800cbfa:	3728      	adds	r7, #40	@ 0x28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08019b68 	.word	0x08019b68
 800cc04:	08019a28 	.word	0x08019a28
 800cc08:	08019b84 	.word	0x08019b84
 800cc0c:	08019a68 	.word	0x08019a68
 800cc10:	2000d908 	.word	0x2000d908
 800cc14:	2000d904 	.word	0x2000d904
 800cc18:	2000d8f8 	.word	0x2000d8f8
 800cc1c:	2000d8f4 	.word	0x2000d8f4

0800cc20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc28:	2101      	movs	r1, #1
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff ff48 	bl	800cac0 <tcp_abandon>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d106      	bne.n	800cc54 <tcp_update_rcv_ann_wnd+0x1c>
 800cc46:	4b25      	ldr	r3, [pc, #148]	@ (800ccdc <tcp_update_rcv_ann_wnd+0xa4>)
 800cc48:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800cc4c:	4924      	ldr	r1, [pc, #144]	@ (800cce0 <tcp_update_rcv_ann_wnd+0xa8>)
 800cc4e:	4825      	ldr	r0, [pc, #148]	@ (800cce4 <tcp_update_rcv_ann_wnd+0xac>)
 800cc50:	f7f4 f820 	bl	8000c94 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cc5c:	4413      	add	r3, r2
 800cc5e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cc68:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800cc6c:	428a      	cmp	r2, r1
 800cc6e:	bf28      	it	cs
 800cc70:	460a      	movcs	r2, r1
 800cc72:	b292      	uxth	r2, r2
 800cc74:	4413      	add	r3, r2
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	db08      	blt.n	800cc90 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	e020      	b.n	800ccd2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	dd03      	ble.n	800cca6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cca4:	e014      	b.n	800ccd0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccb8:	d306      	bcc.n	800ccc8 <tcp_update_rcv_ann_wnd+0x90>
 800ccba:	4b08      	ldr	r3, [pc, #32]	@ (800ccdc <tcp_update_rcv_ann_wnd+0xa4>)
 800ccbc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ccc0:	4909      	ldr	r1, [pc, #36]	@ (800cce8 <tcp_update_rcv_ann_wnd+0xb0>)
 800ccc2:	4808      	ldr	r0, [pc, #32]	@ (800cce4 <tcp_update_rcv_ann_wnd+0xac>)
 800ccc4:	f7f3 ffe6 	bl	8000c94 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ccd0:	2300      	movs	r3, #0
  }
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	08019a28 	.word	0x08019a28
 800cce0:	08019c80 	.word	0x08019c80
 800cce4:	08019a68 	.word	0x08019a68
 800cce8:	08019ca4 	.word	0x08019ca4

0800ccec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <tcp_recved+0x1a>
 800ccfe:	481e      	ldr	r0, [pc, #120]	@ (800cd78 <tcp_recved+0x8c>)
 800cd00:	f7f3 ffc8 	bl	8000c94 <printf>
 800cd04:	e034      	b.n	800cd70 <tcp_recved+0x84>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	7d1b      	ldrb	r3, [r3, #20]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d106      	bne.n	800cd1c <tcp_recved+0x30>
 800cd0e:	4b1b      	ldr	r3, [pc, #108]	@ (800cd7c <tcp_recved+0x90>)
 800cd10:	f240 32d3 	movw	r2, #979	@ 0x3d3
 800cd14:	491a      	ldr	r1, [pc, #104]	@ (800cd80 <tcp_recved+0x94>)
 800cd16:	481b      	ldr	r0, [pc, #108]	@ (800cd84 <tcp_recved+0x98>)
 800cd18:	f7f3 ffbc 	bl	8000c94 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cd20:	887b      	ldrh	r3, [r7, #2]
 800cd22:	4413      	add	r3, r2
 800cd24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cd26:	89fb      	ldrh	r3, [r7, #14]
 800cd28:	f640 3268 	movw	r2, #2920	@ 0xb68
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d804      	bhi.n	800cd3a <tcp_recved+0x4e>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd34:	89fa      	ldrh	r2, [r7, #14]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d204      	bcs.n	800cd44 <tcp_recved+0x58>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f640 3268 	movw	r2, #2920	@ 0xb68
 800cd40:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cd42:	e002      	b.n	800cd4a <tcp_recved+0x5e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	89fa      	ldrh	r2, [r7, #14]
 800cd48:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff ff74 	bl	800cc38 <tcp_update_rcv_ann_wnd>
 800cd50:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d909      	bls.n	800cd70 <tcp_recved+0x84>
    tcp_ack_now(pcb);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8b5b      	ldrh	r3, [r3, #26]
 800cd60:	f043 0302 	orr.w	r3, r3, #2
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f004 f8ec 	bl	8010f48 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	08019cc0 	.word	0x08019cc0
 800cd7c:	08019a28 	.word	0x08019a28
 800cd80:	08019cd8 	.word	0x08019cd8
 800cd84:	08019a68 	.word	0x08019a68

0800cd88 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cd92:	4b1e      	ldr	r3, [pc, #120]	@ (800ce0c <tcp_new_port+0x84>)
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ce0c <tcp_new_port+0x84>)
 800cd9c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cd9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ce0c <tcp_new_port+0x84>)
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d103      	bne.n	800cdb2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cdaa:	4b18      	ldr	r3, [pc, #96]	@ (800ce0c <tcp_new_port+0x84>)
 800cdac:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cdb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	71fb      	strb	r3, [r7, #7]
 800cdb6:	e01e      	b.n	800cdf6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cdb8:	79fb      	ldrb	r3, [r7, #7]
 800cdba:	4a15      	ldr	r2, [pc, #84]	@ (800ce10 <tcp_new_port+0x88>)
 800cdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	e011      	b.n	800cdea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	8ada      	ldrh	r2, [r3, #22]
 800cdca:	4b10      	ldr	r3, [pc, #64]	@ (800ce0c <tcp_new_port+0x84>)
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d108      	bne.n	800cde4 <tcp_new_port+0x5c>
        n++;
 800cdd2:	88bb      	ldrh	r3, [r7, #4]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cdd8:	88bb      	ldrh	r3, [r7, #4]
 800cdda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdde:	d3d8      	bcc.n	800cd92 <tcp_new_port+0xa>
          return 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	e00d      	b.n	800ce00 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	603b      	str	r3, [r7, #0]
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1ea      	bne.n	800cdc6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cdf0:	79fb      	ldrb	r3, [r7, #7]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	71fb      	strb	r3, [r7, #7]
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d9dd      	bls.n	800cdb8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cdfc:	4b03      	ldr	r3, [pc, #12]	@ (800ce0c <tcp_new_port+0x84>)
 800cdfe:	881b      	ldrh	r3, [r3, #0]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	20000010 	.word	0x20000010
 800ce10:	0801bd64 	.word	0x0801bd64

0800ce14 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08a      	sub	sp, #40	@ 0x28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	4613      	mov	r3, r2
 800ce22:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ce24:	2300      	movs	r3, #0
 800ce26:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <tcp_connect+0x26>
 800ce2e:	4877      	ldr	r0, [pc, #476]	@ (800d00c <tcp_connect+0x1f8>)
 800ce30:	f7f3 ff30 	bl	8000c94 <printf>
 800ce34:	f06f 030f 	mvn.w	r3, #15
 800ce38:	e0e4      	b.n	800d004 <tcp_connect+0x1f0>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d105      	bne.n	800ce4c <tcp_connect+0x38>
 800ce40:	4873      	ldr	r0, [pc, #460]	@ (800d010 <tcp_connect+0x1fc>)
 800ce42:	f7f3 ff27 	bl	8000c94 <printf>
 800ce46:	f06f 030f 	mvn.w	r3, #15
 800ce4a:	e0db      	b.n	800d004 <tcp_connect+0x1f0>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	7d1b      	ldrb	r3, [r3, #20]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d005      	beq.n	800ce60 <tcp_connect+0x4c>
 800ce54:	486f      	ldr	r0, [pc, #444]	@ (800d014 <tcp_connect+0x200>)
 800ce56:	f7f3 ff1d 	bl	8000c94 <printf>
 800ce5a:	f06f 0309 	mvn.w	r3, #9
 800ce5e:	e0d1      	b.n	800d004 <tcp_connect+0x1f0>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <tcp_connect+0x58>
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	e000      	b.n	800ce6e <tcp_connect+0x5a>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	88fa      	ldrh	r2, [r7, #6]
 800ce76:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	7a1b      	ldrb	r3, [r3, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d006      	beq.n	800ce8e <tcp_connect+0x7a>
    netif = netif_get_by_index(pcb->netif_idx);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	7a1b      	ldrb	r3, [r3, #8]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fd99 	bl	800b9bc <netif_get_by_index>
 800ce8a:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce8c:	e005      	b.n	800ce9a <tcp_connect+0x86>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3304      	adds	r3, #4
 800ce92:	4618      	mov	r0, r3
 800ce94:	f008 fdd2 	bl	8015a3c <ip4_route>
 800ce98:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d102      	bne.n	800cea6 <tcp_connect+0x92>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800cea0:	f06f 0303 	mvn.w	r3, #3
 800cea4:	e0ae      	b.n	800d004 <tcp_connect+0x1f0>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <tcp_connect+0xa0>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d111      	bne.n	800ced8 <tcp_connect+0xc4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d002      	beq.n	800cec0 <tcp_connect+0xac>
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	3304      	adds	r3, #4
 800cebe:	e000      	b.n	800cec2 <tcp_connect+0xae>
 800cec0:	2300      	movs	r3, #0
 800cec2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d102      	bne.n	800ced0 <tcp_connect+0xbc>
      return ERR_RTE;
 800ceca:	f06f 0303 	mvn.w	r3, #3
 800cece:	e099      	b.n	800d004 <tcp_connect+0x1f0>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	8adb      	ldrh	r3, [r3, #22]
 800cedc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	8adb      	ldrh	r3, [r3, #22]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10c      	bne.n	800cf00 <tcp_connect+0xec>
    pcb->local_port = tcp_new_port();
 800cee6:	f7ff ff4f 	bl	800cd88 <tcp_new_port>
 800ceea:	4603      	mov	r3, r0
 800ceec:	461a      	mov	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	8adb      	ldrh	r3, [r3, #22]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <tcp_connect+0xec>
      return ERR_BUF;
 800cefa:	f06f 0301 	mvn.w	r3, #1
 800cefe:	e081      	b.n	800d004 <tcp_connect+0x1f0>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f000 fff3 	bl	800deec <tcp_next_iss>
 800cf06:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	1e5a      	subs	r2, r3, #1
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	1e5a      	subs	r2, r3, #1
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	1e5a      	subs	r2, r3, #1
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f640 3268 	movw	r2, #2920	@ 0xb68
 800cf32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f640 3268 	movw	r2, #2920	@ 0xb68
 800cf4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf54:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf62:	f000 ffe9 	bl	800df38 <tcp_eff_send_mss_netif>
 800cf66:	4603      	mov	r3, r0
 800cf68:	461a      	mov	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800cf7e:	2102      	movs	r1, #2
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f003 fef3 	bl	8010d6c <tcp_enqueue_flags>
 800cf86:	4603      	mov	r3, r0
 800cf88:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800cf8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d136      	bne.n	800d000 <tcp_connect+0x1ec>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2202      	movs	r2, #2
 800cf96:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800cf98:	8b7b      	ldrh	r3, [r7, #26]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d021      	beq.n	800cfe2 <tcp_connect+0x1ce>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf9e:	4b1e      	ldr	r3, [pc, #120]	@ (800d018 <tcp_connect+0x204>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d105      	bne.n	800cfb4 <tcp_connect+0x1a0>
 800cfa8:	4b1b      	ldr	r3, [pc, #108]	@ (800d018 <tcp_connect+0x204>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	4a1a      	ldr	r2, [pc, #104]	@ (800d018 <tcp_connect+0x204>)
 800cfb0:	6013      	str	r3, [r2, #0]
 800cfb2:	e013      	b.n	800cfdc <tcp_connect+0x1c8>
 800cfb4:	4b18      	ldr	r3, [pc, #96]	@ (800d018 <tcp_connect+0x204>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	623b      	str	r3, [r7, #32]
 800cfba:	e00c      	b.n	800cfd6 <tcp_connect+0x1c2>
 800cfbc:	6a3b      	ldr	r3, [r7, #32]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d104      	bne.n	800cfd0 <tcp_connect+0x1bc>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	60da      	str	r2, [r3, #12]
 800cfce:	e005      	b.n	800cfdc <tcp_connect+0x1c8>
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	623b      	str	r3, [r7, #32]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1ef      	bne.n	800cfbc <tcp_connect+0x1a8>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	@ (800d01c <tcp_connect+0x208>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	60da      	str	r2, [r3, #12]
 800cfea:	4a0c      	ldr	r2, [pc, #48]	@ (800d01c <tcp_connect+0x208>)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	f004 ff4e 	bl	8011e90 <tcp_timer_needed>
 800cff4:	4b0a      	ldr	r3, [pc, #40]	@ (800d020 <tcp_connect+0x20c>)
 800cff6:	2201      	movs	r2, #1
 800cff8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f003 ffa4 	bl	8010f48 <tcp_output>
  }
  return ret;
 800d000:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3728      	adds	r7, #40	@ 0x28
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08019d00 	.word	0x08019d00
 800d010:	08019d1c 	.word	0x08019d1c
 800d014:	08019d38 	.word	0x08019d38
 800d018:	2000d904 	.word	0x2000d904
 800d01c:	2000d8f8 	.word	0x2000d8f8
 800d020:	2000d8f4 	.word	0x2000d8f4

0800d024 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d024:	b5b0      	push	{r4, r5, r7, lr}
 800d026:	b090      	sub	sp, #64	@ 0x40
 800d028:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d030:	4b95      	ldr	r3, [pc, #596]	@ (800d288 <tcp_slowtmr+0x264>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	4a94      	ldr	r2, [pc, #592]	@ (800d288 <tcp_slowtmr+0x264>)
 800d038:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d03a:	4b94      	ldr	r3, [pc, #592]	@ (800d28c <tcp_slowtmr+0x268>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	3301      	adds	r3, #1
 800d040:	b2da      	uxtb	r2, r3
 800d042:	4b92      	ldr	r3, [pc, #584]	@ (800d28c <tcp_slowtmr+0x268>)
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	e000      	b.n	800d04a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d048:	bf00      	nop
  prev = NULL;
 800d04a:	2300      	movs	r3, #0
 800d04c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d04e:	4b90      	ldr	r3, [pc, #576]	@ (800d290 <tcp_slowtmr+0x26c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d054:	e289      	b.n	800d56a <tcp_slowtmr+0x546>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	7d1b      	ldrb	r3, [r3, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <tcp_slowtmr+0x48>
 800d05e:	4b8d      	ldr	r3, [pc, #564]	@ (800d294 <tcp_slowtmr+0x270>)
 800d060:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d064:	498c      	ldr	r1, [pc, #560]	@ (800d298 <tcp_slowtmr+0x274>)
 800d066:	488d      	ldr	r0, [pc, #564]	@ (800d29c <tcp_slowtmr+0x278>)
 800d068:	f7f3 fe14 	bl	8000c94 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d106      	bne.n	800d082 <tcp_slowtmr+0x5e>
 800d074:	4b87      	ldr	r3, [pc, #540]	@ (800d294 <tcp_slowtmr+0x270>)
 800d076:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d07a:	4989      	ldr	r1, [pc, #548]	@ (800d2a0 <tcp_slowtmr+0x27c>)
 800d07c:	4887      	ldr	r0, [pc, #540]	@ (800d29c <tcp_slowtmr+0x278>)
 800d07e:	f7f3 fe09 	bl	8000c94 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d084:	7d1b      	ldrb	r3, [r3, #20]
 800d086:	2b0a      	cmp	r3, #10
 800d088:	d106      	bne.n	800d098 <tcp_slowtmr+0x74>
 800d08a:	4b82      	ldr	r3, [pc, #520]	@ (800d294 <tcp_slowtmr+0x270>)
 800d08c:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 800d090:	4984      	ldr	r1, [pc, #528]	@ (800d2a4 <tcp_slowtmr+0x280>)
 800d092:	4882      	ldr	r0, [pc, #520]	@ (800d29c <tcp_slowtmr+0x278>)
 800d094:	f7f3 fdfe 	bl	8000c94 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09a:	7f9a      	ldrb	r2, [r3, #30]
 800d09c:	4b7b      	ldr	r3, [pc, #492]	@ (800d28c <tcp_slowtmr+0x268>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d105      	bne.n	800d0b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d0ae:	e25c      	b.n	800d56a <tcp_slowtmr+0x546>
    pcb->last_timer = tcp_timer_ctr;
 800d0b0:	4b76      	ldr	r3, [pc, #472]	@ (800d28c <tcp_slowtmr+0x268>)
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c6:	7d1b      	ldrb	r3, [r3, #20]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d10a      	bne.n	800d0e2 <tcp_slowtmr+0xbe>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d0d2:	2b05      	cmp	r3, #5
 800d0d4:	d905      	bls.n	800d0e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0da:	3301      	adds	r3, #1
 800d0dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800d0e0:	e11e      	b.n	800d320 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d0e8:	2b0b      	cmp	r3, #11
 800d0ea:	d905      	bls.n	800d0f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d0f6:	e113      	b.n	800d320 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d075      	beq.n	800d1ee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d106:	2b00      	cmp	r3, #0
 800d108:	d006      	beq.n	800d118 <tcp_slowtmr+0xf4>
 800d10a:	4b62      	ldr	r3, [pc, #392]	@ (800d294 <tcp_slowtmr+0x270>)
 800d10c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d110:	4965      	ldr	r1, [pc, #404]	@ (800d2a8 <tcp_slowtmr+0x284>)
 800d112:	4862      	ldr	r0, [pc, #392]	@ (800d29c <tcp_slowtmr+0x278>)
 800d114:	f7f3 fdbe 	bl	8000c94 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d106      	bne.n	800d12e <tcp_slowtmr+0x10a>
 800d120:	4b5c      	ldr	r3, [pc, #368]	@ (800d294 <tcp_slowtmr+0x270>)
 800d122:	f240 42d6 	movw	r2, #1238	@ 0x4d6
 800d126:	4961      	ldr	r1, [pc, #388]	@ (800d2ac <tcp_slowtmr+0x288>)
 800d128:	485c      	ldr	r0, [pc, #368]	@ (800d29c <tcp_slowtmr+0x278>)
 800d12a:	f7f3 fdb3 	bl	8000c94 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d130:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800d134:	2b0b      	cmp	r3, #11
 800d136:	d905      	bls.n	800d144 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d13c:	3301      	adds	r3, #1
 800d13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d142:	e0ed      	b.n	800d320 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d146:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4a58      	ldr	r2, [pc, #352]	@ (800d2b0 <tcp_slowtmr+0x28c>)
 800d14e:	5cd3      	ldrb	r3, [r2, r3]
 800d150:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d154:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d158:	7c7a      	ldrb	r2, [r7, #17]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d907      	bls.n	800d16e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d160:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d164:	3301      	adds	r3, #1
 800d166:	b2da      	uxtb	r2, r3
 800d168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800d16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d170:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d174:	7c7a      	ldrb	r2, [r7, #17]
 800d176:	429a      	cmp	r2, r3
 800d178:	f200 80d2 	bhi.w	800d320 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d17c:	2301      	movs	r3, #1
 800d17e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d18a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d18c:	f004 fdb2 	bl	8011cf4 <tcp_zero_window_probe>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d014      	beq.n	800d1c0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d196:	2300      	movs	r3, #0
 800d198:	623b      	str	r3, [r7, #32]
 800d19a:	e011      	b.n	800d1c0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1a6:	f003 fc3d 	bl	8010a24 <tcp_split_unsent_seg>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d107      	bne.n	800d1c0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d1b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1b2:	f003 fec9 	bl	8010f48 <tcp_output>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 80ac 	beq.w	800d320 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d1d6:	2b06      	cmp	r3, #6
 800d1d8:	f200 80a2 	bhi.w	800d320 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800d1ec:	e098      	b.n	800d320 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	db0f      	blt.n	800d218 <tcp_slowtmr+0x1f4>
 800d1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d1fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d202:	4293      	cmp	r3, r2
 800d204:	d008      	beq.n	800d218 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	3301      	adds	r3, #1
 800d210:	b29b      	uxth	r3, r3
 800d212:	b21a      	sxth	r2, r3
 800d214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d216:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d220:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d224:	429a      	cmp	r2, r3
 800d226:	db7b      	blt.n	800d320 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d22a:	f004 f995 	bl	8011558 <tcp_rexmit_rto_prepare>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <tcp_slowtmr+0x220>
 800d234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d171      	bne.n	800d320 <tcp_slowtmr+0x2fc>
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d06d      	beq.n	800d320 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	7d1b      	ldrb	r3, [r3, #20]
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d03a      	beq.n	800d2c2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d252:	2b0c      	cmp	r3, #12
 800d254:	bf28      	it	cs
 800d256:	230c      	movcs	r3, #12
 800d258:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d260:	10db      	asrs	r3, r3, #3
 800d262:	b21b      	sxth	r3, r3
 800d264:	461a      	mov	r2, r3
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d26c:	4413      	add	r3, r2
 800d26e:	7efa      	ldrb	r2, [r7, #27]
 800d270:	4910      	ldr	r1, [pc, #64]	@ (800d2b4 <tcp_slowtmr+0x290>)
 800d272:	5c8a      	ldrb	r2, [r1, r2]
 800d274:	4093      	lsls	r3, r2
 800d276:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d27e:	4293      	cmp	r3, r2
 800d280:	dc1a      	bgt.n	800d2b8 <tcp_slowtmr+0x294>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	b21a      	sxth	r2, r3
 800d286:	e019      	b.n	800d2bc <tcp_slowtmr+0x298>
 800d288:	2000d8fc 	.word	0x2000d8fc
 800d28c:	20004aaa 	.word	0x20004aaa
 800d290:	2000d8f8 	.word	0x2000d8f8
 800d294:	08019a28 	.word	0x08019a28
 800d298:	08019d68 	.word	0x08019d68
 800d29c:	08019a68 	.word	0x08019a68
 800d2a0:	08019d94 	.word	0x08019d94
 800d2a4:	08019dc0 	.word	0x08019dc0
 800d2a8:	08019df0 	.word	0x08019df0
 800d2ac:	08019e24 	.word	0x08019e24
 800d2b0:	0801bd5c 	.word	0x0801bd5c
 800d2b4:	0801bd4c 	.word	0x0801bd4c
 800d2b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	bf28      	it	cs
 800d2d8:	4613      	movcs	r3, r2
 800d2da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d2dc:	8a7b      	ldrh	r3, [r7, #18]
 800d2de:	085b      	lsrs	r3, r3, #1
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d206      	bcs.n	800d308 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	b29a      	uxth	r2, r3
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d314:	2200      	movs	r2, #0
 800d316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d31a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d31c:	f004 f996 	bl	801164c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	7d1b      	ldrb	r3, [r3, #20]
 800d324:	2b06      	cmp	r3, #6
 800d326:	d111      	bne.n	800d34c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32a:	8b5b      	ldrh	r3, [r3, #26]
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d334:	4b92      	ldr	r3, [pc, #584]	@ (800d580 <tcp_slowtmr+0x55c>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	2b28      	cmp	r3, #40	@ 0x28
 800d340:	d904      	bls.n	800d34c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d346:	3301      	adds	r3, #1
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34e:	7a5b      	ldrb	r3, [r3, #9]
 800d350:	f003 0308 	and.w	r3, r3, #8
 800d354:	2b00      	cmp	r3, #0
 800d356:	d04c      	beq.n	800d3f2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800d358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d003      	beq.n	800d368 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d362:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d364:	2b07      	cmp	r3, #7
 800d366:	d144      	bne.n	800d3f2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d368:	4b85      	ldr	r3, [pc, #532]	@ (800d580 <tcp_slowtmr+0x55c>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d378:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d37c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d380:	4980      	ldr	r1, [pc, #512]	@ (800d584 <tcp_slowtmr+0x560>)
 800d382:	fba1 1303 	umull	r1, r3, r1, r3
 800d386:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d388:	429a      	cmp	r2, r3
 800d38a:	d90a      	bls.n	800d3a2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800d38c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d390:	3301      	adds	r3, #1
 800d392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d396:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d39a:	3301      	adds	r3, #1
 800d39c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d3a0:	e027      	b.n	800d3f2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3a2:	4b77      	ldr	r3, [pc, #476]	@ (800d580 <tcp_slowtmr+0x55c>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ae:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	4b73      	ldr	r3, [pc, #460]	@ (800d588 <tcp_slowtmr+0x564>)
 800d3bc:	fb00 f303 	mul.w	r3, r0, r3
 800d3c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d3c2:	4970      	ldr	r1, [pc, #448]	@ (800d584 <tcp_slowtmr+0x560>)
 800d3c4:	fba1 1303 	umull	r1, r3, r1, r3
 800d3c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d911      	bls.n	800d3f2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800d3ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3d0:	f004 fc50 	bl	8011c74 <tcp_keepalive>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d3da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d107      	bne.n	800d3f2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800d3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ee:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 800d3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f4:	7d1b      	ldrb	r3, [r3, #20]
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d10b      	bne.n	800d412 <tcp_slowtmr+0x3ee>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3fa:	4b61      	ldr	r3, [pc, #388]	@ (800d580 <tcp_slowtmr+0x55c>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	2b28      	cmp	r3, #40	@ 0x28
 800d406:	d904      	bls.n	800d412 <tcp_slowtmr+0x3ee>
        ++pcb_remove;
 800d408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d40c:	3301      	adds	r3, #1
 800d40e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d414:	7d1b      	ldrb	r3, [r3, #20]
 800d416:	2b09      	cmp	r3, #9
 800d418:	d10b      	bne.n	800d432 <tcp_slowtmr+0x40e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d41a:	4b59      	ldr	r3, [pc, #356]	@ (800d580 <tcp_slowtmr+0x55c>)
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	2bf0      	cmp	r3, #240	@ 0xf0
 800d426:	d904      	bls.n	800d432 <tcp_slowtmr+0x40e>
        ++pcb_remove;
 800d428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d42c:	3301      	adds	r3, #1
 800d42e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d436:	2b00      	cmp	r3, #0
 800d438:	d060      	beq.n	800d4fc <tcp_slowtmr+0x4d8>
      tcp_err_fn err_fn = pcb->errf;
 800d43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d440:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d444:	f000 fc8a 	bl	800dd5c <tcp_pcb_purge>
      if (prev != NULL) {
 800d448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d010      	beq.n	800d470 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d44e:	4b4f      	ldr	r3, [pc, #316]	@ (800d58c <tcp_slowtmr+0x568>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d454:	429a      	cmp	r2, r3
 800d456:	d106      	bne.n	800d466 <tcp_slowtmr+0x442>
 800d458:	4b4d      	ldr	r3, [pc, #308]	@ (800d590 <tcp_slowtmr+0x56c>)
 800d45a:	f240 526e 	movw	r2, #1390	@ 0x56e
 800d45e:	494d      	ldr	r1, [pc, #308]	@ (800d594 <tcp_slowtmr+0x570>)
 800d460:	484d      	ldr	r0, [pc, #308]	@ (800d598 <tcp_slowtmr+0x574>)
 800d462:	f7f3 fc17 	bl	8000c94 <printf>
        prev->next = pcb->next;
 800d466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d468:	68da      	ldr	r2, [r3, #12]
 800d46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46c:	60da      	str	r2, [r3, #12]
 800d46e:	e00f      	b.n	800d490 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d470:	4b46      	ldr	r3, [pc, #280]	@ (800d58c <tcp_slowtmr+0x568>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d476:	429a      	cmp	r2, r3
 800d478:	d006      	beq.n	800d488 <tcp_slowtmr+0x464>
 800d47a:	4b45      	ldr	r3, [pc, #276]	@ (800d590 <tcp_slowtmr+0x56c>)
 800d47c:	f240 5272 	movw	r2, #1394	@ 0x572
 800d480:	4946      	ldr	r1, [pc, #280]	@ (800d59c <tcp_slowtmr+0x578>)
 800d482:	4845      	ldr	r0, [pc, #276]	@ (800d598 <tcp_slowtmr+0x574>)
 800d484:	f7f3 fc06 	bl	8000c94 <printf>
        tcp_active_pcbs = pcb->next;
 800d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	4a3f      	ldr	r2, [pc, #252]	@ (800d58c <tcp_slowtmr+0x568>)
 800d48e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d494:	2b00      	cmp	r3, #0
 800d496:	d013      	beq.n	800d4c0 <tcp_slowtmr+0x49c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d4a0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4a8:	8ad2      	ldrh	r2, [r2, #22]
 800d4aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ac:	8b09      	ldrh	r1, [r1, #24]
 800d4ae:	9102      	str	r1, [sp, #8]
 800d4b0:	9201      	str	r2, [sp, #4]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	462b      	mov	r3, r5
 800d4b6:	4622      	mov	r2, r4
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4bc:	f004 fb26 	bl	8011b0c <tcp_rst>
      err_arg = pcb->callback_arg;
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d4d6:	6838      	ldr	r0, [r7, #0]
 800d4d8:	f7ff f87c 	bl	800c5d4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d4dc:	4b30      	ldr	r3, [pc, #192]	@ (800d5a0 <tcp_slowtmr+0x57c>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d004      	beq.n	800d4f2 <tcp_slowtmr+0x4ce>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f06f 010c 	mvn.w	r1, #12
 800d4ee:	68b8      	ldr	r0, [r7, #8]
 800d4f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d4f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d5a0 <tcp_slowtmr+0x57c>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d037      	beq.n	800d56a <tcp_slowtmr+0x546>
        goto tcp_slowtmr_start;
 800d4fa:	e5a6      	b.n	800d04a <tcp_slowtmr+0x26>
      prev = pcb;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d508:	7f1b      	ldrb	r3, [r3, #28]
 800d50a:	3301      	adds	r3, #1
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d510:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d514:	7f1a      	ldrb	r2, [r3, #28]
 800d516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d518:	7f5b      	ldrb	r3, [r3, #29]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d325      	bcc.n	800d56a <tcp_slowtmr+0x546>
        prev->polltmr = 0;
 800d51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d520:	2200      	movs	r2, #0
 800d522:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d524:	4b1e      	ldr	r3, [pc, #120]	@ (800d5a0 <tcp_slowtmr+0x57c>)
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <tcp_slowtmr+0x528>
 800d534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d53a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d53c:	6912      	ldr	r2, [r2, #16]
 800d53e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d540:	4610      	mov	r0, r2
 800d542:	4798      	blx	r3
 800d544:	4603      	mov	r3, r0
 800d546:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d54a:	e002      	b.n	800d552 <tcp_slowtmr+0x52e>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d552:	4b13      	ldr	r3, [pc, #76]	@ (800d5a0 <tcp_slowtmr+0x57c>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	f47f ad76 	bne.w	800d048 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d55c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d560:	2b00      	cmp	r3, #0
 800d562:	d102      	bne.n	800d56a <tcp_slowtmr+0x546>
          tcp_output(prev);
 800d564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d566:	f003 fcef 	bl	8010f48 <tcp_output>
  while (pcb != NULL) {
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f47f ad72 	bne.w	800d056 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d576:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a4 <tcp_slowtmr+0x580>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d57c:	e067      	b.n	800d64e <tcp_slowtmr+0x62a>
 800d57e:	bf00      	nop
 800d580:	2000d8fc 	.word	0x2000d8fc
 800d584:	10624dd3 	.word	0x10624dd3
 800d588:	000124f8 	.word	0x000124f8
 800d58c:	2000d8f8 	.word	0x2000d8f8
 800d590:	08019a28 	.word	0x08019a28
 800d594:	08019e5c 	.word	0x08019e5c
 800d598:	08019a68 	.word	0x08019a68
 800d59c:	08019e88 	.word	0x08019e88
 800d5a0:	2000d8f4 	.word	0x2000d8f4
 800d5a4:	2000d908 	.word	0x2000d908
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
 800d5ac:	2b0a      	cmp	r3, #10
 800d5ae:	d006      	beq.n	800d5be <tcp_slowtmr+0x59a>
 800d5b0:	4b2b      	ldr	r3, [pc, #172]	@ (800d660 <tcp_slowtmr+0x63c>)
 800d5b2:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 800d5b6:	492b      	ldr	r1, [pc, #172]	@ (800d664 <tcp_slowtmr+0x640>)
 800d5b8:	482b      	ldr	r0, [pc, #172]	@ (800d668 <tcp_slowtmr+0x644>)
 800d5ba:	f7f3 fb6b 	bl	8000c94 <printf>
    pcb_remove = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d5c4:	4b29      	ldr	r3, [pc, #164]	@ (800d66c <tcp_slowtmr+0x648>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ca:	6a1b      	ldr	r3, [r3, #32]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	2bf0      	cmp	r3, #240	@ 0xf0
 800d5d0:	d904      	bls.n	800d5dc <tcp_slowtmr+0x5b8>
      ++pcb_remove;
 800d5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d02f      	beq.n	800d644 <tcp_slowtmr+0x620>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d5e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5e6:	f000 fbb9 	bl	800dd5c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d010      	beq.n	800d612 <tcp_slowtmr+0x5ee>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d5f0:	4b1f      	ldr	r3, [pc, #124]	@ (800d670 <tcp_slowtmr+0x64c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d106      	bne.n	800d608 <tcp_slowtmr+0x5e4>
 800d5fa:	4b19      	ldr	r3, [pc, #100]	@ (800d660 <tcp_slowtmr+0x63c>)
 800d5fc:	f44f 62b6 	mov.w	r2, #1456	@ 0x5b0
 800d600:	491c      	ldr	r1, [pc, #112]	@ (800d674 <tcp_slowtmr+0x650>)
 800d602:	4819      	ldr	r0, [pc, #100]	@ (800d668 <tcp_slowtmr+0x644>)
 800d604:	f7f3 fb46 	bl	8000c94 <printf>
        prev->next = pcb->next;
 800d608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60e:	60da      	str	r2, [r3, #12]
 800d610:	e00f      	b.n	800d632 <tcp_slowtmr+0x60e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d612:	4b17      	ldr	r3, [pc, #92]	@ (800d670 <tcp_slowtmr+0x64c>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d618:	429a      	cmp	r2, r3
 800d61a:	d006      	beq.n	800d62a <tcp_slowtmr+0x606>
 800d61c:	4b10      	ldr	r3, [pc, #64]	@ (800d660 <tcp_slowtmr+0x63c>)
 800d61e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d622:	4915      	ldr	r1, [pc, #84]	@ (800d678 <tcp_slowtmr+0x654>)
 800d624:	4810      	ldr	r0, [pc, #64]	@ (800d668 <tcp_slowtmr+0x644>)
 800d626:	f7f3 fb35 	bl	8000c94 <printf>
        tcp_tw_pcbs = pcb->next;
 800d62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	4a10      	ldr	r2, [pc, #64]	@ (800d670 <tcp_slowtmr+0x64c>)
 800d630:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d634:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d63c:	69f8      	ldr	r0, [r7, #28]
 800d63e:	f7fe ffc9 	bl	800c5d4 <tcp_free>
 800d642:	e004      	b.n	800d64e <tcp_slowtmr+0x62a>
    } else {
      prev = pcb;
 800d644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d646:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1a9      	bne.n	800d5a8 <tcp_slowtmr+0x584>
    }
  }
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	3730      	adds	r7, #48	@ 0x30
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bdb0      	pop	{r4, r5, r7, pc}
 800d65e:	bf00      	nop
 800d660:	08019a28 	.word	0x08019a28
 800d664:	08019eb4 	.word	0x08019eb4
 800d668:	08019a68 	.word	0x08019a68
 800d66c:	2000d8fc 	.word	0x2000d8fc
 800d670:	2000d908 	.word	0x2000d908
 800d674:	08019ee4 	.word	0x08019ee4
 800d678:	08019f0c 	.word	0x08019f0c

0800d67c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d682:	4b2d      	ldr	r3, [pc, #180]	@ (800d738 <tcp_fasttmr+0xbc>)
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	3301      	adds	r3, #1
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	4b2b      	ldr	r3, [pc, #172]	@ (800d738 <tcp_fasttmr+0xbc>)
 800d68c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d68e:	4b2b      	ldr	r3, [pc, #172]	@ (800d73c <tcp_fasttmr+0xc0>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d694:	e048      	b.n	800d728 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	7f9a      	ldrb	r2, [r3, #30]
 800d69a:	4b27      	ldr	r3, [pc, #156]	@ (800d738 <tcp_fasttmr+0xbc>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d03f      	beq.n	800d722 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d6a2:	4b25      	ldr	r3, [pc, #148]	@ (800d738 <tcp_fasttmr+0xbc>)
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8b5b      	ldrh	r3, [r3, #26]
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d010      	beq.n	800d6d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	8b5b      	ldrh	r3, [r3, #26]
 800d6ba:	f043 0302 	orr.w	r3, r3, #2
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f003 fc3f 	bl	8010f48 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8b5b      	ldrh	r3, [r3, #26]
 800d6ce:	f023 0303 	bic.w	r3, r3, #3
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	8b5b      	ldrh	r3, [r3, #26]
 800d6dc:	f003 0308 	and.w	r3, r3, #8
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d009      	beq.n	800d6f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	8b5b      	ldrh	r3, [r3, #26]
 800d6e8:	f023 0308 	bic.w	r3, r3, #8
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff f902 	bl	800c8fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00a      	beq.n	800d71c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d706:	4b0e      	ldr	r3, [pc, #56]	@ (800d740 <tcp_fasttmr+0xc4>)
 800d708:	2200      	movs	r2, #0
 800d70a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f819 	bl	800d744 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d712:	4b0b      	ldr	r3, [pc, #44]	@ (800d740 <tcp_fasttmr+0xc4>)
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d000      	beq.n	800d71c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d71a:	e7b8      	b.n	800d68e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	607b      	str	r3, [r7, #4]
 800d720:	e002      	b.n	800d728 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1b3      	bne.n	800d696 <tcp_fasttmr+0x1a>
    }
  }
}
 800d72e:	bf00      	nop
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20004aaa 	.word	0x20004aaa
 800d73c:	2000d8f8 	.word	0x2000d8f8
 800d740:	2000d8f4 	.word	0x2000d8f4

0800d744 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d744:	b590      	push	{r4, r7, lr}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d105      	bne.n	800d75e <tcp_process_refused_data+0x1a>
 800d752:	4836      	ldr	r0, [pc, #216]	@ (800d82c <tcp_process_refused_data+0xe8>)
 800d754:	f7f3 fa9e 	bl	8000c94 <printf>
 800d758:	f06f 030f 	mvn.w	r3, #15
 800d75c:	e061      	b.n	800d822 <tcp_process_refused_data+0xde>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d762:	7b5b      	ldrb	r3, [r3, #13]
 800d764:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d76a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <tcp_process_refused_data+0x50>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6918      	ldr	r0, [r3, #16]
 800d786:	2300      	movs	r3, #0
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	6879      	ldr	r1, [r7, #4]
 800d78c:	47a0      	blx	r4
 800d78e:	4603      	mov	r3, r0
 800d790:	73fb      	strb	r3, [r7, #15]
 800d792:	e007      	b.n	800d7a4 <tcp_process_refused_data+0x60>
 800d794:	2300      	movs	r3, #0
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	2000      	movs	r0, #0
 800d79c:	f000 f876 	bl	800d88c <tcp_recv_null>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d12b      	bne.n	800d804 <tcp_process_refused_data+0xc0>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d7ac:	7bbb      	ldrb	r3, [r7, #14]
 800d7ae:	f003 0320 	and.w	r3, r3, #32
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d034      	beq.n	800d820 <tcp_process_refused_data+0xdc>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7ba:	f640 3268 	movw	r2, #2920	@ 0xb68
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d005      	beq.n	800d7ce <tcp_process_refused_data+0x8a>
          pcb->rcv_wnd++;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00b      	beq.n	800d7f0 <tcp_process_refused_data+0xac>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6918      	ldr	r0, [r3, #16]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	47a0      	blx	r4
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]
 800d7ee:	e001      	b.n	800d7f4 <tcp_process_refused_data+0xb0>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f8:	f113 0f0d 	cmn.w	r3, #13
 800d7fc:	d110      	bne.n	800d820 <tcp_process_refused_data+0xdc>
          return ERR_ABRT;
 800d7fe:	f06f 030c 	mvn.w	r3, #12
 800d802:	e00e      	b.n	800d822 <tcp_process_refused_data+0xde>
        }
      }
    } else if (err == ERR_ABRT) {
 800d804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d808:	f113 0f0d 	cmn.w	r3, #13
 800d80c:	d102      	bne.n	800d814 <tcp_process_refused_data+0xd0>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d80e:	f06f 030c 	mvn.w	r3, #12
 800d812:	e006      	b.n	800d822 <tcp_process_refused_data+0xde>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800d81a:	f06f 0304 	mvn.w	r3, #4
 800d81e:	e000      	b.n	800d822 <tcp_process_refused_data+0xde>
    }
  }
  return ERR_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	bd90      	pop	{r4, r7, pc}
 800d82a:	bf00      	nop
 800d82c:	08019f34 	.word	0x08019f34

0800d830 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d838:	e007      	b.n	800d84a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f80a 	bl	800d85a <tcp_seg_free>
    seg = next;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1f4      	bne.n	800d83a <tcp_segs_free+0xa>
  }
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00c      	beq.n	800d882 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fbd1 	bl	800c01c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d87a:	6879      	ldr	r1, [r7, #4]
 800d87c:	2003      	movs	r0, #3
 800d87e:	f7fd fdd5 	bl	800b42c <memp_free>
  }
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
	...

0800d88c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <tcp_recv_null+0x20>
 800d8a0:	4810      	ldr	r0, [pc, #64]	@ (800d8e4 <tcp_recv_null+0x58>)
 800d8a2:	f7f3 f9f7 	bl	8000c94 <printf>
 800d8a6:	f06f 030f 	mvn.w	r3, #15
 800d8aa:	e016      	b.n	800d8da <tcp_recv_null+0x4e>

  if (p != NULL) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d009      	beq.n	800d8c6 <tcp_recv_null+0x3a>
    tcp_recved(pcb, p->tot_len);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	891b      	ldrh	r3, [r3, #8]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	68b8      	ldr	r0, [r7, #8]
 800d8ba:	f7ff fa17 	bl	800ccec <tcp_recved>
    pbuf_free(p);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7fe fbac 	bl	800c01c <pbuf_free>
 800d8c4:	e008      	b.n	800d8d8 <tcp_recv_null+0x4c>
  } else if (err == ERR_OK) {
 800d8c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d104      	bne.n	800d8d8 <tcp_recv_null+0x4c>
    return tcp_close(pcb);
 800d8ce:	68b8      	ldr	r0, [r7, #8]
 800d8d0:	f7ff f87e 	bl	800c9d0 <tcp_close>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	e000      	b.n	800d8da <tcp_recv_null+0x4e>
  }
  return ERR_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08019f78 	.word	0x08019f78

0800d8e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	db01      	blt.n	800d8fe <tcp_kill_prio+0x16>
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	e000      	b.n	800d900 <tcp_kill_prio+0x18>
 800d8fe:	237f      	movs	r3, #127	@ 0x7f
 800d900:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d902:	7afb      	ldrb	r3, [r7, #11]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d034      	beq.n	800d972 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d916:	4b19      	ldr	r3, [pc, #100]	@ (800d97c <tcp_kill_prio+0x94>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	e01f      	b.n	800d95e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	7d5b      	ldrb	r3, [r3, #21]
 800d922:	7afa      	ldrb	r2, [r7, #11]
 800d924:	429a      	cmp	r2, r3
 800d926:	d80c      	bhi.n	800d942 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d92c:	7afa      	ldrb	r2, [r7, #11]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d112      	bne.n	800d958 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d932:	4b13      	ldr	r3, [pc, #76]	@ (800d980 <tcp_kill_prio+0x98>)
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	1ad3      	subs	r3, r2, r3
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d80a      	bhi.n	800d958 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d942:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <tcp_kill_prio+0x98>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	7d5b      	ldrb	r3, [r3, #21]
 800d956:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	617b      	str	r3, [r7, #20]
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1dc      	bne.n	800d91e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d004      	beq.n	800d974 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d96a:	6938      	ldr	r0, [r7, #16]
 800d96c:	f7ff f958 	bl	800cc20 <tcp_abort>
 800d970:	e000      	b.n	800d974 <tcp_kill_prio+0x8c>
    return;
 800d972:	bf00      	nop
  }
}
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	2000d8f8 	.word	0x2000d8f8
 800d980:	2000d8fc 	.word	0x2000d8fc

0800d984 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	2b08      	cmp	r3, #8
 800d992:	d009      	beq.n	800d9a8 <tcp_kill_state+0x24>
 800d994:	79fb      	ldrb	r3, [r7, #7]
 800d996:	2b09      	cmp	r3, #9
 800d998:	d006      	beq.n	800d9a8 <tcp_kill_state+0x24>
 800d99a:	4b1a      	ldr	r3, [pc, #104]	@ (800da04 <tcp_kill_state+0x80>)
 800d99c:	f240 62de 	movw	r2, #1758	@ 0x6de
 800d9a0:	4919      	ldr	r1, [pc, #100]	@ (800da08 <tcp_kill_state+0x84>)
 800d9a2:	481a      	ldr	r0, [pc, #104]	@ (800da0c <tcp_kill_state+0x88>)
 800d9a4:	f7f3 f976 	bl	8000c94 <printf>

  inactivity = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b0:	4b17      	ldr	r3, [pc, #92]	@ (800da10 <tcp_kill_state+0x8c>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e017      	b.n	800d9e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	7d1b      	ldrb	r3, [r3, #20]
 800d9bc:	79fa      	ldrb	r2, [r7, #7]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d10f      	bne.n	800d9e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9c2:	4b14      	ldr	r3, [pc, #80]	@ (800da14 <tcp_kill_state+0x90>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d807      	bhi.n	800d9e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d9d2:	4b10      	ldr	r3, [pc, #64]	@ (800da14 <tcp_kill_state+0x90>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1e4      	bne.n	800d9b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d003      	beq.n	800d9fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	6938      	ldr	r0, [r7, #16]
 800d9f8:	f7ff f862 	bl	800cac0 <tcp_abandon>
  }
}
 800d9fc:	bf00      	nop
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	08019a28 	.word	0x08019a28
 800da08:	08019f94 	.word	0x08019f94
 800da0c:	08019a68 	.word	0x08019a68
 800da10:	2000d8f8 	.word	0x2000d8f8
 800da14:	2000d8fc 	.word	0x2000d8fc

0800da18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da26:	4b12      	ldr	r3, [pc, #72]	@ (800da70 <tcp_kill_timewait+0x58>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60fb      	str	r3, [r7, #12]
 800da2c:	e012      	b.n	800da54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800da2e:	4b11      	ldr	r3, [pc, #68]	@ (800da74 <tcp_kill_timewait+0x5c>)
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d807      	bhi.n	800da4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800da3e:	4b0d      	ldr	r3, [pc, #52]	@ (800da74 <tcp_kill_timewait+0x5c>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1e9      	bne.n	800da2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800da60:	68b8      	ldr	r0, [r7, #8]
 800da62:	f7ff f8dd 	bl	800cc20 <tcp_abort>
  }
}
 800da66:	bf00      	nop
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	2000d908 	.word	0x2000d908
 800da74:	2000d8fc 	.word	0x2000d8fc

0800da78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800da7e:	4b10      	ldr	r3, [pc, #64]	@ (800dac0 <tcp_handle_closepend+0x48>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da84:	e014      	b.n	800dab0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	8b5b      	ldrh	r3, [r3, #26]
 800da90:	f003 0308 	and.w	r3, r3, #8
 800da94:	2b00      	cmp	r3, #0
 800da96:	d009      	beq.n	800daac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	8b5b      	ldrh	r3, [r3, #26]
 800da9c:	f023 0308 	bic.w	r3, r3, #8
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7fe ff28 	bl	800c8fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e7      	bne.n	800da86 <tcp_handle_closepend+0xe>
  }
}
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	2000d8f8 	.word	0x2000d8f8

0800dac4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dace:	2001      	movs	r0, #1
 800dad0:	f7fd fc68 	bl	800b3a4 <memp_malloc>
 800dad4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d126      	bne.n	800db2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dadc:	f7ff ffcc 	bl	800da78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dae0:	f7ff ff9a 	bl	800da18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dae4:	2001      	movs	r0, #1
 800dae6:	f7fd fc5d 	bl	800b3a4 <memp_malloc>
 800daea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d11b      	bne.n	800db2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800daf2:	2009      	movs	r0, #9
 800daf4:	f7ff ff46 	bl	800d984 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800daf8:	2001      	movs	r0, #1
 800dafa:	f7fd fc53 	bl	800b3a4 <memp_malloc>
 800dafe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d111      	bne.n	800db2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800db06:	2008      	movs	r0, #8
 800db08:	f7ff ff3c 	bl	800d984 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db0c:	2001      	movs	r0, #1
 800db0e:	f7fd fc49 	bl	800b3a4 <memp_malloc>
 800db12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d107      	bne.n	800db2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff fee3 	bl	800d8e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800db22:	2001      	movs	r0, #1
 800db24:	f7fd fc3e 	bl	800b3a4 <memp_malloc>
 800db28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d03f      	beq.n	800dbb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800db30:	2298      	movs	r2, #152	@ 0x98
 800db32:	2100      	movs	r1, #0
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f009 fd0a 	bl	801754e <memset>
    pcb->prio = prio;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	79fa      	ldrb	r2, [r7, #7]
 800db3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800db46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f640 3268 	movw	r2, #2920	@ 0xb68
 800db50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	22ff      	movs	r2, #255	@ 0xff
 800db5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800db66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2206      	movs	r2, #6
 800db6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2206      	movs	r2, #6
 800db74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2201      	movs	r2, #1
 800db82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800db86:	4b0d      	ldr	r3, [pc, #52]	@ (800dbbc <tcp_alloc+0xf8>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800db8e:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc0 <tcp_alloc+0xfc>)
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800db9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4a08      	ldr	r2, [pc, #32]	@ (800dbc4 <tcp_alloc+0x100>)
 800dba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4a07      	ldr	r2, [pc, #28]	@ (800dbc8 <tcp_alloc+0x104>)
 800dbac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	2000d8fc 	.word	0x2000d8fc
 800dbc0:	20004aaa 	.word	0x20004aaa
 800dbc4:	0800d88d 	.word	0x0800d88d
 800dbc8:	006ddd00 	.word	0x006ddd00

0800dbcc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dbd6:	2040      	movs	r0, #64	@ 0x40
 800dbd8:	f7ff ff74 	bl	800dac4 <tcp_alloc>
 800dbdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	683a      	ldr	r2, [r7, #0]
 800dbfc:	611a      	str	r2, [r3, #16]
  }
}
 800dbfe:	bf00      	nop
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
	...

0800dc0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00e      	beq.n	800dc3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d106      	bne.n	800dc32 <tcp_recv+0x26>
 800dc24:	4b07      	ldr	r3, [pc, #28]	@ (800dc44 <tcp_recv+0x38>)
 800dc26:	f240 72e2 	movw	r2, #2018	@ 0x7e2
 800dc2a:	4907      	ldr	r1, [pc, #28]	@ (800dc48 <tcp_recv+0x3c>)
 800dc2c:	4807      	ldr	r0, [pc, #28]	@ (800dc4c <tcp_recv+0x40>)
 800dc2e:	f7f3 f831 	bl	8000c94 <printf>
    pcb->recv = recv;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	08019a28 	.word	0x08019a28
 800dc48:	08019fa4 	.word	0x08019fa4
 800dc4c:	08019a68 	.word	0x08019a68

0800dc50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00d      	beq.n	800dc7c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d106      	bne.n	800dc76 <tcp_sent+0x26>
 800dc68:	4b06      	ldr	r3, [pc, #24]	@ (800dc84 <tcp_sent+0x34>)
 800dc6a:	f240 72f6 	movw	r2, #2038	@ 0x7f6
 800dc6e:	4906      	ldr	r1, [pc, #24]	@ (800dc88 <tcp_sent+0x38>)
 800dc70:	4806      	ldr	r0, [pc, #24]	@ (800dc8c <tcp_sent+0x3c>)
 800dc72:	f7f3 f80f 	bl	8000c94 <printf>
    pcb->sent = sent;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	08019a28 	.word	0x08019a28
 800dc88:	08019fcc 	.word	0x08019fcc
 800dc8c:	08019a68 	.word	0x08019a68

0800dc90 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00e      	beq.n	800dcbe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	7d1b      	ldrb	r3, [r3, #20]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d106      	bne.n	800dcb6 <tcp_err+0x26>
 800dca8:	4b07      	ldr	r3, [pc, #28]	@ (800dcc8 <tcp_err+0x38>)
 800dcaa:	f44f 6201 	mov.w	r2, #2064	@ 0x810
 800dcae:	4907      	ldr	r1, [pc, #28]	@ (800dccc <tcp_err+0x3c>)
 800dcb0:	4807      	ldr	r0, [pc, #28]	@ (800dcd0 <tcp_err+0x40>)
 800dcb2:	f7f2 ffef 	bl	8000c94 <printf>
    pcb->errf = err;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	683a      	ldr	r2, [r7, #0]
 800dcba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800dcbe:	bf00      	nop
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	08019a28 	.word	0x08019a28
 800dccc:	08019ff4 	.word	0x08019ff4
 800dcd0:	08019a68 	.word	0x08019a68

0800dcd4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d008      	beq.n	800dcf6 <tcp_accept+0x22>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d104      	bne.n	800dcf6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	619a      	str	r2, [r3, #24]
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
	...

0800dd04 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <tcp_poll+0x1c>
 800dd18:	480c      	ldr	r0, [pc, #48]	@ (800dd4c <tcp_poll+0x48>)
 800dd1a:	f7f2 ffbb 	bl	8000c94 <printf>
 800dd1e:	e011      	b.n	800dd44 <tcp_poll+0x40>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	7d1b      	ldrb	r3, [r3, #20]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d106      	bne.n	800dd36 <tcp_poll+0x32>
 800dd28:	4b09      	ldr	r3, [pc, #36]	@ (800dd50 <tcp_poll+0x4c>)
 800dd2a:	f640 0242 	movw	r2, #2114	@ 0x842
 800dd2e:	4909      	ldr	r1, [pc, #36]	@ (800dd54 <tcp_poll+0x50>)
 800dd30:	4809      	ldr	r0, [pc, #36]	@ (800dd58 <tcp_poll+0x54>)
 800dd32:	f7f2 ffaf 	bl	8000c94 <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	79fa      	ldrb	r2, [r7, #7]
 800dd42:	775a      	strb	r2, [r3, #29]
}
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	0801a01c 	.word	0x0801a01c
 800dd50:	08019a28 	.word	0x08019a28
 800dd54:	0801a034 	.word	0x0801a034
 800dd58:	08019a68 	.word	0x08019a68

0800dd5c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d103      	bne.n	800dd72 <tcp_pcb_purge+0x16>
 800dd6a:	481c      	ldr	r0, [pc, #112]	@ (800dddc <tcp_pcb_purge+0x80>)
 800dd6c:	f7f2 ff92 	bl	8000c94 <printf>
 800dd70:	e030      	b.n	800ddd4 <tcp_pcb_purge+0x78>

  if (pcb->state != CLOSED &&
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d02c      	beq.n	800ddd4 <tcp_pcb_purge+0x78>
      pcb->state != TIME_WAIT &&
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd7e:	2b0a      	cmp	r3, #10
 800dd80:	d028      	beq.n	800ddd4 <tcp_pcb_purge+0x78>
      pcb->state != LISTEN) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d024      	beq.n	800ddd4 <tcp_pcb_purge+0x78>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d007      	beq.n	800dda2 <tcp_pcb_purge+0x46>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe f940 	bl	800c01c <pbuf_free>
      pcb->refused_data = NULL;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dda8:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fd3e 	bl	800d830 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7ff fd39 	bl	800d830 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	0801a054 	.word	0x0801a054

0800dde0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d106      	bne.n	800ddfe <tcp_pcb_remove+0x1e>
 800ddf0:	4b38      	ldr	r3, [pc, #224]	@ (800ded4 <tcp_pcb_remove+0xf4>)
 800ddf2:	f640 0287 	movw	r2, #2183	@ 0x887
 800ddf6:	4938      	ldr	r1, [pc, #224]	@ (800ded8 <tcp_pcb_remove+0xf8>)
 800ddf8:	4838      	ldr	r0, [pc, #224]	@ (800dedc <tcp_pcb_remove+0xfc>)
 800ddfa:	f7f2 ff4b 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d106      	bne.n	800de12 <tcp_pcb_remove+0x32>
 800de04:	4b33      	ldr	r3, [pc, #204]	@ (800ded4 <tcp_pcb_remove+0xf4>)
 800de06:	f640 0288 	movw	r2, #2184	@ 0x888
 800de0a:	4935      	ldr	r1, [pc, #212]	@ (800dee0 <tcp_pcb_remove+0x100>)
 800de0c:	4833      	ldr	r0, [pc, #204]	@ (800dedc <tcp_pcb_remove+0xfc>)
 800de0e:	f7f2 ff41 	bl	8000c94 <printf>

  TCP_RMV(pcblist, pcb);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d105      	bne.n	800de28 <tcp_pcb_remove+0x48>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68da      	ldr	r2, [r3, #12]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	e013      	b.n	800de50 <tcp_pcb_remove+0x70>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	e00c      	b.n	800de4a <tcp_pcb_remove+0x6a>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	429a      	cmp	r2, r3
 800de38:	d104      	bne.n	800de44 <tcp_pcb_remove+0x64>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68da      	ldr	r2, [r3, #12]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	60da      	str	r2, [r3, #12]
 800de42:	e005      	b.n	800de50 <tcp_pcb_remove+0x70>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1ef      	bne.n	800de30 <tcp_pcb_remove+0x50>
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	2200      	movs	r2, #0
 800de54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800de56:	6838      	ldr	r0, [r7, #0]
 800de58:	f7ff ff80 	bl	800dd5c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	7d1b      	ldrb	r3, [r3, #20]
 800de60:	2b0a      	cmp	r3, #10
 800de62:	d013      	beq.n	800de8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d00f      	beq.n	800de8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	8b5b      	ldrh	r3, [r3, #26]
 800de70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de74:	2b00      	cmp	r3, #0
 800de76:	d009      	beq.n	800de8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	8b5b      	ldrh	r3, [r3, #26]
 800de7c:	f043 0302 	orr.w	r3, r3, #2
 800de80:	b29a      	uxth	r2, r3
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de86:	6838      	ldr	r0, [r7, #0]
 800de88:	f003 f85e 	bl	8010f48 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	7d1b      	ldrb	r3, [r3, #20]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d015      	beq.n	800dec0 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <tcp_pcb_remove+0xca>
 800de9c:	4b0d      	ldr	r3, [pc, #52]	@ (800ded4 <tcp_pcb_remove+0xf4>)
 800de9e:	f640 0297 	movw	r2, #2199	@ 0x897
 800dea2:	4910      	ldr	r1, [pc, #64]	@ (800dee4 <tcp_pcb_remove+0x104>)
 800dea4:	480d      	ldr	r0, [pc, #52]	@ (800dedc <tcp_pcb_remove+0xfc>)
 800dea6:	f7f2 fef5 	bl	8000c94 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d006      	beq.n	800dec0 <tcp_pcb_remove+0xe0>
 800deb2:	4b08      	ldr	r3, [pc, #32]	@ (800ded4 <tcp_pcb_remove+0xf4>)
 800deb4:	f640 0298 	movw	r2, #2200	@ 0x898
 800deb8:	490b      	ldr	r1, [pc, #44]	@ (800dee8 <tcp_pcb_remove+0x108>)
 800deba:	4808      	ldr	r0, [pc, #32]	@ (800dedc <tcp_pcb_remove+0xfc>)
 800debc:	f7f2 feea 	bl	8000c94 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2200      	movs	r2, #0
 800dec4:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	2200      	movs	r2, #0
 800deca:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800decc:	bf00      	nop
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	08019a28 	.word	0x08019a28
 800ded8:	0801a070 	.word	0x0801a070
 800dedc:	08019a68 	.word	0x08019a68
 800dee0:	0801a08c 	.word	0x0801a08c
 800dee4:	0801a0ac 	.word	0x0801a0ac
 800dee8:	0801a0c4 	.word	0x0801a0c4

0800deec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <tcp_next_iss+0x1c>
 800defa:	4b0a      	ldr	r3, [pc, #40]	@ (800df24 <tcp_next_iss+0x38>)
 800defc:	f640 02b3 	movw	r2, #2227	@ 0x8b3
 800df00:	4909      	ldr	r1, [pc, #36]	@ (800df28 <tcp_next_iss+0x3c>)
 800df02:	480a      	ldr	r0, [pc, #40]	@ (800df2c <tcp_next_iss+0x40>)
 800df04:	f7f2 fec6 	bl	8000c94 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800df08:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <tcp_next_iss+0x44>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	4b09      	ldr	r3, [pc, #36]	@ (800df34 <tcp_next_iss+0x48>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4413      	add	r3, r2
 800df12:	4a07      	ldr	r2, [pc, #28]	@ (800df30 <tcp_next_iss+0x44>)
 800df14:	6013      	str	r3, [r2, #0]
  return iss;
 800df16:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <tcp_next_iss+0x44>)
 800df18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	08019a28 	.word	0x08019a28
 800df28:	0801a0e0 	.word	0x0801a0e0
 800df2c:	08019a68 	.word	0x08019a68
 800df30:	20000014 	.word	0x20000014
 800df34:	2000d8fc 	.word	0x2000d8fc

0800df38 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	4603      	mov	r3, r0
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d106      	bne.n	800df5a <tcp_eff_send_mss_netif+0x22>
 800df4c:	4b14      	ldr	r3, [pc, #80]	@ (800dfa0 <tcp_eff_send_mss_netif+0x68>)
 800df4e:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 800df52:	4914      	ldr	r1, [pc, #80]	@ (800dfa4 <tcp_eff_send_mss_netif+0x6c>)
 800df54:	4814      	ldr	r0, [pc, #80]	@ (800dfa8 <tcp_eff_send_mss_netif+0x70>)
 800df56:	f7f2 fe9d 	bl	8000c94 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df60:	89fb      	ldrh	r3, [r7, #14]
 800df62:	e019      	b.n	800df98 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800df68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df6a:	8afb      	ldrh	r3, [r7, #22]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d012      	beq.n	800df96 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df70:	2328      	movs	r3, #40	@ 0x28
 800df72:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df74:	8afa      	ldrh	r2, [r7, #22]
 800df76:	8abb      	ldrh	r3, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d904      	bls.n	800df86 <tcp_eff_send_mss_netif+0x4e>
 800df7c:	8afa      	ldrh	r2, [r7, #22]
 800df7e:	8abb      	ldrh	r3, [r7, #20]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	b29b      	uxth	r3, r3
 800df84:	e000      	b.n	800df88 <tcp_eff_send_mss_netif+0x50>
 800df86:	2300      	movs	r3, #0
 800df88:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df8a:	8a7a      	ldrh	r2, [r7, #18]
 800df8c:	89fb      	ldrh	r3, [r7, #14]
 800df8e:	4293      	cmp	r3, r2
 800df90:	bf28      	it	cs
 800df92:	4613      	movcs	r3, r2
 800df94:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800df96:	89fb      	ldrh	r3, [r7, #14]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	08019a28 	.word	0x08019a28
 800dfa4:	0801a0fc 	.word	0x0801a0fc
 800dfa8:	08019a68 	.word	0x08019a68

0800dfac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d119      	bne.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dfc0:	4b10      	ldr	r3, [pc, #64]	@ (800e004 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dfc2:	f640 1204 	movw	r2, #2308	@ 0x904
 800dfc6:	4910      	ldr	r1, [pc, #64]	@ (800e008 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dfc8:	4810      	ldr	r0, [pc, #64]	@ (800e00c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dfca:	f7f2 fe63 	bl	8000c94 <printf>

  while (pcb != NULL) {
 800dfce:	e011      	b.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d108      	bne.n	800dfee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7fe fe1c 	bl	800cc20 <tcp_abort>
      pcb = next;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	e002      	b.n	800dff4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1ea      	bne.n	800dfd0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dffa:	bf00      	nop
 800dffc:	bf00      	nop
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	08019a28 	.word	0x08019a28
 800e008:	0801a124 	.word	0x0801a124
 800e00c:	08019a68 	.word	0x08019a68

0800e010 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d02a      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d026      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e028:	4b15      	ldr	r3, [pc, #84]	@ (800e080 <tcp_netif_ip_addr_changed+0x70>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff ffbc 	bl	800dfac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e034:	4b13      	ldr	r3, [pc, #76]	@ (800e084 <tcp_netif_ip_addr_changed+0x74>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ffb6 	bl	800dfac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d017      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d013      	beq.n	800e076 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e04e:	4b0e      	ldr	r3, [pc, #56]	@ (800e088 <tcp_netif_ip_addr_changed+0x78>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]
 800e054:	e00c      	b.n	800e070 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d103      	bne.n	800e06a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1ef      	bne.n	800e056 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e076:	bf00      	nop
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	2000d8f8 	.word	0x2000d8f8
 800e084:	2000d904 	.word	0x2000d904
 800e088:	2000d900 	.word	0x2000d900

0800e08c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e08c:	b590      	push	{r4, r7, lr}
 800e08e:	b08d      	sub	sp, #52	@ 0x34
 800e090:	af04      	add	r7, sp, #16
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d105      	bne.n	800e0a8 <tcp_input+0x1c>
 800e09c:	4b8b      	ldr	r3, [pc, #556]	@ (800e2cc <tcp_input+0x240>)
 800e09e:	2283      	movs	r2, #131	@ 0x83
 800e0a0:	498b      	ldr	r1, [pc, #556]	@ (800e2d0 <tcp_input+0x244>)
 800e0a2:	488c      	ldr	r0, [pc, #560]	@ (800e2d4 <tcp_input+0x248>)
 800e0a4:	f7f2 fdf6 	bl	8000c94 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	4a8a      	ldr	r2, [pc, #552]	@ (800e2d8 <tcp_input+0x24c>)
 800e0ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	895b      	ldrh	r3, [r3, #10]
 800e0b4:	2b13      	cmp	r3, #19
 800e0b6:	f240 83e1 	bls.w	800e87c <tcp_input+0x7f0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0ba:	4b88      	ldr	r3, [pc, #544]	@ (800e2dc <tcp_input+0x250>)
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	4a87      	ldr	r2, [pc, #540]	@ (800e2dc <tcp_input+0x250>)
 800e0c0:	6812      	ldr	r2, [r2, #0]
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f007 ffdf 	bl	8016088 <ip4_addr_isbroadcast_u32>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f040 83d7 	bne.w	800e880 <tcp_input+0x7f4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e0d2:	4b82      	ldr	r3, [pc, #520]	@ (800e2dc <tcp_input+0x250>)
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0da:	2be0      	cmp	r3, #224	@ 0xe0
 800e0dc:	f000 83d0 	beq.w	800e880 <tcp_input+0x7f4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	891a      	ldrh	r2, [r3, #8]
 800e0e4:	4b7e      	ldr	r3, [pc, #504]	@ (800e2e0 <tcp_input+0x254>)
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	4b7e      	ldr	r3, [pc, #504]	@ (800e2e4 <tcp_input+0x258>)
 800e0ea:	2106      	movs	r1, #6
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7fc fc83 	bl	800a9f8 <ip_chksum_pseudo>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800e0f6:	8a3b      	ldrh	r3, [r7, #16]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 83c3 	bne.w	800e884 <tcp_input+0x7f8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e0fe:	4b76      	ldr	r3, [pc, #472]	@ (800e2d8 <tcp_input+0x24c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	899b      	ldrh	r3, [r3, #12]
 800e104:	b29b      	uxth	r3, r3
 800e106:	4618      	mov	r0, r3
 800e108:	f7fc fb44 	bl	800a794 <lwip_htons>
 800e10c:	4603      	mov	r3, r0
 800e10e:	0b1b      	lsrs	r3, r3, #12
 800e110:	b29b      	uxth	r3, r3
 800e112:	b2db      	uxtb	r3, r3
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e118:	7bfb      	ldrb	r3, [r7, #15]
 800e11a:	2b13      	cmp	r3, #19
 800e11c:	f240 83b4 	bls.w	800e888 <tcp_input+0x7fc>
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	429a      	cmp	r2, r3
 800e12a:	f200 83ad 	bhi.w	800e888 <tcp_input+0x7fc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
 800e130:	b29b      	uxth	r3, r3
 800e132:	3b14      	subs	r3, #20
 800e134:	b29a      	uxth	r2, r3
 800e136:	4b6c      	ldr	r3, [pc, #432]	@ (800e2e8 <tcp_input+0x25c>)
 800e138:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e13a:	4b6c      	ldr	r3, [pc, #432]	@ (800e2ec <tcp_input+0x260>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	895a      	ldrh	r2, [r3, #10]
 800e144:	7bfb      	ldrb	r3, [r7, #15]
 800e146:	b29b      	uxth	r3, r3
 800e148:	429a      	cmp	r2, r3
 800e14a:	d309      	bcc.n	800e160 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e14c:	4b66      	ldr	r3, [pc, #408]	@ (800e2e8 <tcp_input+0x25c>)
 800e14e:	881a      	ldrh	r2, [r3, #0]
 800e150:	4b67      	ldr	r3, [pc, #412]	@ (800e2f0 <tcp_input+0x264>)
 800e152:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4619      	mov	r1, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f7fd fedd 	bl	800bf18 <pbuf_remove_header>
 800e15e:	e04e      	b.n	800e1fe <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d105      	bne.n	800e174 <tcp_input+0xe8>
 800e168:	4b58      	ldr	r3, [pc, #352]	@ (800e2cc <tcp_input+0x240>)
 800e16a:	22c2      	movs	r2, #194	@ 0xc2
 800e16c:	4961      	ldr	r1, [pc, #388]	@ (800e2f4 <tcp_input+0x268>)
 800e16e:	4859      	ldr	r0, [pc, #356]	@ (800e2d4 <tcp_input+0x248>)
 800e170:	f7f2 fd90 	bl	8000c94 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e174:	2114      	movs	r1, #20
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fd fece 	bl	800bf18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	895a      	ldrh	r2, [r3, #10]
 800e180:	4b5b      	ldr	r3, [pc, #364]	@ (800e2f0 <tcp_input+0x264>)
 800e182:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e184:	4b58      	ldr	r3, [pc, #352]	@ (800e2e8 <tcp_input+0x25c>)
 800e186:	881a      	ldrh	r2, [r3, #0]
 800e188:	4b59      	ldr	r3, [pc, #356]	@ (800e2f0 <tcp_input+0x264>)
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e190:	4b57      	ldr	r3, [pc, #348]	@ (800e2f0 <tcp_input+0x264>)
 800e192:	881b      	ldrh	r3, [r3, #0]
 800e194:	4619      	mov	r1, r3
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7fd febe 	bl	800bf18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	895b      	ldrh	r3, [r3, #10]
 800e1a2:	89ba      	ldrh	r2, [r7, #12]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	f200 8371 	bhi.w	800e88c <tcp_input+0x800>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4a4e      	ldr	r2, [pc, #312]	@ (800e2ec <tcp_input+0x260>)
 800e1b2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	89ba      	ldrh	r2, [r7, #12]
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd feab 	bl	800bf18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	891a      	ldrh	r2, [r3, #8]
 800e1c6:	89bb      	ldrh	r3, [r7, #12]
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	895b      	ldrh	r3, [r3, #10]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <tcp_input+0x158>
 800e1d8:	4b3c      	ldr	r3, [pc, #240]	@ (800e2cc <tcp_input+0x240>)
 800e1da:	22df      	movs	r2, #223	@ 0xdf
 800e1dc:	4946      	ldr	r1, [pc, #280]	@ (800e2f8 <tcp_input+0x26c>)
 800e1de:	483d      	ldr	r0, [pc, #244]	@ (800e2d4 <tcp_input+0x248>)
 800e1e0:	f7f2 fd58 	bl	8000c94 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	891a      	ldrh	r2, [r3, #8]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	891b      	ldrh	r3, [r3, #8]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d005      	beq.n	800e1fe <tcp_input+0x172>
 800e1f2:	4b36      	ldr	r3, [pc, #216]	@ (800e2cc <tcp_input+0x240>)
 800e1f4:	22e0      	movs	r2, #224	@ 0xe0
 800e1f6:	4941      	ldr	r1, [pc, #260]	@ (800e2fc <tcp_input+0x270>)
 800e1f8:	4836      	ldr	r0, [pc, #216]	@ (800e2d4 <tcp_input+0x248>)
 800e1fa:	f7f2 fd4b 	bl	8000c94 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e1fe:	4b36      	ldr	r3, [pc, #216]	@ (800e2d8 <tcp_input+0x24c>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	881b      	ldrh	r3, [r3, #0]
 800e204:	b29b      	uxth	r3, r3
 800e206:	4a34      	ldr	r2, [pc, #208]	@ (800e2d8 <tcp_input+0x24c>)
 800e208:	6814      	ldr	r4, [r2, #0]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fc fac2 	bl	800a794 <lwip_htons>
 800e210:	4603      	mov	r3, r0
 800e212:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e214:	4b30      	ldr	r3, [pc, #192]	@ (800e2d8 <tcp_input+0x24c>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	885b      	ldrh	r3, [r3, #2]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	4a2e      	ldr	r2, [pc, #184]	@ (800e2d8 <tcp_input+0x24c>)
 800e21e:	6814      	ldr	r4, [r2, #0]
 800e220:	4618      	mov	r0, r3
 800e222:	f7fc fab7 	bl	800a794 <lwip_htons>
 800e226:	4603      	mov	r3, r0
 800e228:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e22a:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d8 <tcp_input+0x24c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	4a29      	ldr	r2, [pc, #164]	@ (800e2d8 <tcp_input+0x24c>)
 800e232:	6814      	ldr	r4, [r2, #0]
 800e234:	4618      	mov	r0, r3
 800e236:	f7fc fac2 	bl	800a7be <lwip_htonl>
 800e23a:	4603      	mov	r3, r0
 800e23c:	6063      	str	r3, [r4, #4]
 800e23e:	6863      	ldr	r3, [r4, #4]
 800e240:	4a2f      	ldr	r2, [pc, #188]	@ (800e300 <tcp_input+0x274>)
 800e242:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e244:	4b24      	ldr	r3, [pc, #144]	@ (800e2d8 <tcp_input+0x24c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	4a23      	ldr	r2, [pc, #140]	@ (800e2d8 <tcp_input+0x24c>)
 800e24c:	6814      	ldr	r4, [r2, #0]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fc fab5 	bl	800a7be <lwip_htonl>
 800e254:	4603      	mov	r3, r0
 800e256:	60a3      	str	r3, [r4, #8]
 800e258:	68a3      	ldr	r3, [r4, #8]
 800e25a:	4a2a      	ldr	r2, [pc, #168]	@ (800e304 <tcp_input+0x278>)
 800e25c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e25e:	4b1e      	ldr	r3, [pc, #120]	@ (800e2d8 <tcp_input+0x24c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	89db      	ldrh	r3, [r3, #14]
 800e264:	b29b      	uxth	r3, r3
 800e266:	4a1c      	ldr	r2, [pc, #112]	@ (800e2d8 <tcp_input+0x24c>)
 800e268:	6814      	ldr	r4, [r2, #0]
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc fa92 	bl	800a794 <lwip_htons>
 800e270:	4603      	mov	r3, r0
 800e272:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e274:	4b18      	ldr	r3, [pc, #96]	@ (800e2d8 <tcp_input+0x24c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fc fa89 	bl	800a794 <lwip_htons>
 800e282:	4603      	mov	r3, r0
 800e284:	b2db      	uxtb	r3, r3
 800e286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	4b1e      	ldr	r3, [pc, #120]	@ (800e308 <tcp_input+0x27c>)
 800e28e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	891a      	ldrh	r2, [r3, #8]
 800e294:	4b1d      	ldr	r3, [pc, #116]	@ (800e30c <tcp_input+0x280>)
 800e296:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e298:	4b1b      	ldr	r3, [pc, #108]	@ (800e308 <tcp_input+0x27c>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	f003 0303 	and.w	r3, r3, #3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00c      	beq.n	800e2be <tcp_input+0x232>
    tcplen++;
 800e2a4:	4b19      	ldr	r3, [pc, #100]	@ (800e30c <tcp_input+0x280>)
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	4b17      	ldr	r3, [pc, #92]	@ (800e30c <tcp_input+0x280>)
 800e2ae:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	891a      	ldrh	r2, [r3, #8]
 800e2b4:	4b15      	ldr	r3, [pc, #84]	@ (800e30c <tcp_input+0x280>)
 800e2b6:	881b      	ldrh	r3, [r3, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	f200 82e9 	bhi.w	800e890 <tcp_input+0x804>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2c2:	4b13      	ldr	r3, [pc, #76]	@ (800e310 <tcp_input+0x284>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	61bb      	str	r3, [r7, #24]
 800e2c8:	e09b      	b.n	800e402 <tcp_input+0x376>
 800e2ca:	bf00      	nop
 800e2cc:	0801a158 	.word	0x0801a158
 800e2d0:	0801a188 	.word	0x0801a188
 800e2d4:	0801a1a0 	.word	0x0801a1a0
 800e2d8:	20004ac0 	.word	0x20004ac0
 800e2dc:	200054ec 	.word	0x200054ec
 800e2e0:	20005500 	.word	0x20005500
 800e2e4:	200054fc 	.word	0x200054fc
 800e2e8:	20004ac4 	.word	0x20004ac4
 800e2ec:	20004ac8 	.word	0x20004ac8
 800e2f0:	20004ac6 	.word	0x20004ac6
 800e2f4:	0801a1c8 	.word	0x0801a1c8
 800e2f8:	0801a1d8 	.word	0x0801a1d8
 800e2fc:	0801a1e4 	.word	0x0801a1e4
 800e300:	20004ad0 	.word	0x20004ad0
 800e304:	20004ad4 	.word	0x20004ad4
 800e308:	20004adc 	.word	0x20004adc
 800e30c:	20004ada 	.word	0x20004ada
 800e310:	2000d8f8 	.word	0x2000d8f8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	7d1b      	ldrb	r3, [r3, #20]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d105      	bne.n	800e328 <tcp_input+0x29c>
 800e31c:	4b88      	ldr	r3, [pc, #544]	@ (800e540 <tcp_input+0x4b4>)
 800e31e:	22fb      	movs	r2, #251	@ 0xfb
 800e320:	4988      	ldr	r1, [pc, #544]	@ (800e544 <tcp_input+0x4b8>)
 800e322:	4889      	ldr	r0, [pc, #548]	@ (800e548 <tcp_input+0x4bc>)
 800e324:	f7f2 fcb6 	bl	8000c94 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	2b0a      	cmp	r3, #10
 800e32e:	d105      	bne.n	800e33c <tcp_input+0x2b0>
 800e330:	4b83      	ldr	r3, [pc, #524]	@ (800e540 <tcp_input+0x4b4>)
 800e332:	22fc      	movs	r2, #252	@ 0xfc
 800e334:	4985      	ldr	r1, [pc, #532]	@ (800e54c <tcp_input+0x4c0>)
 800e336:	4884      	ldr	r0, [pc, #528]	@ (800e548 <tcp_input+0x4bc>)
 800e338:	f7f2 fcac 	bl	8000c94 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d105      	bne.n	800e350 <tcp_input+0x2c4>
 800e344:	4b7e      	ldr	r3, [pc, #504]	@ (800e540 <tcp_input+0x4b4>)
 800e346:	22fd      	movs	r2, #253	@ 0xfd
 800e348:	4981      	ldr	r1, [pc, #516]	@ (800e550 <tcp_input+0x4c4>)
 800e34a:	487f      	ldr	r0, [pc, #508]	@ (800e548 <tcp_input+0x4bc>)
 800e34c:	f7f2 fca2 	bl	8000c94 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	7a1b      	ldrb	r3, [r3, #8]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00c      	beq.n	800e372 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	7a1a      	ldrb	r2, [r3, #8]
 800e35c:	4b7d      	ldr	r3, [pc, #500]	@ (800e554 <tcp_input+0x4c8>)
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e364:	3301      	adds	r3, #1
 800e366:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e368:	429a      	cmp	r2, r3
 800e36a:	d002      	beq.n	800e372 <tcp_input+0x2e6>
      prev = pcb;
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	61fb      	str	r3, [r7, #28]
      continue;
 800e370:	e044      	b.n	800e3fc <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	8b1a      	ldrh	r2, [r3, #24]
 800e376:	4b78      	ldr	r3, [pc, #480]	@ (800e558 <tcp_input+0x4cc>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	429a      	cmp	r2, r3
 800e380:	d13a      	bne.n	800e3f8 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	8ada      	ldrh	r2, [r3, #22]
 800e386:	4b74      	ldr	r3, [pc, #464]	@ (800e558 <tcp_input+0x4cc>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	885b      	ldrh	r3, [r3, #2]
 800e38c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e38e:	429a      	cmp	r2, r3
 800e390:	d132      	bne.n	800e3f8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	4b6f      	ldr	r3, [pc, #444]	@ (800e554 <tcp_input+0x4c8>)
 800e398:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d12c      	bne.n	800e3f8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	4b6c      	ldr	r3, [pc, #432]	@ (800e554 <tcp_input+0x4c8>)
 800e3a4:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d126      	bne.n	800e3f8 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d106      	bne.n	800e3c2 <tcp_input+0x336>
 800e3b4:	4b62      	ldr	r3, [pc, #392]	@ (800e540 <tcp_input+0x4b4>)
 800e3b6:	f240 120d 	movw	r2, #269	@ 0x10d
 800e3ba:	4968      	ldr	r1, [pc, #416]	@ (800e55c <tcp_input+0x4d0>)
 800e3bc:	4862      	ldr	r0, [pc, #392]	@ (800e548 <tcp_input+0x4bc>)
 800e3be:	f7f2 fc69 	bl	8000c94 <printf>
      if (prev != NULL) {
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00a      	beq.n	800e3de <tcp_input+0x352>
        prev->next = pcb->next;
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	68da      	ldr	r2, [r3, #12]
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e3d0:	4b63      	ldr	r3, [pc, #396]	@ (800e560 <tcp_input+0x4d4>)
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3d8:	4a61      	ldr	r2, [pc, #388]	@ (800e560 <tcp_input+0x4d4>)
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	69ba      	ldr	r2, [r7, #24]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d110      	bne.n	800e40a <tcp_input+0x37e>
 800e3e8:	4b55      	ldr	r3, [pc, #340]	@ (800e540 <tcp_input+0x4b4>)
 800e3ea:	f240 1215 	movw	r2, #277	@ 0x115
 800e3ee:	495d      	ldr	r1, [pc, #372]	@ (800e564 <tcp_input+0x4d8>)
 800e3f0:	4855      	ldr	r0, [pc, #340]	@ (800e548 <tcp_input+0x4bc>)
 800e3f2:	f7f2 fc4f 	bl	8000c94 <printf>
      break;
 800e3f6:	e008      	b.n	800e40a <tcp_input+0x37e>
    }
    prev = pcb;
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	61bb      	str	r3, [r7, #24]
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d185      	bne.n	800e314 <tcp_input+0x288>
 800e408:	e000      	b.n	800e40c <tcp_input+0x380>
      break;
 800e40a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f040 80b0 	bne.w	800e574 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e414:	4b54      	ldr	r3, [pc, #336]	@ (800e568 <tcp_input+0x4dc>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	61bb      	str	r3, [r7, #24]
 800e41a:	e03f      	b.n	800e49c <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	7d1b      	ldrb	r3, [r3, #20]
 800e420:	2b0a      	cmp	r3, #10
 800e422:	d006      	beq.n	800e432 <tcp_input+0x3a6>
 800e424:	4b46      	ldr	r3, [pc, #280]	@ (800e540 <tcp_input+0x4b4>)
 800e426:	f240 121f 	movw	r2, #287	@ 0x11f
 800e42a:	4950      	ldr	r1, [pc, #320]	@ (800e56c <tcp_input+0x4e0>)
 800e42c:	4846      	ldr	r0, [pc, #280]	@ (800e548 <tcp_input+0x4bc>)
 800e42e:	f7f2 fc31 	bl	8000c94 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	7a1b      	ldrb	r3, [r3, #8]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d009      	beq.n	800e44e <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	7a1a      	ldrb	r2, [r3, #8]
 800e43e:	4b45      	ldr	r3, [pc, #276]	@ (800e554 <tcp_input+0x4c8>)
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e446:	3301      	adds	r3, #1
 800e448:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d122      	bne.n	800e494 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	8b1a      	ldrh	r2, [r3, #24]
 800e452:	4b41      	ldr	r3, [pc, #260]	@ (800e558 <tcp_input+0x4cc>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	b29b      	uxth	r3, r3
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d11b      	bne.n	800e496 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	8ada      	ldrh	r2, [r3, #22]
 800e462:	4b3d      	ldr	r3, [pc, #244]	@ (800e558 <tcp_input+0x4cc>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	885b      	ldrh	r3, [r3, #2]
 800e468:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d113      	bne.n	800e496 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	4b38      	ldr	r3, [pc, #224]	@ (800e554 <tcp_input+0x4c8>)
 800e474:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e476:	429a      	cmp	r2, r3
 800e478:	d10d      	bne.n	800e496 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	4b35      	ldr	r3, [pc, #212]	@ (800e554 <tcp_input+0x4c8>)
 800e480:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e482:	429a      	cmp	r2, r3
 800e484:	d107      	bne.n	800e496 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e486:	69b8      	ldr	r0, [r7, #24]
 800e488:	f000 fb5c 	bl	800eb44 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7fd fdc5 	bl	800c01c <pbuf_free>
        return;
 800e492:	e203      	b.n	800e89c <tcp_input+0x810>
        continue;
 800e494:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	61bb      	str	r3, [r7, #24]
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1bc      	bne.n	800e41c <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4a6:	4b32      	ldr	r3, [pc, #200]	@ (800e570 <tcp_input+0x4e4>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	617b      	str	r3, [r7, #20]
 800e4ac:	e02a      	b.n	800e504 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	7a1b      	ldrb	r3, [r3, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00c      	beq.n	800e4d0 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	7a1a      	ldrb	r2, [r3, #8]
 800e4ba:	4b26      	ldr	r3, [pc, #152]	@ (800e554 <tcp_input+0x4c8>)
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d002      	beq.n	800e4d0 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	61fb      	str	r3, [r7, #28]
        continue;
 800e4ce:	e016      	b.n	800e4fe <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	8ada      	ldrh	r2, [r3, #22]
 800e4d4:	4b20      	ldr	r3, [pc, #128]	@ (800e558 <tcp_input+0x4cc>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	885b      	ldrh	r3, [r3, #2]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d10c      	bne.n	800e4fa <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	4b1b      	ldr	r3, [pc, #108]	@ (800e554 <tcp_input+0x4c8>)
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d00f      	beq.n	800e50c <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00d      	beq.n	800e50e <tcp_input+0x482>
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d009      	beq.n	800e50e <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	617b      	str	r3, [r7, #20]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1d1      	bne.n	800e4ae <tcp_input+0x422>
 800e50a:	e000      	b.n	800e50e <tcp_input+0x482>
            break;
 800e50c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d02f      	beq.n	800e574 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00a      	beq.n	800e530 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e522:	4b13      	ldr	r3, [pc, #76]	@ (800e570 <tcp_input+0x4e4>)
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e52a:	4a11      	ldr	r2, [pc, #68]	@ (800e570 <tcp_input+0x4e4>)
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	f000 fa09 	bl	800e948 <tcp_listen_input>
      }
      pbuf_free(p);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7fd fd70 	bl	800c01c <pbuf_free>
      return;
 800e53c:	e1ae      	b.n	800e89c <tcp_input+0x810>
 800e53e:	bf00      	nop
 800e540:	0801a158 	.word	0x0801a158
 800e544:	0801a204 	.word	0x0801a204
 800e548:	0801a1a0 	.word	0x0801a1a0
 800e54c:	0801a22c 	.word	0x0801a22c
 800e550:	0801a258 	.word	0x0801a258
 800e554:	200054ec 	.word	0x200054ec
 800e558:	20004ac0 	.word	0x20004ac0
 800e55c:	0801a280 	.word	0x0801a280
 800e560:	2000d8f8 	.word	0x2000d8f8
 800e564:	0801a2ac 	.word	0x0801a2ac
 800e568:	2000d908 	.word	0x2000d908
 800e56c:	0801a2d8 	.word	0x0801a2d8
 800e570:	2000d900 	.word	0x2000d900
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	2b00      	cmp	r3, #0
 800e578:	f000 8156 	beq.w	800e828 <tcp_input+0x79c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e57c:	4b94      	ldr	r3, [pc, #592]	@ (800e7d0 <tcp_input+0x744>)
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	891a      	ldrh	r2, [r3, #8]
 800e586:	4b92      	ldr	r3, [pc, #584]	@ (800e7d0 <tcp_input+0x744>)
 800e588:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e58a:	4a91      	ldr	r2, [pc, #580]	@ (800e7d0 <tcp_input+0x744>)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e590:	4b90      	ldr	r3, [pc, #576]	@ (800e7d4 <tcp_input+0x748>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a8e      	ldr	r2, [pc, #568]	@ (800e7d0 <tcp_input+0x744>)
 800e596:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800e598:	4b8f      	ldr	r3, [pc, #572]	@ (800e7d8 <tcp_input+0x74c>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e59e:	4b8f      	ldr	r3, [pc, #572]	@ (800e7dc <tcp_input+0x750>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e5a4:	4b8e      	ldr	r3, [pc, #568]	@ (800e7e0 <tcp_input+0x754>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e5aa:	4b8e      	ldr	r3, [pc, #568]	@ (800e7e4 <tcp_input+0x758>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	f003 0308 	and.w	r3, r3, #8
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d006      	beq.n	800e5c4 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	7b5b      	ldrb	r3, [r3, #13]
 800e5ba:	f043 0301 	orr.w	r3, r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d017      	beq.n	800e5fc <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5cc:	69b8      	ldr	r0, [r7, #24]
 800e5ce:	f7ff f8b9 	bl	800d744 <tcp_process_refused_data>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	f113 0f0d 	cmn.w	r3, #13
 800e5d8:	d007      	beq.n	800e5ea <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00c      	beq.n	800e5fc <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e5e2:	4b81      	ldr	r3, [pc, #516]	@ (800e7e8 <tcp_input+0x75c>)
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f040 80e2 	bne.w	800e7b8 <tcp_input+0x72c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e5f4:	69b8      	ldr	r0, [r7, #24]
 800e5f6:	f003 fadb 	bl	8011bb0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e5fa:	e0dd      	b.n	800e7b8 <tcp_input+0x72c>
      }
    }
    tcp_input_pcb = pcb;
 800e5fc:	4a7b      	ldr	r2, [pc, #492]	@ (800e7ec <tcp_input+0x760>)
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e602:	69b8      	ldr	r0, [r7, #24]
 800e604:	f000 fb18 	bl	800ec38 <tcp_process>
 800e608:	4603      	mov	r3, r0
 800e60a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e60c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e610:	f113 0f0d 	cmn.w	r3, #13
 800e614:	f000 80d2 	beq.w	800e7bc <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 800e618:	4b70      	ldr	r3, [pc, #448]	@ (800e7dc <tcp_input+0x750>)
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b00      	cmp	r3, #0
 800e622:	d015      	beq.n	800e650 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d008      	beq.n	800e640 <tcp_input+0x5b4>
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e634:	69ba      	ldr	r2, [r7, #24]
 800e636:	6912      	ldr	r2, [r2, #16]
 800e638:	f06f 010d 	mvn.w	r1, #13
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e640:	69b9      	ldr	r1, [r7, #24]
 800e642:	486b      	ldr	r0, [pc, #428]	@ (800e7f0 <tcp_input+0x764>)
 800e644:	f7ff fbcc 	bl	800dde0 <tcp_pcb_remove>
        tcp_free(pcb);
 800e648:	69b8      	ldr	r0, [r7, #24]
 800e64a:	f7fd ffc3 	bl	800c5d4 <tcp_free>
 800e64e:	e0d8      	b.n	800e802 <tcp_input+0x776>
      } else {
        err = ERR_OK;
 800e650:	2300      	movs	r3, #0
 800e652:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e654:	4b62      	ldr	r3, [pc, #392]	@ (800e7e0 <tcp_input+0x754>)
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d01b      	beq.n	800e694 <tcp_input+0x608>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e65c:	4b60      	ldr	r3, [pc, #384]	@ (800e7e0 <tcp_input+0x754>)
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <tcp_input+0x5f2>
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e66e:	69ba      	ldr	r2, [r7, #24]
 800e670:	6910      	ldr	r0, [r2, #16]
 800e672:	897a      	ldrh	r2, [r7, #10]
 800e674:	69b9      	ldr	r1, [r7, #24]
 800e676:	4798      	blx	r3
 800e678:	4603      	mov	r3, r0
 800e67a:	74fb      	strb	r3, [r7, #19]
 800e67c:	e001      	b.n	800e682 <tcp_input+0x5f6>
 800e67e:	2300      	movs	r3, #0
 800e680:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e682:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e686:	f113 0f0d 	cmn.w	r3, #13
 800e68a:	f000 8099 	beq.w	800e7c0 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e68e:	4b54      	ldr	r3, [pc, #336]	@ (800e7e0 <tcp_input+0x754>)
 800e690:	2200      	movs	r2, #0
 800e692:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e694:	69b8      	ldr	r0, [r7, #24]
 800e696:	f000 f917 	bl	800e8c8 <tcp_input_delayed_close>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f040 8091 	bne.w	800e7c4 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e6a2:	4b4d      	ldr	r3, [pc, #308]	@ (800e7d8 <tcp_input+0x74c>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d041      	beq.n	800e72e <tcp_input+0x6a2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d006      	beq.n	800e6c0 <tcp_input+0x634>
 800e6b2:	4b50      	ldr	r3, [pc, #320]	@ (800e7f4 <tcp_input+0x768>)
 800e6b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e6b8:	494f      	ldr	r1, [pc, #316]	@ (800e7f8 <tcp_input+0x76c>)
 800e6ba:	4850      	ldr	r0, [pc, #320]	@ (800e7fc <tcp_input+0x770>)
 800e6bc:	f7f2 faea 	bl	8000c94 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	8b5b      	ldrh	r3, [r3, #26]
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d008      	beq.n	800e6de <tcp_input+0x652>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6cc:	4b42      	ldr	r3, [pc, #264]	@ (800e7d8 <tcp_input+0x74c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fd fca3 	bl	800c01c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e6d6:	69b8      	ldr	r0, [r7, #24]
 800e6d8:	f7fe faa2 	bl	800cc20 <tcp_abort>
            goto aborted;
 800e6dc:	e091      	b.n	800e802 <tcp_input+0x776>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00c      	beq.n	800e702 <tcp_input+0x676>
 800e6e8:	69bb      	ldr	r3, [r7, #24]
 800e6ea:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e6ee:	69bb      	ldr	r3, [r7, #24]
 800e6f0:	6918      	ldr	r0, [r3, #16]
 800e6f2:	4b39      	ldr	r3, [pc, #228]	@ (800e7d8 <tcp_input+0x74c>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	69b9      	ldr	r1, [r7, #24]
 800e6fa:	47a0      	blx	r4
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	74fb      	strb	r3, [r7, #19]
 800e700:	e008      	b.n	800e714 <tcp_input+0x688>
 800e702:	4b35      	ldr	r3, [pc, #212]	@ (800e7d8 <tcp_input+0x74c>)
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	2300      	movs	r3, #0
 800e708:	69b9      	ldr	r1, [r7, #24]
 800e70a:	2000      	movs	r0, #0
 800e70c:	f7ff f8be 	bl	800d88c <tcp_recv_null>
 800e710:	4603      	mov	r3, r0
 800e712:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e714:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e718:	f113 0f0d 	cmn.w	r3, #13
 800e71c:	d054      	beq.n	800e7c8 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e71e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <tcp_input+0x6a2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e726:	4b2c      	ldr	r3, [pc, #176]	@ (800e7d8 <tcp_input+0x74c>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e72e:	4b2b      	ldr	r3, [pc, #172]	@ (800e7dc <tcp_input+0x750>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	f003 0320 	and.w	r3, r3, #32
 800e736:	2b00      	cmp	r3, #0
 800e738:	d031      	beq.n	800e79e <tcp_input+0x712>
          if (pcb->refused_data != NULL) {
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d009      	beq.n	800e756 <tcp_input+0x6ca>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e746:	7b5a      	ldrb	r2, [r3, #13]
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e74c:	f042 0220 	orr.w	r2, r2, #32
 800e750:	b2d2      	uxtb	r2, r2
 800e752:	735a      	strb	r2, [r3, #13]
 800e754:	e023      	b.n	800e79e <tcp_input+0x712>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e75a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e75e:	4293      	cmp	r3, r2
 800e760:	d005      	beq.n	800e76e <tcp_input+0x6e2>
              pcb->rcv_wnd++;
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e766:	3301      	adds	r3, #1
 800e768:	b29a      	uxth	r2, r3
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <tcp_input+0x704>
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	6918      	ldr	r0, [r3, #16]
 800e782:	2300      	movs	r3, #0
 800e784:	2200      	movs	r2, #0
 800e786:	69b9      	ldr	r1, [r7, #24]
 800e788:	47a0      	blx	r4
 800e78a:	4603      	mov	r3, r0
 800e78c:	74fb      	strb	r3, [r7, #19]
 800e78e:	e001      	b.n	800e794 <tcp_input+0x708>
 800e790:	2300      	movs	r3, #0
 800e792:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e798:	f113 0f0d 	cmn.w	r3, #13
 800e79c:	d016      	beq.n	800e7cc <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e79e:	4b13      	ldr	r3, [pc, #76]	@ (800e7ec <tcp_input+0x760>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e7a4:	69b8      	ldr	r0, [r7, #24]
 800e7a6:	f000 f88f 	bl	800e8c8 <tcp_input_delayed_close>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d127      	bne.n	800e800 <tcp_input+0x774>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e7b0:	69b8      	ldr	r0, [r7, #24]
 800e7b2:	f002 fbc9 	bl	8010f48 <tcp_output>
 800e7b6:	e024      	b.n	800e802 <tcp_input+0x776>
        goto aborted;
 800e7b8:	bf00      	nop
 800e7ba:	e022      	b.n	800e802 <tcp_input+0x776>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e7bc:	bf00      	nop
 800e7be:	e020      	b.n	800e802 <tcp_input+0x776>
              goto aborted;
 800e7c0:	bf00      	nop
 800e7c2:	e01e      	b.n	800e802 <tcp_input+0x776>
          goto aborted;
 800e7c4:	bf00      	nop
 800e7c6:	e01c      	b.n	800e802 <tcp_input+0x776>
            goto aborted;
 800e7c8:	bf00      	nop
 800e7ca:	e01a      	b.n	800e802 <tcp_input+0x776>
              goto aborted;
 800e7cc:	bf00      	nop
 800e7ce:	e018      	b.n	800e802 <tcp_input+0x776>
 800e7d0:	20004aac 	.word	0x20004aac
 800e7d4:	20004ac0 	.word	0x20004ac0
 800e7d8:	20004ae0 	.word	0x20004ae0
 800e7dc:	20004add 	.word	0x20004add
 800e7e0:	20004ad8 	.word	0x20004ad8
 800e7e4:	20004adc 	.word	0x20004adc
 800e7e8:	20004ada 	.word	0x20004ada
 800e7ec:	2000d90c 	.word	0x2000d90c
 800e7f0:	2000d8f8 	.word	0x2000d8f8
 800e7f4:	0801a158 	.word	0x0801a158
 800e7f8:	0801a308 	.word	0x0801a308
 800e7fc:	0801a1a0 	.word	0x0801a1a0
          goto aborted;
 800e800:	bf00      	nop
    tcp_input_pcb = NULL;
 800e802:	4b28      	ldr	r3, [pc, #160]	@ (800e8a4 <tcp_input+0x818>)
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e808:	4b27      	ldr	r3, [pc, #156]	@ (800e8a8 <tcp_input+0x81c>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e80e:	4b27      	ldr	r3, [pc, #156]	@ (800e8ac <tcp_input+0x820>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d041      	beq.n	800e89a <tcp_input+0x80e>
      pbuf_free(inseg.p);
 800e816:	4b25      	ldr	r3, [pc, #148]	@ (800e8ac <tcp_input+0x820>)
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fd fbfe 	bl	800c01c <pbuf_free>
      inseg.p = NULL;
 800e820:	4b22      	ldr	r3, [pc, #136]	@ (800e8ac <tcp_input+0x820>)
 800e822:	2200      	movs	r2, #0
 800e824:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e826:	e038      	b.n	800e89a <tcp_input+0x80e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e828:	4b21      	ldr	r3, [pc, #132]	@ (800e8b0 <tcp_input+0x824>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7fb ffaf 	bl	800a794 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f003 0304 	and.w	r3, r3, #4
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d118      	bne.n	800e874 <tcp_input+0x7e8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e842:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b4 <tcp_input+0x828>)
 800e844:	6819      	ldr	r1, [r3, #0]
 800e846:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b8 <tcp_input+0x82c>)
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	461a      	mov	r2, r3
 800e84c:	4b1b      	ldr	r3, [pc, #108]	@ (800e8bc <tcp_input+0x830>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e852:	4b17      	ldr	r3, [pc, #92]	@ (800e8b0 <tcp_input+0x824>)
 800e854:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e856:	885b      	ldrh	r3, [r3, #2]
 800e858:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e85a:	4a15      	ldr	r2, [pc, #84]	@ (800e8b0 <tcp_input+0x824>)
 800e85c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e85e:	8812      	ldrh	r2, [r2, #0]
 800e860:	b292      	uxth	r2, r2
 800e862:	9202      	str	r2, [sp, #8]
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	4b16      	ldr	r3, [pc, #88]	@ (800e8c0 <tcp_input+0x834>)
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	4b16      	ldr	r3, [pc, #88]	@ (800e8c4 <tcp_input+0x838>)
 800e86c:	4602      	mov	r2, r0
 800e86e:	2000      	movs	r0, #0
 800e870:	f003 f94c 	bl	8011b0c <tcp_rst>
    pbuf_free(p);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7fd fbd1 	bl	800c01c <pbuf_free>
  return;
 800e87a:	e00e      	b.n	800e89a <tcp_input+0x80e>
    goto dropped;
 800e87c:	bf00      	nop
 800e87e:	e008      	b.n	800e892 <tcp_input+0x806>
    goto dropped;
 800e880:	bf00      	nop
 800e882:	e006      	b.n	800e892 <tcp_input+0x806>
      goto dropped;
 800e884:	bf00      	nop
 800e886:	e004      	b.n	800e892 <tcp_input+0x806>
    goto dropped;
 800e888:	bf00      	nop
 800e88a:	e002      	b.n	800e892 <tcp_input+0x806>
      goto dropped;
 800e88c:	bf00      	nop
 800e88e:	e000      	b.n	800e892 <tcp_input+0x806>
      goto dropped;
 800e890:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7fd fbc2 	bl	800c01c <pbuf_free>
 800e898:	e000      	b.n	800e89c <tcp_input+0x810>
  return;
 800e89a:	bf00      	nop
}
 800e89c:	3724      	adds	r7, #36	@ 0x24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd90      	pop	{r4, r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	2000d90c 	.word	0x2000d90c
 800e8a8:	20004ae0 	.word	0x20004ae0
 800e8ac:	20004aac 	.word	0x20004aac
 800e8b0:	20004ac0 	.word	0x20004ac0
 800e8b4:	20004ad4 	.word	0x20004ad4
 800e8b8:	20004ada 	.word	0x20004ada
 800e8bc:	20004ad0 	.word	0x20004ad0
 800e8c0:	200054fc 	.word	0x200054fc
 800e8c4:	20005500 	.word	0x20005500

0800e8c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_input_delayed_close+0x1c>
 800e8d6:	4b17      	ldr	r3, [pc, #92]	@ (800e934 <tcp_input_delayed_close+0x6c>)
 800e8d8:	f240 225a 	movw	r2, #602	@ 0x25a
 800e8dc:	4916      	ldr	r1, [pc, #88]	@ (800e938 <tcp_input_delayed_close+0x70>)
 800e8de:	4817      	ldr	r0, [pc, #92]	@ (800e93c <tcp_input_delayed_close+0x74>)
 800e8e0:	f7f2 f9d8 	bl	8000c94 <printf>

  if (recv_flags & TF_CLOSED) {
 800e8e4:	4b16      	ldr	r3, [pc, #88]	@ (800e940 <tcp_input_delayed_close+0x78>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f003 0310 	and.w	r3, r3, #16
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d01c      	beq.n	800e92a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	8b5b      	ldrh	r3, [r3, #26]
 800e8f4:	f003 0310 	and.w	r3, r3, #16
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10d      	bne.n	800e918 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e902:	2b00      	cmp	r3, #0
 800e904:	d008      	beq.n	800e918 <tcp_input_delayed_close+0x50>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	6912      	ldr	r2, [r2, #16]
 800e910:	f06f 010e 	mvn.w	r1, #14
 800e914:	4610      	mov	r0, r2
 800e916:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	480a      	ldr	r0, [pc, #40]	@ (800e944 <tcp_input_delayed_close+0x7c>)
 800e91c:	f7ff fa60 	bl	800dde0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7fd fe57 	bl	800c5d4 <tcp_free>
    return 1;
 800e926:	2301      	movs	r3, #1
 800e928:	e000      	b.n	800e92c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	0801a158 	.word	0x0801a158
 800e938:	0801a324 	.word	0x0801a324
 800e93c:	0801a1a0 	.word	0x0801a1a0
 800e940:	20004add 	.word	0x20004add
 800e944:	2000d8f8 	.word	0x2000d8f8

0800e948 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e948:	b590      	push	{r4, r7, lr}
 800e94a:	b08b      	sub	sp, #44	@ 0x2c
 800e94c:	af04      	add	r7, sp, #16
 800e94e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e950:	4b6f      	ldr	r3, [pc, #444]	@ (800eb10 <tcp_listen_input+0x1c8>)
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f040 80d2 	bne.w	800eb02 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <tcp_listen_input+0x2a>
 800e964:	4b6b      	ldr	r3, [pc, #428]	@ (800eb14 <tcp_listen_input+0x1cc>)
 800e966:	f240 2281 	movw	r2, #641	@ 0x281
 800e96a:	496b      	ldr	r1, [pc, #428]	@ (800eb18 <tcp_listen_input+0x1d0>)
 800e96c:	486b      	ldr	r0, [pc, #428]	@ (800eb1c <tcp_listen_input+0x1d4>)
 800e96e:	f7f2 f991 	bl	8000c94 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e972:	4b67      	ldr	r3, [pc, #412]	@ (800eb10 <tcp_listen_input+0x1c8>)
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	f003 0310 	and.w	r3, r3, #16
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d019      	beq.n	800e9b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e97e:	4b68      	ldr	r3, [pc, #416]	@ (800eb20 <tcp_listen_input+0x1d8>)
 800e980:	6819      	ldr	r1, [r3, #0]
 800e982:	4b68      	ldr	r3, [pc, #416]	@ (800eb24 <tcp_listen_input+0x1dc>)
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	4b67      	ldr	r3, [pc, #412]	@ (800eb28 <tcp_listen_input+0x1e0>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e98e:	4b67      	ldr	r3, [pc, #412]	@ (800eb2c <tcp_listen_input+0x1e4>)
 800e990:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e992:	885b      	ldrh	r3, [r3, #2]
 800e994:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e996:	4a65      	ldr	r2, [pc, #404]	@ (800eb2c <tcp_listen_input+0x1e4>)
 800e998:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e99a:	8812      	ldrh	r2, [r2, #0]
 800e99c:	b292      	uxth	r2, r2
 800e99e:	9202      	str	r2, [sp, #8]
 800e9a0:	9301      	str	r3, [sp, #4]
 800e9a2:	4b63      	ldr	r3, [pc, #396]	@ (800eb30 <tcp_listen_input+0x1e8>)
 800e9a4:	9300      	str	r3, [sp, #0]
 800e9a6:	4b63      	ldr	r3, [pc, #396]	@ (800eb34 <tcp_listen_input+0x1ec>)
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f003 f8ae 	bl	8011b0c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e9b0:	e0a9      	b.n	800eb06 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e9b2:	4b57      	ldr	r3, [pc, #348]	@ (800eb10 <tcp_listen_input+0x1c8>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 0302 	and.w	r3, r3, #2
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 80a3 	beq.w	800eb06 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	7d5b      	ldrb	r3, [r3, #21]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7ff f87d 	bl	800dac4 <tcp_alloc>
 800e9ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d111      	bne.n	800e9f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	699b      	ldr	r3, [r3, #24]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00a      	beq.n	800e9f0 <tcp_listen_input+0xa8>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	6910      	ldr	r0, [r2, #16]
 800e9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	4798      	blx	r3
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	73bb      	strb	r3, [r7, #14]
      return;
 800e9ee:	e08b      	b.n	800eb08 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9f0:	23f0      	movs	r3, #240	@ 0xf0
 800e9f2:	73bb      	strb	r3, [r7, #14]
      return;
 800e9f4:	e088      	b.n	800eb08 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e9f6:	4b50      	ldr	r3, [pc, #320]	@ (800eb38 <tcp_listen_input+0x1f0>)
 800e9f8:	695a      	ldr	r2, [r3, #20]
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e9fe:	4b4e      	ldr	r3, [pc, #312]	@ (800eb38 <tcp_listen_input+0x1f0>)
 800ea00:	691a      	ldr	r2, [r3, #16]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	8ada      	ldrh	r2, [r3, #22]
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ea0e:	4b47      	ldr	r3, [pc, #284]	@ (800eb2c <tcp_listen_input+0x1e4>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2203      	movs	r2, #3
 800ea1e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ea20:	4b41      	ldr	r3, [pc, #260]	@ (800eb28 <tcp_listen_input+0x1e0>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	1c5a      	adds	r2, r3, #1
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ea32:	6978      	ldr	r0, [r7, #20]
 800ea34:	f7ff fa5a 	bl	800deec <tcp_next_iss>
 800ea38:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	693a      	ldr	r2, [r7, #16]
 800ea44:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	693a      	ldr	r2, [r7, #16]
 800ea4a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	693a      	ldr	r2, [r7, #16]
 800ea50:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea52:	4b35      	ldr	r3, [pc, #212]	@ (800eb28 <tcp_listen_input+0x1e0>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	1e5a      	subs	r2, r3, #1
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	691a      	ldr	r2, [r3, #16]
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7a5b      	ldrb	r3, [r3, #9]
 800ea6e:	f003 030c 	and.w	r3, r3, #12
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7a1a      	ldrb	r2, [r3, #8]
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea80:	4b2e      	ldr	r3, [pc, #184]	@ (800eb3c <tcp_listen_input+0x1f4>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	60da      	str	r2, [r3, #12]
 800ea88:	4a2c      	ldr	r2, [pc, #176]	@ (800eb3c <tcp_listen_input+0x1f4>)
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	f003 f9ff 	bl	8011e90 <tcp_timer_needed>
 800ea92:	4b2b      	ldr	r3, [pc, #172]	@ (800eb40 <tcp_listen_input+0x1f8>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ea98:	6978      	ldr	r0, [r7, #20]
 800ea9a:	f001 f9d5 	bl	800fe48 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ea9e:	4b23      	ldr	r3, [pc, #140]	@ (800eb2c <tcp_listen_input+0x1e4>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	89db      	ldrh	r3, [r3, #14]
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	3304      	adds	r3, #4
 800eac0:	4618      	mov	r0, r3
 800eac2:	f006 ffbb 	bl	8015a3c <ip4_route>
 800eac6:	4601      	mov	r1, r0
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	3304      	adds	r3, #4
 800eacc:	461a      	mov	r2, r3
 800eace:	4620      	mov	r0, r4
 800ead0:	f7ff fa32 	bl	800df38 <tcp_eff_send_mss_netif>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461a      	mov	r2, r3
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eadc:	2112      	movs	r1, #18
 800eade:	6978      	ldr	r0, [r7, #20]
 800eae0:	f002 f944 	bl	8010d6c <tcp_enqueue_flags>
 800eae4:	4603      	mov	r3, r0
 800eae6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d004      	beq.n	800eafa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	6978      	ldr	r0, [r7, #20]
 800eaf4:	f7fd ffe4 	bl	800cac0 <tcp_abandon>
      return;
 800eaf8:	e006      	b.n	800eb08 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eafa:	6978      	ldr	r0, [r7, #20]
 800eafc:	f002 fa24 	bl	8010f48 <tcp_output>
  return;
 800eb00:	e001      	b.n	800eb06 <tcp_listen_input+0x1be>
    return;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <tcp_listen_input+0x1c0>
  return;
 800eb06:	bf00      	nop
}
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd90      	pop	{r4, r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	20004adc 	.word	0x20004adc
 800eb14:	0801a158 	.word	0x0801a158
 800eb18:	0801a34c 	.word	0x0801a34c
 800eb1c:	0801a1a0 	.word	0x0801a1a0
 800eb20:	20004ad4 	.word	0x20004ad4
 800eb24:	20004ada 	.word	0x20004ada
 800eb28:	20004ad0 	.word	0x20004ad0
 800eb2c:	20004ac0 	.word	0x20004ac0
 800eb30:	200054fc 	.word	0x200054fc
 800eb34:	20005500 	.word	0x20005500
 800eb38:	200054ec 	.word	0x200054ec
 800eb3c:	2000d8f8 	.word	0x2000d8f8
 800eb40:	2000d8f4 	.word	0x2000d8f4

0800eb44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af04      	add	r7, sp, #16
 800eb4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb4c:	4b2f      	ldr	r3, [pc, #188]	@ (800ec0c <tcp_timewait_input+0xc8>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d153      	bne.n	800ec00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <tcp_timewait_input+0x28>
 800eb5e:	4b2c      	ldr	r3, [pc, #176]	@ (800ec10 <tcp_timewait_input+0xcc>)
 800eb60:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800eb64:	492b      	ldr	r1, [pc, #172]	@ (800ec14 <tcp_timewait_input+0xd0>)
 800eb66:	482c      	ldr	r0, [pc, #176]	@ (800ec18 <tcp_timewait_input+0xd4>)
 800eb68:	f7f2 f894 	bl	8000c94 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb6c:	4b27      	ldr	r3, [pc, #156]	@ (800ec0c <tcp_timewait_input+0xc8>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	f003 0302 	and.w	r3, r3, #2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d02a      	beq.n	800ebce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb78:	4b28      	ldr	r3, [pc, #160]	@ (800ec1c <tcp_timewait_input+0xd8>)
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	db2d      	blt.n	800ebe2 <tcp_timewait_input+0x9e>
 800eb86:	4b25      	ldr	r3, [pc, #148]	@ (800ec1c <tcp_timewait_input+0xd8>)
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb8e:	6879      	ldr	r1, [r7, #4]
 800eb90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eb92:	440b      	add	r3, r1
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dc23      	bgt.n	800ebe2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb9a:	4b21      	ldr	r3, [pc, #132]	@ (800ec20 <tcp_timewait_input+0xdc>)
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	4b21      	ldr	r3, [pc, #132]	@ (800ec24 <tcp_timewait_input+0xe0>)
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	4b1d      	ldr	r3, [pc, #116]	@ (800ec1c <tcp_timewait_input+0xd8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ec28 <tcp_timewait_input+0xe4>)
 800ebac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebae:	885b      	ldrh	r3, [r3, #2]
 800ebb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ec28 <tcp_timewait_input+0xe4>)
 800ebb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb6:	8812      	ldrh	r2, [r2, #0]
 800ebb8:	b292      	uxth	r2, r2
 800ebba:	9202      	str	r2, [sp, #8]
 800ebbc:	9301      	str	r3, [sp, #4]
 800ebbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ec2c <tcp_timewait_input+0xe8>)
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec30 <tcp_timewait_input+0xec>)
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f002 ffa0 	bl	8011b0c <tcp_rst>
      return;
 800ebcc:	e01b      	b.n	800ec06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ebce:	4b0f      	ldr	r3, [pc, #60]	@ (800ec0c <tcp_timewait_input+0xc8>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d003      	beq.n	800ebe2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ebda:	4b16      	ldr	r3, [pc, #88]	@ (800ec34 <tcp_timewait_input+0xf0>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ebe2:	4b10      	ldr	r3, [pc, #64]	@ (800ec24 <tcp_timewait_input+0xe0>)
 800ebe4:	881b      	ldrh	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00c      	beq.n	800ec04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	8b5b      	ldrh	r3, [r3, #26]
 800ebee:	f043 0302 	orr.w	r3, r3, #2
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f002 f9a5 	bl	8010f48 <tcp_output>
  }
  return;
 800ebfe:	e001      	b.n	800ec04 <tcp_timewait_input+0xc0>
    return;
 800ec00:	bf00      	nop
 800ec02:	e000      	b.n	800ec06 <tcp_timewait_input+0xc2>
  return;
 800ec04:	bf00      	nop
}
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	20004adc 	.word	0x20004adc
 800ec10:	0801a158 	.word	0x0801a158
 800ec14:	0801a36c 	.word	0x0801a36c
 800ec18:	0801a1a0 	.word	0x0801a1a0
 800ec1c:	20004ad0 	.word	0x20004ad0
 800ec20:	20004ad4 	.word	0x20004ad4
 800ec24:	20004ada 	.word	0x20004ada
 800ec28:	20004ac0 	.word	0x20004ac0
 800ec2c:	200054fc 	.word	0x200054fc
 800ec30:	20005500 	.word	0x20005500
 800ec34:	2000d8fc 	.word	0x2000d8fc

0800ec38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ec38:	b590      	push	{r4, r7, lr}
 800ec3a:	b08d      	sub	sp, #52	@ 0x34
 800ec3c:	af04      	add	r7, sp, #16
 800ec3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d106      	bne.n	800ec5c <tcp_process+0x24>
 800ec4e:	4b9d      	ldr	r3, [pc, #628]	@ (800eec4 <tcp_process+0x28c>)
 800ec50:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ec54:	499c      	ldr	r1, [pc, #624]	@ (800eec8 <tcp_process+0x290>)
 800ec56:	489d      	ldr	r0, [pc, #628]	@ (800eecc <tcp_process+0x294>)
 800ec58:	f7f2 f81c 	bl	8000c94 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec5c:	4b9c      	ldr	r3, [pc, #624]	@ (800eed0 <tcp_process+0x298>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	f003 0304 	and.w	r3, r3, #4
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d04e      	beq.n	800ed06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	7d1b      	ldrb	r3, [r3, #20]
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d108      	bne.n	800ec82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec74:	4b97      	ldr	r3, [pc, #604]	@ (800eed4 <tcp_process+0x29c>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d123      	bne.n	800ecc4 <tcp_process+0x8c>
        acceptable = 1;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	77fb      	strb	r3, [r7, #31]
 800ec80:	e020      	b.n	800ecc4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec86:	4b94      	ldr	r3, [pc, #592]	@ (800eed8 <tcp_process+0x2a0>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d102      	bne.n	800ec94 <tcp_process+0x5c>
        acceptable = 1;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	77fb      	strb	r3, [r7, #31]
 800ec92:	e017      	b.n	800ecc4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec94:	4b90      	ldr	r3, [pc, #576]	@ (800eed8 <tcp_process+0x2a0>)
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	db10      	blt.n	800ecc4 <tcp_process+0x8c>
 800eca2:	4b8d      	ldr	r3, [pc, #564]	@ (800eed8 <tcp_process+0x2a0>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ecae:	440b      	add	r3, r1
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	dc06      	bgt.n	800ecc4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8b5b      	ldrh	r3, [r3, #26]
 800ecba:	f043 0302 	orr.w	r3, r3, #2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ecc4:	7ffb      	ldrb	r3, [r7, #31]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01b      	beq.n	800ed02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	7d1b      	ldrb	r3, [r3, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d106      	bne.n	800ece0 <tcp_process+0xa8>
 800ecd2:	4b7c      	ldr	r3, [pc, #496]	@ (800eec4 <tcp_process+0x28c>)
 800ecd4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ecd8:	4980      	ldr	r1, [pc, #512]	@ (800eedc <tcp_process+0x2a4>)
 800ecda:	487c      	ldr	r0, [pc, #496]	@ (800eecc <tcp_process+0x294>)
 800ecdc:	f7f1 ffda 	bl	8000c94 <printf>
      recv_flags |= TF_RESET;
 800ece0:	4b7f      	ldr	r3, [pc, #508]	@ (800eee0 <tcp_process+0x2a8>)
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	f043 0308 	orr.w	r3, r3, #8
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	4b7d      	ldr	r3, [pc, #500]	@ (800eee0 <tcp_process+0x2a8>)
 800ecec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	8b5b      	ldrh	r3, [r3, #26]
 800ecf2:	f023 0301 	bic.w	r3, r3, #1
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ecfc:	f06f 030d 	mvn.w	r3, #13
 800ed00:	e37a      	b.n	800f3f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	e378      	b.n	800f3f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ed06:	4b72      	ldr	r3, [pc, #456]	@ (800eed0 <tcp_process+0x298>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d010      	beq.n	800ed34 <tcp_process+0xfc>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	7d1b      	ldrb	r3, [r3, #20]
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	d00c      	beq.n	800ed34 <tcp_process+0xfc>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	7d1b      	ldrb	r3, [r3, #20]
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d008      	beq.n	800ed34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	8b5b      	ldrh	r3, [r3, #26]
 800ed26:	f043 0302 	orr.w	r3, r3, #2
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ed30:	2300      	movs	r3, #0
 800ed32:	e361      	b.n	800f3f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	8b5b      	ldrh	r3, [r3, #26]
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d103      	bne.n	800ed48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ed40:	4b68      	ldr	r3, [pc, #416]	@ (800eee4 <tcp_process+0x2ac>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f001 f875 	bl	800fe48 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7d1b      	ldrb	r3, [r3, #20]
 800ed62:	3b02      	subs	r3, #2
 800ed64:	2b07      	cmp	r3, #7
 800ed66:	f200 8337 	bhi.w	800f3d8 <tcp_process+0x7a0>
 800ed6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed70 <tcp_process+0x138>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed91 	.word	0x0800ed91
 800ed74:	0800efc1 	.word	0x0800efc1
 800ed78:	0800f139 	.word	0x0800f139
 800ed7c:	0800f163 	.word	0x0800f163
 800ed80:	0800f287 	.word	0x0800f287
 800ed84:	0800f139 	.word	0x0800f139
 800ed88:	0800f313 	.word	0x0800f313
 800ed8c:	0800f3a3 	.word	0x0800f3a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ed90:	4b4f      	ldr	r3, [pc, #316]	@ (800eed0 <tcp_process+0x298>)
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	f003 0310 	and.w	r3, r3, #16
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f000 80e4 	beq.w	800ef66 <tcp_process+0x32e>
 800ed9e:	4b4c      	ldr	r3, [pc, #304]	@ (800eed0 <tcp_process+0x298>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	f003 0302 	and.w	r3, r3, #2
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 80dd 	beq.w	800ef66 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edb0:	1c5a      	adds	r2, r3, #1
 800edb2:	4b48      	ldr	r3, [pc, #288]	@ (800eed4 <tcp_process+0x29c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	f040 80d5 	bne.w	800ef66 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800edbc:	4b46      	ldr	r3, [pc, #280]	@ (800eed8 <tcp_process+0x2a0>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	1c5a      	adds	r2, r3, #1
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800edce:	4b41      	ldr	r3, [pc, #260]	@ (800eed4 <tcp_process+0x29c>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800edd6:	4b44      	ldr	r3, [pc, #272]	@ (800eee8 <tcp_process+0x2b0>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	89db      	ldrh	r3, [r3, #14]
 800eddc:	b29a      	uxth	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800edf0:	4b39      	ldr	r3, [pc, #228]	@ (800eed8 <tcp_process+0x2a0>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	1e5a      	subs	r2, r3, #1
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2204      	movs	r2, #4
 800edfe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	3304      	adds	r3, #4
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f006 fe17 	bl	8015a3c <ip4_route>
 800ee0e:	4601      	mov	r1, r0
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	3304      	adds	r3, #4
 800ee14:	461a      	mov	r2, r3
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff f88e 	bl	800df38 <tcp_eff_send_mss_netif>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	461a      	mov	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee28:	009a      	lsls	r2, r3, #2
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ee34:	428b      	cmp	r3, r1
 800ee36:	bf38      	it	cc
 800ee38:	460b      	movcc	r3, r1
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d204      	bcs.n	800ee48 <tcp_process+0x210>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	e00d      	b.n	800ee64 <tcp_process+0x22c>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d904      	bls.n	800ee60 <tcp_process+0x228>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	e001      	b.n	800ee64 <tcp_process+0x22c>
 800ee60:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d106      	bne.n	800ee82 <tcp_process+0x24a>
 800ee74:	4b13      	ldr	r3, [pc, #76]	@ (800eec4 <tcp_process+0x28c>)
 800ee76:	f240 326d 	movw	r2, #877	@ 0x36d
 800ee7a:	491c      	ldr	r1, [pc, #112]	@ (800eeec <tcp_process+0x2b4>)
 800ee7c:	4813      	ldr	r0, [pc, #76]	@ (800eecc <tcp_process+0x294>)
 800ee7e:	f7f1 ff09 	bl	8000c94 <printf>
        --pcb->snd_queuelen;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee96:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d12a      	bne.n	800eef4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eea2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <tcp_process+0x280>
 800eeaa:	4b06      	ldr	r3, [pc, #24]	@ (800eec4 <tcp_process+0x28c>)
 800eeac:	f240 3275 	movw	r2, #885	@ 0x375
 800eeb0:	490f      	ldr	r1, [pc, #60]	@ (800eef0 <tcp_process+0x2b8>)
 800eeb2:	4806      	ldr	r0, [pc, #24]	@ (800eecc <tcp_process+0x294>)
 800eeb4:	f7f1 feee 	bl	8000c94 <printf>
          pcb->unsent = rseg->next;
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eec0:	e01c      	b.n	800eefc <tcp_process+0x2c4>
 800eec2:	bf00      	nop
 800eec4:	0801a158 	.word	0x0801a158
 800eec8:	0801a38c 	.word	0x0801a38c
 800eecc:	0801a1a0 	.word	0x0801a1a0
 800eed0:	20004adc 	.word	0x20004adc
 800eed4:	20004ad4 	.word	0x20004ad4
 800eed8:	20004ad0 	.word	0x20004ad0
 800eedc:	0801a3a8 	.word	0x0801a3a8
 800eee0:	20004add 	.word	0x20004add
 800eee4:	2000d8fc 	.word	0x2000d8fc
 800eee8:	20004ac0 	.word	0x20004ac0
 800eeec:	0801a3c8 	.word	0x0801a3c8
 800eef0:	0801a3e0 	.word	0x0801a3e0
        } else {
          pcb->unacked = rseg->next;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800eefc:	6978      	ldr	r0, [r7, #20]
 800eefe:	f7fe fcac 	bl	800d85a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d104      	bne.n	800ef14 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef10:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ef12:	e006      	b.n	800ef22 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00a      	beq.n	800ef42 <tcp_process+0x30a>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	6910      	ldr	r0, [r2, #16]
 800ef36:	2200      	movs	r2, #0
 800ef38:	6879      	ldr	r1, [r7, #4]
 800ef3a:	4798      	blx	r3
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	77bb      	strb	r3, [r7, #30]
 800ef40:	e001      	b.n	800ef46 <tcp_process+0x30e>
 800ef42:	2300      	movs	r3, #0
 800ef44:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800ef46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ef4a:	f113 0f0d 	cmn.w	r3, #13
 800ef4e:	d102      	bne.n	800ef56 <tcp_process+0x31e>
          return ERR_ABRT;
 800ef50:	f06f 030c 	mvn.w	r3, #12
 800ef54:	e250      	b.n	800f3f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8b5b      	ldrh	r3, [r3, #26]
 800ef5a:	f043 0302 	orr.w	r3, r3, #2
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef64:	e23a      	b.n	800f3dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef66:	4b98      	ldr	r3, [pc, #608]	@ (800f1c8 <tcp_process+0x590>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	f003 0310 	and.w	r3, r3, #16
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 8234 	beq.w	800f3dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef74:	4b95      	ldr	r3, [pc, #596]	@ (800f1cc <tcp_process+0x594>)
 800ef76:	6819      	ldr	r1, [r3, #0]
 800ef78:	4b95      	ldr	r3, [pc, #596]	@ (800f1d0 <tcp_process+0x598>)
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	4b95      	ldr	r3, [pc, #596]	@ (800f1d4 <tcp_process+0x59c>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef84:	4b94      	ldr	r3, [pc, #592]	@ (800f1d8 <tcp_process+0x5a0>)
 800ef86:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef88:	885b      	ldrh	r3, [r3, #2]
 800ef8a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef8c:	4a92      	ldr	r2, [pc, #584]	@ (800f1d8 <tcp_process+0x5a0>)
 800ef8e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef90:	8812      	ldrh	r2, [r2, #0]
 800ef92:	b292      	uxth	r2, r2
 800ef94:	9202      	str	r2, [sp, #8]
 800ef96:	9301      	str	r3, [sp, #4]
 800ef98:	4b90      	ldr	r3, [pc, #576]	@ (800f1dc <tcp_process+0x5a4>)
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	4b90      	ldr	r3, [pc, #576]	@ (800f1e0 <tcp_process+0x5a8>)
 800ef9e:	4602      	mov	r2, r0
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f002 fdb3 	bl	8011b0c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800efac:	2b05      	cmp	r3, #5
 800efae:	f200 8215 	bhi.w	800f3dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f002 fb6f 	bl	801169c <tcp_rexmit_rto>
      break;
 800efbe:	e20d      	b.n	800f3dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800efc0:	4b81      	ldr	r3, [pc, #516]	@ (800f1c8 <tcp_process+0x590>)
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	f003 0310 	and.w	r3, r3, #16
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 80a1 	beq.w	800f110 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efce:	4b7f      	ldr	r3, [pc, #508]	@ (800f1cc <tcp_process+0x594>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	3b01      	subs	r3, #1
 800efda:	2b00      	cmp	r3, #0
 800efdc:	db7e      	blt.n	800f0dc <tcp_process+0x4a4>
 800efde:	4b7b      	ldr	r3, [pc, #492]	@ (800f1cc <tcp_process+0x594>)
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dc77      	bgt.n	800f0dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2204      	movs	r2, #4
 800eff0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d102      	bne.n	800f000 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800effa:	23fa      	movs	r3, #250	@ 0xfa
 800effc:	77bb      	strb	r3, [r7, #30]
 800effe:	e01d      	b.n	800f03c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <tcp_process+0x3e0>
 800f00a:	4b76      	ldr	r3, [pc, #472]	@ (800f1e4 <tcp_process+0x5ac>)
 800f00c:	f240 32a9 	movw	r2, #937	@ 0x3a9
 800f010:	4975      	ldr	r1, [pc, #468]	@ (800f1e8 <tcp_process+0x5b0>)
 800f012:	4876      	ldr	r0, [pc, #472]	@ (800f1ec <tcp_process+0x5b4>)
 800f014:	f7f1 fe3e 	bl	8000c94 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00a      	beq.n	800f038 <tcp_process+0x400>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	6910      	ldr	r0, [r2, #16]
 800f02c:	2200      	movs	r2, #0
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	4798      	blx	r3
 800f032:	4603      	mov	r3, r0
 800f034:	77bb      	strb	r3, [r7, #30]
 800f036:	e001      	b.n	800f03c <tcp_process+0x404>
 800f038:	23f0      	movs	r3, #240	@ 0xf0
 800f03a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800f03c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00a      	beq.n	800f05a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f044:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f048:	f113 0f0d 	cmn.w	r3, #13
 800f04c:	d002      	beq.n	800f054 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7fd fde6 	bl	800cc20 <tcp_abort>
            }
            return ERR_ABRT;
 800f054:	f06f 030c 	mvn.w	r3, #12
 800f058:	e1ce      	b.n	800f3f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 fa58 	bl	800f510 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f060:	4b63      	ldr	r3, [pc, #396]	@ (800f1f0 <tcp_process+0x5b8>)
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d005      	beq.n	800f074 <tcp_process+0x43c>
            recv_acked--;
 800f068:	4b61      	ldr	r3, [pc, #388]	@ (800f1f0 <tcp_process+0x5b8>)
 800f06a:	881b      	ldrh	r3, [r3, #0]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	b29a      	uxth	r2, r3
 800f070:	4b5f      	ldr	r3, [pc, #380]	@ (800f1f0 <tcp_process+0x5b8>)
 800f072:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f078:	009a      	lsls	r2, r3, #2
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f084:	428b      	cmp	r3, r1
 800f086:	bf38      	it	cc
 800f088:	460b      	movcc	r3, r1
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d204      	bcs.n	800f098 <tcp_process+0x460>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	b29b      	uxth	r3, r3
 800f096:	e00d      	b.n	800f0b4 <tcp_process+0x47c>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d904      	bls.n	800f0b0 <tcp_process+0x478>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	e001      	b.n	800f0b4 <tcp_process+0x47c>
 800f0b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f0ba:	4b4e      	ldr	r3, [pc, #312]	@ (800f1f4 <tcp_process+0x5bc>)
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	f003 0320 	and.w	r3, r3, #32
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d037      	beq.n	800f136 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ca:	f043 0302 	orr.w	r3, r3, #2
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2207      	movs	r2, #7
 800f0d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f0da:	e02c      	b.n	800f136 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0dc:	4b3b      	ldr	r3, [pc, #236]	@ (800f1cc <tcp_process+0x594>)
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d0 <tcp_process+0x598>)
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d4 <tcp_process+0x59c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0ec:	4b3a      	ldr	r3, [pc, #232]	@ (800f1d8 <tcp_process+0x5a0>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0f0:	885b      	ldrh	r3, [r3, #2]
 800f0f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0f4:	4a38      	ldr	r2, [pc, #224]	@ (800f1d8 <tcp_process+0x5a0>)
 800f0f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0f8:	8812      	ldrh	r2, [r2, #0]
 800f0fa:	b292      	uxth	r2, r2
 800f0fc:	9202      	str	r2, [sp, #8]
 800f0fe:	9301      	str	r3, [sp, #4]
 800f100:	4b36      	ldr	r3, [pc, #216]	@ (800f1dc <tcp_process+0x5a4>)
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	4b36      	ldr	r3, [pc, #216]	@ (800f1e0 <tcp_process+0x5a8>)
 800f106:	4602      	mov	r2, r0
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f002 fcff 	bl	8011b0c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f10e:	e167      	b.n	800f3e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f110:	4b2d      	ldr	r3, [pc, #180]	@ (800f1c8 <tcp_process+0x590>)
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	f003 0302 	and.w	r3, r3, #2
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 8161 	beq.w	800f3e0 <tcp_process+0x7a8>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f122:	1e5a      	subs	r2, r3, #1
 800f124:	4b2b      	ldr	r3, [pc, #172]	@ (800f1d4 <tcp_process+0x59c>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	429a      	cmp	r2, r3
 800f12a:	f040 8159 	bne.w	800f3e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f002 fad6 	bl	80116e0 <tcp_rexmit>
      break;
 800f134:	e154      	b.n	800f3e0 <tcp_process+0x7a8>
 800f136:	e153      	b.n	800f3e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f9e9 	bl	800f510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f13e:	4b2d      	ldr	r3, [pc, #180]	@ (800f1f4 <tcp_process+0x5bc>)
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	f003 0320 	and.w	r3, r3, #32
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 814c 	beq.w	800f3e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	8b5b      	ldrh	r3, [r3, #26]
 800f150:	f043 0302 	orr.w	r3, r3, #2
 800f154:	b29a      	uxth	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2207      	movs	r2, #7
 800f15e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f160:	e140      	b.n	800f3e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f9d4 	bl	800f510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f168:	4b22      	ldr	r3, [pc, #136]	@ (800f1f4 <tcp_process+0x5bc>)
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	f003 0320 	and.w	r3, r3, #32
 800f170:	2b00      	cmp	r3, #0
 800f172:	d071      	beq.n	800f258 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f174:	4b14      	ldr	r3, [pc, #80]	@ (800f1c8 <tcp_process+0x590>)
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	f003 0310 	and.w	r3, r3, #16
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d060      	beq.n	800f242 <tcp_process+0x60a>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f184:	4b11      	ldr	r3, [pc, #68]	@ (800f1cc <tcp_process+0x594>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d15a      	bne.n	800f242 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f190:	2b00      	cmp	r3, #0
 800f192:	d156      	bne.n	800f242 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f043 0302 	orr.w	r3, r3, #2
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7fe fdda 	bl	800dd5c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f1a8:	4b13      	ldr	r3, [pc, #76]	@ (800f1f8 <tcp_process+0x5c0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d105      	bne.n	800f1be <tcp_process+0x586>
 800f1b2:	4b11      	ldr	r3, [pc, #68]	@ (800f1f8 <tcp_process+0x5c0>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	4a0f      	ldr	r2, [pc, #60]	@ (800f1f8 <tcp_process+0x5c0>)
 800f1ba:	6013      	str	r3, [r2, #0]
 800f1bc:	e02e      	b.n	800f21c <tcp_process+0x5e4>
 800f1be:	4b0e      	ldr	r3, [pc, #56]	@ (800f1f8 <tcp_process+0x5c0>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	613b      	str	r3, [r7, #16]
 800f1c4:	e027      	b.n	800f216 <tcp_process+0x5de>
 800f1c6:	bf00      	nop
 800f1c8:	20004adc 	.word	0x20004adc
 800f1cc:	20004ad4 	.word	0x20004ad4
 800f1d0:	20004ada 	.word	0x20004ada
 800f1d4:	20004ad0 	.word	0x20004ad0
 800f1d8:	20004ac0 	.word	0x20004ac0
 800f1dc:	200054fc 	.word	0x200054fc
 800f1e0:	20005500 	.word	0x20005500
 800f1e4:	0801a158 	.word	0x0801a158
 800f1e8:	0801a3f4 	.word	0x0801a3f4
 800f1ec:	0801a1a0 	.word	0x0801a1a0
 800f1f0:	20004ad8 	.word	0x20004ad8
 800f1f4:	20004add 	.word	0x20004add
 800f1f8:	2000d8f8 	.word	0x2000d8f8
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	429a      	cmp	r2, r3
 800f204:	d104      	bne.n	800f210 <tcp_process+0x5d8>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	68da      	ldr	r2, [r3, #12]
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	60da      	str	r2, [r3, #12]
 800f20e:	e005      	b.n	800f21c <tcp_process+0x5e4>
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	613b      	str	r3, [r7, #16]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1ef      	bne.n	800f1fc <tcp_process+0x5c4>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	60da      	str	r2, [r3, #12]
 800f222:	4b77      	ldr	r3, [pc, #476]	@ (800f400 <tcp_process+0x7c8>)
 800f224:	2201      	movs	r2, #1
 800f226:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	220a      	movs	r2, #10
 800f22c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f22e:	4b75      	ldr	r3, [pc, #468]	@ (800f404 <tcp_process+0x7cc>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	60da      	str	r2, [r3, #12]
 800f236:	4a73      	ldr	r2, [pc, #460]	@ (800f404 <tcp_process+0x7cc>)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	f002 fe28 	bl	8011e90 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f240:	e0d2      	b.n	800f3e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8b5b      	ldrh	r3, [r3, #26]
 800f246:	f043 0302 	orr.w	r3, r3, #2
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2208      	movs	r2, #8
 800f254:	751a      	strb	r2, [r3, #20]
      break;
 800f256:	e0c7      	b.n	800f3e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f258:	4b6b      	ldr	r3, [pc, #428]	@ (800f408 <tcp_process+0x7d0>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	f003 0310 	and.w	r3, r3, #16
 800f260:	2b00      	cmp	r3, #0
 800f262:	f000 80c1 	beq.w	800f3e8 <tcp_process+0x7b0>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f26a:	4b68      	ldr	r3, [pc, #416]	@ (800f40c <tcp_process+0x7d4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	429a      	cmp	r2, r3
 800f270:	f040 80ba 	bne.w	800f3e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f040 80b5 	bne.w	800f3e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2206      	movs	r2, #6
 800f282:	751a      	strb	r2, [r3, #20]
      break;
 800f284:	e0b0      	b.n	800f3e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f942 	bl	800f510 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f28c:	4b60      	ldr	r3, [pc, #384]	@ (800f410 <tcp_process+0x7d8>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 0320 	and.w	r3, r3, #32
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 80a9 	beq.w	800f3ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f043 0302 	orr.w	r3, r3, #2
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7fe fd57 	bl	800dd5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2ae:	4b59      	ldr	r3, [pc, #356]	@ (800f414 <tcp_process+0x7dc>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d105      	bne.n	800f2c4 <tcp_process+0x68c>
 800f2b8:	4b56      	ldr	r3, [pc, #344]	@ (800f414 <tcp_process+0x7dc>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	4a55      	ldr	r2, [pc, #340]	@ (800f414 <tcp_process+0x7dc>)
 800f2c0:	6013      	str	r3, [r2, #0]
 800f2c2:	e013      	b.n	800f2ec <tcp_process+0x6b4>
 800f2c4:	4b53      	ldr	r3, [pc, #332]	@ (800f414 <tcp_process+0x7dc>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	60fb      	str	r3, [r7, #12]
 800f2ca:	e00c      	b.n	800f2e6 <tcp_process+0x6ae>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d104      	bne.n	800f2e0 <tcp_process+0x6a8>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68da      	ldr	r2, [r3, #12]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	60da      	str	r2, [r3, #12]
 800f2de:	e005      	b.n	800f2ec <tcp_process+0x6b4>
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	60fb      	str	r3, [r7, #12]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1ef      	bne.n	800f2cc <tcp_process+0x694>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	60da      	str	r2, [r3, #12]
 800f2f2:	4b43      	ldr	r3, [pc, #268]	@ (800f400 <tcp_process+0x7c8>)
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	220a      	movs	r2, #10
 800f2fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f2fe:	4b41      	ldr	r3, [pc, #260]	@ (800f404 <tcp_process+0x7cc>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	60da      	str	r2, [r3, #12]
 800f306:	4a3f      	ldr	r2, [pc, #252]	@ (800f404 <tcp_process+0x7cc>)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6013      	str	r3, [r2, #0]
 800f30c:	f002 fdc0 	bl	8011e90 <tcp_timer_needed>
      }
      break;
 800f310:	e06c      	b.n	800f3ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 f8fc 	bl	800f510 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f318:	4b3b      	ldr	r3, [pc, #236]	@ (800f408 <tcp_process+0x7d0>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	f003 0310 	and.w	r3, r3, #16
 800f320:	2b00      	cmp	r3, #0
 800f322:	d065      	beq.n	800f3f0 <tcp_process+0x7b8>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f328:	4b38      	ldr	r3, [pc, #224]	@ (800f40c <tcp_process+0x7d4>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d15f      	bne.n	800f3f0 <tcp_process+0x7b8>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f334:	2b00      	cmp	r3, #0
 800f336:	d15b      	bne.n	800f3f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7fe fd0f 	bl	800dd5c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f33e:	4b35      	ldr	r3, [pc, #212]	@ (800f414 <tcp_process+0x7dc>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	429a      	cmp	r2, r3
 800f346:	d105      	bne.n	800f354 <tcp_process+0x71c>
 800f348:	4b32      	ldr	r3, [pc, #200]	@ (800f414 <tcp_process+0x7dc>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	4a31      	ldr	r2, [pc, #196]	@ (800f414 <tcp_process+0x7dc>)
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	e013      	b.n	800f37c <tcp_process+0x744>
 800f354:	4b2f      	ldr	r3, [pc, #188]	@ (800f414 <tcp_process+0x7dc>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	61bb      	str	r3, [r7, #24]
 800f35a:	e00c      	b.n	800f376 <tcp_process+0x73e>
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	429a      	cmp	r2, r3
 800f364:	d104      	bne.n	800f370 <tcp_process+0x738>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	68da      	ldr	r2, [r3, #12]
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	60da      	str	r2, [r3, #12]
 800f36e:	e005      	b.n	800f37c <tcp_process+0x744>
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	61bb      	str	r3, [r7, #24]
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1ef      	bne.n	800f35c <tcp_process+0x724>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	60da      	str	r2, [r3, #12]
 800f382:	4b1f      	ldr	r3, [pc, #124]	@ (800f400 <tcp_process+0x7c8>)
 800f384:	2201      	movs	r2, #1
 800f386:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	220a      	movs	r2, #10
 800f38c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f38e:	4b1d      	ldr	r3, [pc, #116]	@ (800f404 <tcp_process+0x7cc>)
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60da      	str	r2, [r3, #12]
 800f396:	4a1b      	ldr	r2, [pc, #108]	@ (800f404 <tcp_process+0x7cc>)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	f002 fd78 	bl	8011e90 <tcp_timer_needed>
      }
      break;
 800f3a0:	e026      	b.n	800f3f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f8b4 	bl	800f510 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3a8:	4b17      	ldr	r3, [pc, #92]	@ (800f408 <tcp_process+0x7d0>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	f003 0310 	and.w	r3, r3, #16
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d01f      	beq.n	800f3f4 <tcp_process+0x7bc>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3b8:	4b14      	ldr	r3, [pc, #80]	@ (800f40c <tcp_process+0x7d4>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d119      	bne.n	800f3f4 <tcp_process+0x7bc>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d115      	bne.n	800f3f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f3c8:	4b11      	ldr	r3, [pc, #68]	@ (800f410 <tcp_process+0x7d8>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	f043 0310 	orr.w	r3, r3, #16
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f410 <tcp_process+0x7d8>)
 800f3d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f3d6:	e00d      	b.n	800f3f4 <tcp_process+0x7bc>
    default:
      break;
 800f3d8:	bf00      	nop
 800f3da:	e00c      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3dc:	bf00      	nop
 800f3de:	e00a      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3e0:	bf00      	nop
 800f3e2:	e008      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3e4:	bf00      	nop
 800f3e6:	e006      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3e8:	bf00      	nop
 800f3ea:	e004      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3ec:	bf00      	nop
 800f3ee:	e002      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e000      	b.n	800f3f6 <tcp_process+0x7be>
      break;
 800f3f4:	bf00      	nop
  }
  return ERR_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3724      	adds	r7, #36	@ 0x24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd90      	pop	{r4, r7, pc}
 800f400:	2000d8f4 	.word	0x2000d8f4
 800f404:	2000d908 	.word	0x2000d908
 800f408:	20004adc 	.word	0x20004adc
 800f40c:	20004ad4 	.word	0x20004ad4
 800f410:	20004add 	.word	0x20004add
 800f414:	2000d8f8 	.word	0x2000d8f8

0800f418 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f418:	b5b0      	push	{r4, r5, r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
 800f424:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f426:	e03e      	b.n	800f4a6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	4618      	mov	r0, r3
 800f438:	f7fc fe78 	bl	800c12c <pbuf_clen>
 800f43c:	4603      	mov	r3, r0
 800f43e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f446:	8a7a      	ldrh	r2, [r7, #18]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d906      	bls.n	800f45a <tcp_free_acked_segments+0x42>
 800f44c:	4b2a      	ldr	r3, [pc, #168]	@ (800f4f8 <tcp_free_acked_segments+0xe0>)
 800f44e:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800f452:	492a      	ldr	r1, [pc, #168]	@ (800f4fc <tcp_free_acked_segments+0xe4>)
 800f454:	482a      	ldr	r0, [pc, #168]	@ (800f500 <tcp_free_acked_segments+0xe8>)
 800f456:	f7f1 fc1d 	bl	8000c94 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f460:	8a7b      	ldrh	r3, [r7, #18]
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	b29a      	uxth	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	891a      	ldrh	r2, [r3, #8]
 800f470:	4b24      	ldr	r3, [pc, #144]	@ (800f504 <tcp_free_acked_segments+0xec>)
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	4413      	add	r3, r2
 800f476:	b29a      	uxth	r2, r3
 800f478:	4b22      	ldr	r3, [pc, #136]	@ (800f504 <tcp_free_acked_segments+0xec>)
 800f47a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f47c:	6978      	ldr	r0, [r7, #20]
 800f47e:	f7fe f9ec 	bl	800d85a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00c      	beq.n	800f4a6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d109      	bne.n	800f4a6 <tcp_free_acked_segments+0x8e>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <tcp_free_acked_segments+0x8e>
 800f498:	4b17      	ldr	r3, [pc, #92]	@ (800f4f8 <tcp_free_acked_segments+0xe0>)
 800f49a:	f240 4262 	movw	r2, #1122	@ 0x462
 800f49e:	491a      	ldr	r1, [pc, #104]	@ (800f508 <tcp_free_acked_segments+0xf0>)
 800f4a0:	4817      	ldr	r0, [pc, #92]	@ (800f500 <tcp_free_acked_segments+0xe8>)
 800f4a2:	f7f1 fbf7 	bl	8000c94 <printf>
  while (seg_list != NULL &&
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d020      	beq.n	800f4ee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fb f983 	bl	800a7be <lwip_htonl>
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	891b      	ldrh	r3, [r3, #8]
 800f4be:	461d      	mov	r5, r3
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	691b      	ldr	r3, [r3, #16]
 800f4c4:	899b      	ldrh	r3, [r3, #12]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fb f963 	bl	800a794 <lwip_htons>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	f003 0303 	and.w	r3, r3, #3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <tcp_free_acked_segments+0xc6>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e000      	b.n	800f4e0 <tcp_free_acked_segments+0xc8>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	442b      	add	r3, r5
 800f4e2:	18e2      	adds	r2, r4, r3
 800f4e4:	4b09      	ldr	r3, [pc, #36]	@ (800f50c <tcp_free_acked_segments+0xf4>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	dd9c      	ble.n	800f428 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f4ee:	68bb      	ldr	r3, [r7, #8]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f8:	0801a158 	.word	0x0801a158
 800f4fc:	0801a414 	.word	0x0801a414
 800f500:	0801a1a0 	.word	0x0801a1a0
 800f504:	20004ad8 	.word	0x20004ad8
 800f508:	0801a43c 	.word	0x0801a43c
 800f50c:	20004ad4 	.word	0x20004ad4

0800f510 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b08b      	sub	sp, #44	@ 0x2c
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f518:	2300      	movs	r3, #0
 800f51a:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d106      	bne.n	800f530 <tcp_receive+0x20>
 800f522:	4b91      	ldr	r3, [pc, #580]	@ (800f768 <tcp_receive+0x258>)
 800f524:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f528:	4990      	ldr	r1, [pc, #576]	@ (800f76c <tcp_receive+0x25c>)
 800f52a:	4891      	ldr	r0, [pc, #580]	@ (800f770 <tcp_receive+0x260>)
 800f52c:	f7f1 fbb2 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7d1b      	ldrb	r3, [r3, #20]
 800f534:	2b03      	cmp	r3, #3
 800f536:	d806      	bhi.n	800f546 <tcp_receive+0x36>
 800f538:	4b8b      	ldr	r3, [pc, #556]	@ (800f768 <tcp_receive+0x258>)
 800f53a:	f240 427d 	movw	r2, #1149	@ 0x47d
 800f53e:	498d      	ldr	r1, [pc, #564]	@ (800f774 <tcp_receive+0x264>)
 800f540:	488b      	ldr	r0, [pc, #556]	@ (800f770 <tcp_receive+0x260>)
 800f542:	f7f1 fba7 	bl	8000c94 <printf>

  if (flags & TCP_ACK) {
 800f546:	4b8c      	ldr	r3, [pc, #560]	@ (800f778 <tcp_receive+0x268>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 0310 	and.w	r3, r3, #16
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f000 8259 	beq.w	800fa06 <tcp_receive+0x4f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f55a:	461a      	mov	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f560:	4413      	add	r3, r2
 800f562:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f568:	4b84      	ldr	r3, [pc, #528]	@ (800f77c <tcp_receive+0x26c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	db1b      	blt.n	800f5aa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f576:	4b81      	ldr	r3, [pc, #516]	@ (800f77c <tcp_receive+0x26c>)
 800f578:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d106      	bne.n	800f58c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f582:	4b7f      	ldr	r3, [pc, #508]	@ (800f780 <tcp_receive+0x270>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	2b00      	cmp	r3, #0
 800f58a:	db0e      	blt.n	800f5aa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f590:	4b7b      	ldr	r3, [pc, #492]	@ (800f780 <tcp_receive+0x270>)
 800f592:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f594:	429a      	cmp	r2, r3
 800f596:	d125      	bne.n	800f5e4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f598:	4b7a      	ldr	r3, [pc, #488]	@ (800f784 <tcp_receive+0x274>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	89db      	ldrh	r3, [r3, #14]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d91c      	bls.n	800f5e4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f5aa:	4b76      	ldr	r3, [pc, #472]	@ (800f784 <tcp_receive+0x274>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	89db      	ldrh	r3, [r3, #14]
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d205      	bcs.n	800f5d4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f5d4:	4b69      	ldr	r3, [pc, #420]	@ (800f77c <tcp_receive+0x26c>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f5dc:	4b68      	ldr	r3, [pc, #416]	@ (800f780 <tcp_receive+0x270>)
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f5e4:	4b66      	ldr	r3, [pc, #408]	@ (800f780 <tcp_receive+0x270>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	dc58      	bgt.n	800f6a4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f5f2:	4b65      	ldr	r3, [pc, #404]	@ (800f788 <tcp_receive+0x278>)
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d14b      	bne.n	800f692 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f604:	4413      	add	r3, r2
 800f606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f608:	429a      	cmp	r2, r3
 800f60a:	d142      	bne.n	800f692 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f612:	2b00      	cmp	r3, #0
 800f614:	db3d      	blt.n	800f692 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f61a:	4b59      	ldr	r3, [pc, #356]	@ (800f780 <tcp_receive+0x270>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d137      	bne.n	800f692 <tcp_receive+0x182>
              found_dupack = 1;
 800f622:	2301      	movs	r3, #1
 800f624:	623b      	str	r3, [r7, #32]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f62c:	2bff      	cmp	r3, #255	@ 0xff
 800f62e:	d007      	beq.n	800f640 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f636:	3301      	adds	r3, #1
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f646:	2b03      	cmp	r3, #3
 800f648:	d91b      	bls.n	800f682 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f654:	4413      	add	r3, r2
 800f656:	b29a      	uxth	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f65e:	429a      	cmp	r2, r3
 800f660:	d30a      	bcc.n	800f678 <tcp_receive+0x168>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f66c:	4413      	add	r3, r2
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f676:	e004      	b.n	800f682 <tcp_receive+0x172>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f67e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d902      	bls.n	800f692 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f002 f893 	bl	80117b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f692:	6a3b      	ldr	r3, [r7, #32]
 800f694:	2b00      	cmp	r3, #0
 800f696:	f040 815f 	bne.w	800f958 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f6a2:	e159      	b.n	800f958 <tcp_receive+0x448>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6a4:	4b36      	ldr	r3, [pc, #216]	@ (800f780 <tcp_receive+0x270>)
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	f2c0 814c 	blt.w	800f94e <tcp_receive+0x43e>
 800f6b6:	4b32      	ldr	r3, [pc, #200]	@ (800f780 <tcp_receive+0x270>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6be:	1ad3      	subs	r3, r2, r3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f300 8144 	bgt.w	800f94e <tcp_receive+0x43e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8b5b      	ldrh	r3, [r3, #26]
 800f6ca:	f003 0304 	and.w	r3, r3, #4
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d010      	beq.n	800f6f4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	8b5b      	ldrh	r3, [r3, #26]
 800f6d6:	f023 0304 	bic.w	r3, r3, #4
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f702:	10db      	asrs	r3, r3, #3
 800f704:	b21b      	sxth	r3, r3
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4413      	add	r3, r2
 800f712:	b29b      	uxth	r3, r3
 800f714:	b21a      	sxth	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f71c:	4b18      	ldr	r3, [pc, #96]	@ (800f780 <tcp_receive+0x270>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	b29a      	uxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f726:	b29b      	uxth	r3, r3
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	82bb      	strh	r3, [r7, #20]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f734:	4b12      	ldr	r3, [pc, #72]	@ (800f780 <tcp_receive+0x270>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	7d1b      	ldrb	r3, [r3, #20]
 800f740:	2b03      	cmp	r3, #3
 800f742:	f240 8095 	bls.w	800f870 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f752:	429a      	cmp	r2, r3
 800f754:	d243      	bcs.n	800f7de <tcp_receive+0x2ce>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8b5b      	ldrh	r3, [r3, #26]
 800f75a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d014      	beq.n	800f78c <tcp_receive+0x27c>
 800f762:	2301      	movs	r3, #1
 800f764:	e013      	b.n	800f78e <tcp_receive+0x27e>
 800f766:	bf00      	nop
 800f768:	0801a158 	.word	0x0801a158
 800f76c:	0801a45c 	.word	0x0801a45c
 800f770:	0801a1a0 	.word	0x0801a1a0
 800f774:	0801a478 	.word	0x0801a478
 800f778:	20004adc 	.word	0x20004adc
 800f77c:	20004ad0 	.word	0x20004ad0
 800f780:	20004ad4 	.word	0x20004ad4
 800f784:	20004ac0 	.word	0x20004ac0
 800f788:	20004ada 	.word	0x20004ada
 800f78c:	2302      	movs	r3, #2
 800f78e:	74fb      	strb	r3, [r7, #19]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f790:	7cfb      	ldrb	r3, [r7, #19]
 800f792:	b29a      	uxth	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f798:	fb12 f303 	smulbb	r3, r2, r3
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	8aba      	ldrh	r2, [r7, #20]
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	bf28      	it	cs
 800f7a4:	4613      	movcs	r3, r2
 800f7a6:	823b      	strh	r3, [r7, #16]
          TCP_WND_INC(pcb->cwnd, increase);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f7ae:	8a3b      	ldrh	r3, [r7, #16]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d309      	bcc.n	800f7d2 <tcp_receive+0x2c2>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f7c4:	8a3b      	ldrh	r3, [r7, #16]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f7d0:	e04e      	b.n	800f870 <tcp_receive+0x360>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f7dc:	e048      	b.n	800f870 <tcp_receive+0x360>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f7e4:	8abb      	ldrh	r3, [r7, #20]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d309      	bcc.n	800f808 <tcp_receive+0x2f8>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f7fa:	8abb      	ldrh	r3, [r7, #20]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f806:	e004      	b.n	800f812 <tcp_receive+0x302>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f80e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f81e:	429a      	cmp	r2, r3
 800f820:	d326      	bcc.n	800f870 <tcp_receive+0x360>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	b29a      	uxth	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f842:	4413      	add	r3, r2
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d30a      	bcc.n	800f866 <tcp_receive+0x356>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f85a:	4413      	add	r3, r2
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f864:	e004      	b.n	800f870 <tcp_receive+0x360>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f86c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f878:	4a91      	ldr	r2, [pc, #580]	@ (800fac0 <tcp_receive+0x5b0>)
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7ff fdcc 	bl	800f418 <tcp_free_acked_segments>
 800f880:	4602      	mov	r2, r0
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f88e:	4a8d      	ldr	r2, [pc, #564]	@ (800fac4 <tcp_receive+0x5b4>)
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff fdc1 	bl	800f418 <tcp_free_acked_segments>
 800f896:	4602      	mov	r2, r0
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d104      	bne.n	800f8ae <tcp_receive+0x39e>
        pcb->rtime = -1;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f8aa:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f8ac:	e002      	b.n	800f8b4 <tcp_receive+0x3a4>
      } else {
        pcb->rtime = 0;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d103      	bne.n	800f8ca <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f8d0:	4b7d      	ldr	r3, [pc, #500]	@ (800fac8 <tcp_receive+0x5b8>)
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	8b5b      	ldrh	r3, [r3, #26]
 800f8e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d035      	beq.n	800f956 <tcp_receive+0x446>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d118      	bne.n	800f924 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00c      	beq.n	800f914 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f902:	691b      	ldr	r3, [r3, #16]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	f7fa ff59 	bl	800a7be <lwip_htonl>
 800f90c:	4603      	mov	r3, r0
 800f90e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f910:	2b00      	cmp	r3, #0
 800f912:	dc20      	bgt.n	800f956 <tcp_receive+0x446>
            tcp_clear_flags(pcb, TF_RTO);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	8b5b      	ldrh	r3, [r3, #26]
 800f918:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f922:	e018      	b.n	800f956 <tcp_receive+0x446>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	f7fa ff44 	bl	800a7be <lwip_htonl>
 800f936:	4603      	mov	r3, r0
 800f938:	1ae3      	subs	r3, r4, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dc0b      	bgt.n	800f956 <tcp_receive+0x446>
          tcp_clear_flags(pcb, TF_RTO);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8b5b      	ldrh	r3, [r3, #26]
 800f942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f946:	b29a      	uxth	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f94c:	e003      	b.n	800f956 <tcp_receive+0x446>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f002 f92e 	bl	8011bb0 <tcp_send_empty_ack>
 800f954:	e000      	b.n	800f958 <tcp_receive+0x448>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f956:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d052      	beq.n	800fa06 <tcp_receive+0x4f6>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f964:	4b59      	ldr	r3, [pc, #356]	@ (800facc <tcp_receive+0x5bc>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da4b      	bge.n	800fa06 <tcp_receive+0x4f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f96e:	4b58      	ldr	r3, [pc, #352]	@ (800fad0 <tcp_receive+0x5c0>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	b29a      	uxth	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f978:	b29b      	uxth	r3, r3
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f980:	8bfa      	ldrh	r2, [r7, #30]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f988:	10db      	asrs	r3, r3, #3
 800f98a:	b21b      	sxth	r3, r3
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	1ad3      	subs	r3, r2, r3
 800f990:	b29b      	uxth	r3, r3
 800f992:	83fb      	strh	r3, [r7, #30]
      pcb->sa = (s16_t)(pcb->sa + m);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	8bfb      	ldrh	r3, [r7, #30]
 800f99e:	4413      	add	r3, r2
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	b21a      	sxth	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f9a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	da03      	bge.n	800f9b8 <tcp_receive+0x4a8>
        m = (s16_t) - m;
 800f9b0:	8bfb      	ldrh	r3, [r7, #30]
 800f9b2:	425b      	negs	r3, r3
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	83fb      	strh	r3, [r7, #30]
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f9b8:	8bfa      	ldrh	r2, [r7, #30]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f9c0:	109b      	asrs	r3, r3, #2
 800f9c2:	b21b      	sxth	r3, r3
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	83fb      	strh	r3, [r7, #30]
      pcb->sv = (s16_t)(pcb->sv + m);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	8bfb      	ldrh	r3, [r7, #30]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	b21a      	sxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f9e6:	10db      	asrs	r3, r3, #3
 800f9e8:	b21b      	sxth	r3, r3
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	4413      	add	r3, r2
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	b21a      	sxth	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fa06:	4b33      	ldr	r3, [pc, #204]	@ (800fad4 <tcp_receive+0x5c4>)
 800fa08:	881b      	ldrh	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 81c6 	beq.w	800fd9c <tcp_receive+0x88c>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	7d1b      	ldrb	r3, [r3, #20]
 800fa14:	2b06      	cmp	r3, #6
 800fa16:	f200 81c1 	bhi.w	800fd9c <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa1e:	4b2e      	ldr	r3, [pc, #184]	@ (800fad8 <tcp_receive+0x5c8>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	3b01      	subs	r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f2c0 8086 	blt.w	800fb38 <tcp_receive+0x628>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa30:	4b28      	ldr	r3, [pc, #160]	@ (800fad4 <tcp_receive+0x5c4>)
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	4619      	mov	r1, r3
 800fa36:	4b28      	ldr	r3, [pc, #160]	@ (800fad8 <tcp_receive+0x5c8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	440b      	add	r3, r1
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	3301      	adds	r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	dc79      	bgt.n	800fb38 <tcp_receive+0x628>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fa44:	4b25      	ldr	r3, [pc, #148]	@ (800fadc <tcp_receive+0x5cc>)
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	61bb      	str	r3, [r7, #24]
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa4e:	4b22      	ldr	r3, [pc, #136]	@ (800fad8 <tcp_receive+0x5c8>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	60fb      	str	r3, [r7, #12]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fa56:	4b21      	ldr	r3, [pc, #132]	@ (800fadc <tcp_receive+0x5cc>)
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d106      	bne.n	800fa6c <tcp_receive+0x55c>
 800fa5e:	4b20      	ldr	r3, [pc, #128]	@ (800fae0 <tcp_receive+0x5d0>)
 800fa60:	f240 5295 	movw	r2, #1429	@ 0x595
 800fa64:	491f      	ldr	r1, [pc, #124]	@ (800fae4 <tcp_receive+0x5d4>)
 800fa66:	4820      	ldr	r0, [pc, #128]	@ (800fae8 <tcp_receive+0x5d8>)
 800fa68:	f7f1 f914 	bl	8000c94 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d906      	bls.n	800fa84 <tcp_receive+0x574>
 800fa76:	4b1a      	ldr	r3, [pc, #104]	@ (800fae0 <tcp_receive+0x5d0>)
 800fa78:	f240 5296 	movw	r2, #1430	@ 0x596
 800fa7c:	491b      	ldr	r1, [pc, #108]	@ (800faec <tcp_receive+0x5dc>)
 800fa7e:	481a      	ldr	r0, [pc, #104]	@ (800fae8 <tcp_receive+0x5d8>)
 800fa80:	f7f1 f908 	bl	8000c94 <printf>
      off = (u16_t)off32;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	82fb      	strh	r3, [r7, #22]
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fa88:	4b14      	ldr	r3, [pc, #80]	@ (800fadc <tcp_receive+0x5cc>)
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	891b      	ldrh	r3, [r3, #8]
 800fa8e:	8afa      	ldrh	r2, [r7, #22]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d906      	bls.n	800faa2 <tcp_receive+0x592>
 800fa94:	4b12      	ldr	r3, [pc, #72]	@ (800fae0 <tcp_receive+0x5d0>)
 800fa96:	f44f 62b3 	mov.w	r2, #1432	@ 0x598
 800fa9a:	4915      	ldr	r1, [pc, #84]	@ (800faf0 <tcp_receive+0x5e0>)
 800fa9c:	4812      	ldr	r0, [pc, #72]	@ (800fae8 <tcp_receive+0x5d8>)
 800fa9e:	f7f1 f8f9 	bl	8000c94 <printf>
      inseg.len -= off;
 800faa2:	4b0e      	ldr	r3, [pc, #56]	@ (800fadc <tcp_receive+0x5cc>)
 800faa4:	891a      	ldrh	r2, [r3, #8]
 800faa6:	8afb      	ldrh	r3, [r7, #22]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	b29a      	uxth	r2, r3
 800faac:	4b0b      	ldr	r3, [pc, #44]	@ (800fadc <tcp_receive+0x5cc>)
 800faae:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fab0:	4b0a      	ldr	r3, [pc, #40]	@ (800fadc <tcp_receive+0x5cc>)
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	891a      	ldrh	r2, [r3, #8]
 800fab6:	8afb      	ldrh	r3, [r7, #22]
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	817b      	strh	r3, [r7, #10]
      while (p->len < off) {
 800fabc:	e028      	b.n	800fb10 <tcp_receive+0x600>
 800fabe:	bf00      	nop
 800fac0:	0801a494 	.word	0x0801a494
 800fac4:	0801a49c 	.word	0x0801a49c
 800fac8:	20004ad8 	.word	0x20004ad8
 800facc:	20004ad4 	.word	0x20004ad4
 800fad0:	2000d8fc 	.word	0x2000d8fc
 800fad4:	20004ada 	.word	0x20004ada
 800fad8:	20004ad0 	.word	0x20004ad0
 800fadc:	20004aac 	.word	0x20004aac
 800fae0:	0801a158 	.word	0x0801a158
 800fae4:	0801a4a4 	.word	0x0801a4a4
 800fae8:	0801a1a0 	.word	0x0801a1a0
 800faec:	0801a4b4 	.word	0x0801a4b4
 800faf0:	0801a4c4 	.word	0x0801a4c4
        off -= p->len;
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	895b      	ldrh	r3, [r3, #10]
 800faf8:	8afa      	ldrh	r2, [r7, #22]
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	82fb      	strh	r3, [r7, #22]
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	897a      	ldrh	r2, [r7, #10]
 800fb02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	2200      	movs	r2, #0
 800fb08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	61bb      	str	r3, [r7, #24]
      while (p->len < off) {
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	895b      	ldrh	r3, [r3, #10]
 800fb14:	8afa      	ldrh	r2, [r7, #22]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d8ec      	bhi.n	800faf4 <tcp_receive+0x5e4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fb1a:	8afb      	ldrh	r3, [r7, #22]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	69b8      	ldr	r0, [r7, #24]
 800fb20:	f7fc f9fa 	bl	800bf18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb28:	4a93      	ldr	r2, [pc, #588]	@ (800fd78 <tcp_receive+0x868>)
 800fb2a:	6013      	str	r3, [r2, #0]
 800fb2c:	4b93      	ldr	r3, [pc, #588]	@ (800fd7c <tcp_receive+0x86c>)
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	4a91      	ldr	r2, [pc, #580]	@ (800fd78 <tcp_receive+0x868>)
 800fb32:	6812      	ldr	r2, [r2, #0]
 800fb34:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb36:	e00d      	b.n	800fb54 <tcp_receive+0x644>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fb38:	4b8f      	ldr	r3, [pc, #572]	@ (800fd78 <tcp_receive+0x868>)
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	da06      	bge.n	800fb54 <tcp_receive+0x644>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8b5b      	ldrh	r3, [r3, #26]
 800fb4a:	f043 0302 	orr.w	r3, r3, #2
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb54:	4b88      	ldr	r3, [pc, #544]	@ (800fd78 <tcp_receive+0x868>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5c:	1ad3      	subs	r3, r2, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f2c0 8105 	blt.w	800fd6e <tcp_receive+0x85e>
 800fb64:	4b84      	ldr	r3, [pc, #528]	@ (800fd78 <tcp_receive+0x868>)
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb6c:	6879      	ldr	r1, [r7, #4]
 800fb6e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb70:	440b      	add	r3, r1
 800fb72:	1ad3      	subs	r3, r2, r3
 800fb74:	3301      	adds	r3, #1
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f300 80f9 	bgt.w	800fd6e <tcp_receive+0x85e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb80:	4b7d      	ldr	r3, [pc, #500]	@ (800fd78 <tcp_receive+0x868>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	f040 80ee 	bne.w	800fd66 <tcp_receive+0x856>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fb8a:	4b7c      	ldr	r3, [pc, #496]	@ (800fd7c <tcp_receive+0x86c>)
 800fb8c:	891c      	ldrh	r4, [r3, #8]
 800fb8e:	4b7b      	ldr	r3, [pc, #492]	@ (800fd7c <tcp_receive+0x86c>)
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	899b      	ldrh	r3, [r3, #12]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fa fdfc 	bl	800a794 <lwip_htons>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	f003 0303 	and.w	r3, r3, #3
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d001      	beq.n	800fbac <tcp_receive+0x69c>
 800fba8:	2301      	movs	r3, #1
 800fbaa:	e000      	b.n	800fbae <tcp_receive+0x69e>
 800fbac:	2300      	movs	r3, #0
 800fbae:	4423      	add	r3, r4
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	4b73      	ldr	r3, [pc, #460]	@ (800fd80 <tcp_receive+0x870>)
 800fbb4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fbba:	4b71      	ldr	r3, [pc, #452]	@ (800fd80 <tcp_receive+0x870>)
 800fbbc:	881b      	ldrh	r3, [r3, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d274      	bcs.n	800fcac <tcp_receive+0x79c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fbc2:	4b6e      	ldr	r3, [pc, #440]	@ (800fd7c <tcp_receive+0x86c>)
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	899b      	ldrh	r3, [r3, #12]
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fa fde2 	bl	800a794 <lwip_htons>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	f003 0301 	and.w	r3, r3, #1
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d01e      	beq.n	800fc1a <tcp_receive+0x70a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fbdc:	4b67      	ldr	r3, [pc, #412]	@ (800fd7c <tcp_receive+0x86c>)
 800fbde:	691b      	ldr	r3, [r3, #16]
 800fbe0:	899b      	ldrh	r3, [r3, #12]
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	b21b      	sxth	r3, r3
 800fbe6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fbea:	b21c      	sxth	r4, r3
 800fbec:	4b63      	ldr	r3, [pc, #396]	@ (800fd7c <tcp_receive+0x86c>)
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	899b      	ldrh	r3, [r3, #12]
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fa fdcd 	bl	800a794 <lwip_htons>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fa fdc5 	bl	800a794 <lwip_htons>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	b21b      	sxth	r3, r3
 800fc0e:	4323      	orrs	r3, r4
 800fc10:	b21a      	sxth	r2, r3
 800fc12:	4b5a      	ldr	r3, [pc, #360]	@ (800fd7c <tcp_receive+0x86c>)
 800fc14:	691b      	ldr	r3, [r3, #16]
 800fc16:	b292      	uxth	r2, r2
 800fc18:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fc1e:	4b57      	ldr	r3, [pc, #348]	@ (800fd7c <tcp_receive+0x86c>)
 800fc20:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc22:	4b56      	ldr	r3, [pc, #344]	@ (800fd7c <tcp_receive+0x86c>)
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	899b      	ldrh	r3, [r3, #12]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fa fdb2 	bl	800a794 <lwip_htons>
 800fc30:	4603      	mov	r3, r0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f003 0302 	and.w	r3, r3, #2
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d005      	beq.n	800fc48 <tcp_receive+0x738>
            inseg.len -= 1;
 800fc3c:	4b4f      	ldr	r3, [pc, #316]	@ (800fd7c <tcp_receive+0x86c>)
 800fc3e:	891b      	ldrh	r3, [r3, #8]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	4b4d      	ldr	r3, [pc, #308]	@ (800fd7c <tcp_receive+0x86c>)
 800fc46:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fc48:	4b4c      	ldr	r3, [pc, #304]	@ (800fd7c <tcp_receive+0x86c>)
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	4a4b      	ldr	r2, [pc, #300]	@ (800fd7c <tcp_receive+0x86c>)
 800fc4e:	8912      	ldrh	r2, [r2, #8]
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fc f860 	bl	800bd18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fc58:	4b48      	ldr	r3, [pc, #288]	@ (800fd7c <tcp_receive+0x86c>)
 800fc5a:	891c      	ldrh	r4, [r3, #8]
 800fc5c:	4b47      	ldr	r3, [pc, #284]	@ (800fd7c <tcp_receive+0x86c>)
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	899b      	ldrh	r3, [r3, #12]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fa fd95 	bl	800a794 <lwip_htons>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	f003 0303 	and.w	r3, r3, #3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d001      	beq.n	800fc7a <tcp_receive+0x76a>
 800fc76:	2301      	movs	r3, #1
 800fc78:	e000      	b.n	800fc7c <tcp_receive+0x76c>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	4423      	add	r3, r4
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	4b3f      	ldr	r3, [pc, #252]	@ (800fd80 <tcp_receive+0x870>)
 800fc82:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fc84:	4b3e      	ldr	r3, [pc, #248]	@ (800fd80 <tcp_receive+0x870>)
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	461a      	mov	r2, r3
 800fc8a:	4b3b      	ldr	r3, [pc, #236]	@ (800fd78 <tcp_receive+0x868>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	441a      	add	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc94:	6879      	ldr	r1, [r7, #4]
 800fc96:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc98:	440b      	add	r3, r1
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d006      	beq.n	800fcac <tcp_receive+0x79c>
 800fc9e:	4b39      	ldr	r3, [pc, #228]	@ (800fd84 <tcp_receive+0x874>)
 800fca0:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800fca4:	4938      	ldr	r1, [pc, #224]	@ (800fd88 <tcp_receive+0x878>)
 800fca6:	4839      	ldr	r0, [pc, #228]	@ (800fd8c <tcp_receive+0x87c>)
 800fca8:	f7f0 fff4 	bl	8000c94 <printf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fcac:	4b34      	ldr	r3, [pc, #208]	@ (800fd80 <tcp_receive+0x870>)
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4b31      	ldr	r3, [pc, #196]	@ (800fd78 <tcp_receive+0x868>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	441a      	add	r2, r3
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fcc0:	4b2f      	ldr	r3, [pc, #188]	@ (800fd80 <tcp_receive+0x870>)
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d206      	bcs.n	800fcd6 <tcp_receive+0x7c6>
 800fcc8:	4b2e      	ldr	r3, [pc, #184]	@ (800fd84 <tcp_receive+0x874>)
 800fcca:	f44f 62c1 	mov.w	r2, #1544	@ 0x608
 800fcce:	4930      	ldr	r1, [pc, #192]	@ (800fd90 <tcp_receive+0x880>)
 800fcd0:	482e      	ldr	r0, [pc, #184]	@ (800fd8c <tcp_receive+0x87c>)
 800fcd2:	f7f0 ffdf 	bl	8000c94 <printf>
        pcb->rcv_wnd -= tcplen;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fcda:	4b29      	ldr	r3, [pc, #164]	@ (800fd80 <tcp_receive+0x870>)
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7fc ffa6 	bl	800cc38 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcec:	4b23      	ldr	r3, [pc, #140]	@ (800fd7c <tcp_receive+0x86c>)
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	891b      	ldrh	r3, [r3, #8]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d006      	beq.n	800fd04 <tcp_receive+0x7f4>
          recv_data = inseg.p;
 800fcf6:	4b21      	ldr	r3, [pc, #132]	@ (800fd7c <tcp_receive+0x86c>)
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	4a26      	ldr	r2, [pc, #152]	@ (800fd94 <tcp_receive+0x884>)
 800fcfc:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcfe:	4b1f      	ldr	r3, [pc, #124]	@ (800fd7c <tcp_receive+0x86c>)
 800fd00:	2200      	movs	r2, #0
 800fd02:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd04:	4b1d      	ldr	r3, [pc, #116]	@ (800fd7c <tcp_receive+0x86c>)
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	899b      	ldrh	r3, [r3, #12]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fa fd41 	bl	800a794 <lwip_htons>
 800fd12:	4603      	mov	r3, r0
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d006      	beq.n	800fd2c <tcp_receive+0x81c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd98 <tcp_receive+0x888>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	f043 0320 	orr.w	r3, r3, #32
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	4b1b      	ldr	r3, [pc, #108]	@ (800fd98 <tcp_receive+0x888>)
 800fd2a:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	8b5b      	ldrh	r3, [r3, #26]
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00e      	beq.n	800fd56 <tcp_receive+0x846>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	8b5b      	ldrh	r3, [r3, #26]
 800fd3c:	f023 0301 	bic.w	r3, r3, #1
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	835a      	strh	r2, [r3, #26]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	8b5b      	ldrh	r3, [r3, #26]
 800fd4a:	f043 0302 	orr.w	r3, r3, #2
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fd54:	e00f      	b.n	800fd76 <tcp_receive+0x866>
        tcp_ack(pcb);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f043 0301 	orr.w	r3, r3, #1
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fd64:	e007      	b.n	800fd76 <tcp_receive+0x866>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f001 ff22 	bl	8011bb0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd6c:	e003      	b.n	800fd76 <tcp_receive+0x866>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f001 ff1e 	bl	8011bb0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd74:	e02c      	b.n	800fdd0 <tcp_receive+0x8c0>
 800fd76:	e02b      	b.n	800fdd0 <tcp_receive+0x8c0>
 800fd78:	20004ad0 	.word	0x20004ad0
 800fd7c:	20004aac 	.word	0x20004aac
 800fd80:	20004ada 	.word	0x20004ada
 800fd84:	0801a158 	.word	0x0801a158
 800fd88:	0801a4d4 	.word	0x0801a4d4
 800fd8c:	0801a1a0 	.word	0x0801a1a0
 800fd90:	0801a50c 	.word	0x0801a50c
 800fd94:	20004ae0 	.word	0x20004ae0
 800fd98:	20004add 	.word	0x20004add
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd9c:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd8 <tcp_receive+0x8c8>)
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda4:	1ad3      	subs	r3, r2, r3
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	db0a      	blt.n	800fdc0 <tcp_receive+0x8b0>
 800fdaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fdd8 <tcp_receive+0x8c8>)
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb2:	6879      	ldr	r1, [r7, #4]
 800fdb4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fdb6:	440b      	add	r3, r1
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	3301      	adds	r3, #1
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	dd07      	ble.n	800fdd0 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	8b5b      	ldrh	r3, [r3, #26]
 800fdc4:	f043 0302 	orr.w	r3, r3, #2
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fdce:	e7ff      	b.n	800fdd0 <tcp_receive+0x8c0>
 800fdd0:	bf00      	nop
 800fdd2:	372c      	adds	r7, #44	@ 0x2c
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd90      	pop	{r4, r7, pc}
 800fdd8:	20004ad0 	.word	0x20004ad0

0800fddc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fde2:	4b15      	ldr	r3, [pc, #84]	@ (800fe38 <tcp_get_next_optbyte+0x5c>)
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	1c5a      	adds	r2, r3, #1
 800fde8:	b291      	uxth	r1, r2
 800fdea:	4a13      	ldr	r2, [pc, #76]	@ (800fe38 <tcp_get_next_optbyte+0x5c>)
 800fdec:	8011      	strh	r1, [r2, #0]
 800fdee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fdf0:	4b12      	ldr	r3, [pc, #72]	@ (800fe3c <tcp_get_next_optbyte+0x60>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <tcp_get_next_optbyte+0x26>
 800fdf8:	4b11      	ldr	r3, [pc, #68]	@ (800fe40 <tcp_get_next_optbyte+0x64>)
 800fdfa:	881b      	ldrh	r3, [r3, #0]
 800fdfc:	88fa      	ldrh	r2, [r7, #6]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d208      	bcs.n	800fe14 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fe02:	4b10      	ldr	r3, [pc, #64]	@ (800fe44 <tcp_get_next_optbyte+0x68>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	3314      	adds	r3, #20
 800fe08:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fe0a:	88fb      	ldrh	r3, [r7, #6]
 800fe0c:	683a      	ldr	r2, [r7, #0]
 800fe0e:	4413      	add	r3, r2
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	e00b      	b.n	800fe2c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fe14:	88fb      	ldrh	r3, [r7, #6]
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	4b09      	ldr	r3, [pc, #36]	@ (800fe40 <tcp_get_next_optbyte+0x64>)
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fe22:	4b06      	ldr	r3, [pc, #24]	@ (800fe3c <tcp_get_next_optbyte+0x60>)
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	797b      	ldrb	r3, [r7, #5]
 800fe28:	4413      	add	r3, r2
 800fe2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	20004acc 	.word	0x20004acc
 800fe3c:	20004ac8 	.word	0x20004ac8
 800fe40:	20004ac6 	.word	0x20004ac6
 800fe44:	20004ac0 	.word	0x20004ac0

0800fe48 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d106      	bne.n	800fe64 <tcp_parseopt+0x1c>
 800fe56:	4b33      	ldr	r3, [pc, #204]	@ (800ff24 <tcp_parseopt+0xdc>)
 800fe58:	f240 727e 	movw	r2, #1918	@ 0x77e
 800fe5c:	4932      	ldr	r1, [pc, #200]	@ (800ff28 <tcp_parseopt+0xe0>)
 800fe5e:	4833      	ldr	r0, [pc, #204]	@ (800ff2c <tcp_parseopt+0xe4>)
 800fe60:	f7f0 ff18 	bl	8000c94 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe64:	4b32      	ldr	r3, [pc, #200]	@ (800ff30 <tcp_parseopt+0xe8>)
 800fe66:	881b      	ldrh	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d057      	beq.n	800ff1c <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe6c:	4b31      	ldr	r3, [pc, #196]	@ (800ff34 <tcp_parseopt+0xec>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	801a      	strh	r2, [r3, #0]
 800fe72:	e047      	b.n	800ff04 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800fe74:	f7ff ffb2 	bl	800fddc <tcp_get_next_optbyte>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
 800fe7e:	2b02      	cmp	r3, #2
 800fe80:	d006      	beq.n	800fe90 <tcp_parseopt+0x48>
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	dc2b      	bgt.n	800fede <tcp_parseopt+0x96>
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d043      	beq.n	800ff12 <tcp_parseopt+0xca>
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d039      	beq.n	800ff02 <tcp_parseopt+0xba>
 800fe8e:	e026      	b.n	800fede <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe90:	f7ff ffa4 	bl	800fddc <tcp_get_next_optbyte>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b04      	cmp	r3, #4
 800fe98:	d13d      	bne.n	800ff16 <tcp_parseopt+0xce>
 800fe9a:	4b26      	ldr	r3, [pc, #152]	@ (800ff34 <tcp_parseopt+0xec>)
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	4a23      	ldr	r2, [pc, #140]	@ (800ff30 <tcp_parseopt+0xe8>)
 800fea2:	8812      	ldrh	r2, [r2, #0]
 800fea4:	4293      	cmp	r3, r2
 800fea6:	da36      	bge.n	800ff16 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fea8:	f7ff ff98 	bl	800fddc <tcp_get_next_optbyte>
 800feac:	4603      	mov	r3, r0
 800feae:	021b      	lsls	r3, r3, #8
 800feb0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800feb2:	f7ff ff93 	bl	800fddc <tcp_get_next_optbyte>
 800feb6:	4603      	mov	r3, r0
 800feb8:	461a      	mov	r2, r3
 800feba:	89bb      	ldrh	r3, [r7, #12]
 800febc:	4313      	orrs	r3, r2
 800febe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fec0:	89bb      	ldrh	r3, [r7, #12]
 800fec2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d804      	bhi.n	800fed4 <tcp_parseopt+0x8c>
 800feca:	89bb      	ldrh	r3, [r7, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <tcp_parseopt+0x8c>
 800fed0:	89ba      	ldrh	r2, [r7, #12]
 800fed2:	e001      	b.n	800fed8 <tcp_parseopt+0x90>
 800fed4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fedc:	e012      	b.n	800ff04 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fede:	f7ff ff7d 	bl	800fddc <tcp_get_next_optbyte>
 800fee2:	4603      	mov	r3, r0
 800fee4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fee6:	7afb      	ldrb	r3, [r7, #11]
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d916      	bls.n	800ff1a <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800feec:	7afb      	ldrb	r3, [r7, #11]
 800feee:	b29a      	uxth	r2, r3
 800fef0:	4b10      	ldr	r3, [pc, #64]	@ (800ff34 <tcp_parseopt+0xec>)
 800fef2:	881b      	ldrh	r3, [r3, #0]
 800fef4:	4413      	add	r3, r2
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	3b02      	subs	r3, #2
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	4b0d      	ldr	r3, [pc, #52]	@ (800ff34 <tcp_parseopt+0xec>)
 800fefe:	801a      	strh	r2, [r3, #0]
 800ff00:	e000      	b.n	800ff04 <tcp_parseopt+0xbc>
          break;
 800ff02:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff04:	4b0b      	ldr	r3, [pc, #44]	@ (800ff34 <tcp_parseopt+0xec>)
 800ff06:	881a      	ldrh	r2, [r3, #0]
 800ff08:	4b09      	ldr	r3, [pc, #36]	@ (800ff30 <tcp_parseopt+0xe8>)
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d3b1      	bcc.n	800fe74 <tcp_parseopt+0x2c>
 800ff10:	e004      	b.n	800ff1c <tcp_parseopt+0xd4>
          return;
 800ff12:	bf00      	nop
 800ff14:	e002      	b.n	800ff1c <tcp_parseopt+0xd4>
            return;
 800ff16:	bf00      	nop
 800ff18:	e000      	b.n	800ff1c <tcp_parseopt+0xd4>
            return;
 800ff1a:	bf00      	nop
      }
    }
  }
}
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	0801a158 	.word	0x0801a158
 800ff28:	0801a52c 	.word	0x0801a52c
 800ff2c:	0801a1a0 	.word	0x0801a1a0
 800ff30:	20004ac4 	.word	0x20004ac4
 800ff34:	20004acc 	.word	0x20004acc

0800ff38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ff3c:	4b05      	ldr	r3, [pc, #20]	@ (800ff54 <tcp_trigger_input_pcb_close+0x1c>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	f043 0310 	orr.w	r3, r3, #16
 800ff44:	b2da      	uxtb	r2, r3
 800ff46:	4b03      	ldr	r3, [pc, #12]	@ (800ff54 <tcp_trigger_input_pcb_close+0x1c>)
 800ff48:	701a      	strb	r2, [r3, #0]
}
 800ff4a:	bf00      	nop
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr
 800ff54:	20004add 	.word	0x20004add

0800ff58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00a      	beq.n	800ff80 <tcp_route+0x28>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	7a1b      	ldrb	r3, [r3, #8]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d006      	beq.n	800ff80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	7a1b      	ldrb	r3, [r3, #8]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fb fd20 	bl	800b9bc <netif_get_by_index>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	e003      	b.n	800ff88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f005 fd5b 	bl	8015a3c <ip4_route>
 800ff86:	4603      	mov	r3, r0
  }
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3710      	adds	r7, #16
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	60b9      	str	r1, [r7, #8]
 800ff9a:	603b      	str	r3, [r7, #0]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d105      	bne.n	800ffb2 <tcp_create_segment+0x22>
 800ffa6:	4b45      	ldr	r3, [pc, #276]	@ (80100bc <tcp_create_segment+0x12c>)
 800ffa8:	22a3      	movs	r2, #163	@ 0xa3
 800ffaa:	4945      	ldr	r1, [pc, #276]	@ (80100c0 <tcp_create_segment+0x130>)
 800ffac:	4845      	ldr	r0, [pc, #276]	@ (80100c4 <tcp_create_segment+0x134>)
 800ffae:	f7f0 fe71 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d105      	bne.n	800ffc4 <tcp_create_segment+0x34>
 800ffb8:	4b40      	ldr	r3, [pc, #256]	@ (80100bc <tcp_create_segment+0x12c>)
 800ffba:	22a4      	movs	r2, #164	@ 0xa4
 800ffbc:	4942      	ldr	r1, [pc, #264]	@ (80100c8 <tcp_create_segment+0x138>)
 800ffbe:	4841      	ldr	r0, [pc, #260]	@ (80100c4 <tcp_create_segment+0x134>)
 800ffc0:	f7f0 fe68 	bl	8000c94 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ffc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ffd2:	2003      	movs	r0, #3
 800ffd4:	f7fb f9e6 	bl	800b3a4 <memp_malloc>
 800ffd8:	6138      	str	r0, [r7, #16]
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d104      	bne.n	800ffea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ffe0:	68b8      	ldr	r0, [r7, #8]
 800ffe2:	f7fc f81b 	bl	800c01c <pbuf_free>
    return NULL;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	e063      	b.n	80100b2 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fff0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2200      	movs	r2, #0
 800fff6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	891a      	ldrh	r2, [r3, #8]
 8010002:	7dfb      	ldrb	r3, [r7, #23]
 8010004:	b29b      	uxth	r3, r3
 8010006:	429a      	cmp	r2, r3
 8010008:	d205      	bcs.n	8010016 <tcp_create_segment+0x86>
 801000a:	4b2c      	ldr	r3, [pc, #176]	@ (80100bc <tcp_create_segment+0x12c>)
 801000c:	22b0      	movs	r2, #176	@ 0xb0
 801000e:	492f      	ldr	r1, [pc, #188]	@ (80100cc <tcp_create_segment+0x13c>)
 8010010:	482c      	ldr	r0, [pc, #176]	@ (80100c4 <tcp_create_segment+0x134>)
 8010012:	f7f0 fe3f 	bl	8000c94 <printf>
  seg->len = p->tot_len - optlen;
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	891a      	ldrh	r2, [r3, #8]
 801001a:	7dfb      	ldrb	r3, [r7, #23]
 801001c:	b29b      	uxth	r3, r3
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	b29a      	uxth	r2, r3
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2200      	movs	r2, #0
 801002a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801002c:	2114      	movs	r1, #20
 801002e:	68b8      	ldr	r0, [r7, #8]
 8010030:	f7fb ff62 	bl	800bef8 <pbuf_add_header>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d004      	beq.n	8010044 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801003a:	6938      	ldr	r0, [r7, #16]
 801003c:	f7fd fc0d 	bl	800d85a <tcp_seg_free>
    return NULL;
 8010040:	2300      	movs	r3, #0
 8010042:	e036      	b.n	80100b2 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	685a      	ldr	r2, [r3, #4]
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	8ada      	ldrh	r2, [r3, #22]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	691c      	ldr	r4, [r3, #16]
 8010056:	4610      	mov	r0, r2
 8010058:	f7fa fb9c 	bl	800a794 <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	8b1a      	ldrh	r2, [r3, #24]
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	691c      	ldr	r4, [r3, #16]
 8010068:	4610      	mov	r0, r2
 801006a:	f7fa fb93 	bl	800a794 <lwip_htons>
 801006e:	4603      	mov	r3, r0
 8010070:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	691c      	ldr	r4, [r3, #16]
 8010076:	6838      	ldr	r0, [r7, #0]
 8010078:	f7fa fba1 	bl	800a7be <lwip_htonl>
 801007c:	4603      	mov	r3, r0
 801007e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010080:	7dfb      	ldrb	r3, [r7, #23]
 8010082:	089b      	lsrs	r3, r3, #2
 8010084:	b2db      	uxtb	r3, r3
 8010086:	3305      	adds	r3, #5
 8010088:	b29b      	uxth	r3, r3
 801008a:	031b      	lsls	r3, r3, #12
 801008c:	b29a      	uxth	r2, r3
 801008e:	79fb      	ldrb	r3, [r7, #7]
 8010090:	b29b      	uxth	r3, r3
 8010092:	4313      	orrs	r3, r2
 8010094:	b29a      	uxth	r2, r3
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	691c      	ldr	r4, [r3, #16]
 801009a:	4610      	mov	r0, r2
 801009c:	f7fa fb7a 	bl	800a794 <lwip_htons>
 80100a0:	4603      	mov	r3, r0
 80100a2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	2200      	movs	r2, #0
 80100aa:	749a      	strb	r2, [r3, #18]
 80100ac:	2200      	movs	r2, #0
 80100ae:	74da      	strb	r2, [r3, #19]
  return seg;
 80100b0:	693b      	ldr	r3, [r7, #16]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	371c      	adds	r7, #28
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd90      	pop	{r4, r7, pc}
 80100ba:	bf00      	nop
 80100bc:	0801a548 	.word	0x0801a548
 80100c0:	0801a578 	.word	0x0801a578
 80100c4:	0801a598 	.word	0x0801a598
 80100c8:	0801a5c0 	.word	0x0801a5c0
 80100cc:	0801a5e4 	.word	0x0801a5e4

080100d0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b086      	sub	sp, #24
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	607b      	str	r3, [r7, #4]
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
 80100dc:	460b      	mov	r3, r1
 80100de:	81bb      	strh	r3, [r7, #12]
 80100e0:	4613      	mov	r3, r2
 80100e2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80100e4:	89bb      	ldrh	r3, [r7, #12]
 80100e6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d105      	bne.n	80100fa <tcp_pbuf_prealloc+0x2a>
 80100ee:	4b30      	ldr	r3, [pc, #192]	@ (80101b0 <tcp_pbuf_prealloc+0xe0>)
 80100f0:	22e8      	movs	r2, #232	@ 0xe8
 80100f2:	4930      	ldr	r1, [pc, #192]	@ (80101b4 <tcp_pbuf_prealloc+0xe4>)
 80100f4:	4830      	ldr	r0, [pc, #192]	@ (80101b8 <tcp_pbuf_prealloc+0xe8>)
 80100f6:	f7f0 fdcd 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80100fa:	6a3b      	ldr	r3, [r7, #32]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d105      	bne.n	801010c <tcp_pbuf_prealloc+0x3c>
 8010100:	4b2b      	ldr	r3, [pc, #172]	@ (80101b0 <tcp_pbuf_prealloc+0xe0>)
 8010102:	22e9      	movs	r2, #233	@ 0xe9
 8010104:	492d      	ldr	r1, [pc, #180]	@ (80101bc <tcp_pbuf_prealloc+0xec>)
 8010106:	482c      	ldr	r0, [pc, #176]	@ (80101b8 <tcp_pbuf_prealloc+0xe8>)
 8010108:	f7f0 fdc4 	bl	8000c94 <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801010c:	89ba      	ldrh	r2, [r7, #12]
 801010e:	897b      	ldrh	r3, [r7, #10]
 8010110:	429a      	cmp	r2, r3
 8010112:	d221      	bcs.n	8010158 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010114:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010118:	f003 0302 	and.w	r3, r3, #2
 801011c:	2b00      	cmp	r3, #0
 801011e:	d111      	bne.n	8010144 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	8b5b      	ldrh	r3, [r3, #26]
 8010124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010128:	2b00      	cmp	r3, #0
 801012a:	d115      	bne.n	8010158 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801012c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010138:	2b00      	cmp	r3, #0
 801013a:	d103      	bne.n	8010144 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010140:	2b00      	cmp	r3, #0
 8010142:	d009      	beq.n	8010158 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010144:	89bb      	ldrh	r3, [r7, #12]
 8010146:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801014a:	f023 0203 	bic.w	r2, r3, #3
 801014e:	897b      	ldrh	r3, [r7, #10]
 8010150:	4293      	cmp	r3, r2
 8010152:	bf28      	it	cs
 8010154:	4613      	movcs	r3, r2
 8010156:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010158:	8af9      	ldrh	r1, [r7, #22]
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010160:	4618      	mov	r0, r3
 8010162:	f7fb fc7b 	bl	800ba5c <pbuf_alloc>
 8010166:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	e019      	b.n	80101a6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d006      	beq.n	8010188 <tcp_pbuf_prealloc+0xb8>
 801017a:	4b0d      	ldr	r3, [pc, #52]	@ (80101b0 <tcp_pbuf_prealloc+0xe0>)
 801017c:	f240 120b 	movw	r2, #267	@ 0x10b
 8010180:	490f      	ldr	r1, [pc, #60]	@ (80101c0 <tcp_pbuf_prealloc+0xf0>)
 8010182:	480d      	ldr	r0, [pc, #52]	@ (80101b8 <tcp_pbuf_prealloc+0xe8>)
 8010184:	f7f0 fd86 	bl	8000c94 <printf>
  *oversize = p->len - length;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	895a      	ldrh	r2, [r3, #10]
 801018c:	89bb      	ldrh	r3, [r7, #12]
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	b29a      	uxth	r2, r3
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	89ba      	ldrh	r2, [r7, #12]
 801019a:	811a      	strh	r2, [r3, #8]
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	891a      	ldrh	r2, [r3, #8]
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	815a      	strh	r2, [r3, #10]
  return p;
 80101a4:	693b      	ldr	r3, [r7, #16]
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	0801a548 	.word	0x0801a548
 80101b4:	0801a5fc 	.word	0x0801a5fc
 80101b8:	0801a598 	.word	0x0801a598
 80101bc:	0801a620 	.word	0x0801a620
 80101c0:	0801a640 	.word	0x0801a640

080101c4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d106      	bne.n	80101e4 <tcp_write_checks+0x20>
 80101d6:	4b33      	ldr	r3, [pc, #204]	@ (80102a4 <tcp_write_checks+0xe0>)
 80101d8:	f240 1233 	movw	r2, #307	@ 0x133
 80101dc:	4932      	ldr	r1, [pc, #200]	@ (80102a8 <tcp_write_checks+0xe4>)
 80101de:	4833      	ldr	r0, [pc, #204]	@ (80102ac <tcp_write_checks+0xe8>)
 80101e0:	f7f0 fd58 	bl	8000c94 <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	7d1b      	ldrb	r3, [r3, #20]
 80101e8:	2b04      	cmp	r3, #4
 80101ea:	d00e      	beq.n	801020a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80101f0:	2b07      	cmp	r3, #7
 80101f2:	d00a      	beq.n	801020a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	d006      	beq.n	801020a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010200:	2b03      	cmp	r3, #3
 8010202:	d002      	beq.n	801020a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010204:	f06f 030a 	mvn.w	r3, #10
 8010208:	e048      	b.n	801029c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801020a:	887b      	ldrh	r3, [r7, #2]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <tcp_write_checks+0x50>
    return ERR_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	e043      	b.n	801029c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801021a:	887a      	ldrh	r2, [r7, #2]
 801021c:	429a      	cmp	r2, r3
 801021e:	d909      	bls.n	8010234 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	8b5b      	ldrh	r3, [r3, #26]
 8010224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010228:	b29a      	uxth	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801022e:	f04f 33ff 	mov.w	r3, #4294967295
 8010232:	e033      	b.n	801029c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801023a:	2b07      	cmp	r3, #7
 801023c:	d909      	bls.n	8010252 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	8b5b      	ldrh	r3, [r3, #26]
 8010242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010246:	b29a      	uxth	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801024c:	f04f 33ff 	mov.w	r3, #4294967295
 8010250:	e024      	b.n	801029c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00f      	beq.n	801027c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010260:	2b00      	cmp	r3, #0
 8010262:	d11a      	bne.n	801029a <tcp_write_checks+0xd6>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010268:	2b00      	cmp	r3, #0
 801026a:	d116      	bne.n	801029a <tcp_write_checks+0xd6>
 801026c:	4b0d      	ldr	r3, [pc, #52]	@ (80102a4 <tcp_write_checks+0xe0>)
 801026e:	f240 1255 	movw	r2, #341	@ 0x155
 8010272:	490f      	ldr	r1, [pc, #60]	@ (80102b0 <tcp_write_checks+0xec>)
 8010274:	480d      	ldr	r0, [pc, #52]	@ (80102ac <tcp_write_checks+0xe8>)
 8010276:	f7f0 fd0d 	bl	8000c94 <printf>
 801027a:	e00e      	b.n	801029a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010280:	2b00      	cmp	r3, #0
 8010282:	d103      	bne.n	801028c <tcp_write_checks+0xc8>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010288:	2b00      	cmp	r3, #0
 801028a:	d006      	beq.n	801029a <tcp_write_checks+0xd6>
 801028c:	4b05      	ldr	r3, [pc, #20]	@ (80102a4 <tcp_write_checks+0xe0>)
 801028e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010292:	4908      	ldr	r1, [pc, #32]	@ (80102b4 <tcp_write_checks+0xf0>)
 8010294:	4805      	ldr	r0, [pc, #20]	@ (80102ac <tcp_write_checks+0xe8>)
 8010296:	f7f0 fcfd 	bl	8000c94 <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	0801a548 	.word	0x0801a548
 80102a8:	0801a654 	.word	0x0801a654
 80102ac:	0801a598 	.word	0x0801a598
 80102b0:	0801a674 	.word	0x0801a674
 80102b4:	0801a6b0 	.word	0x0801a6b0

080102b8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80102b8:	b590      	push	{r4, r7, lr}
 80102ba:	b09d      	sub	sp, #116	@ 0x74
 80102bc:	af04      	add	r7, sp, #16
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	4611      	mov	r1, r2
 80102c4:	461a      	mov	r2, r3
 80102c6:	460b      	mov	r3, r1
 80102c8:	80fb      	strh	r3, [r7, #6]
 80102ca:	4613      	mov	r3, r2
 80102cc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80102ce:	2300      	movs	r3, #0
 80102d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80102d6:	2300      	movs	r3, #0
 80102d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80102da:	2300      	movs	r3, #0
 80102dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80102de:	2300      	movs	r3, #0
 80102e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 80102e2:	2300      	movs	r3, #0
 80102e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80102e8:	2300      	movs	r3, #0
 80102ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80102fe:	2300      	movs	r3, #0
 8010300:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d105      	bne.n	8010316 <tcp_write+0x5e>
 801030a:	48a9      	ldr	r0, [pc, #676]	@ (80105b0 <tcp_write+0x2f8>)
 801030c:	f7f0 fcc2 	bl	8000c94 <printf>
 8010310:	f06f 030f 	mvn.w	r3, #15
 8010314:	e375      	b.n	8010a02 <tcp_write+0x74a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801031c:	085b      	lsrs	r3, r3, #1
 801031e:	b29a      	uxth	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010324:	4293      	cmp	r3, r2
 8010326:	bf28      	it	cs
 8010328:	4613      	movcs	r3, r2
 801032a:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 801032c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801032e:	2b00      	cmp	r3, #0
 8010330:	d102      	bne.n	8010338 <tcp_write+0x80>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010336:	e000      	b.n	801033a <tcp_write+0x82>
 8010338:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801033a:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d105      	bne.n	801034e <tcp_write+0x96>
 8010342:	489c      	ldr	r0, [pc, #624]	@ (80105b4 <tcp_write+0x2fc>)
 8010344:	f7f0 fca6 	bl	8000c94 <printf>
 8010348:	f06f 030f 	mvn.w	r3, #15
 801034c:	e359      	b.n	8010a02 <tcp_write+0x74a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801034e:	88fb      	ldrh	r3, [r7, #6]
 8010350:	4619      	mov	r1, r3
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff ff36 	bl	80101c4 <tcp_write_checks>
 8010358:	4603      	mov	r3, r0
 801035a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801035e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010362:	2b00      	cmp	r3, #0
 8010364:	d002      	beq.n	801036c <tcp_write+0xb4>
    return err;
 8010366:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801036a:	e34a      	b.n	8010a02 <tcp_write+0x74a>
  }
  queuelen = pcb->snd_queuelen;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010372:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010376:	2300      	movs	r3, #0
 8010378:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 8127 	beq.w	80105d4 <tcp_write+0x31c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801038a:	643b      	str	r3, [r7, #64]	@ 0x40
 801038c:	e002      	b.n	8010394 <tcp_write+0xdc>
         last_unsent = last_unsent->next);
 801038e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1f8      	bne.n	801038e <tcp_write+0xd6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801039c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801039e:	7b1b      	ldrb	r3, [r3, #12]
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	f003 0304 	and.w	r3, r3, #4
 80103a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80103aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80103ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103ae:	891b      	ldrh	r3, [r3, #8]
 80103b0:	4619      	mov	r1, r3
 80103b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103b4:	440b      	add	r3, r1
 80103b6:	429a      	cmp	r2, r3
 80103b8:	da06      	bge.n	80103c8 <tcp_write+0x110>
 80103ba:	4b7f      	ldr	r3, [pc, #508]	@ (80105b8 <tcp_write+0x300>)
 80103bc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80103c0:	497e      	ldr	r1, [pc, #504]	@ (80105bc <tcp_write+0x304>)
 80103c2:	487f      	ldr	r0, [pc, #508]	@ (80105c0 <tcp_write+0x308>)
 80103c4:	f7f0 fc66 	bl	8000c94 <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80103c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103ca:	891a      	ldrh	r2, [r3, #8]
 80103cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103ce:	4413      	add	r3, r2
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 80103e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103e2:	895b      	ldrh	r3, [r3, #10]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d006      	beq.n	80103f6 <tcp_write+0x13e>
 80103e8:	4b73      	ldr	r3, [pc, #460]	@ (80105b8 <tcp_write+0x300>)
 80103ea:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80103ee:	4975      	ldr	r1, [pc, #468]	@ (80105c4 <tcp_write+0x30c>)
 80103f0:	4873      	ldr	r0, [pc, #460]	@ (80105c0 <tcp_write+0x308>)
 80103f2:	f7f0 fc4f 	bl	8000c94 <printf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80103fc:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 80103fe:	8afb      	ldrh	r3, [r7, #22]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d02e      	beq.n	8010462 <tcp_write+0x1aa>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010404:	8afb      	ldrh	r3, [r7, #22]
 8010406:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801040a:	429a      	cmp	r2, r3
 801040c:	d206      	bcs.n	801041c <tcp_write+0x164>
 801040e:	4b6a      	ldr	r3, [pc, #424]	@ (80105b8 <tcp_write+0x300>)
 8010410:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010414:	496c      	ldr	r1, [pc, #432]	@ (80105c8 <tcp_write+0x310>)
 8010416:	486a      	ldr	r0, [pc, #424]	@ (80105c0 <tcp_write+0x308>)
 8010418:	f7f0 fc3c 	bl	8000c94 <printf>
      seg = last_unsent;
 801041c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801041e:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010420:	8afb      	ldrh	r3, [r7, #22]
 8010422:	88fa      	ldrh	r2, [r7, #6]
 8010424:	4293      	cmp	r3, r2
 8010426:	bf28      	it	cs
 8010428:	4613      	movcs	r3, r2
 801042a:	b29b      	uxth	r3, r3
 801042c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8010430:	4293      	cmp	r3, r2
 8010432:	bf28      	it	cs
 8010434:	4613      	movcs	r3, r2
 8010436:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 801043a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801043e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010442:	4413      	add	r3, r2
 8010444:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8010448:	8afa      	ldrh	r2, [r7, #22]
 801044a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	b29b      	uxth	r3, r3
 8010452:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8010454:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8010458:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010462:	8afb      	ldrh	r3, [r7, #22]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00b      	beq.n	8010480 <tcp_write+0x1c8>
 8010468:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801046c:	88fb      	ldrh	r3, [r7, #6]
 801046e:	429a      	cmp	r2, r3
 8010470:	d006      	beq.n	8010480 <tcp_write+0x1c8>
 8010472:	4b51      	ldr	r3, [pc, #324]	@ (80105b8 <tcp_write+0x300>)
 8010474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010478:	4954      	ldr	r1, [pc, #336]	@ (80105cc <tcp_write+0x314>)
 801047a:	4851      	ldr	r0, [pc, #324]	@ (80105c0 <tcp_write+0x308>)
 801047c:	f7f0 fc0a 	bl	8000c94 <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010480:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8010484:	88fb      	ldrh	r3, [r7, #6]
 8010486:	429a      	cmp	r2, r3
 8010488:	f080 8172 	bcs.w	8010770 <tcp_write+0x4b8>
 801048c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010490:	2b00      	cmp	r3, #0
 8010492:	f000 816d 	beq.w	8010770 <tcp_write+0x4b8>
 8010496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010498:	891b      	ldrh	r3, [r3, #8]
 801049a:	2b00      	cmp	r3, #0
 801049c:	f000 8168 	beq.w	8010770 <tcp_write+0x4b8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80104a0:	88fa      	ldrh	r2, [r7, #6]
 80104a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80104a6:	1ad2      	subs	r2, r2, r3
 80104a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80104ac:	4293      	cmp	r3, r2
 80104ae:	bfa8      	it	ge
 80104b0:	4613      	movge	r3, r2
 80104b2:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 80104b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104b6:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80104b8:	797b      	ldrb	r3, [r7, #5]
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d02b      	beq.n	801051a <tcp_write+0x262>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80104c2:	f107 0016 	add.w	r0, r7, #22
 80104c6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80104ca:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80104cc:	2301      	movs	r3, #1
 80104ce:	9302      	str	r3, [sp, #8]
 80104d0:	797b      	ldrb	r3, [r7, #5]
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	9300      	str	r3, [sp, #0]
 80104d8:	4603      	mov	r3, r0
 80104da:	2000      	movs	r0, #0
 80104dc:	f7ff fdf8 	bl	80100d0 <tcp_pbuf_prealloc>
 80104e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80104e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 825a 	beq.w	801099e <tcp_write+0x6e6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 80104ea:	8afb      	ldrh	r3, [r7, #22]
 80104ec:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80104f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f2:	6858      	ldr	r0, [r3, #4]
 80104f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80104f8:	68ba      	ldr	r2, [r7, #8]
 80104fa:	4413      	add	r3, r2
 80104fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80104fe:	4619      	mov	r1, r3
 8010500:	f007 f8f7 	bl	80176f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010504:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010506:	f7fb fe11 	bl	800c12c <pbuf_clen>
 801050a:	4603      	mov	r3, r0
 801050c:	461a      	mov	r2, r3
 801050e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010512:	4413      	add	r3, r2
 8010514:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8010518:	e042      	b.n	80105a0 <tcp_write+0x2e8>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801051a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010520:	e002      	b.n	8010528 <tcp_write+0x270>
 8010522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1f8      	bne.n	8010522 <tcp_write+0x26a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010532:	7b1b      	ldrb	r3, [r3, #12]
 8010534:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d116      	bne.n	801056a <tcp_write+0x2b2>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801053c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010542:	8952      	ldrh	r2, [r2, #10]
 8010544:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	429a      	cmp	r2, r3
 801054a:	d10e      	bne.n	801056a <tcp_write+0x2b2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801054c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010550:	2b00      	cmp	r3, #0
 8010552:	d006      	beq.n	8010562 <tcp_write+0x2aa>
 8010554:	4b18      	ldr	r3, [pc, #96]	@ (80105b8 <tcp_write+0x300>)
 8010556:	f240 2231 	movw	r2, #561	@ 0x231
 801055a:	491d      	ldr	r1, [pc, #116]	@ (80105d0 <tcp_write+0x318>)
 801055c:	4818      	ldr	r0, [pc, #96]	@ (80105c0 <tcp_write+0x308>)
 801055e:	f7f0 fb99 	bl	8000c94 <printf>
          extendlen = seglen;
 8010562:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010564:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8010568:	e01a      	b.n	80105a0 <tcp_write+0x2e8>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801056a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801056c:	2201      	movs	r2, #1
 801056e:	4619      	mov	r1, r3
 8010570:	2000      	movs	r0, #0
 8010572:	f7fb fa73 	bl	800ba5c <pbuf_alloc>
 8010576:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 8211 	beq.w	80109a2 <tcp_write+0x6ea>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010580:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	441a      	add	r2, r3
 8010588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801058a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801058c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801058e:	f7fb fdcd 	bl	800c12c <pbuf_clen>
 8010592:	4603      	mov	r3, r0
 8010594:	461a      	mov	r2, r3
 8010596:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801059a:	4413      	add	r3, r2
 801059c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80105a0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80105a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105a6:	4413      	add	r3, r2
 80105a8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80105ac:	e0e0      	b.n	8010770 <tcp_write+0x4b8>
 80105ae:	bf00      	nop
 80105b0:	0801a6e4 	.word	0x0801a6e4
 80105b4:	0801a6fc 	.word	0x0801a6fc
 80105b8:	0801a548 	.word	0x0801a548
 80105bc:	0801a730 	.word	0x0801a730
 80105c0:	0801a598 	.word	0x0801a598
 80105c4:	0801a748 	.word	0x0801a748
 80105c8:	0801a778 	.word	0x0801a778
 80105cc:	0801a798 	.word	0x0801a798
 80105d0:	0801a7b8 	.word	0x0801a7b8
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 80c8 	beq.w	8010770 <tcp_write+0x4b8>
 80105e0:	4b72      	ldr	r3, [pc, #456]	@ (80107ac <tcp_write+0x4f4>)
 80105e2:	f240 224a 	movw	r2, #586	@ 0x24a
 80105e6:	4972      	ldr	r1, [pc, #456]	@ (80107b0 <tcp_write+0x4f8>)
 80105e8:	4872      	ldr	r0, [pc, #456]	@ (80107b4 <tcp_write+0x4fc>)
 80105ea:	f7f0 fb53 	bl	8000c94 <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80105ee:	e0bf      	b.n	8010770 <tcp_write+0x4b8>
    struct pbuf *p;
    u16_t left = len - pos;
 80105f0:	88fa      	ldrh	r2, [r7, #6]
 80105f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 80105fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80105fe:	b29b      	uxth	r3, r3
 8010600:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010602:	1ad3      	subs	r3, r2, r3
 8010604:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010606:	8bfa      	ldrh	r2, [r7, #30]
 8010608:	8c3b      	ldrh	r3, [r7, #32]
 801060a:	4293      	cmp	r3, r2
 801060c:	bf28      	it	cs
 801060e:	4613      	movcs	r3, r2
 8010610:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010612:	797b      	ldrb	r3, [r7, #5]
 8010614:	f003 0301 	and.w	r3, r3, #1
 8010618:	2b00      	cmp	r3, #0
 801061a:	d036      	beq.n	801068a <tcp_write+0x3d2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801061c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010620:	b29a      	uxth	r2, r3
 8010622:	8bbb      	ldrh	r3, [r7, #28]
 8010624:	4413      	add	r3, r2
 8010626:	b299      	uxth	r1, r3
 8010628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801062a:	2b00      	cmp	r3, #0
 801062c:	bf0c      	ite	eq
 801062e:	2301      	moveq	r3, #1
 8010630:	2300      	movne	r3, #0
 8010632:	b2db      	uxtb	r3, r3
 8010634:	f107 0016 	add.w	r0, r7, #22
 8010638:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801063a:	9302      	str	r3, [sp, #8]
 801063c:	797b      	ldrb	r3, [r7, #5]
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	4603      	mov	r3, r0
 8010646:	2036      	movs	r0, #54	@ 0x36
 8010648:	f7ff fd42 	bl	80100d0 <tcp_pbuf_prealloc>
 801064c:	6378      	str	r0, [r7, #52]	@ 0x34
 801064e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 81a8 	beq.w	80109a6 <tcp_write+0x6ee>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010658:	895b      	ldrh	r3, [r3, #10]
 801065a:	8bba      	ldrh	r2, [r7, #28]
 801065c:	429a      	cmp	r2, r3
 801065e:	d906      	bls.n	801066e <tcp_write+0x3b6>
 8010660:	4b52      	ldr	r3, [pc, #328]	@ (80107ac <tcp_write+0x4f4>)
 8010662:	f240 2266 	movw	r2, #614	@ 0x266
 8010666:	4954      	ldr	r1, [pc, #336]	@ (80107b8 <tcp_write+0x500>)
 8010668:	4852      	ldr	r0, [pc, #328]	@ (80107b4 <tcp_write+0x4fc>)
 801066a:	f7f0 fb13 	bl	8000c94 <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801066e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010676:	18d0      	adds	r0, r2, r3
 8010678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801067c:	68ba      	ldr	r2, [r7, #8]
 801067e:	4413      	add	r3, r2
 8010680:	8bba      	ldrh	r2, [r7, #28]
 8010682:	4619      	mov	r1, r3
 8010684:	f007 f835 	bl	80176f2 <memcpy>
 8010688:	e02f      	b.n	80106ea <tcp_write+0x432>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801068a:	8afb      	ldrh	r3, [r7, #22]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d006      	beq.n	801069e <tcp_write+0x3e6>
 8010690:	4b46      	ldr	r3, [pc, #280]	@ (80107ac <tcp_write+0x4f4>)
 8010692:	f240 2271 	movw	r2, #625	@ 0x271
 8010696:	4949      	ldr	r1, [pc, #292]	@ (80107bc <tcp_write+0x504>)
 8010698:	4846      	ldr	r0, [pc, #280]	@ (80107b4 <tcp_write+0x4fc>)
 801069a:	f7f0 fafb 	bl	8000c94 <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801069e:	8bbb      	ldrh	r3, [r7, #28]
 80106a0:	2201      	movs	r2, #1
 80106a2:	4619      	mov	r1, r3
 80106a4:	2036      	movs	r0, #54	@ 0x36
 80106a6:	f7fb f9d9 	bl	800ba5c <pbuf_alloc>
 80106aa:	61b8      	str	r0, [r7, #24]
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 817b 	beq.w	80109aa <tcp_write+0x6f2>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80106b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	441a      	add	r2, r3
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80106c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80106ca:	4619      	mov	r1, r3
 80106cc:	2036      	movs	r0, #54	@ 0x36
 80106ce:	f7fb f9c5 	bl	800ba5c <pbuf_alloc>
 80106d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80106d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d103      	bne.n	80106e2 <tcp_write+0x42a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80106da:	69b8      	ldr	r0, [r7, #24]
 80106dc:	f7fb fc9e 	bl	800c01c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80106e0:	e166      	b.n	80109b0 <tcp_write+0x6f8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80106e2:	69b9      	ldr	r1, [r7, #24]
 80106e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80106e6:	f7fb fd5b 	bl	800c1a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80106ea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80106ec:	f7fb fd1e 	bl	800c12c <pbuf_clen>
 80106f0:	4603      	mov	r3, r0
 80106f2:	461a      	mov	r2, r3
 80106f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80106f8:	4413      	add	r3, r2
 80106fa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80106fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010702:	2b08      	cmp	r3, #8
 8010704:	d903      	bls.n	801070e <tcp_write+0x456>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010706:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010708:	f7fb fc88 	bl	800c01c <pbuf_free>
      goto memerr;
 801070c:	e150      	b.n	80109b0 <tcp_write+0x6f8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010712:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8010716:	441a      	add	r2, r3
 8010718:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	4613      	mov	r3, r2
 8010720:	2200      	movs	r2, #0
 8010722:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f7ff fc33 	bl	800ff90 <tcp_create_segment>
 801072a:	6578      	str	r0, [r7, #84]	@ 0x54
 801072c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 813d 	beq.w	80109ae <tcp_write+0x6f6>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8010734:	8afa      	ldrh	r2, [r7, #22]
 8010736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010738:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801073a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801073c:	2b00      	cmp	r3, #0
 801073e:	d102      	bne.n	8010746 <tcp_write+0x48e>
      queue = seg;
 8010740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010744:	e00c      	b.n	8010760 <tcp_write+0x4a8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <tcp_write+0x4a2>
 801074c:	4b17      	ldr	r3, [pc, #92]	@ (80107ac <tcp_write+0x4f4>)
 801074e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010752:	491b      	ldr	r1, [pc, #108]	@ (80107c0 <tcp_write+0x508>)
 8010754:	4817      	ldr	r0, [pc, #92]	@ (80107b4 <tcp_write+0x4fc>)
 8010756:	f7f0 fa9d 	bl	8000c94 <printf>
      prev_seg->next = seg;
 801075a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801075c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801075e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010762:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010764:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8010768:	8bbb      	ldrh	r3, [r7, #28]
 801076a:	4413      	add	r3, r2
 801076c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8010770:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8010774:	88fb      	ldrh	r3, [r7, #6]
 8010776:	429a      	cmp	r2, r3
 8010778:	f4ff af3a 	bcc.w	80105f0 <tcp_write+0x338>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801077c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00b      	beq.n	801079a <tcp_write+0x4e2>
 8010782:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010786:	2b00      	cmp	r3, #0
 8010788:	d007      	beq.n	801079a <tcp_write+0x4e2>
    last_unsent->oversize_left += oversize_add;
 801078a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801078c:	895a      	ldrh	r2, [r3, #10]
 801078e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010792:	4413      	add	r3, r2
 8010794:	b29a      	uxth	r2, r3
 8010796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010798:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801079a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d052      	beq.n	8010848 <tcp_write+0x590>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80107a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80107a8:	e02e      	b.n	8010808 <tcp_write+0x550>
 80107aa:	bf00      	nop
 80107ac:	0801a548 	.word	0x0801a548
 80107b0:	0801a7e4 	.word	0x0801a7e4
 80107b4:	0801a598 	.word	0x0801a598
 80107b8:	0801a814 	.word	0x0801a814
 80107bc:	0801a854 	.word	0x0801a854
 80107c0:	0801a864 	.word	0x0801a864
      p->tot_len += oversize_used;
 80107c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c6:	891a      	ldrh	r2, [r3, #8]
 80107c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107cc:	4413      	add	r3, r2
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80107d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d112      	bne.n	8010802 <tcp_write+0x54a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80107dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107e2:	8952      	ldrh	r2, [r2, #10]
 80107e4:	4413      	add	r3, r2
 80107e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f006 ff80 	bl	80176f2 <memcpy>
        p->len += oversize_used;
 80107f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f4:	895a      	ldrh	r2, [r3, #10]
 80107f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80107fa:	4413      	add	r3, r2
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010800:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	633b      	str	r3, [r7, #48]	@ 0x30
 8010808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1da      	bne.n	80107c4 <tcp_write+0x50c>
      }
    }
    last_unsent->len += oversize_used;
 801080e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010810:	891a      	ldrh	r2, [r3, #8]
 8010812:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010816:	4413      	add	r3, r2
 8010818:	b29a      	uxth	r2, r3
 801081a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801081c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801081e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010820:	895b      	ldrh	r3, [r3, #10]
 8010822:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010826:	429a      	cmp	r2, r3
 8010828:	d906      	bls.n	8010838 <tcp_write+0x580>
 801082a:	4b78      	ldr	r3, [pc, #480]	@ (8010a0c <tcp_write+0x754>)
 801082c:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8010830:	4977      	ldr	r1, [pc, #476]	@ (8010a10 <tcp_write+0x758>)
 8010832:	4878      	ldr	r0, [pc, #480]	@ (8010a14 <tcp_write+0x75c>)
 8010834:	f7f0 fa2e 	bl	8000c94 <printf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8010838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801083a:	895a      	ldrh	r2, [r3, #10]
 801083c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	b29a      	uxth	r2, r3
 8010844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010846:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010848:	8afa      	ldrh	r2, [r7, #22]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010852:	2b00      	cmp	r3, #0
 8010854:	d018      	beq.n	8010888 <tcp_write+0x5d0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010858:	2b00      	cmp	r3, #0
 801085a:	d106      	bne.n	801086a <tcp_write+0x5b2>
 801085c:	4b6b      	ldr	r3, [pc, #428]	@ (8010a0c <tcp_write+0x754>)
 801085e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010862:	496d      	ldr	r1, [pc, #436]	@ (8010a18 <tcp_write+0x760>)
 8010864:	486b      	ldr	r0, [pc, #428]	@ (8010a14 <tcp_write+0x75c>)
 8010866:	f7f0 fa15 	bl	8000c94 <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801086a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010870:	4618      	mov	r0, r3
 8010872:	f7fb fc95 	bl	800c1a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010878:	891a      	ldrh	r2, [r3, #8]
 801087a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801087c:	891b      	ldrh	r3, [r3, #8]
 801087e:	4413      	add	r3, r2
 8010880:	b29a      	uxth	r2, r3
 8010882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010884:	811a      	strh	r2, [r3, #8]
 8010886:	e03c      	b.n	8010902 <tcp_write+0x64a>
  } else if (extendlen > 0) {
 8010888:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801088c:	2b00      	cmp	r3, #0
 801088e:	d038      	beq.n	8010902 <tcp_write+0x64a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010892:	2b00      	cmp	r3, #0
 8010894:	d003      	beq.n	801089e <tcp_write+0x5e6>
 8010896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <tcp_write+0x5f4>
 801089e:	4b5b      	ldr	r3, [pc, #364]	@ (8010a0c <tcp_write+0x754>)
 80108a0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80108a4:	495d      	ldr	r1, [pc, #372]	@ (8010a1c <tcp_write+0x764>)
 80108a6:	485b      	ldr	r0, [pc, #364]	@ (8010a14 <tcp_write+0x75c>)
 80108a8:	f7f0 f9f4 	bl	8000c94 <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108b2:	e00a      	b.n	80108ca <tcp_write+0x612>
      p->tot_len += extendlen;
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	891a      	ldrh	r2, [r3, #8]
 80108b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80108bc:	4413      	add	r3, r2
 80108be:	b29a      	uxth	r2, r3
 80108c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80108c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1f0      	bne.n	80108b4 <tcp_write+0x5fc>
    }
    p->tot_len += extendlen;
 80108d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d4:	891a      	ldrh	r2, [r3, #8]
 80108d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80108da:	4413      	add	r3, r2
 80108dc:	b29a      	uxth	r2, r3
 80108de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	895a      	ldrh	r2, [r3, #10]
 80108e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80108ea:	4413      	add	r3, r2
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80108f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108f4:	891a      	ldrh	r2, [r3, #8]
 80108f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80108fa:	4413      	add	r3, r2
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010900:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010904:	2b00      	cmp	r3, #0
 8010906:	d103      	bne.n	8010910 <tcp_write+0x658>
    pcb->unsent = queue;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801090c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801090e:	e002      	b.n	8010916 <tcp_write+0x65e>
  } else {
    last_unsent->next = queue;
 8010910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010914:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801091a:	88fb      	ldrh	r3, [r7, #6]
 801091c:	441a      	add	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010928:	88fb      	ldrh	r3, [r7, #6]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	b29a      	uxth	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801093a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00e      	beq.n	8010966 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10a      	bne.n	8010966 <tcp_write+0x6ae>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010954:	2b00      	cmp	r3, #0
 8010956:	d106      	bne.n	8010966 <tcp_write+0x6ae>
 8010958:	4b2c      	ldr	r3, [pc, #176]	@ (8010a0c <tcp_write+0x754>)
 801095a:	f240 3212 	movw	r2, #786	@ 0x312
 801095e:	4930      	ldr	r1, [pc, #192]	@ (8010a20 <tcp_write+0x768>)
 8010960:	482c      	ldr	r0, [pc, #176]	@ (8010a14 <tcp_write+0x75c>)
 8010962:	f7f0 f997 	bl	8000c94 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010968:	2b00      	cmp	r3, #0
 801096a:	d016      	beq.n	801099a <tcp_write+0x6e2>
 801096c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d012      	beq.n	801099a <tcp_write+0x6e2>
 8010974:	797b      	ldrb	r3, [r7, #5]
 8010976:	f003 0302 	and.w	r3, r3, #2
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10d      	bne.n	801099a <tcp_write+0x6e2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801097e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	899b      	ldrh	r3, [r3, #12]
 8010984:	b29c      	uxth	r4, r3
 8010986:	2008      	movs	r0, #8
 8010988:	f7f9 ff04 	bl	800a794 <lwip_htons>
 801098c:	4603      	mov	r3, r0
 801098e:	461a      	mov	r2, r3
 8010990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	4322      	orrs	r2, r4
 8010996:	b292      	uxth	r2, r2
 8010998:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	e031      	b.n	8010a02 <tcp_write+0x74a>
          goto memerr;
 801099e:	bf00      	nop
 80109a0:	e006      	b.n	80109b0 <tcp_write+0x6f8>
            goto memerr;
 80109a2:	bf00      	nop
 80109a4:	e004      	b.n	80109b0 <tcp_write+0x6f8>
        goto memerr;
 80109a6:	bf00      	nop
 80109a8:	e002      	b.n	80109b0 <tcp_write+0x6f8>
        goto memerr;
 80109aa:	bf00      	nop
 80109ac:	e000      	b.n	80109b0 <tcp_write+0x6f8>
      goto memerr;
 80109ae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	8b5b      	ldrh	r3, [r3, #26]
 80109b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80109be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d002      	beq.n	80109ca <tcp_write+0x712>
    pbuf_free(concat_p);
 80109c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80109c6:	f7fb fb29 	bl	800c01c <pbuf_free>
  }
  if (queue != NULL) {
 80109ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <tcp_write+0x71e>
    tcp_segs_free(queue);
 80109d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109d2:	f7fc ff2d 	bl	800d830 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00e      	beq.n	80109fe <tcp_write+0x746>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10a      	bne.n	80109fe <tcp_write+0x746>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d106      	bne.n	80109fe <tcp_write+0x746>
 80109f0:	4b06      	ldr	r3, [pc, #24]	@ (8010a0c <tcp_write+0x754>)
 80109f2:	f240 3227 	movw	r2, #807	@ 0x327
 80109f6:	490a      	ldr	r1, [pc, #40]	@ (8010a20 <tcp_write+0x768>)
 80109f8:	4806      	ldr	r0, [pc, #24]	@ (8010a14 <tcp_write+0x75c>)
 80109fa:	f7f0 f94b 	bl	8000c94 <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80109fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3764      	adds	r7, #100	@ 0x64
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	0801a548 	.word	0x0801a548
 8010a10:	0801a878 	.word	0x0801a878
 8010a14:	0801a598 	.word	0x0801a598
 8010a18:	0801a8a4 	.word	0x0801a8a4
 8010a1c:	0801a8dc 	.word	0x0801a8dc
 8010a20:	0801a914 	.word	0x0801a914

08010a24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010a24:	b590      	push	{r4, r7, lr}
 8010a26:	b08d      	sub	sp, #52	@ 0x34
 8010a28:	af02      	add	r7, sp, #8
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
 8010a34:	2300      	movs	r3, #0
 8010a36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	623b      	str	r3, [r7, #32]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d106      	bne.n	8010a50 <tcp_split_unsent_seg+0x2c>
 8010a42:	4b9b      	ldr	r3, [pc, #620]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010a44:	f240 324b 	movw	r2, #843	@ 0x34b
 8010a48:	499a      	ldr	r1, [pc, #616]	@ (8010cb4 <tcp_split_unsent_seg+0x290>)
 8010a4a:	489b      	ldr	r0, [pc, #620]	@ (8010cb8 <tcp_split_unsent_seg+0x294>)
 8010a4c:	f7f0 f922 	bl	8000c94 <printf>

  useg = pcb->unsent;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d102      	bne.n	8010a62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a60:	e122      	b.n	8010ca8 <tcp_split_unsent_seg+0x284>
  }

  if (split == 0) {
 8010a62:	887b      	ldrh	r3, [r7, #2]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d109      	bne.n	8010a7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010a68:	4b91      	ldr	r3, [pc, #580]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010a6a:	f240 3253 	movw	r2, #851	@ 0x353
 8010a6e:	4993      	ldr	r1, [pc, #588]	@ (8010cbc <tcp_split_unsent_seg+0x298>)
 8010a70:	4891      	ldr	r0, [pc, #580]	@ (8010cb8 <tcp_split_unsent_seg+0x294>)
 8010a72:	f7f0 f90f 	bl	8000c94 <printf>
    return ERR_VAL;
 8010a76:	f06f 0305 	mvn.w	r3, #5
 8010a7a:	e115      	b.n	8010ca8 <tcp_split_unsent_seg+0x284>
  }

  if (useg->len <= split) {
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	891b      	ldrh	r3, [r3, #8]
 8010a80:	887a      	ldrh	r2, [r7, #2]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d301      	bcc.n	8010a8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010a86:	2300      	movs	r3, #0
 8010a88:	e10e      	b.n	8010ca8 <tcp_split_unsent_seg+0x284>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a8e:	887a      	ldrh	r2, [r7, #2]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d906      	bls.n	8010aa2 <tcp_split_unsent_seg+0x7e>
 8010a94:	4b86      	ldr	r3, [pc, #536]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010a96:	f240 325b 	movw	r2, #859	@ 0x35b
 8010a9a:	4989      	ldr	r1, [pc, #548]	@ (8010cc0 <tcp_split_unsent_seg+0x29c>)
 8010a9c:	4886      	ldr	r0, [pc, #536]	@ (8010cb8 <tcp_split_unsent_seg+0x294>)
 8010a9e:	f7f0 f8f9 	bl	8000c94 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	891b      	ldrh	r3, [r3, #8]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d106      	bne.n	8010ab8 <tcp_split_unsent_seg+0x94>
 8010aaa:	4b81      	ldr	r3, [pc, #516]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010aac:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010ab0:	4984      	ldr	r1, [pc, #528]	@ (8010cc4 <tcp_split_unsent_seg+0x2a0>)
 8010ab2:	4881      	ldr	r0, [pc, #516]	@ (8010cb8 <tcp_split_unsent_seg+0x294>)
 8010ab4:	f7f0 f8ee 	bl	8000c94 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	7b1b      	ldrb	r3, [r3, #12]
 8010abc:	74fb      	strb	r3, [r7, #19]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010abe:	7cfb      	ldrb	r3, [r7, #19]
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f003 0304 	and.w	r3, r3, #4
 8010ac8:	74bb      	strb	r3, [r7, #18]
  remainder = useg->len - split;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	891a      	ldrh	r2, [r3, #8]
 8010ace:	887b      	ldrh	r3, [r7, #2]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	823b      	strh	r3, [r7, #16]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010ad4:	7cbb      	ldrb	r3, [r7, #18]
 8010ad6:	b29a      	uxth	r2, r3
 8010ad8:	8a3b      	ldrh	r3, [r7, #16]
 8010ada:	4413      	add	r3, r2
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	2036      	movs	r0, #54	@ 0x36
 8010ae6:	f7fa ffb9 	bl	800ba5c <pbuf_alloc>
 8010aea:	6238      	str	r0, [r7, #32]
  if (p == NULL) {
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 80c5 	beq.w	8010c7e <tcp_split_unsent_seg+0x25a>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	685b      	ldr	r3, [r3, #4]
 8010af8:	891a      	ldrh	r2, [r3, #8]
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	891b      	ldrh	r3, [r3, #8]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	887b      	ldrh	r3, [r7, #2]
 8010b04:	4413      	add	r3, r2
 8010b06:	81fb      	strh	r3, [r7, #14]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	6858      	ldr	r0, [r3, #4]
 8010b0c:	6a3b      	ldr	r3, [r7, #32]
 8010b0e:	685a      	ldr	r2, [r3, #4]
 8010b10:	7cbb      	ldrb	r3, [r7, #18]
 8010b12:	18d1      	adds	r1, r2, r3
 8010b14:	89fb      	ldrh	r3, [r7, #14]
 8010b16:	8a3a      	ldrh	r2, [r7, #16]
 8010b18:	f7fb fcb2 	bl	800c480 <pbuf_copy_partial>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	461a      	mov	r2, r3
 8010b20:	8a3b      	ldrh	r3, [r7, #16]
 8010b22:	4293      	cmp	r3, r2
 8010b24:	f040 80ad 	bne.w	8010c82 <tcp_split_unsent_seg+0x25e>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7f9 fe2f 	bl	800a794 <lwip_htons>
 8010b36:	4603      	mov	r3, r0
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010b42:	2300      	movs	r3, #0
 8010b44:	76fb      	strb	r3, [r7, #27]

  if (split_flags & TCP_PSH) {
 8010b46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b4a:	f003 0308 	and.w	r3, r3, #8
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <tcp_split_unsent_seg+0x142>
    split_flags &= ~TCP_PSH;
 8010b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b56:	f023 0308 	bic.w	r3, r3, #8
 8010b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    remainder_flags |= TCP_PSH;
 8010b5e:	7efb      	ldrb	r3, [r7, #27]
 8010b60:	f043 0308 	orr.w	r3, r3, #8
 8010b64:	76fb      	strb	r3, [r7, #27]
  }
  if (split_flags & TCP_FIN) {
 8010b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d009      	beq.n	8010b86 <tcp_split_unsent_seg+0x162>
    split_flags &= ~TCP_FIN;
 8010b72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b76:	f023 0301 	bic.w	r3, r3, #1
 8010b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    remainder_flags |= TCP_FIN;
 8010b7e:	7efb      	ldrb	r3, [r7, #27]
 8010b80:	f043 0301 	orr.w	r3, r3, #1
 8010b84:	76fb      	strb	r3, [r7, #27]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7f9 fe16 	bl	800a7be <lwip_htonl>
 8010b92:	4602      	mov	r2, r0
 8010b94:	887b      	ldrh	r3, [r7, #2]
 8010b96:	18d1      	adds	r1, r2, r3
 8010b98:	7efa      	ldrb	r2, [r7, #27]
 8010b9a:	7cfb      	ldrb	r3, [r7, #19]
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	6a39      	ldr	r1, [r7, #32]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f7ff f9f4 	bl	800ff90 <tcp_create_segment>
 8010ba8:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d102      	bne.n	8010bb6 <tcp_split_unsent_seg+0x192>
    p = NULL; /* Freed by tcp_create_segment */
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 8010bb4:	e066      	b.n	8010c84 <tcp_split_unsent_seg+0x260>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fb fab6 	bl	800c12c <pbuf_clen>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bca:	1a9b      	subs	r3, r3, r2
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	6858      	ldr	r0, [r3, #4]
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	891a      	ldrh	r2, [r3, #8]
 8010bde:	8a3b      	ldrh	r3, [r7, #16]
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	4619      	mov	r1, r3
 8010be6:	f7fb f897 	bl	800bd18 <pbuf_realloc>
  useg->len -= remainder;
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	891a      	ldrh	r2, [r3, #8]
 8010bee:	8a3b      	ldrh	r3, [r7, #16]
 8010bf0:	1ad3      	subs	r3, r2, r3
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	899b      	ldrh	r3, [r3, #12]
 8010bfe:	b29c      	uxth	r4, r3
 8010c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7f9 fdc4 	bl	800a794 <lwip_htons>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	4322      	orrs	r2, r4
 8010c16:	b292      	uxth	r2, r2
 8010c18:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fb fa81 	bl	800c12c <pbuf_clen>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c34:	4413      	add	r3, r2
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fb fa72 	bl	800c12c <pbuf_clen>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c52:	4413      	add	r3, r2
 8010c54:	b29a      	uxth	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	69fa      	ldr	r2, [r7, #28]
 8010c68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d103      	bne.n	8010c7a <tcp_split_unsent_seg+0x256>
    pcb->unsent_oversize = 0;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	e014      	b.n	8010ca8 <tcp_split_unsent_seg+0x284>
    goto memerr;
 8010c7e:	bf00      	nop
 8010c80:	e000      	b.n	8010c84 <tcp_split_unsent_seg+0x260>
    goto memerr;
 8010c82:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d006      	beq.n	8010c98 <tcp_split_unsent_seg+0x274>
 8010c8a:	4b09      	ldr	r3, [pc, #36]	@ (8010cb0 <tcp_split_unsent_seg+0x28c>)
 8010c8c:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010c90:	490d      	ldr	r1, [pc, #52]	@ (8010cc8 <tcp_split_unsent_seg+0x2a4>)
 8010c92:	4809      	ldr	r0, [pc, #36]	@ (8010cb8 <tcp_split_unsent_seg+0x294>)
 8010c94:	f7ef fffe 	bl	8000c94 <printf>
  if (p != NULL) {
 8010c98:	6a3b      	ldr	r3, [r7, #32]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d002      	beq.n	8010ca4 <tcp_split_unsent_seg+0x280>
    pbuf_free(p);
 8010c9e:	6a38      	ldr	r0, [r7, #32]
 8010ca0:	f7fb f9bc 	bl	800c01c <pbuf_free>
  }

  return ERR_MEM;
 8010ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	372c      	adds	r7, #44	@ 0x2c
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd90      	pop	{r4, r7, pc}
 8010cb0:	0801a548 	.word	0x0801a548
 8010cb4:	0801a934 	.word	0x0801a934
 8010cb8:	0801a598 	.word	0x0801a598
 8010cbc:	0801a958 	.word	0x0801a958
 8010cc0:	0801a97c 	.word	0x0801a97c
 8010cc4:	0801a98c 	.word	0x0801a98c
 8010cc8:	0801a99c 	.word	0x0801a99c

08010ccc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010ccc:	b590      	push	{r4, r7, lr}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <tcp_send_fin+0x1c>
 8010cda:	4b21      	ldr	r3, [pc, #132]	@ (8010d60 <tcp_send_fin+0x94>)
 8010cdc:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 8010ce0:	4920      	ldr	r1, [pc, #128]	@ (8010d64 <tcp_send_fin+0x98>)
 8010ce2:	4821      	ldr	r0, [pc, #132]	@ (8010d68 <tcp_send_fin+0x9c>)
 8010ce4:	f7ef ffd6 	bl	8000c94 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d02e      	beq.n	8010d4e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	e002      	b.n	8010cfe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1f8      	bne.n	8010cf8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	899b      	ldrh	r3, [r3, #12]
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7f9 fd40 	bl	800a794 <lwip_htons>
 8010d14:	4603      	mov	r3, r0
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	f003 0307 	and.w	r3, r3, #7
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d116      	bne.n	8010d4e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	691b      	ldr	r3, [r3, #16]
 8010d24:	899b      	ldrh	r3, [r3, #12]
 8010d26:	b29c      	uxth	r4, r3
 8010d28:	2001      	movs	r0, #1
 8010d2a:	f7f9 fd33 	bl	800a794 <lwip_htons>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	461a      	mov	r2, r3
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	4322      	orrs	r2, r4
 8010d38:	b292      	uxth	r2, r2
 8010d3a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	8b5b      	ldrh	r3, [r3, #26]
 8010d40:	f043 0320 	orr.w	r3, r3, #32
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	e004      	b.n	8010d58 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010d4e:	2101      	movs	r1, #1
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f80b 	bl	8010d6c <tcp_enqueue_flags>
 8010d56:	4603      	mov	r3, r0
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3714      	adds	r7, #20
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd90      	pop	{r4, r7, pc}
 8010d60:	0801a548 	.word	0x0801a548
 8010d64:	0801a9a8 	.word	0x0801a9a8
 8010d68:	0801a598 	.word	0x0801a598

08010d6c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010d80:	78fb      	ldrb	r3, [r7, #3]
 8010d82:	f003 0303 	and.w	r3, r3, #3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d106      	bne.n	8010d98 <tcp_enqueue_flags+0x2c>
 8010d8a:	4b67      	ldr	r3, [pc, #412]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010d8c:	f240 4212 	movw	r2, #1042	@ 0x412
 8010d90:	4966      	ldr	r1, [pc, #408]	@ (8010f2c <tcp_enqueue_flags+0x1c0>)
 8010d92:	4867      	ldr	r0, [pc, #412]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010d94:	f7ef ff7e 	bl	8000c94 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d106      	bne.n	8010dac <tcp_enqueue_flags+0x40>
 8010d9e:	4b62      	ldr	r3, [pc, #392]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010da0:	f240 4214 	movw	r2, #1044	@ 0x414
 8010da4:	4963      	ldr	r1, [pc, #396]	@ (8010f34 <tcp_enqueue_flags+0x1c8>)
 8010da6:	4862      	ldr	r0, [pc, #392]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010da8:	f7ef ff74 	bl	8000c94 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010dac:	78fb      	ldrb	r3, [r7, #3]
 8010dae:	f003 0302 	and.w	r3, r3, #2
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d001      	beq.n	8010dba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010db6:	2301      	movs	r3, #1
 8010db8:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010dba:	7dfb      	ldrb	r3, [r7, #23]
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	f003 0304 	and.w	r3, r3, #4
 8010dc4:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010dc6:	7dbb      	ldrb	r3, [r7, #22]
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010dce:	4619      	mov	r1, r3
 8010dd0:	2036      	movs	r0, #54	@ 0x36
 8010dd2:	f7fa fe43 	bl	800ba5c <pbuf_alloc>
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d109      	bne.n	8010df2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8b5b      	ldrh	r3, [r3, #26]
 8010de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010dec:	f04f 33ff 	mov.w	r3, #4294967295
 8010df0:	e095      	b.n	8010f1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	895a      	ldrh	r2, [r3, #10]
 8010df6:	7dbb      	ldrb	r3, [r7, #22]
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d206      	bcs.n	8010e0c <tcp_enqueue_flags+0xa0>
 8010dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010e00:	f240 423a 	movw	r2, #1082	@ 0x43a
 8010e04:	494c      	ldr	r1, [pc, #304]	@ (8010f38 <tcp_enqueue_flags+0x1cc>)
 8010e06:	484a      	ldr	r0, [pc, #296]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010e08:	f7ef ff44 	bl	8000c94 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010e10:	78fa      	ldrb	r2, [r7, #3]
 8010e12:	7dfb      	ldrb	r3, [r7, #23]
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	460b      	mov	r3, r1
 8010e18:	68f9      	ldr	r1, [r7, #12]
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7ff f8b8 	bl	800ff90 <tcp_create_segment>
 8010e20:	60b8      	str	r0, [r7, #8]
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d109      	bne.n	8010e3c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	8b5b      	ldrh	r3, [r3, #26]
 8010e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e36:	f04f 33ff 	mov.w	r3, #4294967295
 8010e3a:	e070      	b.n	8010f1e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	691b      	ldr	r3, [r3, #16]
 8010e40:	f003 0303 	and.w	r3, r3, #3
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d006      	beq.n	8010e56 <tcp_enqueue_flags+0xea>
 8010e48:	4b37      	ldr	r3, [pc, #220]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010e4a:	f240 4243 	movw	r2, #1091	@ 0x443
 8010e4e:	493b      	ldr	r1, [pc, #236]	@ (8010f3c <tcp_enqueue_flags+0x1d0>)
 8010e50:	4837      	ldr	r0, [pc, #220]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010e52:	f7ef ff1f 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	891b      	ldrh	r3, [r3, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d006      	beq.n	8010e6c <tcp_enqueue_flags+0x100>
 8010e5e:	4b32      	ldr	r3, [pc, #200]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010e60:	f240 4244 	movw	r2, #1092	@ 0x444
 8010e64:	4936      	ldr	r1, [pc, #216]	@ (8010f40 <tcp_enqueue_flags+0x1d4>)
 8010e66:	4832      	ldr	r0, [pc, #200]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010e68:	f7ef ff14 	bl	8000c94 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d103      	bne.n	8010e7c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e7a:	e00d      	b.n	8010e98 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e80:	613b      	str	r3, [r7, #16]
 8010e82:	e002      	b.n	8010e8a <tcp_enqueue_flags+0x11e>
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	613b      	str	r3, [r7, #16]
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1f8      	bne.n	8010e84 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ea0:	78fb      	ldrb	r3, [r7, #3]
 8010ea2:	f003 0302 	and.w	r3, r3, #2
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d104      	bne.n	8010eb4 <tcp_enqueue_flags+0x148>
 8010eaa:	78fb      	ldrb	r3, [r7, #3]
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d004      	beq.n	8010ebe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010ebe:	78fb      	ldrb	r3, [r7, #3]
 8010ec0:	f003 0301 	and.w	r3, r3, #1
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d006      	beq.n	8010ed6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	8b5b      	ldrh	r3, [r3, #26]
 8010ecc:	f043 0320 	orr.w	r3, r3, #32
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fb f926 	bl	800c12c <pbuf_clen>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010eea:	4413      	add	r3, r2
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00e      	beq.n	8010f1c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d10a      	bne.n	8010f1c <tcp_enqueue_flags+0x1b0>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <tcp_enqueue_flags+0x1b0>
 8010f0e:	4b06      	ldr	r3, [pc, #24]	@ (8010f28 <tcp_enqueue_flags+0x1bc>)
 8010f10:	f240 4266 	movw	r2, #1126	@ 0x466
 8010f14:	490b      	ldr	r1, [pc, #44]	@ (8010f44 <tcp_enqueue_flags+0x1d8>)
 8010f16:	4806      	ldr	r0, [pc, #24]	@ (8010f30 <tcp_enqueue_flags+0x1c4>)
 8010f18:	f7ef febc 	bl	8000c94 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3718      	adds	r7, #24
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	bf00      	nop
 8010f28:	0801a548 	.word	0x0801a548
 8010f2c:	0801a9c4 	.word	0x0801a9c4
 8010f30:	0801a598 	.word	0x0801a598
 8010f34:	0801aa1c 	.word	0x0801aa1c
 8010f38:	0801aa3c 	.word	0x0801aa3c
 8010f3c:	0801aa78 	.word	0x0801aa78
 8010f40:	0801aa90 	.word	0x0801aa90
 8010f44:	0801aabc 	.word	0x0801aabc

08010f48 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010f48:	b5b0      	push	{r4, r5, r7, lr}
 8010f4a:	b08a      	sub	sp, #40	@ 0x28
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d106      	bne.n	8010f64 <tcp_output+0x1c>
 8010f56:	4b8a      	ldr	r3, [pc, #552]	@ (8011180 <tcp_output+0x238>)
 8010f58:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8010f5c:	4989      	ldr	r1, [pc, #548]	@ (8011184 <tcp_output+0x23c>)
 8010f5e:	488a      	ldr	r0, [pc, #552]	@ (8011188 <tcp_output+0x240>)
 8010f60:	f7ef fe98 	bl	8000c94 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d106      	bne.n	8010f7a <tcp_output+0x32>
 8010f6c:	4b84      	ldr	r3, [pc, #528]	@ (8011180 <tcp_output+0x238>)
 8010f6e:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 8010f72:	4986      	ldr	r1, [pc, #536]	@ (801118c <tcp_output+0x244>)
 8010f74:	4884      	ldr	r0, [pc, #528]	@ (8011188 <tcp_output+0x240>)
 8010f76:	f7ef fe8d 	bl	8000c94 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010f7a:	4b85      	ldr	r3, [pc, #532]	@ (8011190 <tcp_output+0x248>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d101      	bne.n	8010f88 <tcp_output+0x40>
    return ERR_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	e1d1      	b.n	801132c <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f94:	4293      	cmp	r3, r2
 8010f96:	bf28      	it	cs
 8010f98:	4613      	movcs	r3, r2
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10b      	bne.n	8010fc2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	8b5b      	ldrh	r3, [r3, #26]
 8010fae:	f003 0302 	and.w	r3, r3, #2
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 81ad 	beq.w	8011312 <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fdf9 	bl	8011bb0 <tcp_send_empty_ack>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	e1b4      	b.n	801132c <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010fc2:	6879      	ldr	r1, [r7, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	461a      	mov	r2, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7fe ffc4 	bl	800ff58 <tcp_route>
 8010fd0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <tcp_output+0x96>
    return ERR_RTE;
 8010fd8:	f06f 0303 	mvn.w	r3, #3
 8010fdc:	e1a6      	b.n	801132c <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <tcp_output+0xa4>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d111      	bne.n	8011010 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d002      	beq.n	8010ff8 <tcp_output+0xb0>
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	3304      	adds	r3, #4
 8010ff6:	e000      	b.n	8010ffa <tcp_output+0xb2>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d102      	bne.n	8011008 <tcp_output+0xc0>
      return ERR_RTE;
 8011002:	f06f 0303 	mvn.w	r3, #3
 8011006:	e191      	b.n	801132c <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	f7f9 fbd1 	bl	800a7be <lwip_htonl>
 801101c:	4602      	mov	r2, r0
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011026:	8912      	ldrh	r2, [r2, #8]
 8011028:	4413      	add	r3, r2
 801102a:	69ba      	ldr	r2, [r7, #24]
 801102c:	429a      	cmp	r2, r3
 801102e:	d227      	bcs.n	8011080 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011036:	461a      	mov	r2, r3
 8011038:	69bb      	ldr	r3, [r7, #24]
 801103a:	4293      	cmp	r3, r2
 801103c:	d114      	bne.n	8011068 <tcp_output+0x120>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011042:	2b00      	cmp	r3, #0
 8011044:	d110      	bne.n	8011068 <tcp_output+0x120>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801104c:	2b00      	cmp	r3, #0
 801104e:	d10b      	bne.n	8011068 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2201      	movs	r2, #1
 801105c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	8b5b      	ldrh	r3, [r3, #26]
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b00      	cmp	r3, #0
 8011072:	f000 8150 	beq.w	8011316 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 fd9a 	bl	8011bb0 <tcp_send_empty_ack>
 801107c:	4603      	mov	r3, r0
 801107e:	e155      	b.n	801132c <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801108c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	2b00      	cmp	r3, #0
 8011092:	f000 811f 	beq.w	80112d4 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8011096:	e002      	b.n	801109e <tcp_output+0x156>
 8011098:	6a3b      	ldr	r3, [r7, #32]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	623b      	str	r3, [r7, #32]
 801109e:	6a3b      	ldr	r3, [r7, #32]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d1f8      	bne.n	8011098 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80110a6:	e115      	b.n	80112d4 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80110a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f9 fb6f 	bl	800a794 <lwip_htons>
 80110b6:	4603      	mov	r3, r0
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	f003 0304 	and.w	r3, r3, #4
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d006      	beq.n	80110d0 <tcp_output+0x188>
 80110c2:	4b2f      	ldr	r3, [pc, #188]	@ (8011180 <tcp_output+0x238>)
 80110c4:	f240 5237 	movw	r2, #1335	@ 0x537
 80110c8:	4932      	ldr	r1, [pc, #200]	@ (8011194 <tcp_output+0x24c>)
 80110ca:	482f      	ldr	r0, [pc, #188]	@ (8011188 <tcp_output+0x240>)
 80110cc:	f7ef fde2 	bl	8000c94 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d01f      	beq.n	8011118 <tcp_output+0x1d0>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	8b5b      	ldrh	r3, [r3, #26]
 80110dc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d119      	bne.n	8011118 <tcp_output+0x1d0>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00b      	beq.n	8011104 <tcp_output+0x1bc>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d110      	bne.n	8011118 <tcp_output+0x1d0>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110fa:	891a      	ldrh	r2, [r3, #8]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011100:	429a      	cmp	r2, r3
 8011102:	d209      	bcs.n	8011118 <tcp_output+0x1d0>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801110a:	2b00      	cmp	r3, #0
 801110c:	d004      	beq.n	8011118 <tcp_output+0x1d0>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011114:	2b07      	cmp	r3, #7
 8011116:	d901      	bls.n	801111c <tcp_output+0x1d4>
 8011118:	2301      	movs	r3, #1
 801111a:	e000      	b.n	801111e <tcp_output+0x1d6>
 801111c:	2300      	movs	r3, #0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d106      	bne.n	8011130 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	8b5b      	ldrh	r3, [r3, #26]
 8011126:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801112a:	2b00      	cmp	r3, #0
 801112c:	f000 80e7 	beq.w	80112fe <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	7d1b      	ldrb	r3, [r3, #20]
 8011134:	2b02      	cmp	r3, #2
 8011136:	d00d      	beq.n	8011154 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113a:	691b      	ldr	r3, [r3, #16]
 801113c:	899b      	ldrh	r3, [r3, #12]
 801113e:	b29c      	uxth	r4, r3
 8011140:	2010      	movs	r0, #16
 8011142:	f7f9 fb27 	bl	800a794 <lwip_htons>
 8011146:	4603      	mov	r3, r0
 8011148:	461a      	mov	r2, r3
 801114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114c:	691b      	ldr	r3, [r3, #16]
 801114e:	4322      	orrs	r2, r4
 8011150:	b292      	uxth	r2, r2
 8011152:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011154:	697a      	ldr	r2, [r7, #20]
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801115a:	f000 f90b 	bl	8011374 <tcp_output_segment>
 801115e:	4603      	mov	r3, r0
 8011160:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d016      	beq.n	8011198 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	8b5b      	ldrh	r3, [r3, #26]
 801116e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011172:	b29a      	uxth	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	835a      	strh	r2, [r3, #26]
      return err;
 8011178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801117c:	e0d6      	b.n	801132c <tcp_output+0x3e4>
 801117e:	bf00      	nop
 8011180:	0801a548 	.word	0x0801a548
 8011184:	0801aae4 	.word	0x0801aae4
 8011188:	0801a598 	.word	0x0801a598
 801118c:	0801aafc 	.word	0x0801aafc
 8011190:	2000d90c 	.word	0x2000d90c
 8011194:	0801ab24 	.word	0x0801ab24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8011198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119a:	2200      	movs	r2, #0
 801119c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	7d1b      	ldrb	r3, [r3, #20]
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d006      	beq.n	80111bc <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	8b5b      	ldrh	r3, [r3, #26]
 80111b2:	f023 0303 	bic.w	r3, r3, #3
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111be:	691b      	ldr	r3, [r3, #16]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7f9 fafb 	bl	800a7be <lwip_htonl>
 80111c8:	4604      	mov	r4, r0
 80111ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111cc:	891b      	ldrh	r3, [r3, #8]
 80111ce:	461d      	mov	r5, r3
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	899b      	ldrh	r3, [r3, #12]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f9 fadb 	bl	800a794 <lwip_htons>
 80111de:	4603      	mov	r3, r0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	f003 0303 	and.w	r3, r3, #3
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <tcp_output+0x2a6>
 80111ea:	2301      	movs	r3, #1
 80111ec:	e000      	b.n	80111f0 <tcp_output+0x2a8>
 80111ee:	2300      	movs	r3, #0
 80111f0:	442b      	add	r3, r5
 80111f2:	4423      	add	r3, r4
 80111f4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	da02      	bge.n	8011208 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	68ba      	ldr	r2, [r7, #8]
 8011206:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120a:	891b      	ldrh	r3, [r3, #8]
 801120c:	461c      	mov	r4, r3
 801120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	899b      	ldrh	r3, [r3, #12]
 8011214:	b29b      	uxth	r3, r3
 8011216:	4618      	mov	r0, r3
 8011218:	f7f9 fabc 	bl	800a794 <lwip_htons>
 801121c:	4603      	mov	r3, r0
 801121e:	b2db      	uxtb	r3, r3
 8011220:	f003 0303 	and.w	r3, r3, #3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d001      	beq.n	801122c <tcp_output+0x2e4>
 8011228:	2301      	movs	r3, #1
 801122a:	e000      	b.n	801122e <tcp_output+0x2e6>
 801122c:	2300      	movs	r3, #0
 801122e:	4423      	add	r3, r4
 8011230:	2b00      	cmp	r3, #0
 8011232:	d049      	beq.n	80112c8 <tcp_output+0x380>
      seg->next = NULL;
 8011234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801123e:	2b00      	cmp	r3, #0
 8011240:	d105      	bne.n	801124e <tcp_output+0x306>
        pcb->unacked = seg;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011246:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124a:	623b      	str	r3, [r7, #32]
 801124c:	e03f      	b.n	80112ce <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011250:	691b      	ldr	r3, [r3, #16]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	4618      	mov	r0, r3
 8011256:	f7f9 fab2 	bl	800a7be <lwip_htonl>
 801125a:	4604      	mov	r4, r0
 801125c:	6a3b      	ldr	r3, [r7, #32]
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	4618      	mov	r0, r3
 8011264:	f7f9 faab 	bl	800a7be <lwip_htonl>
 8011268:	4603      	mov	r3, r0
 801126a:	1ae3      	subs	r3, r4, r3
 801126c:	2b00      	cmp	r3, #0
 801126e:	da24      	bge.n	80112ba <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3370      	adds	r3, #112	@ 0x70
 8011274:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011276:	e002      	b.n	801127e <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d011      	beq.n	80112aa <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	4618      	mov	r0, r3
 8011290:	f7f9 fa95 	bl	800a7be <lwip_htonl>
 8011294:	4604      	mov	r4, r0
 8011296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011298:	691b      	ldr	r3, [r3, #16]
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	4618      	mov	r0, r3
 801129e:	f7f9 fa8e 	bl	800a7be <lwip_htonl>
 80112a2:	4603      	mov	r3, r0
 80112a4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dbe6      	blt.n	8011278 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112b6:	601a      	str	r2, [r3, #0]
 80112b8:	e009      	b.n	80112ce <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112be:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	623b      	str	r3, [r7, #32]
 80112c6:	e002      	b.n	80112ce <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80112c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112ca:	f7fc fac6 	bl	800d85a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80112d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d012      	beq.n	8011300 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80112da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112dc:	691b      	ldr	r3, [r3, #16]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f9 fa6c 	bl	800a7be <lwip_htonl>
 80112e6:	4602      	mov	r2, r0
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112f0:	8912      	ldrh	r2, [r2, #8]
 80112f2:	4413      	add	r3, r2
  while (seg != NULL &&
 80112f4:	69ba      	ldr	r2, [r7, #24]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	f4bf aed6 	bcs.w	80110a8 <tcp_output+0x160>
 80112fc:	e000      	b.n	8011300 <tcp_output+0x3b8>
      break;
 80112fe:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011304:	2b00      	cmp	r3, #0
 8011306:	d108      	bne.n	801131a <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011310:	e004      	b.n	801131c <tcp_output+0x3d4>
    goto output_done;
 8011312:	bf00      	nop
 8011314:	e002      	b.n	801131c <tcp_output+0x3d4>
    goto output_done;
 8011316:	bf00      	nop
 8011318:	e000      	b.n	801131c <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801131a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	8b5b      	ldrh	r3, [r3, #26]
 8011320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011324:	b29a      	uxth	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801132a:	2300      	movs	r3, #0
}
 801132c:	4618      	mov	r0, r3
 801132e:	3728      	adds	r7, #40	@ 0x28
 8011330:	46bd      	mov	sp, r7
 8011332:	bdb0      	pop	{r4, r5, r7, pc}

08011334 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d106      	bne.n	8011350 <tcp_output_segment_busy+0x1c>
 8011342:	4b09      	ldr	r3, [pc, #36]	@ (8011368 <tcp_output_segment_busy+0x34>)
 8011344:	f240 529b 	movw	r2, #1435	@ 0x59b
 8011348:	4908      	ldr	r1, [pc, #32]	@ (801136c <tcp_output_segment_busy+0x38>)
 801134a:	4809      	ldr	r0, [pc, #36]	@ (8011370 <tcp_output_segment_busy+0x3c>)
 801134c:	f7ef fca2 	bl	8000c94 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	7b9b      	ldrb	r3, [r3, #14]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d001      	beq.n	801135e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801135a:	2301      	movs	r3, #1
 801135c:	e000      	b.n	8011360 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801135e:	2300      	movs	r3, #0
}
 8011360:	4618      	mov	r0, r3
 8011362:	3708      	adds	r7, #8
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	0801a548 	.word	0x0801a548
 801136c:	0801ab3c 	.word	0x0801ab3c
 8011370:	0801a598 	.word	0x0801a598

08011374 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011374:	b5b0      	push	{r4, r5, r7, lr}
 8011376:	b08c      	sub	sp, #48	@ 0x30
 8011378:	af04      	add	r7, sp, #16
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d106      	bne.n	8011394 <tcp_output_segment+0x20>
 8011386:	4b6d      	ldr	r3, [pc, #436]	@ (801153c <tcp_output_segment+0x1c8>)
 8011388:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801138c:	496c      	ldr	r1, [pc, #432]	@ (8011540 <tcp_output_segment+0x1cc>)
 801138e:	486d      	ldr	r0, [pc, #436]	@ (8011544 <tcp_output_segment+0x1d0>)
 8011390:	f7ef fc80 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_output_segment+0x34>
 801139a:	4b68      	ldr	r3, [pc, #416]	@ (801153c <tcp_output_segment+0x1c8>)
 801139c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80113a0:	4969      	ldr	r1, [pc, #420]	@ (8011548 <tcp_output_segment+0x1d4>)
 80113a2:	4868      	ldr	r0, [pc, #416]	@ (8011544 <tcp_output_segment+0x1d0>)
 80113a4:	f7ef fc76 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <tcp_output_segment+0x48>
 80113ae:	4b63      	ldr	r3, [pc, #396]	@ (801153c <tcp_output_segment+0x1c8>)
 80113b0:	f240 52bb 	movw	r2, #1467	@ 0x5bb
 80113b4:	4965      	ldr	r1, [pc, #404]	@ (801154c <tcp_output_segment+0x1d8>)
 80113b6:	4863      	ldr	r0, [pc, #396]	@ (8011544 <tcp_output_segment+0x1d0>)
 80113b8:	f7ef fc6c 	bl	8000c94 <printf>

  if (tcp_output_segment_busy(seg)) {
 80113bc:	68f8      	ldr	r0, [r7, #12]
 80113be:	f7ff ffb9 	bl	8011334 <tcp_output_segment_busy>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d001      	beq.n	80113cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	e0b3      	b.n	8011534 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	691c      	ldr	r4, [r3, #16]
 80113d4:	4610      	mov	r0, r2
 80113d6:	f7f9 f9f2 	bl	800a7be <lwip_htonl>
 80113da:	4603      	mov	r3, r0
 80113dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	691c      	ldr	r4, [r3, #16]
 80113e6:	4610      	mov	r0, r2
 80113e8:	f7f9 f9d4 	bl	800a794 <lwip_htons>
 80113ec:	4603      	mov	r3, r0
 80113ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80113f8:	441a      	add	r2, r3
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	3314      	adds	r3, #20
 8011404:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	7b1b      	ldrb	r3, [r3, #12]
 801140a:	f003 0301 	and.w	r3, r3, #1
 801140e:	2b00      	cmp	r3, #0
 8011410:	d015      	beq.n	801143e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	3304      	adds	r3, #4
 8011416:	461a      	mov	r2, r3
 8011418:	6879      	ldr	r1, [r7, #4]
 801141a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801141e:	f7fc fd8b 	bl	800df38 <tcp_eff_send_mss_netif>
 8011422:	4603      	mov	r3, r0
 8011424:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011426:	8b7b      	ldrh	r3, [r7, #26]
 8011428:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801142c:	4618      	mov	r0, r3
 801142e:	f7f9 f9c6 	bl	800a7be <lwip_htonl>
 8011432:	4602      	mov	r2, r0
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	3304      	adds	r3, #4
 801143c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011444:	2b00      	cmp	r3, #0
 8011446:	da02      	bge.n	801144e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	2200      	movs	r2, #0
 801144c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10c      	bne.n	8011470 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011456:	4b3e      	ldr	r3, [pc, #248]	@ (8011550 <tcp_output_segment+0x1dc>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	691b      	ldr	r3, [r3, #16]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	4618      	mov	r0, r3
 8011466:	f7f9 f9aa 	bl	800a7be <lwip_htonl>
 801146a:	4602      	mov	r2, r0
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	691a      	ldr	r2, [r3, #16]
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	8959      	ldrh	r1, [r3, #10]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	8b3a      	ldrh	r2, [r7, #24]
 801148a:	1a8a      	subs	r2, r1, r2
 801148c:	b292      	uxth	r2, r2
 801148e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	8919      	ldrh	r1, [r3, #8]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	8b3a      	ldrh	r2, [r7, #24]
 801149c:	1a8a      	subs	r2, r1, r2
 801149e:	b292      	uxth	r2, r2
 80114a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	6912      	ldr	r2, [r2, #16]
 80114aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	2200      	movs	r2, #0
 80114b2:	741a      	strb	r2, [r3, #16]
 80114b4:	2200      	movs	r2, #0
 80114b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	691a      	ldr	r2, [r3, #16]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	7b1b      	ldrb	r3, [r3, #12]
 80114c0:	f003 0301 	and.w	r3, r3, #1
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d001      	beq.n	80114cc <tcp_output_segment+0x158>
 80114c8:	2318      	movs	r3, #24
 80114ca:	e000      	b.n	80114ce <tcp_output_segment+0x15a>
 80114cc:	2314      	movs	r3, #20
 80114ce:	4413      	add	r3, r2
 80114d0:	69fa      	ldr	r2, [r7, #28]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d006      	beq.n	80114e4 <tcp_output_segment+0x170>
 80114d6:	4b19      	ldr	r3, [pc, #100]	@ (801153c <tcp_output_segment+0x1c8>)
 80114d8:	f240 621d 	movw	r2, #1565	@ 0x61d
 80114dc:	491d      	ldr	r1, [pc, #116]	@ (8011554 <tcp_output_segment+0x1e0>)
 80114de:	4819      	ldr	r0, [pc, #100]	@ (8011544 <tcp_output_segment+0x1d0>)
 80114e0:	f7ef fbd8 	bl	8000c94 <printf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80114ec:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80114ee:	68bd      	ldr	r5, [r7, #8]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80114f4:	68fa      	ldr	r2, [r7, #12]
 80114f6:	6914      	ldr	r4, [r2, #16]
 80114f8:	9300      	str	r3, [sp, #0]
 80114fa:	462b      	mov	r3, r5
 80114fc:	460a      	mov	r2, r1
 80114fe:	2106      	movs	r1, #6
 8011500:	f7f9 fa7a 	bl	800a9f8 <ip_chksum_pseudo>
 8011504:	4603      	mov	r3, r0
 8011506:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6858      	ldr	r0, [r3, #4]
 801150c:	68b9      	ldr	r1, [r7, #8]
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	1d1c      	adds	r4, r3, #4
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	7add      	ldrb	r5, [r3, #11]
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	7a9b      	ldrb	r3, [r3, #10]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	9202      	str	r2, [sp, #8]
 801151e:	2206      	movs	r2, #6
 8011520:	9201      	str	r2, [sp, #4]
 8011522:	9300      	str	r3, [sp, #0]
 8011524:	462b      	mov	r3, r5
 8011526:	4622      	mov	r2, r4
 8011528:	f004 fc70 	bl	8015e0c <ip4_output_if>
 801152c:	4603      	mov	r3, r0
 801152e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bdb0      	pop	{r4, r5, r7, pc}
 801153c:	0801a548 	.word	0x0801a548
 8011540:	0801ab64 	.word	0x0801ab64
 8011544:	0801a598 	.word	0x0801a598
 8011548:	0801ab84 	.word	0x0801ab84
 801154c:	0801aba4 	.word	0x0801aba4
 8011550:	2000d8fc 	.word	0x2000d8fc
 8011554:	0801abc8 	.word	0x0801abc8

08011558 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011558:	b5b0      	push	{r4, r5, r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d106      	bne.n	8011574 <tcp_rexmit_rto_prepare+0x1c>
 8011566:	4b36      	ldr	r3, [pc, #216]	@ (8011640 <tcp_rexmit_rto_prepare+0xe8>)
 8011568:	f240 6264 	movw	r2, #1636	@ 0x664
 801156c:	4935      	ldr	r1, [pc, #212]	@ (8011644 <tcp_rexmit_rto_prepare+0xec>)
 801156e:	4836      	ldr	r0, [pc, #216]	@ (8011648 <tcp_rexmit_rto_prepare+0xf0>)
 8011570:	f7ef fb90 	bl	8000c94 <printf>

  if (pcb->unacked == NULL) {
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011578:	2b00      	cmp	r3, #0
 801157a:	d102      	bne.n	8011582 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801157c:	f06f 0305 	mvn.w	r3, #5
 8011580:	e059      	b.n	8011636 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	e00b      	b.n	80115a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f7ff fed2 	bl	8011334 <tcp_output_segment_busy>
 8011590:	4603      	mov	r3, r0
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011596:	f06f 0305 	mvn.w	r3, #5
 801159a:	e04c      	b.n	8011636 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	60fb      	str	r3, [r7, #12]
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d1ef      	bne.n	801158a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f7ff fec2 	bl	8011334 <tcp_output_segment_busy>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d002      	beq.n	80115bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80115b6:	f06f 0305 	mvn.w	r3, #5
 80115ba:	e03c      	b.n	8011636 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d104      	bne.n	80115d6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	895a      	ldrh	r2, [r3, #10]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8b5b      	ldrh	r3, [r3, #26]
 80115e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f9 f8e0 	bl	800a7be <lwip_htonl>
 80115fe:	4604      	mov	r4, r0
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	891b      	ldrh	r3, [r3, #8]
 8011604:	461d      	mov	r5, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	899b      	ldrh	r3, [r3, #12]
 801160c:	b29b      	uxth	r3, r3
 801160e:	4618      	mov	r0, r3
 8011610:	f7f9 f8c0 	bl	800a794 <lwip_htons>
 8011614:	4603      	mov	r3, r0
 8011616:	b2db      	uxtb	r3, r3
 8011618:	f003 0303 	and.w	r3, r3, #3
 801161c:	2b00      	cmp	r3, #0
 801161e:	d001      	beq.n	8011624 <tcp_rexmit_rto_prepare+0xcc>
 8011620:	2301      	movs	r3, #1
 8011622:	e000      	b.n	8011626 <tcp_rexmit_rto_prepare+0xce>
 8011624:	2300      	movs	r3, #0
 8011626:	442b      	add	r3, r5
 8011628:	18e2      	adds	r2, r4, r3
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011634:	2300      	movs	r3, #0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bdb0      	pop	{r4, r5, r7, pc}
 801163e:	bf00      	nop
 8011640:	0801a548 	.word	0x0801a548
 8011644:	0801abdc 	.word	0x0801abdc
 8011648:	0801a598 	.word	0x0801a598

0801164c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_rexmit_rto_commit+0x1c>
 801165a:	4b0d      	ldr	r3, [pc, #52]	@ (8011690 <tcp_rexmit_rto_commit+0x44>)
 801165c:	f240 6299 	movw	r2, #1689	@ 0x699
 8011660:	490c      	ldr	r1, [pc, #48]	@ (8011694 <tcp_rexmit_rto_commit+0x48>)
 8011662:	480d      	ldr	r0, [pc, #52]	@ (8011698 <tcp_rexmit_rto_commit+0x4c>)
 8011664:	f7ef fb16 	bl	8000c94 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801166e:	2bff      	cmp	r3, #255	@ 0xff
 8011670:	d007      	beq.n	8011682 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011678:	3301      	adds	r3, #1
 801167a:	b2da      	uxtb	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7ff fc60 	bl	8010f48 <tcp_output>
}
 8011688:	bf00      	nop
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	0801a548 	.word	0x0801a548
 8011694:	0801ac00 	.word	0x0801ac00
 8011698:	0801a598 	.word	0x0801a598

0801169c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b082      	sub	sp, #8
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d106      	bne.n	80116b8 <tcp_rexmit_rto+0x1c>
 80116aa:	4b0a      	ldr	r3, [pc, #40]	@ (80116d4 <tcp_rexmit_rto+0x38>)
 80116ac:	f240 62ae 	movw	r2, #1710	@ 0x6ae
 80116b0:	4909      	ldr	r1, [pc, #36]	@ (80116d8 <tcp_rexmit_rto+0x3c>)
 80116b2:	480a      	ldr	r0, [pc, #40]	@ (80116dc <tcp_rexmit_rto+0x40>)
 80116b4:	f7ef faee 	bl	8000c94 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff ff4d 	bl	8011558 <tcp_rexmit_rto_prepare>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d102      	bne.n	80116ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7ff ffc1 	bl	801164c <tcp_rexmit_rto_commit>
  }
}
 80116ca:	bf00      	nop
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	0801a548 	.word	0x0801a548
 80116d8:	0801ac24 	.word	0x0801ac24
 80116dc:	0801a598 	.word	0x0801a598

080116e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80116e0:	b590      	push	{r4, r7, lr}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d106      	bne.n	80116fc <tcp_rexmit+0x1c>
 80116ee:	4b2f      	ldr	r3, [pc, #188]	@ (80117ac <tcp_rexmit+0xcc>)
 80116f0:	f240 62c2 	movw	r2, #1730	@ 0x6c2
 80116f4:	492e      	ldr	r1, [pc, #184]	@ (80117b0 <tcp_rexmit+0xd0>)
 80116f6:	482f      	ldr	r0, [pc, #188]	@ (80117b4 <tcp_rexmit+0xd4>)
 80116f8:	f7ef facc 	bl	8000c94 <printf>

  if (pcb->unacked == NULL) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011700:	2b00      	cmp	r3, #0
 8011702:	d102      	bne.n	801170a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011704:	f06f 0305 	mvn.w	r3, #5
 8011708:	e04c      	b.n	80117a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801170e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011710:	68b8      	ldr	r0, [r7, #8]
 8011712:	f7ff fe0f 	bl	8011334 <tcp_output_segment_busy>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d002      	beq.n	8011722 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801171c:	f06f 0305 	mvn.w	r3, #5
 8011720:	e040      	b.n	80117a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	336c      	adds	r3, #108	@ 0x6c
 801172e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011730:	e002      	b.n	8011738 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d011      	beq.n	8011764 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	4618      	mov	r0, r3
 801174a:	f7f9 f838 	bl	800a7be <lwip_htonl>
 801174e:	4604      	mov	r4, r0
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	4618      	mov	r0, r3
 8011758:	f7f9 f831 	bl	800a7be <lwip_htonl>
 801175c:	4603      	mov	r3, r0
 801175e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011760:	2b00      	cmp	r3, #0
 8011762:	dbe6      	blt.n	8011732 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d103      	bne.n	8011782 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2200      	movs	r2, #0
 801177e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011788:	2bff      	cmp	r3, #255	@ 0xff
 801178a:	d007      	beq.n	801179c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011792:	3301      	adds	r3, #1
 8011794:	b2da      	uxtb	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2200      	movs	r2, #0
 80117a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3714      	adds	r7, #20
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd90      	pop	{r4, r7, pc}
 80117ac:	0801a548 	.word	0x0801a548
 80117b0:	0801ac40 	.word	0x0801ac40
 80117b4:	0801a598 	.word	0x0801a598

080117b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d106      	bne.n	80117d4 <tcp_rexmit_fast+0x1c>
 80117c6:	4b2a      	ldr	r3, [pc, #168]	@ (8011870 <tcp_rexmit_fast+0xb8>)
 80117c8:	f240 62fa 	movw	r2, #1786	@ 0x6fa
 80117cc:	4929      	ldr	r1, [pc, #164]	@ (8011874 <tcp_rexmit_fast+0xbc>)
 80117ce:	482a      	ldr	r0, [pc, #168]	@ (8011878 <tcp_rexmit_fast+0xc0>)
 80117d0:	f7ef fa60 	bl	8000c94 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d044      	beq.n	8011866 <tcp_rexmit_fast+0xae>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	8b5b      	ldrh	r3, [r3, #26]
 80117e0:	f003 0304 	and.w	r3, r3, #4
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d13e      	bne.n	8011866 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7ff ff79 	bl	80116e0 <tcp_rexmit>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d138      	bne.n	8011866 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011800:	4293      	cmp	r3, r2
 8011802:	bf28      	it	cs
 8011804:	4613      	movcs	r3, r2
 8011806:	b29b      	uxth	r3, r3
 8011808:	0fda      	lsrs	r2, r3, #31
 801180a:	4413      	add	r3, r2
 801180c:	105b      	asrs	r3, r3, #1
 801180e:	b29a      	uxth	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801181c:	461a      	mov	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	429a      	cmp	r2, r3
 8011826:	d206      	bcs.n	8011836 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	b29a      	uxth	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011840:	4619      	mov	r1, r3
 8011842:	0049      	lsls	r1, r1, #1
 8011844:	440b      	add	r3, r1
 8011846:	b29b      	uxth	r3, r3
 8011848:	4413      	add	r3, r2
 801184a:	b29a      	uxth	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	8b5b      	ldrh	r3, [r3, #26]
 8011856:	f043 0304 	orr.w	r3, r3, #4
 801185a:	b29a      	uxth	r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2200      	movs	r2, #0
 8011864:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011866:	bf00      	nop
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	0801a548 	.word	0x0801a548
 8011874:	0801ac58 	.word	0x0801ac58
 8011878:	0801a598 	.word	0x0801a598

0801187c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b086      	sub	sp, #24
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	607b      	str	r3, [r7, #4]
 8011886:	460b      	mov	r3, r1
 8011888:	817b      	strh	r3, [r7, #10]
 801188a:	4613      	mov	r3, r2
 801188c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801188e:	897a      	ldrh	r2, [r7, #10]
 8011890:	893b      	ldrh	r3, [r7, #8]
 8011892:	4413      	add	r3, r2
 8011894:	b29b      	uxth	r3, r3
 8011896:	3314      	adds	r3, #20
 8011898:	b29b      	uxth	r3, r3
 801189a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801189e:	4619      	mov	r1, r3
 80118a0:	2022      	movs	r0, #34	@ 0x22
 80118a2:	f7fa f8db 	bl	800ba5c <pbuf_alloc>
 80118a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d04d      	beq.n	801194a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80118ae:	897b      	ldrh	r3, [r7, #10]
 80118b0:	3313      	adds	r3, #19
 80118b2:	697a      	ldr	r2, [r7, #20]
 80118b4:	8952      	ldrh	r2, [r2, #10]
 80118b6:	4293      	cmp	r3, r2
 80118b8:	db06      	blt.n	80118c8 <tcp_output_alloc_header_common+0x4c>
 80118ba:	4b26      	ldr	r3, [pc, #152]	@ (8011954 <tcp_output_alloc_header_common+0xd8>)
 80118bc:	f240 7224 	movw	r2, #1828	@ 0x724
 80118c0:	4925      	ldr	r1, [pc, #148]	@ (8011958 <tcp_output_alloc_header_common+0xdc>)
 80118c2:	4826      	ldr	r0, [pc, #152]	@ (801195c <tcp_output_alloc_header_common+0xe0>)
 80118c4:	f7ef f9e6 	bl	8000c94 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80118ce:	8c3b      	ldrh	r3, [r7, #32]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f8 ff5f 	bl	800a794 <lwip_htons>
 80118d6:	4603      	mov	r3, r0
 80118d8:	461a      	mov	r2, r3
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80118de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7f8 ff57 	bl	800a794 <lwip_htons>
 80118e6:	4603      	mov	r3, r0
 80118e8:	461a      	mov	r2, r3
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f7f8 ff62 	bl	800a7be <lwip_htonl>
 80118fa:	4602      	mov	r2, r0
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011900:	897b      	ldrh	r3, [r7, #10]
 8011902:	089b      	lsrs	r3, r3, #2
 8011904:	b29b      	uxth	r3, r3
 8011906:	3305      	adds	r3, #5
 8011908:	b29b      	uxth	r3, r3
 801190a:	031b      	lsls	r3, r3, #12
 801190c:	b29a      	uxth	r2, r3
 801190e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011912:	b29b      	uxth	r3, r3
 8011914:	4313      	orrs	r3, r2
 8011916:	b29b      	uxth	r3, r3
 8011918:	4618      	mov	r0, r3
 801191a:	f7f8 ff3b 	bl	800a794 <lwip_htons>
 801191e:	4603      	mov	r3, r0
 8011920:	461a      	mov	r2, r3
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011926:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011928:	4618      	mov	r0, r3
 801192a:	f7f8 ff33 	bl	800a794 <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	461a      	mov	r2, r3
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	2200      	movs	r2, #0
 801193a:	741a      	strb	r2, [r3, #16]
 801193c:	2200      	movs	r2, #0
 801193e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	2200      	movs	r2, #0
 8011944:	749a      	strb	r2, [r3, #18]
 8011946:	2200      	movs	r2, #0
 8011948:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801194a:	697b      	ldr	r3, [r7, #20]
}
 801194c:	4618      	mov	r0, r3
 801194e:	3718      	adds	r7, #24
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	0801a548 	.word	0x0801a548
 8011958:	0801ac78 	.word	0x0801ac78
 801195c:	0801a598 	.word	0x0801a598

08011960 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011960:	b5b0      	push	{r4, r5, r7, lr}
 8011962:	b08a      	sub	sp, #40	@ 0x28
 8011964:	af04      	add	r7, sp, #16
 8011966:	60f8      	str	r0, [r7, #12]
 8011968:	607b      	str	r3, [r7, #4]
 801196a:	460b      	mov	r3, r1
 801196c:	817b      	strh	r3, [r7, #10]
 801196e:	4613      	mov	r3, r2
 8011970:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d106      	bne.n	8011986 <tcp_output_alloc_header+0x26>
 8011978:	4b15      	ldr	r3, [pc, #84]	@ (80119d0 <tcp_output_alloc_header+0x70>)
 801197a:	f240 7243 	movw	r2, #1859	@ 0x743
 801197e:	4915      	ldr	r1, [pc, #84]	@ (80119d4 <tcp_output_alloc_header+0x74>)
 8011980:	4815      	ldr	r0, [pc, #84]	@ (80119d8 <tcp_output_alloc_header+0x78>)
 8011982:	f7ef f987 	bl	8000c94 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	8adb      	ldrh	r3, [r3, #22]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	8b12      	ldrh	r2, [r2, #24]
 8011992:	68f9      	ldr	r1, [r7, #12]
 8011994:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011996:	893d      	ldrh	r5, [r7, #8]
 8011998:	897c      	ldrh	r4, [r7, #10]
 801199a:	9103      	str	r1, [sp, #12]
 801199c:	2110      	movs	r1, #16
 801199e:	9102      	str	r1, [sp, #8]
 80119a0:	9201      	str	r2, [sp, #4]
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	462a      	mov	r2, r5
 80119a8:	4621      	mov	r1, r4
 80119aa:	f7ff ff67 	bl	801187c <tcp_output_alloc_header_common>
 80119ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d006      	beq.n	80119c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ba:	68fa      	ldr	r2, [r7, #12]
 80119bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80119be:	441a      	add	r2, r3
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80119c4:	697b      	ldr	r3, [r7, #20]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3718      	adds	r7, #24
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bdb0      	pop	{r4, r5, r7, pc}
 80119ce:	bf00      	nop
 80119d0:	0801a548 	.word	0x0801a548
 80119d4:	0801aca8 	.word	0x0801aca8
 80119d8:	0801a598 	.word	0x0801a598

080119dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b088      	sub	sp, #32
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	60f8      	str	r0, [r7, #12]
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	4611      	mov	r1, r2
 80119e8:	461a      	mov	r2, r3
 80119ea:	460b      	mov	r3, r1
 80119ec:	71fb      	strb	r3, [r7, #7]
 80119ee:	4613      	mov	r3, r2
 80119f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80119f2:	2300      	movs	r3, #0
 80119f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d106      	bne.n	8011a0a <tcp_output_fill_options+0x2e>
 80119fc:	4b12      	ldr	r3, [pc, #72]	@ (8011a48 <tcp_output_fill_options+0x6c>)
 80119fe:	f240 7257 	movw	r2, #1879	@ 0x757
 8011a02:	4912      	ldr	r1, [pc, #72]	@ (8011a4c <tcp_output_fill_options+0x70>)
 8011a04:	4812      	ldr	r0, [pc, #72]	@ (8011a50 <tcp_output_fill_options+0x74>)
 8011a06:	f7ef f945 	bl	8000c94 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	3314      	adds	r3, #20
 8011a14:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011a16:	8bfb      	ldrh	r3, [r7, #30]
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	79fb      	ldrb	r3, [r7, #7]
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	f003 0304 	and.w	r3, r3, #4
 8011a24:	4413      	add	r3, r2
 8011a26:	3314      	adds	r3, #20
 8011a28:	69ba      	ldr	r2, [r7, #24]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	697a      	ldr	r2, [r7, #20]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d006      	beq.n	8011a40 <tcp_output_fill_options+0x64>
 8011a32:	4b05      	ldr	r3, [pc, #20]	@ (8011a48 <tcp_output_fill_options+0x6c>)
 8011a34:	f240 7276 	movw	r2, #1910	@ 0x776
 8011a38:	4906      	ldr	r1, [pc, #24]	@ (8011a54 <tcp_output_fill_options+0x78>)
 8011a3a:	4805      	ldr	r0, [pc, #20]	@ (8011a50 <tcp_output_fill_options+0x74>)
 8011a3c:	f7ef f92a 	bl	8000c94 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011a40:	bf00      	nop
 8011a42:	3720      	adds	r7, #32
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	0801a548 	.word	0x0801a548
 8011a4c:	0801acd0 	.word	0x0801acd0
 8011a50:	0801a598 	.word	0x0801a598
 8011a54:	0801abc8 	.word	0x0801abc8

08011a58 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b08c      	sub	sp, #48	@ 0x30
 8011a5c:	af04      	add	r7, sp, #16
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d106      	bne.n	8011a7a <tcp_output_control_segment+0x22>
 8011a6c:	4b24      	ldr	r3, [pc, #144]	@ (8011b00 <tcp_output_control_segment+0xa8>)
 8011a6e:	f44f 62f1 	mov.w	r2, #1928	@ 0x788
 8011a72:	4924      	ldr	r1, [pc, #144]	@ (8011b04 <tcp_output_control_segment+0xac>)
 8011a74:	4824      	ldr	r0, [pc, #144]	@ (8011b08 <tcp_output_control_segment+0xb0>)
 8011a76:	f7ef f90d 	bl	8000c94 <printf>

  netif = tcp_route(pcb, src, dst);
 8011a7a:	683a      	ldr	r2, [r7, #0]
 8011a7c:	6879      	ldr	r1, [r7, #4]
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f7fe fa6a 	bl	800ff58 <tcp_route>
 8011a84:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d102      	bne.n	8011a92 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011a8c:	23fc      	movs	r3, #252	@ 0xfc
 8011a8e:	77fb      	strb	r3, [r7, #31]
 8011a90:	e02c      	b.n	8011aec <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	891a      	ldrh	r2, [r3, #8]
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2106      	movs	r1, #6
 8011aa4:	68b8      	ldr	r0, [r7, #8]
 8011aa6:	f7f8 ffa7 	bl	800a9f8 <ip_chksum_pseudo>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	461a      	mov	r2, r3
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d006      	beq.n	8011ac6 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	7adb      	ldrb	r3, [r3, #11]
 8011abc:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	7a9b      	ldrb	r3, [r3, #10]
 8011ac2:	777b      	strb	r3, [r7, #29]
 8011ac4:	e003      	b.n	8011ace <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011ac6:	23ff      	movs	r3, #255	@ 0xff
 8011ac8:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011ace:	7fba      	ldrb	r2, [r7, #30]
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	9302      	str	r3, [sp, #8]
 8011ad4:	2306      	movs	r3, #6
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	7f7b      	ldrb	r3, [r7, #29]
 8011ada:	9300      	str	r3, [sp, #0]
 8011adc:	4613      	mov	r3, r2
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	6879      	ldr	r1, [r7, #4]
 8011ae2:	68b8      	ldr	r0, [r7, #8]
 8011ae4:	f004 f992 	bl	8015e0c <ip4_output_if>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011aec:	68b8      	ldr	r0, [r7, #8]
 8011aee:	f7fa fa95 	bl	800c01c <pbuf_free>
  return err;
 8011af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3720      	adds	r7, #32
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	0801a548 	.word	0x0801a548
 8011b04:	0801acf8 	.word	0x0801acf8
 8011b08:	0801a598 	.word	0x0801a598

08011b0c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011b0c:	b590      	push	{r4, r7, lr}
 8011b0e:	b08b      	sub	sp, #44	@ 0x2c
 8011b10:	af04      	add	r7, sp, #16
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
 8011b18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d106      	bne.n	8011b2e <tcp_rst+0x22>
 8011b20:	4b1f      	ldr	r3, [pc, #124]	@ (8011ba0 <tcp_rst+0x94>)
 8011b22:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011b26:	491f      	ldr	r1, [pc, #124]	@ (8011ba4 <tcp_rst+0x98>)
 8011b28:	481f      	ldr	r0, [pc, #124]	@ (8011ba8 <tcp_rst+0x9c>)
 8011b2a:	f7ef f8b3 	bl	8000c94 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d106      	bne.n	8011b42 <tcp_rst+0x36>
 8011b34:	4b1a      	ldr	r3, [pc, #104]	@ (8011ba0 <tcp_rst+0x94>)
 8011b36:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8011b3a:	491c      	ldr	r1, [pc, #112]	@ (8011bac <tcp_rst+0xa0>)
 8011b3c:	481a      	ldr	r0, [pc, #104]	@ (8011ba8 <tcp_rst+0x9c>)
 8011b3e:	f7ef f8a9 	bl	8000c94 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b42:	2300      	movs	r3, #0
 8011b44:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011b46:	f646 030b 	movw	r3, #26635	@ 0x680b
 8011b4a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011b4c:	7dfb      	ldrb	r3, [r7, #23]
 8011b4e:	b29c      	uxth	r4, r3
 8011b50:	68b8      	ldr	r0, [r7, #8]
 8011b52:	f7f8 fe34 	bl	800a7be <lwip_htonl>
 8011b56:	4602      	mov	r2, r0
 8011b58:	8abb      	ldrh	r3, [r7, #20]
 8011b5a:	9303      	str	r3, [sp, #12]
 8011b5c:	2314      	movs	r3, #20
 8011b5e:	9302      	str	r3, [sp, #8]
 8011b60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f7ff fe84 	bl	801187c <tcp_output_alloc_header_common>
 8011b74:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00c      	beq.n	8011b96 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	2200      	movs	r2, #0
 8011b80:	6939      	ldr	r1, [r7, #16]
 8011b82:	68f8      	ldr	r0, [r7, #12]
 8011b84:	f7ff ff2a 	bl	80119dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8a:	683a      	ldr	r2, [r7, #0]
 8011b8c:	6939      	ldr	r1, [r7, #16]
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	f7ff ff62 	bl	8011a58 <tcp_output_control_segment>
 8011b94:	e000      	b.n	8011b98 <tcp_rst+0x8c>
    return;
 8011b96:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b98:	371c      	adds	r7, #28
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd90      	pop	{r4, r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	0801a548 	.word	0x0801a548
 8011ba4:	0801ad24 	.word	0x0801ad24
 8011ba8:	0801a598 	.word	0x0801a598
 8011bac:	0801ad40 	.word	0x0801ad40

08011bb0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b087      	sub	sp, #28
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d106      	bne.n	8011bd4 <tcp_send_empty_ack+0x24>
 8011bc6:	4b28      	ldr	r3, [pc, #160]	@ (8011c68 <tcp_send_empty_ack+0xb8>)
 8011bc8:	f240 72eb 	movw	r2, #2027	@ 0x7eb
 8011bcc:	4927      	ldr	r1, [pc, #156]	@ (8011c6c <tcp_send_empty_ack+0xbc>)
 8011bce:	4828      	ldr	r0, [pc, #160]	@ (8011c70 <tcp_send_empty_ack+0xc0>)
 8011bd0:	f7ef f860 	bl	8000c94 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011bd4:	7dfb      	ldrb	r3, [r7, #23]
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	f003 0304 	and.w	r3, r3, #4
 8011bde:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011be0:	7d7b      	ldrb	r3, [r7, #21]
 8011be2:	b29c      	uxth	r4, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7f8 fde8 	bl	800a7be <lwip_htonl>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff feb3 	bl	8011960 <tcp_output_alloc_header>
 8011bfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d109      	bne.n	8011c16 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	8b5b      	ldrh	r3, [r3, #26]
 8011c06:	f043 0303 	orr.w	r3, r3, #3
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011c10:	f06f 0301 	mvn.w	r3, #1
 8011c14:	e023      	b.n	8011c5e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011c16:	7dbb      	ldrb	r3, [r7, #22]
 8011c18:	7dfa      	ldrb	r2, [r7, #23]
 8011c1a:	6939      	ldr	r1, [r7, #16]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7ff fedd 	bl	80119dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	3304      	adds	r3, #4
 8011c28:	6939      	ldr	r1, [r7, #16]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7ff ff14 	bl	8011a58 <tcp_output_control_segment>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d007      	beq.n	8011c4c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	8b5b      	ldrh	r3, [r3, #26]
 8011c40:	f043 0303 	orr.w	r3, r3, #3
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	835a      	strh	r2, [r3, #26]
 8011c4a:	e006      	b.n	8011c5a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	8b5b      	ldrh	r3, [r3, #26]
 8011c50:	f023 0303 	bic.w	r3, r3, #3
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	371c      	adds	r7, #28
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd90      	pop	{r4, r7, pc}
 8011c66:	bf00      	nop
 8011c68:	0801a548 	.word	0x0801a548
 8011c6c:	0801ad5c 	.word	0x0801ad5c
 8011c70:	0801a598 	.word	0x0801a598

08011c74 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c74:	b590      	push	{r4, r7, lr}
 8011c76:	b085      	sub	sp, #20
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d106      	bne.n	8011c94 <tcp_keepalive+0x20>
 8011c86:	4b18      	ldr	r3, [pc, #96]	@ (8011ce8 <tcp_keepalive+0x74>)
 8011c88:	f640 0225 	movw	r2, #2085	@ 0x825
 8011c8c:	4917      	ldr	r1, [pc, #92]	@ (8011cec <tcp_keepalive+0x78>)
 8011c8e:	4818      	ldr	r0, [pc, #96]	@ (8011cf0 <tcp_keepalive+0x7c>)
 8011c90:	f7ef f800 	bl	8000c94 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c94:	7abb      	ldrb	r3, [r7, #10]
 8011c96:	b29c      	uxth	r4, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7f8 fd8d 	bl	800a7be <lwip_htonl>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	4621      	mov	r1, r4
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff fe58 	bl	8011960 <tcp_output_alloc_header>
 8011cb0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d102      	bne.n	8011cbe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cbc:	e010      	b.n	8011ce0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	68f9      	ldr	r1, [r7, #12]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f7ff fe89 	bl	80119dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	3304      	adds	r3, #4
 8011cd0:	68f9      	ldr	r1, [r7, #12]
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ff fec0 	bl	8011a58 <tcp_output_control_segment>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011cdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3714      	adds	r7, #20
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd90      	pop	{r4, r7, pc}
 8011ce8:	0801a548 	.word	0x0801a548
 8011cec:	0801ad7c 	.word	0x0801ad7c
 8011cf0:	0801a598 	.word	0x0801a598

08011cf4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011cf4:	b590      	push	{r4, r7, lr}
 8011cf6:	b08b      	sub	sp, #44	@ 0x2c
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d106      	bne.n	8011d14 <tcp_zero_window_probe+0x20>
 8011d06:	4b4d      	ldr	r3, [pc, #308]	@ (8011e3c <tcp_zero_window_probe+0x148>)
 8011d08:	f44f 6205 	mov.w	r2, #2128	@ 0x850
 8011d0c:	494c      	ldr	r1, [pc, #304]	@ (8011e40 <tcp_zero_window_probe+0x14c>)
 8011d0e:	484d      	ldr	r0, [pc, #308]	@ (8011e44 <tcp_zero_window_probe+0x150>)
 8011d10:	f7ee ffc0 	bl	8000c94 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d101      	bne.n	8011d24 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011d20:	2300      	movs	r3, #0
 8011d22:	e087      	b.n	8011e34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8011d2a:	2bff      	cmp	r3, #255	@ 0xff
 8011d2c:	d007      	beq.n	8011d3e <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8011d34:	3301      	adds	r3, #1
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d40:	691b      	ldr	r3, [r3, #16]
 8011d42:	899b      	ldrh	r3, [r3, #12]
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7f8 fd24 	bl	800a794 <lwip_htons>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	f003 0301 	and.w	r3, r3, #1
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d005      	beq.n	8011d64 <tcp_zero_window_probe+0x70>
 8011d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5a:	891b      	ldrh	r3, [r3, #8]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <tcp_zero_window_probe+0x70>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e000      	b.n	8011d66 <tcp_zero_window_probe+0x72>
 8011d64:	2300      	movs	r3, #0
 8011d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011d6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	bf0c      	ite	eq
 8011d72:	2301      	moveq	r3, #1
 8011d74:	2300      	movne	r3, #0
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011d7a:	7cfb      	ldrb	r3, [r7, #19]
 8011d7c:	b299      	uxth	r1, r3
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	8c3a      	ldrh	r2, [r7, #32]
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7ff fdea 	bl	8011960 <tcp_output_alloc_header>
 8011d8c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d102      	bne.n	8011d9a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d94:	f04f 33ff 	mov.w	r3, #4294967295
 8011d98:	e04c      	b.n	8011e34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8011da0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d011      	beq.n	8011dcc <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	899b      	ldrh	r3, [r3, #12]
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	b21b      	sxth	r3, r3
 8011db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011db4:	b21c      	sxth	r4, r3
 8011db6:	2011      	movs	r0, #17
 8011db8:	f7f8 fcec 	bl	800a794 <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	b21b      	sxth	r3, r3
 8011dc0:	4323      	orrs	r3, r4
 8011dc2:	b21b      	sxth	r3, r3
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	819a      	strh	r2, [r3, #12]
 8011dca:	e010      	b.n	8011dee <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	3314      	adds	r3, #20
 8011dd2:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dd6:	6858      	ldr	r0, [r3, #4]
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	891a      	ldrh	r2, [r3, #8]
 8011dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de0:	891b      	ldrh	r3, [r3, #8]
 8011de2:	1ad3      	subs	r3, r2, r3
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	2201      	movs	r2, #1
 8011de8:	6979      	ldr	r1, [r7, #20]
 8011dea:	f7fa fb49 	bl	800c480 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7f8 fce2 	bl	800a7be <lwip_htonl>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da02      	bge.n	8011e12 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	68fa      	ldr	r2, [r7, #12]
 8011e10:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8011e12:	2300      	movs	r3, #0
 8011e14:	2200      	movs	r2, #0
 8011e16:	69f9      	ldr	r1, [r7, #28]
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f7ff fddf 	bl	80119dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	3304      	adds	r3, #4
 8011e24:	69f9      	ldr	r1, [r7, #28]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff fe16 	bl	8011a58 <tcp_output_control_segment>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	372c      	adds	r7, #44	@ 0x2c
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd90      	pop	{r4, r7, pc}
 8011e3c:	0801a548 	.word	0x0801a548
 8011e40:	0801ad98 	.word	0x0801ad98
 8011e44:	0801a598 	.word	0x0801a598

08011e48 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011e50:	f7fa fbf8 	bl	800c644 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011e54:	4b0a      	ldr	r3, [pc, #40]	@ (8011e80 <tcpip_tcp_timer+0x38>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d103      	bne.n	8011e64 <tcpip_tcp_timer+0x1c>
 8011e5c:	4b09      	ldr	r3, [pc, #36]	@ (8011e84 <tcpip_tcp_timer+0x3c>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d005      	beq.n	8011e70 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e64:	2200      	movs	r2, #0
 8011e66:	4908      	ldr	r1, [pc, #32]	@ (8011e88 <tcpip_tcp_timer+0x40>)
 8011e68:	20fa      	movs	r0, #250	@ 0xfa
 8011e6a:	f000 f8f3 	bl	8012054 <sys_timeout>
 8011e6e:	e003      	b.n	8011e78 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e70:	4b06      	ldr	r3, [pc, #24]	@ (8011e8c <tcpip_tcp_timer+0x44>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]
  }
}
 8011e76:	bf00      	nop
 8011e78:	bf00      	nop
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	2000d8f8 	.word	0x2000d8f8
 8011e84:	2000d908 	.word	0x2000d908
 8011e88:	08011e49 	.word	0x08011e49
 8011e8c:	20004aec 	.word	0x20004aec

08011e90 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e94:	4b0a      	ldr	r3, [pc, #40]	@ (8011ec0 <tcp_timer_needed+0x30>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10f      	bne.n	8011ebc <tcp_timer_needed+0x2c>
 8011e9c:	4b09      	ldr	r3, [pc, #36]	@ (8011ec4 <tcp_timer_needed+0x34>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d103      	bne.n	8011eac <tcp_timer_needed+0x1c>
 8011ea4:	4b08      	ldr	r3, [pc, #32]	@ (8011ec8 <tcp_timer_needed+0x38>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d007      	beq.n	8011ebc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011eac:	4b04      	ldr	r3, [pc, #16]	@ (8011ec0 <tcp_timer_needed+0x30>)
 8011eae:	2201      	movs	r2, #1
 8011eb0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	4905      	ldr	r1, [pc, #20]	@ (8011ecc <tcp_timer_needed+0x3c>)
 8011eb6:	20fa      	movs	r0, #250	@ 0xfa
 8011eb8:	f000 f8cc 	bl	8012054 <sys_timeout>
  }
}
 8011ebc:	bf00      	nop
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	20004aec 	.word	0x20004aec
 8011ec4:	2000d8f8 	.word	0x2000d8f8
 8011ec8:	2000d908 	.word	0x2000d908
 8011ecc:	08011e49 	.word	0x08011e49

08011ed0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	60f8      	str	r0, [r7, #12]
 8011ed8:	60b9      	str	r1, [r7, #8]
 8011eda:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011edc:	200a      	movs	r0, #10
 8011ede:	f7f9 fa61 	bl	800b3a4 <memp_malloc>
 8011ee2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d109      	bne.n	8011efe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d151      	bne.n	8011f94 <sys_timeout_abs+0xc4>
 8011ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8011f9c <sys_timeout_abs+0xcc>)
 8011ef2:	22be      	movs	r2, #190	@ 0xbe
 8011ef4:	492a      	ldr	r1, [pc, #168]	@ (8011fa0 <sys_timeout_abs+0xd0>)
 8011ef6:	482b      	ldr	r0, [pc, #172]	@ (8011fa4 <sys_timeout_abs+0xd4>)
 8011ef8:	f7ee fecc 	bl	8000c94 <printf>
    return;
 8011efc:	e04a      	b.n	8011f94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	2200      	movs	r2, #0
 8011f02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	68fa      	ldr	r2, [r7, #12]
 8011f14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011f16:	4b24      	ldr	r3, [pc, #144]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d103      	bne.n	8011f26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011f1e:	4a22      	ldr	r2, [pc, #136]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	6013      	str	r3, [r2, #0]
    return;
 8011f24:	e037      	b.n	8011f96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	0fdb      	lsrs	r3, r3, #31
 8011f34:	f003 0301 	and.w	r3, r3, #1
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d007      	beq.n	8011f4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011f46:	4a18      	ldr	r2, [pc, #96]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	6013      	str	r3, [r2, #0]
 8011f4c:	e023      	b.n	8011f96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f4e:	4b16      	ldr	r3, [pc, #88]	@ (8011fa8 <sys_timeout_abs+0xd8>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	617b      	str	r3, [r7, #20]
 8011f54:	e01a      	b.n	8011f8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00b      	beq.n	8011f76 <sys_timeout_abs+0xa6>
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	685a      	ldr	r2, [r3, #4]
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	1ad3      	subs	r3, r2, r3
 8011f6a:	0fdb      	lsrs	r3, r3, #31
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d007      	beq.n	8011f86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	601a      	str	r2, [r3, #0]
        break;
 8011f84:	e007      	b.n	8011f96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	617b      	str	r3, [r7, #20]
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d1e1      	bne.n	8011f56 <sys_timeout_abs+0x86>
 8011f92:	e000      	b.n	8011f96 <sys_timeout_abs+0xc6>
    return;
 8011f94:	bf00      	nop
      }
    }
  }
}
 8011f96:	3718      	adds	r7, #24
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	0801adbc 	.word	0x0801adbc
 8011fa0:	0801adec 	.word	0x0801adec
 8011fa4:	0801ae2c 	.word	0x0801ae2c
 8011fa8:	20004ae4 	.word	0x20004ae4

08011fac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	4798      	blx	r3

  now = sys_now();
 8011fbe:	f7f2 fbcc 	bl	800475a <sys_now>
 8011fc2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8012008 <lwip_cyclic_timer+0x5c>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4413      	add	r3, r2
 8011fce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	0fdb      	lsrs	r3, r3, #31
 8011fd8:	f003 0301 	and.w	r3, r3, #1
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d009      	beq.n	8011ff6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	4413      	add	r3, r2
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	4907      	ldr	r1, [pc, #28]	@ (801200c <lwip_cyclic_timer+0x60>)
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7ff ff6e 	bl	8011ed0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011ff4:	e004      	b.n	8012000 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	4904      	ldr	r1, [pc, #16]	@ (801200c <lwip_cyclic_timer+0x60>)
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f7ff ff68 	bl	8011ed0 <sys_timeout_abs>
}
 8012000:	bf00      	nop
 8012002:	3718      	adds	r7, #24
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	20004ae8 	.word	0x20004ae8
 801200c:	08011fad 	.word	0x08011fad

08012010 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012016:	2301      	movs	r3, #1
 8012018:	607b      	str	r3, [r7, #4]
 801201a:	e00e      	b.n	801203a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801201c:	4a0b      	ldr	r2, [pc, #44]	@ (801204c <sys_timeouts_init+0x3c>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	00db      	lsls	r3, r3, #3
 8012028:	4a08      	ldr	r2, [pc, #32]	@ (801204c <sys_timeouts_init+0x3c>)
 801202a:	4413      	add	r3, r2
 801202c:	461a      	mov	r2, r3
 801202e:	4908      	ldr	r1, [pc, #32]	@ (8012050 <sys_timeouts_init+0x40>)
 8012030:	f000 f810 	bl	8012054 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	3301      	adds	r3, #1
 8012038:	607b      	str	r3, [r7, #4]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b04      	cmp	r3, #4
 801203e:	d9ed      	bls.n	801201c <sys_timeouts_init+0xc>
  }
}
 8012040:	bf00      	nop
 8012042:	bf00      	nop
 8012044:	3708      	adds	r7, #8
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	0801bd74 	.word	0x0801bd74
 8012050:	08011fad 	.word	0x08011fad

08012054 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012066:	d306      	bcc.n	8012076 <sys_timeout+0x22>
 8012068:	4b0a      	ldr	r3, [pc, #40]	@ (8012094 <sys_timeout+0x40>)
 801206a:	f240 1229 	movw	r2, #297	@ 0x129
 801206e:	490a      	ldr	r1, [pc, #40]	@ (8012098 <sys_timeout+0x44>)
 8012070:	480a      	ldr	r0, [pc, #40]	@ (801209c <sys_timeout+0x48>)
 8012072:	f7ee fe0f 	bl	8000c94 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012076:	f7f2 fb70 	bl	800475a <sys_now>
 801207a:	4602      	mov	r2, r0
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	4413      	add	r3, r2
 8012080:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	68b9      	ldr	r1, [r7, #8]
 8012086:	6978      	ldr	r0, [r7, #20]
 8012088:	f7ff ff22 	bl	8011ed0 <sys_timeout_abs>
#endif
}
 801208c:	bf00      	nop
 801208e:	3718      	adds	r7, #24
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	0801adbc 	.word	0x0801adbc
 8012098:	0801ae54 	.word	0x0801ae54
 801209c:	0801ae2c 	.word	0x0801ae2c

080120a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80120a6:	f7f2 fb58 	bl	800475a <sys_now>
 80120aa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80120ac:	4b17      	ldr	r3, [pc, #92]	@ (801210c <sys_check_timeouts+0x6c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d022      	beq.n	80120fe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	1ad3      	subs	r3, r2, r3
 80120c0:	0fdb      	lsrs	r3, r3, #31
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d11a      	bne.n	8012102 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a0e      	ldr	r2, [pc, #56]	@ (801210c <sys_check_timeouts+0x6c>)
 80120d2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	689b      	ldr	r3, [r3, #8]
 80120d8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4a0a      	ldr	r2, [pc, #40]	@ (8012110 <sys_check_timeouts+0x70>)
 80120e6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80120e8:	68b9      	ldr	r1, [r7, #8]
 80120ea:	200a      	movs	r0, #10
 80120ec:	f7f9 f99e 	bl	800b42c <memp_free>
    if (handler != NULL) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0da      	beq.n	80120ac <sys_check_timeouts+0xc>
      handler(arg);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6838      	ldr	r0, [r7, #0]
 80120fa:	4798      	blx	r3
  do {
 80120fc:	e7d6      	b.n	80120ac <sys_check_timeouts+0xc>
      return;
 80120fe:	bf00      	nop
 8012100:	e000      	b.n	8012104 <sys_check_timeouts+0x64>
      return;
 8012102:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20004ae4 	.word	0x20004ae4
 8012110:	20004ae8 	.word	0x20004ae8

08012114 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801211a:	4b16      	ldr	r3, [pc, #88]	@ (8012174 <sys_timeouts_sleeptime+0x60>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d102      	bne.n	8012128 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012122:	f04f 33ff 	mov.w	r3, #4294967295
 8012126:	e020      	b.n	801216a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012128:	f7f2 fb17 	bl	800475a <sys_now>
 801212c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801212e:	4b11      	ldr	r3, [pc, #68]	@ (8012174 <sys_timeouts_sleeptime+0x60>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	685a      	ldr	r2, [r3, #4]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	0fdb      	lsrs	r3, r3, #31
 801213a:	f003 0301 	and.w	r3, r3, #1
 801213e:	b2db      	uxtb	r3, r3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012144:	2300      	movs	r3, #0
 8012146:	e010      	b.n	801216a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012148:	4b0a      	ldr	r3, [pc, #40]	@ (8012174 <sys_timeouts_sleeptime+0x60>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	685a      	ldr	r2, [r3, #4]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	da06      	bge.n	8012168 <sys_timeouts_sleeptime+0x54>
 801215a:	4b07      	ldr	r3, [pc, #28]	@ (8012178 <sys_timeouts_sleeptime+0x64>)
 801215c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012160:	4906      	ldr	r1, [pc, #24]	@ (801217c <sys_timeouts_sleeptime+0x68>)
 8012162:	4807      	ldr	r0, [pc, #28]	@ (8012180 <sys_timeouts_sleeptime+0x6c>)
 8012164:	f7ee fd96 	bl	8000c94 <printf>
    return ret;
 8012168:	683b      	ldr	r3, [r7, #0]
  }
}
 801216a:	4618      	mov	r0, r3
 801216c:	3708      	adds	r7, #8
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	20004ae4 	.word	0x20004ae4
 8012178:	0801adbc 	.word	0x0801adbc
 801217c:	0801ae8c 	.word	0x0801ae8c
 8012180:	0801ae2c 	.word	0x0801ae2c

08012184 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012188:	f005 f88e 	bl	80172a8 <rand>
 801218c:	4603      	mov	r3, r0
 801218e:	b29b      	uxth	r3, r3
 8012190:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012194:	b29b      	uxth	r3, r3
 8012196:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801219a:	b29a      	uxth	r2, r3
 801219c:	4b01      	ldr	r3, [pc, #4]	@ (80121a4 <udp_init+0x20>)
 801219e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80121a0:	bf00      	nop
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	20000018 	.word	0x20000018

080121a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b083      	sub	sp, #12
 80121ac:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80121ae:	2300      	movs	r3, #0
 80121b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80121b2:	4b17      	ldr	r3, [pc, #92]	@ (8012210 <udp_new_port+0x68>)
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	1c5a      	adds	r2, r3, #1
 80121b8:	b291      	uxth	r1, r2
 80121ba:	4a15      	ldr	r2, [pc, #84]	@ (8012210 <udp_new_port+0x68>)
 80121bc:	8011      	strh	r1, [r2, #0]
 80121be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d103      	bne.n	80121ce <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80121c6:	4b12      	ldr	r3, [pc, #72]	@ (8012210 <udp_new_port+0x68>)
 80121c8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80121cc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121ce:	4b11      	ldr	r3, [pc, #68]	@ (8012214 <udp_new_port+0x6c>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	603b      	str	r3, [r7, #0]
 80121d4:	e011      	b.n	80121fa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	8a5a      	ldrh	r2, [r3, #18]
 80121da:	4b0d      	ldr	r3, [pc, #52]	@ (8012210 <udp_new_port+0x68>)
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d108      	bne.n	80121f4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80121e2:	88fb      	ldrh	r3, [r7, #6]
 80121e4:	3301      	adds	r3, #1
 80121e6:	80fb      	strh	r3, [r7, #6]
 80121e8:	88fb      	ldrh	r3, [r7, #6]
 80121ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80121ee:	d3e0      	bcc.n	80121b2 <udp_new_port+0xa>
        return 0;
 80121f0:	2300      	movs	r3, #0
 80121f2:	e007      	b.n	8012204 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	603b      	str	r3, [r7, #0]
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d1ea      	bne.n	80121d6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012200:	4b03      	ldr	r3, [pc, #12]	@ (8012210 <udp_new_port+0x68>)
 8012202:	881b      	ldrh	r3, [r3, #0]
}
 8012204:	4618      	mov	r0, r3
 8012206:	370c      	adds	r7, #12
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr
 8012210:	20000018 	.word	0x20000018
 8012214:	2000d910 	.word	0x2000d910

08012218 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	4613      	mov	r3, r2
 8012224:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d105      	bne.n	8012238 <udp_input_local_match+0x20>
 801222c:	4b27      	ldr	r3, [pc, #156]	@ (80122cc <udp_input_local_match+0xb4>)
 801222e:	2287      	movs	r2, #135	@ 0x87
 8012230:	4927      	ldr	r1, [pc, #156]	@ (80122d0 <udp_input_local_match+0xb8>)
 8012232:	4828      	ldr	r0, [pc, #160]	@ (80122d4 <udp_input_local_match+0xbc>)
 8012234:	f7ee fd2e 	bl	8000c94 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d105      	bne.n	801224a <udp_input_local_match+0x32>
 801223e:	4b23      	ldr	r3, [pc, #140]	@ (80122cc <udp_input_local_match+0xb4>)
 8012240:	2288      	movs	r2, #136	@ 0x88
 8012242:	4925      	ldr	r1, [pc, #148]	@ (80122d8 <udp_input_local_match+0xc0>)
 8012244:	4823      	ldr	r0, [pc, #140]	@ (80122d4 <udp_input_local_match+0xbc>)
 8012246:	f7ee fd25 	bl	8000c94 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	7a1b      	ldrb	r3, [r3, #8]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00b      	beq.n	801226a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	7a1a      	ldrb	r2, [r3, #8]
 8012256:	4b21      	ldr	r3, [pc, #132]	@ (80122dc <udp_input_local_match+0xc4>)
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801225e:	3301      	adds	r3, #1
 8012260:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012262:	429a      	cmp	r2, r3
 8012264:	d001      	beq.n	801226a <udp_input_local_match+0x52>
    return 0;
 8012266:	2300      	movs	r3, #0
 8012268:	e02b      	b.n	80122c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801226a:	79fb      	ldrb	r3, [r7, #7]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d018      	beq.n	80122a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d013      	beq.n	801229e <udp_input_local_match+0x86>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00f      	beq.n	801229e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801227e:	4b17      	ldr	r3, [pc, #92]	@ (80122dc <udp_input_local_match+0xc4>)
 8012280:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012286:	d00a      	beq.n	801229e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	4b13      	ldr	r3, [pc, #76]	@ (80122dc <udp_input_local_match+0xc4>)
 801228e:	695b      	ldr	r3, [r3, #20]
 8012290:	405a      	eors	r2, r3
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	3308      	adds	r3, #8
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801229a:	2b00      	cmp	r3, #0
 801229c:	d110      	bne.n	80122c0 <udp_input_local_match+0xa8>
          return 1;
 801229e:	2301      	movs	r3, #1
 80122a0:	e00f      	b.n	80122c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d009      	beq.n	80122bc <udp_input_local_match+0xa4>
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d005      	beq.n	80122bc <udp_input_local_match+0xa4>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	4b09      	ldr	r3, [pc, #36]	@ (80122dc <udp_input_local_match+0xc4>)
 80122b6:	695b      	ldr	r3, [r3, #20]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d101      	bne.n	80122c0 <udp_input_local_match+0xa8>
        return 1;
 80122bc:	2301      	movs	r3, #1
 80122be:	e000      	b.n	80122c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	0801aea0 	.word	0x0801aea0
 80122d0:	0801aecc 	.word	0x0801aecc
 80122d4:	0801aef0 	.word	0x0801aef0
 80122d8:	0801af18 	.word	0x0801af18
 80122dc:	200054ec 	.word	0x200054ec

080122e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80122e0:	b590      	push	{r4, r7, lr}
 80122e2:	b08d      	sub	sp, #52	@ 0x34
 80122e4:	af02      	add	r7, sp, #8
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d105      	bne.n	8012300 <udp_input+0x20>
 80122f4:	4b87      	ldr	r3, [pc, #540]	@ (8012514 <udp_input+0x234>)
 80122f6:	22cf      	movs	r2, #207	@ 0xcf
 80122f8:	4987      	ldr	r1, [pc, #540]	@ (8012518 <udp_input+0x238>)
 80122fa:	4888      	ldr	r0, [pc, #544]	@ (801251c <udp_input+0x23c>)
 80122fc:	f7ee fcca 	bl	8000c94 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d105      	bne.n	8012312 <udp_input+0x32>
 8012306:	4b83      	ldr	r3, [pc, #524]	@ (8012514 <udp_input+0x234>)
 8012308:	22d0      	movs	r2, #208	@ 0xd0
 801230a:	4985      	ldr	r1, [pc, #532]	@ (8012520 <udp_input+0x240>)
 801230c:	4883      	ldr	r0, [pc, #524]	@ (801251c <udp_input+0x23c>)
 801230e:	f7ee fcc1 	bl	8000c94 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	2b07      	cmp	r3, #7
 8012318:	d803      	bhi.n	8012322 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7f9 fe7e 	bl	800c01c <pbuf_free>
    goto end;
 8012320:	e0f0      	b.n	8012504 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012328:	4b7e      	ldr	r3, [pc, #504]	@ (8012524 <udp_input+0x244>)
 801232a:	695b      	ldr	r3, [r3, #20]
 801232c:	4a7d      	ldr	r2, [pc, #500]	@ (8012524 <udp_input+0x244>)
 801232e:	6812      	ldr	r2, [r2, #0]
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f003 fea8 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8012338:	4603      	mov	r3, r0
 801233a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	b29b      	uxth	r3, r3
 8012342:	4618      	mov	r0, r3
 8012344:	f7f8 fa26 	bl	800a794 <lwip_htons>
 8012348:	4603      	mov	r3, r0
 801234a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	885b      	ldrh	r3, [r3, #2]
 8012350:	b29b      	uxth	r3, r3
 8012352:	4618      	mov	r0, r3
 8012354:	f7f8 fa1e 	bl	800a794 <lwip_htons>
 8012358:	4603      	mov	r3, r0
 801235a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801235c:	2300      	movs	r3, #0
 801235e:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8012360:	2300      	movs	r3, #0
 8012362:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012364:	2300      	movs	r3, #0
 8012366:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012368:	4b6f      	ldr	r3, [pc, #444]	@ (8012528 <udp_input+0x248>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	61fb      	str	r3, [r7, #28]
 801236e:	e054      	b.n	801241a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	8a5b      	ldrh	r3, [r3, #18]
 8012374:	89fa      	ldrh	r2, [r7, #14]
 8012376:	429a      	cmp	r2, r3
 8012378:	d14a      	bne.n	8012410 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801237a:	7cfb      	ldrb	r3, [r7, #19]
 801237c:	461a      	mov	r2, r3
 801237e:	6839      	ldr	r1, [r7, #0]
 8012380:	69f8      	ldr	r0, [r7, #28]
 8012382:	f7ff ff49 	bl	8012218 <udp_input_local_match>
 8012386:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012388:	2b00      	cmp	r3, #0
 801238a:	d041      	beq.n	8012410 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	7c1b      	ldrb	r3, [r3, #16]
 8012390:	f003 0304 	and.w	r3, r3, #4
 8012394:	2b00      	cmp	r3, #0
 8012396:	d11d      	bne.n	80123d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801239a:	2b00      	cmp	r3, #0
 801239c:	d102      	bne.n	80123a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80123a2:	e017      	b.n	80123d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80123a4:	7cfb      	ldrb	r3, [r7, #19]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d014      	beq.n	80123d4 <udp_input+0xf4>
 80123aa:	4b5e      	ldr	r3, [pc, #376]	@ (8012524 <udp_input+0x244>)
 80123ac:	695b      	ldr	r3, [r3, #20]
 80123ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123b2:	d10f      	bne.n	80123d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80123b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	3304      	adds	r3, #4
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d008      	beq.n	80123d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	3304      	adds	r3, #4
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d101      	bne.n	80123d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	8a9b      	ldrh	r3, [r3, #20]
 80123d8:	8a3a      	ldrh	r2, [r7, #16]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d118      	bne.n	8012410 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d005      	beq.n	80123f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	4b4e      	ldr	r3, [pc, #312]	@ (8012524 <udp_input+0x244>)
 80123ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d10e      	bne.n	8012410 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80123f2:	6a3b      	ldr	r3, [r7, #32]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d014      	beq.n	8012422 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	68da      	ldr	r2, [r3, #12]
 80123fc:	6a3b      	ldr	r3, [r7, #32]
 80123fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012400:	4b49      	ldr	r3, [pc, #292]	@ (8012528 <udp_input+0x248>)
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012408:	4a47      	ldr	r2, [pc, #284]	@ (8012528 <udp_input+0x248>)
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801240e:	e008      	b.n	8012422 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012410:	69fb      	ldr	r3, [r7, #28]
 8012412:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	61fb      	str	r3, [r7, #28]
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1a7      	bne.n	8012370 <udp_input+0x90>
 8012420:	e000      	b.n	8012424 <udp_input+0x144>
        break;
 8012422:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <udp_input+0x14e>
    pcb = uncon_pcb;
 801242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242c:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d002      	beq.n	801243a <udp_input+0x15a>
    for_us = 1;
 8012434:	2301      	movs	r3, #1
 8012436:	76fb      	strb	r3, [r7, #27]
 8012438:	e00a      	b.n	8012450 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	3304      	adds	r3, #4
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	4b38      	ldr	r3, [pc, #224]	@ (8012524 <udp_input+0x244>)
 8012442:	695b      	ldr	r3, [r3, #20]
 8012444:	429a      	cmp	r2, r3
 8012446:	bf0c      	ite	eq
 8012448:	2301      	moveq	r3, #1
 801244a:	2300      	movne	r3, #0
 801244c:	b2db      	uxtb	r3, r3
 801244e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012450:	7efb      	ldrb	r3, [r7, #27]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d052      	beq.n	80124fc <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	88db      	ldrh	r3, [r3, #6]
 801245a:	b29b      	uxth	r3, r3
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00b      	beq.n	8012478 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	891a      	ldrh	r2, [r3, #8]
 8012464:	4b31      	ldr	r3, [pc, #196]	@ (801252c <udp_input+0x24c>)
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	4b31      	ldr	r3, [pc, #196]	@ (8012530 <udp_input+0x250>)
 801246a:	2111      	movs	r1, #17
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7f8 fac3 	bl	800a9f8 <ip_chksum_pseudo>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d146      	bne.n	8012506 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012478:	2108      	movs	r1, #8
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7f9 fd4c 	bl	800bf18 <pbuf_remove_header>
 8012480:	4603      	mov	r3, r0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d00a      	beq.n	801249c <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012486:	4b23      	ldr	r3, [pc, #140]	@ (8012514 <udp_input+0x234>)
 8012488:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801248c:	4929      	ldr	r1, [pc, #164]	@ (8012534 <udp_input+0x254>)
 801248e:	4823      	ldr	r0, [pc, #140]	@ (801251c <udp_input+0x23c>)
 8012490:	f7ee fc00 	bl	8000c94 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f7f9 fdc1 	bl	800c01c <pbuf_free>
      goto end;
 801249a:	e033      	b.n	8012504 <udp_input+0x224>
    }

    if (pcb != NULL) {
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d012      	beq.n	80124c8 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d00a      	beq.n	80124c0 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	699c      	ldr	r4, [r3, #24]
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	69d8      	ldr	r0, [r3, #28]
 80124b2:	8a3b      	ldrh	r3, [r7, #16]
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	4b1e      	ldr	r3, [pc, #120]	@ (8012530 <udp_input+0x250>)
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	69f9      	ldr	r1, [r7, #28]
 80124bc:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80124be:	e026      	b.n	801250e <udp_input+0x22e>
        pbuf_free(p);
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7f9 fdab 	bl	800c01c <pbuf_free>
        goto end;
 80124c6:	e01d      	b.n	8012504 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80124c8:	7cfb      	ldrb	r3, [r7, #19]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d112      	bne.n	80124f4 <udp_input+0x214>
 80124ce:	4b15      	ldr	r3, [pc, #84]	@ (8012524 <udp_input+0x244>)
 80124d0:	695b      	ldr	r3, [r3, #20]
 80124d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124d6:	2be0      	cmp	r3, #224	@ 0xe0
 80124d8:	d00c      	beq.n	80124f4 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80124da:	4b12      	ldr	r3, [pc, #72]	@ (8012524 <udp_input+0x244>)
 80124dc:	899b      	ldrh	r3, [r3, #12]
 80124de:	3308      	adds	r3, #8
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	b21b      	sxth	r3, r3
 80124e4:	4619      	mov	r1, r3
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f7f9 fd85 	bl	800bff6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80124ec:	2103      	movs	r1, #3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f003 fa00 	bl	80158f4 <icmp_dest_unreach>
      pbuf_free(p);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7f9 fd91 	bl	800c01c <pbuf_free>
  return;
 80124fa:	e008      	b.n	801250e <udp_input+0x22e>
    pbuf_free(p);
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7f9 fd8d 	bl	800c01c <pbuf_free>
  return;
 8012502:	e004      	b.n	801250e <udp_input+0x22e>
 8012504:	e003      	b.n	801250e <udp_input+0x22e>
            goto chkerr;
 8012506:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7f9 fd87 	bl	800c01c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801250e:	372c      	adds	r7, #44	@ 0x2c
 8012510:	46bd      	mov	sp, r7
 8012512:	bd90      	pop	{r4, r7, pc}
 8012514:	0801aea0 	.word	0x0801aea0
 8012518:	0801af40 	.word	0x0801af40
 801251c:	0801aef0 	.word	0x0801aef0
 8012520:	0801af58 	.word	0x0801af58
 8012524:	200054ec 	.word	0x200054ec
 8012528:	2000d910 	.word	0x2000d910
 801252c:	20005500 	.word	0x20005500
 8012530:	200054fc 	.word	0x200054fc
 8012534:	0801af74 	.word	0x0801af74

08012538 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b088      	sub	sp, #32
 801253c:	af02      	add	r7, sp, #8
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	607a      	str	r2, [r7, #4]
 8012544:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d105      	bne.n	8012558 <udp_sendto_if+0x20>
 801254c:	4826      	ldr	r0, [pc, #152]	@ (80125e8 <udp_sendto_if+0xb0>)
 801254e:	f7ee fba1 	bl	8000c94 <printf>
 8012552:	f06f 030f 	mvn.w	r3, #15
 8012556:	e043      	b.n	80125e0 <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d105      	bne.n	801256a <udp_sendto_if+0x32>
 801255e:	4823      	ldr	r0, [pc, #140]	@ (80125ec <udp_sendto_if+0xb4>)
 8012560:	f7ee fb98 	bl	8000c94 <printf>
 8012564:	f06f 030f 	mvn.w	r3, #15
 8012568:	e03a      	b.n	80125e0 <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d105      	bne.n	801257c <udp_sendto_if+0x44>
 8012570:	481f      	ldr	r0, [pc, #124]	@ (80125f0 <udp_sendto_if+0xb8>)
 8012572:	f7ee fb8f 	bl	8000c94 <printf>
 8012576:	f06f 030f 	mvn.w	r3, #15
 801257a:	e031      	b.n	80125e0 <udp_sendto_if+0xa8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801257c:	6a3b      	ldr	r3, [r7, #32]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d105      	bne.n	801258e <udp_sendto_if+0x56>
 8012582:	481c      	ldr	r0, [pc, #112]	@ (80125f4 <udp_sendto_if+0xbc>)
 8012584:	f7ee fb86 	bl	8000c94 <printf>
 8012588:	f06f 030f 	mvn.w	r3, #15
 801258c:	e028      	b.n	80125e0 <udp_sendto_if+0xa8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d009      	beq.n	80125a8 <udp_sendto_if+0x70>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d005      	beq.n	80125a8 <udp_sendto_if+0x70>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125a4:	2be0      	cmp	r3, #224	@ 0xe0
 80125a6:	d103      	bne.n	80125b0 <udp_sendto_if+0x78>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80125a8:	6a3b      	ldr	r3, [r7, #32]
 80125aa:	3304      	adds	r3, #4
 80125ac:	617b      	str	r3, [r7, #20]
 80125ae:	e00b      	b.n	80125c8 <udp_sendto_if+0x90>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	3304      	adds	r3, #4
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d002      	beq.n	80125c4 <udp_sendto_if+0x8c>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80125be:	f06f 0303 	mvn.w	r3, #3
 80125c2:	e00d      	b.n	80125e0 <udp_sendto_if+0xa8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80125c8:	887a      	ldrh	r2, [r7, #2]
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	9301      	str	r3, [sp, #4]
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	4613      	mov	r3, r2
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	68b9      	ldr	r1, [r7, #8]
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f000 f80d 	bl	80125f8 <udp_sendto_if_src>
 80125de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3718      	adds	r7, #24
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	0801b010 	.word	0x0801b010
 80125ec:	0801b02c 	.word	0x0801b02c
 80125f0:	0801b048 	.word	0x0801b048
 80125f4:	0801b068 	.word	0x0801b068

080125f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08e      	sub	sp, #56	@ 0x38
 80125fc:	af04      	add	r7, sp, #16
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
 8012604:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d105      	bne.n	8012618 <udp_sendto_if_src+0x20>
 801260c:	4868      	ldr	r0, [pc, #416]	@ (80127b0 <udp_sendto_if_src+0x1b8>)
 801260e:	f7ee fb41 	bl	8000c94 <printf>
 8012612:	f06f 030f 	mvn.w	r3, #15
 8012616:	e0c6      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d105      	bne.n	801262a <udp_sendto_if_src+0x32>
 801261e:	4865      	ldr	r0, [pc, #404]	@ (80127b4 <udp_sendto_if_src+0x1bc>)
 8012620:	f7ee fb38 	bl	8000c94 <printf>
 8012624:	f06f 030f 	mvn.w	r3, #15
 8012628:	e0bd      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d105      	bne.n	801263c <udp_sendto_if_src+0x44>
 8012630:	4861      	ldr	r0, [pc, #388]	@ (80127b8 <udp_sendto_if_src+0x1c0>)
 8012632:	f7ee fb2f 	bl	8000c94 <printf>
 8012636:	f06f 030f 	mvn.w	r3, #15
 801263a:	e0b4      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801263e:	2b00      	cmp	r3, #0
 8012640:	d105      	bne.n	801264e <udp_sendto_if_src+0x56>
 8012642:	485e      	ldr	r0, [pc, #376]	@ (80127bc <udp_sendto_if_src+0x1c4>)
 8012644:	f7ee fb26 	bl	8000c94 <printf>
 8012648:	f06f 030f 	mvn.w	r3, #15
 801264c:	e0ab      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012650:	2b00      	cmp	r3, #0
 8012652:	d105      	bne.n	8012660 <udp_sendto_if_src+0x68>
 8012654:	485a      	ldr	r0, [pc, #360]	@ (80127c0 <udp_sendto_if_src+0x1c8>)
 8012656:	f7ee fb1d 	bl	8000c94 <printf>
 801265a:	f06f 030f 	mvn.w	r3, #15
 801265e:	e0a2      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	8a5b      	ldrh	r3, [r3, #18]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d10f      	bne.n	8012688 <udp_sendto_if_src+0x90>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012668:	68f9      	ldr	r1, [r7, #12]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	8a5b      	ldrh	r3, [r3, #18]
 801266e:	461a      	mov	r2, r3
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f000 f8ad 	bl	80127d0 <udp_bind>
 8012676:	4603      	mov	r3, r0
 8012678:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 801267a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d002      	beq.n	8012688 <udp_sendto_if_src+0x90>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012686:	e08e      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012690:	4293      	cmp	r3, r2
 8012692:	d902      	bls.n	801269a <udp_sendto_if_src+0xa2>
    return ERR_MEM;
 8012694:	f04f 33ff 	mov.w	r3, #4294967295
 8012698:	e085      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801269a:	2108      	movs	r1, #8
 801269c:	68b8      	ldr	r0, [r7, #8]
 801269e:	f7f9 fc2b 	bl	800bef8 <pbuf_add_header>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d015      	beq.n	80126d4 <udp_sendto_if_src+0xdc>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80126a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80126ac:	2108      	movs	r1, #8
 80126ae:	2022      	movs	r0, #34	@ 0x22
 80126b0:	f7f9 f9d4 	bl	800ba5c <pbuf_alloc>
 80126b4:	6238      	str	r0, [r7, #32]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d102      	bne.n	80126c2 <udp_sendto_if_src+0xca>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80126bc:	f04f 33ff 	mov.w	r3, #4294967295
 80126c0:	e071      	b.n	80127a6 <udp_sendto_if_src+0x1ae>
    }
    if (p->tot_len != 0) {
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	891b      	ldrh	r3, [r3, #8]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d006      	beq.n	80126d8 <udp_sendto_if_src+0xe0>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80126ca:	68b9      	ldr	r1, [r7, #8]
 80126cc:	6a38      	ldr	r0, [r7, #32]
 80126ce:	f7f9 fdb9 	bl	800c244 <pbuf_chain>
 80126d2:	e001      	b.n	80126d8 <udp_sendto_if_src+0xe0>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	895b      	ldrh	r3, [r3, #10]
 80126dc:	2b07      	cmp	r3, #7
 80126de:	d806      	bhi.n	80126ee <udp_sendto_if_src+0xf6>
 80126e0:	4b38      	ldr	r3, [pc, #224]	@ (80127c4 <udp_sendto_if_src+0x1cc>)
 80126e2:	f240 320d 	movw	r2, #781	@ 0x30d
 80126e6:	4938      	ldr	r1, [pc, #224]	@ (80127c8 <udp_sendto_if_src+0x1d0>)
 80126e8:	4838      	ldr	r0, [pc, #224]	@ (80127cc <udp_sendto_if_src+0x1d4>)
 80126ea:	f7ee fad3 	bl	8000c94 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80126ee:	6a3b      	ldr	r3, [r7, #32]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	61bb      	str	r3, [r7, #24]
  udphdr->src = lwip_htons(pcb->local_port);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	8a5b      	ldrh	r3, [r3, #18]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7f8 f84b 	bl	800a794 <lwip_htons>
 80126fe:	4603      	mov	r3, r0
 8012700:	461a      	mov	r2, r3
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012706:	887b      	ldrh	r3, [r7, #2]
 8012708:	4618      	mov	r0, r3
 801270a:	f7f8 f843 	bl	800a794 <lwip_htons>
 801270e:	4603      	mov	r3, r0
 8012710:	461a      	mov	r2, r3
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	2200      	movs	r2, #0
 801271a:	719a      	strb	r2, [r3, #6]
 801271c:	2200      	movs	r2, #0
 801271e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	891b      	ldrh	r3, [r3, #8]
 8012724:	4618      	mov	r0, r3
 8012726:	f7f8 f835 	bl	800a794 <lwip_htons>
 801272a:	4603      	mov	r3, r0
 801272c:	461a      	mov	r2, r3
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	7c1b      	ldrb	r3, [r3, #16]
 8012736:	f003 0301 	and.w	r3, r3, #1
 801273a:	2b00      	cmp	r3, #0
 801273c:	d113      	bne.n	8012766 <udp_sendto_if_src+0x16e>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	891a      	ldrh	r2, [r3, #8]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012748:	2111      	movs	r1, #17
 801274a:	6a38      	ldr	r0, [r7, #32]
 801274c:	f7f8 f954 	bl	800a9f8 <ip_chksum_pseudo>
 8012750:	4603      	mov	r3, r0
 8012752:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 8012754:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012756:	2b00      	cmp	r3, #0
 8012758:	d102      	bne.n	8012760 <udp_sendto_if_src+0x168>
          udpchksum = 0xffff;
 801275a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801275e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        udphdr->chksum = udpchksum;
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012764:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012766:	2311      	movs	r3, #17
 8012768:	75fb      	strb	r3, [r7, #23]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	7adb      	ldrb	r3, [r3, #11]
 801276e:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	7a9b      	ldrb	r3, [r3, #10]
 8012774:	7db9      	ldrb	r1, [r7, #22]
 8012776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012778:	9202      	str	r2, [sp, #8]
 801277a:	7dfa      	ldrb	r2, [r7, #23]
 801277c:	9201      	str	r2, [sp, #4]
 801277e:	9300      	str	r3, [sp, #0]
 8012780:	460b      	mov	r3, r1
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012786:	6a38      	ldr	r0, [r7, #32]
 8012788:	f003 fb6a 	bl	8015e60 <ip4_output_if_src>
 801278c:	4603      	mov	r3, r0
 801278e:	77fb      	strb	r3, [r7, #31]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012790:	6a3a      	ldr	r2, [r7, #32]
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	429a      	cmp	r2, r3
 8012796:	d004      	beq.n	80127a2 <udp_sendto_if_src+0x1aa>
    /* free the header pbuf */
    pbuf_free(q);
 8012798:	6a38      	ldr	r0, [r7, #32]
 801279a:	f7f9 fc3f 	bl	800c01c <pbuf_free>
    q = NULL;
 801279e:	2300      	movs	r3, #0
 80127a0:	623b      	str	r3, [r7, #32]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80127a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3728      	adds	r7, #40	@ 0x28
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	0801b088 	.word	0x0801b088
 80127b4:	0801b0a8 	.word	0x0801b0a8
 80127b8:	0801b0c8 	.word	0x0801b0c8
 80127bc:	0801b0ec 	.word	0x0801b0ec
 80127c0:	0801b110 	.word	0x0801b110
 80127c4:	0801aea0 	.word	0x0801aea0
 80127c8:	0801b134 	.word	0x0801b134
 80127cc:	0801aef0 	.word	0x0801aef0

080127d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	4613      	mov	r3, r2
 80127dc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d101      	bne.n	80127e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80127e4:	4b37      	ldr	r3, [pc, #220]	@ (80128c4 <udp_bind+0xf4>)
 80127e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d105      	bne.n	80127fa <udp_bind+0x2a>
 80127ee:	4836      	ldr	r0, [pc, #216]	@ (80128c8 <udp_bind+0xf8>)
 80127f0:	f7ee fa50 	bl	8000c94 <printf>
 80127f4:	f06f 030f 	mvn.w	r3, #15
 80127f8:	e060      	b.n	80128bc <udp_bind+0xec>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80127fa:	2300      	movs	r3, #0
 80127fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127fe:	4b33      	ldr	r3, [pc, #204]	@ (80128cc <udp_bind+0xfc>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	617b      	str	r3, [r7, #20]
 8012804:	e009      	b.n	801281a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	429a      	cmp	r2, r3
 801280c:	d102      	bne.n	8012814 <udp_bind+0x44>
      rebind = 1;
 801280e:	2301      	movs	r3, #1
 8012810:	74fb      	strb	r3, [r7, #19]
      break;
 8012812:	e005      	b.n	8012820 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	617b      	str	r3, [r7, #20]
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1f2      	bne.n	8012806 <udp_bind+0x36>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012820:	88fb      	ldrh	r3, [r7, #6]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d109      	bne.n	801283a <udp_bind+0x6a>
    port = udp_new_port();
 8012826:	f7ff fcbf 	bl	80121a8 <udp_new_port>
 801282a:	4603      	mov	r3, r0
 801282c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801282e:	88fb      	ldrh	r3, [r7, #6]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d12c      	bne.n	801288e <udp_bind+0xbe>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012834:	f06f 0307 	mvn.w	r3, #7
 8012838:	e040      	b.n	80128bc <udp_bind+0xec>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801283a:	4b24      	ldr	r3, [pc, #144]	@ (80128cc <udp_bind+0xfc>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	617b      	str	r3, [r7, #20]
 8012840:	e022      	b.n	8012888 <udp_bind+0xb8>
      if (pcb != ipcb) {
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	429a      	cmp	r2, r3
 8012848:	d01b      	beq.n	8012882 <udp_bind+0xb2>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	8a5b      	ldrh	r3, [r3, #18]
 801284e:	88fa      	ldrh	r2, [r7, #6]
 8012850:	429a      	cmp	r2, r3
 8012852:	d116      	bne.n	8012882 <udp_bind+0xb2>
              (((IP_GET_TYPE(&ipcb->local_ip) == IP_GET_TYPE(ipaddr)) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) ||
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801285c:	429a      	cmp	r2, r3
 801285e:	d00d      	beq.n	801287c <udp_bind+0xac>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) ||
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00a      	beq.n	801287c <udp_bind+0xac>
              ip_addr_isany(ipaddr) ||
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d006      	beq.n	801287c <udp_bind+0xac>
              ip_addr_isany(&ipcb->local_ip))) ||
 801286e:	697b      	ldr	r3, [r7, #20]
              (IP_GET_TYPE(&ipcb->local_ip) == IPADDR_TYPE_ANY) ||
 8012870:	2b00      	cmp	r3, #0
 8012872:	d003      	beq.n	801287c <udp_bind+0xac>
              ip_addr_isany(&ipcb->local_ip))) ||
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <udp_bind+0xb2>
              (IP_GET_TYPE(ipaddr) == IPADDR_TYPE_ANY))) {
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801287c:	f06f 0307 	mvn.w	r3, #7
 8012880:	e01c      	b.n	80128bc <udp_bind+0xec>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	617b      	str	r3, [r7, #20]
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d1d9      	bne.n	8012842 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <udp_bind+0xca>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	e000      	b.n	801289c <udp_bind+0xcc>
 801289a:	2300      	movs	r3, #0
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	88fa      	ldrh	r2, [r7, #6]
 80128a4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80128a6:	7cfb      	ldrb	r3, [r7, #19]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d106      	bne.n	80128ba <udp_bind+0xea>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80128ac:	4b07      	ldr	r3, [pc, #28]	@ (80128cc <udp_bind+0xfc>)
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80128b4:	4a05      	ldr	r2, [pc, #20]	@ (80128cc <udp_bind+0xfc>)
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	0801bd9c 	.word	0x0801bd9c
 80128c8:	0801b164 	.word	0x0801b164
 80128cc:	2000d910 	.word	0x2000d910

080128d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b086      	sub	sp, #24
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	4613      	mov	r3, r2
 80128dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d105      	bne.n	80128f0 <udp_connect+0x20>
 80128e4:	4828      	ldr	r0, [pc, #160]	@ (8012988 <udp_connect+0xb8>)
 80128e6:	f7ee f9d5 	bl	8000c94 <printf>
 80128ea:	f06f 030f 	mvn.w	r3, #15
 80128ee:	e047      	b.n	8012980 <udp_connect+0xb0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d105      	bne.n	8012902 <udp_connect+0x32>
 80128f6:	4825      	ldr	r0, [pc, #148]	@ (801298c <udp_connect+0xbc>)
 80128f8:	f7ee f9cc 	bl	8000c94 <printf>
 80128fc:	f06f 030f 	mvn.w	r3, #15
 8012900:	e03e      	b.n	8012980 <udp_connect+0xb0>

  if (pcb->local_port == 0) {
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	8a5b      	ldrh	r3, [r3, #18]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d10f      	bne.n	801292a <udp_connect+0x5a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801290a:	68f9      	ldr	r1, [r7, #12]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	8a5b      	ldrh	r3, [r3, #18]
 8012910:	461a      	mov	r2, r3
 8012912:	68f8      	ldr	r0, [r7, #12]
 8012914:	f7ff ff5c 	bl	80127d0 <udp_bind>
 8012918:	4603      	mov	r3, r0
 801291a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801291c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <udp_connect+0x5a>
      return err;
 8012924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012928:	e02a      	b.n	8012980 <udp_connect+0xb0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d002      	beq.n	8012936 <udp_connect+0x66>
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	e000      	b.n	8012938 <udp_connect+0x68>
 8012936:	2300      	movs	r3, #0
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	88fa      	ldrh	r2, [r7, #6]
 8012940:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	7c1b      	ldrb	r3, [r3, #16]
 8012946:	f043 0304 	orr.w	r3, r3, #4
 801294a:	b2da      	uxtb	r2, r3
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012950:	4b0f      	ldr	r3, [pc, #60]	@ (8012990 <udp_connect+0xc0>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	613b      	str	r3, [r7, #16]
 8012956:	e008      	b.n	801296a <udp_connect+0x9a>
    if (pcb == ipcb) {
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	429a      	cmp	r2, r3
 801295e:	d101      	bne.n	8012964 <udp_connect+0x94>
      /* already on the list, just return */
      return ERR_OK;
 8012960:	2300      	movs	r3, #0
 8012962:	e00d      	b.n	8012980 <udp_connect+0xb0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	613b      	str	r3, [r7, #16]
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d1f3      	bne.n	8012958 <udp_connect+0x88>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012970:	4b07      	ldr	r3, [pc, #28]	@ (8012990 <udp_connect+0xc0>)
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012978:	4a05      	ldr	r2, [pc, #20]	@ (8012990 <udp_connect+0xc0>)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801297e:	2300      	movs	r3, #0
}
 8012980:	4618      	mov	r0, r3
 8012982:	3718      	adds	r7, #24
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	0801b17c 	.word	0x0801b17c
 801298c:	0801b198 	.word	0x0801b198
 8012990:	2000d910 	.word	0x2000d910

08012994 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d103      	bne.n	80129ae <udp_recv+0x1a>
 80129a6:	4806      	ldr	r0, [pc, #24]	@ (80129c0 <udp_recv+0x2c>)
 80129a8:	f7ee f974 	bl	8000c94 <printf>
 80129ac:	e005      	b.n	80129ba <udp_recv+0x26>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	68ba      	ldr	r2, [r7, #8]
 80129b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	61da      	str	r2, [r3, #28]
}
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	0801b1d0 	.word	0x0801b1d0

080129c4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d103      	bne.n	80129da <udp_remove+0x16>
 80129d2:	4817      	ldr	r0, [pc, #92]	@ (8012a30 <udp_remove+0x6c>)
 80129d4:	f7ee f95e 	bl	8000c94 <printf>
 80129d8:	e026      	b.n	8012a28 <udp_remove+0x64>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80129da:	4b16      	ldr	r3, [pc, #88]	@ (8012a34 <udp_remove+0x70>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d105      	bne.n	80129f0 <udp_remove+0x2c>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80129e4:	4b13      	ldr	r3, [pc, #76]	@ (8012a34 <udp_remove+0x70>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	4a12      	ldr	r2, [pc, #72]	@ (8012a34 <udp_remove+0x70>)
 80129ec:	6013      	str	r3, [r2, #0]
 80129ee:	e017      	b.n	8012a20 <udp_remove+0x5c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80129f0:	4b10      	ldr	r3, [pc, #64]	@ (8012a34 <udp_remove+0x70>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	e010      	b.n	8012a1a <udp_remove+0x56>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d009      	beq.n	8012a14 <udp_remove+0x50>
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	68db      	ldr	r3, [r3, #12]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d104      	bne.n	8012a14 <udp_remove+0x50>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	68da      	ldr	r2, [r3, #12]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	60da      	str	r2, [r3, #12]
        break;
 8012a12:	e005      	b.n	8012a20 <udp_remove+0x5c>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	60fb      	str	r3, [r7, #12]
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1eb      	bne.n	80129f8 <udp_remove+0x34>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	2000      	movs	r0, #0
 8012a24:	f7f8 fd02 	bl	800b42c <memp_free>
}
 8012a28:	3710      	adds	r7, #16
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	0801b1e8 	.word	0x0801b1e8
 8012a34:	2000d910 	.word	0x2000d910

08012a38 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f7f8 fcb0 	bl	800b3a4 <memp_malloc>
 8012a44:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d007      	beq.n	8012a5c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012a4c:	2220      	movs	r2, #32
 8012a4e:	2100      	movs	r1, #0
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f004 fd7c 	bl	801754e <memset>
    pcb->ttl = UDP_TTL;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	22ff      	movs	r2, #255	@ 0xff
 8012a5a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012a5c:	687b      	ldr	r3, [r7, #4]
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b084      	sub	sp, #16
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012a70:	f7ff ffe2 	bl	8012a38 <udp_new>
 8012a74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012a76:	68fb      	ldr	r3, [r7, #12]
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012a80:	b480      	push	{r7}
 8012a82:	b085      	sub	sp, #20
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d01e      	beq.n	8012ace <udp_netif_ip_addr_changed+0x4e>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d01a      	beq.n	8012ace <udp_netif_ip_addr_changed+0x4e>
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d017      	beq.n	8012ace <udp_netif_ip_addr_changed+0x4e>
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d013      	beq.n	8012ace <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8012adc <udp_netif_ip_addr_changed+0x5c>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	60fb      	str	r3, [r7, #12]
 8012aac:	e00c      	b.n	8012ac8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d103      	bne.n	8012ac2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	60fb      	str	r3, [r7, #12]
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1ef      	bne.n	8012aae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012ace:	bf00      	nop
 8012ad0:	3714      	adds	r7, #20
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	2000d910 	.word	0x2000d910

08012ae0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012ae4:	4b20      	ldr	r3, [pc, #128]	@ (8012b68 <dhcp_inc_pcb_refcount+0x88>)
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d133      	bne.n	8012b54 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012aec:	4b1f      	ldr	r3, [pc, #124]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d005      	beq.n	8012b00 <dhcp_inc_pcb_refcount+0x20>
 8012af4:	4b1e      	ldr	r3, [pc, #120]	@ (8012b70 <dhcp_inc_pcb_refcount+0x90>)
 8012af6:	22ea      	movs	r2, #234	@ 0xea
 8012af8:	491e      	ldr	r1, [pc, #120]	@ (8012b74 <dhcp_inc_pcb_refcount+0x94>)
 8012afa:	481f      	ldr	r0, [pc, #124]	@ (8012b78 <dhcp_inc_pcb_refcount+0x98>)
 8012afc:	f7ee f8ca 	bl	8000c94 <printf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012b00:	f7ff ff9a 	bl	8012a38 <udp_new>
 8012b04:	4603      	mov	r3, r0
 8012b06:	4a19      	ldr	r2, [pc, #100]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b08:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012b0a:	4b18      	ldr	r3, [pc, #96]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d102      	bne.n	8012b18 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012b12:	f04f 33ff 	mov.w	r3, #4294967295
 8012b16:	e024      	b.n	8012b62 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012b18:	4b14      	ldr	r3, [pc, #80]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	7a5a      	ldrb	r2, [r3, #9]
 8012b1e:	4b13      	ldr	r3, [pc, #76]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f042 0220 	orr.w	r2, r2, #32
 8012b26:	b2d2      	uxtb	r2, r2
 8012b28:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012b2a:	4b10      	ldr	r3, [pc, #64]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2244      	movs	r2, #68	@ 0x44
 8012b30:	4912      	ldr	r1, [pc, #72]	@ (8012b7c <dhcp_inc_pcb_refcount+0x9c>)
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff fe4c 	bl	80127d0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012b38:	4b0c      	ldr	r3, [pc, #48]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	2243      	movs	r2, #67	@ 0x43
 8012b3e:	490f      	ldr	r1, [pc, #60]	@ (8012b7c <dhcp_inc_pcb_refcount+0x9c>)
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7ff fec5 	bl	80128d0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012b46:	4b09      	ldr	r3, [pc, #36]	@ (8012b6c <dhcp_inc_pcb_refcount+0x8c>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	490c      	ldr	r1, [pc, #48]	@ (8012b80 <dhcp_inc_pcb_refcount+0xa0>)
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7ff ff20 	bl	8012994 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012b54:	4b04      	ldr	r3, [pc, #16]	@ (8012b68 <dhcp_inc_pcb_refcount+0x88>)
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	b2da      	uxtb	r2, r3
 8012b5c:	4b02      	ldr	r3, [pc, #8]	@ (8012b68 <dhcp_inc_pcb_refcount+0x88>)
 8012b5e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012b60:	2300      	movs	r3, #0
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	20004af4 	.word	0x20004af4
 8012b6c:	20004af0 	.word	0x20004af0
 8012b70:	0801b200 	.word	0x0801b200
 8012b74:	0801b234 	.word	0x0801b234
 8012b78:	0801b25c 	.word	0x0801b25c
 8012b7c:	0801bd9c 	.word	0x0801bd9c
 8012b80:	080143fd 	.word	0x080143fd

08012b84 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012b88:	4b0f      	ldr	r3, [pc, #60]	@ (8012bc8 <dhcp_dec_pcb_refcount+0x44>)
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d106      	bne.n	8012b9e <dhcp_dec_pcb_refcount+0x1a>
 8012b90:	4b0e      	ldr	r3, [pc, #56]	@ (8012bcc <dhcp_dec_pcb_refcount+0x48>)
 8012b92:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012b96:	490e      	ldr	r1, [pc, #56]	@ (8012bd0 <dhcp_dec_pcb_refcount+0x4c>)
 8012b98:	480e      	ldr	r0, [pc, #56]	@ (8012bd4 <dhcp_dec_pcb_refcount+0x50>)
 8012b9a:	f7ee f87b 	bl	8000c94 <printf>
  dhcp_pcb_refcount--;
 8012b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8012bc8 <dhcp_dec_pcb_refcount+0x44>)
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	b2da      	uxtb	r2, r3
 8012ba6:	4b08      	ldr	r3, [pc, #32]	@ (8012bc8 <dhcp_dec_pcb_refcount+0x44>)
 8012ba8:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012baa:	4b07      	ldr	r3, [pc, #28]	@ (8012bc8 <dhcp_dec_pcb_refcount+0x44>)
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d107      	bne.n	8012bc2 <dhcp_dec_pcb_refcount+0x3e>
    udp_remove(dhcp_pcb);
 8012bb2:	4b09      	ldr	r3, [pc, #36]	@ (8012bd8 <dhcp_dec_pcb_refcount+0x54>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff ff04 	bl	80129c4 <udp_remove>
    dhcp_pcb = NULL;
 8012bbc:	4b06      	ldr	r3, [pc, #24]	@ (8012bd8 <dhcp_dec_pcb_refcount+0x54>)
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]
  }
}
 8012bc2:	bf00      	nop
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	20004af4 	.word	0x20004af4
 8012bcc:	0801b200 	.word	0x0801b200
 8012bd0:	0801b284 	.word	0x0801b284
 8012bd4:	0801b25c 	.word	0x0801b25c
 8012bd8:	20004af0 	.word	0x20004af0

08012bdc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b084      	sub	sp, #16
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012be8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012bea:	210c      	movs	r1, #12
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f001 f841 	bl	8013c74 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012bf2:	4b06      	ldr	r3, [pc, #24]	@ (8012c0c <dhcp_handle_nak+0x30>)
 8012bf4:	4a05      	ldr	r2, [pc, #20]	@ (8012c0c <dhcp_handle_nak+0x30>)
 8012bf6:	4905      	ldr	r1, [pc, #20]	@ (8012c0c <dhcp_handle_nak+0x30>)
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7f8 fda9 	bl	800b750 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 fc30 	bl	8013464 <dhcp_discover>
}
 8012c04:	bf00      	nop
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	0801bd9c 	.word	0x0801bd9c

08012c10 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c1c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012c1e:	2108      	movs	r1, #8
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f001 f827 	bl	8013c74 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	331c      	adds	r3, #28
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f002 fb18 	bl	8015264 <etharp_query>
 8012c34:	4603      	mov	r3, r0
 8012c36:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	799b      	ldrb	r3, [r3, #6]
 8012c3c:	2bff      	cmp	r3, #255	@ 0xff
 8012c3e:	d005      	beq.n	8012c4c <dhcp_check+0x3c>
    dhcp->tries++;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	799b      	ldrb	r3, [r3, #6]
 8012c44:	3301      	adds	r3, #1
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012c4c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8012c50:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c52:	893b      	ldrh	r3, [r7, #8]
 8012c54:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012c58:	4a06      	ldr	r2, [pc, #24]	@ (8012c74 <dhcp_check+0x64>)
 8012c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8012c5e:	1152      	asrs	r2, r2, #5
 8012c60:	17db      	asrs	r3, r3, #31
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012c6a:	bf00      	nop
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	10624dd3 	.word	0x10624dd3

08012c78 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c86:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012c88:	4b0c      	ldr	r3, [pc, #48]	@ (8012cbc <dhcp_handle_offer+0x44>)
 8012c8a:	789b      	ldrb	r3, [r3, #2]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d011      	beq.n	8012cb4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	2200      	movs	r2, #0
 8012c94:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012c96:	4b0a      	ldr	r3, [pc, #40]	@ (8012cc0 <dhcp_handle_offer+0x48>)
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7f7 fd8f 	bl	800a7be <lwip_htonl>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	691a      	ldr	r2, [r3, #16]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 f808 	bl	8012cc4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	2000d914 	.word	0x2000d914
 8012cc0:	2000d91c 	.word	0x2000d91c

08012cc4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012cc4:	b5b0      	push	{r4, r5, r7, lr}
 8012cc6:	b08a      	sub	sp, #40	@ 0x28
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d105      	bne.n	8012cde <dhcp_select+0x1a>
 8012cd2:	4871      	ldr	r0, [pc, #452]	@ (8012e98 <dhcp_select+0x1d4>)
 8012cd4:	f7ed ffde 	bl	8000c94 <printf>
 8012cd8:	f06f 030f 	mvn.w	r3, #15
 8012cdc:	e0d8      	b.n	8012e90 <dhcp_select+0x1cc>
  dhcp = netif_dhcp_data(netif);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ce2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d105      	bne.n	8012cf6 <dhcp_select+0x32>
 8012cea:	486c      	ldr	r0, [pc, #432]	@ (8012e9c <dhcp_select+0x1d8>)
 8012cec:	f7ed ffd2 	bl	8000c94 <printf>
 8012cf0:	f06f 0305 	mvn.w	r3, #5
 8012cf4:	e0cc      	b.n	8012e90 <dhcp_select+0x1cc>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	69b8      	ldr	r0, [r7, #24]
 8012cfa:	f000 ffbb 	bl	8013c74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012cfe:	f107 030c 	add.w	r3, r7, #12
 8012d02:	2203      	movs	r2, #3
 8012d04:	69b9      	ldr	r1, [r7, #24]
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f001 fc42 	bl	8014590 <dhcp_create_msg>
 8012d0c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 808e 	beq.w	8012e32 <dhcp_select+0x16e>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d1c:	89b8      	ldrh	r0, [r7, #12]
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d24:	2302      	movs	r3, #2
 8012d26:	2239      	movs	r2, #57	@ 0x39
 8012d28:	f000 ffbe 	bl	8013ca8 <dhcp_option>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012d30:	89b8      	ldrh	r0, [r7, #12]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	f001 f80d 	bl	8013d5c <dhcp_option_short>
 8012d42:	4603      	mov	r3, r0
 8012d44:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012d46:	89b8      	ldrh	r0, [r7, #12]
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d4e:	2304      	movs	r3, #4
 8012d50:	2232      	movs	r2, #50	@ 0x32
 8012d52:	f000 ffa9 	bl	8013ca8 <dhcp_option>
 8012d56:	4603      	mov	r3, r0
 8012d58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d5a:	89bc      	ldrh	r4, [r7, #12]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	69db      	ldr	r3, [r3, #28]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f7 fd29 	bl	800a7be <lwip_htonl>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	461a      	mov	r2, r3
 8012d70:	4629      	mov	r1, r5
 8012d72:	4620      	mov	r0, r4
 8012d74:	f001 f824 	bl	8013dc0 <dhcp_option_long>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012d7c:	89b8      	ldrh	r0, [r7, #12]
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d84:	2304      	movs	r3, #4
 8012d86:	2236      	movs	r2, #54	@ 0x36
 8012d88:	f000 ff8e 	bl	8013ca8 <dhcp_option>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012d90:	89bc      	ldrh	r4, [r7, #12]
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	699b      	ldr	r3, [r3, #24]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f7 fd0e 	bl	800a7be <lwip_htonl>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
 8012da6:	4629      	mov	r1, r5
 8012da8:	4620      	mov	r0, r4
 8012daa:	f001 f809 	bl	8013dc0 <dhcp_option_long>
 8012dae:	4603      	mov	r3, r0
 8012db0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012db2:	89b8      	ldrh	r0, [r7, #12]
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012dba:	2303      	movs	r3, #3
 8012dbc:	2237      	movs	r2, #55	@ 0x37
 8012dbe:	f000 ff73 	bl	8013ca8 <dhcp_option>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	77fb      	strb	r3, [r7, #31]
 8012dca:	e00e      	b.n	8012dea <dhcp_select+0x126>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012dcc:	89b8      	ldrh	r0, [r7, #12]
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012dd4:	7ffb      	ldrb	r3, [r7, #31]
 8012dd6:	4a32      	ldr	r2, [pc, #200]	@ (8012ea0 <dhcp_select+0x1dc>)
 8012dd8:	5cd3      	ldrb	r3, [r2, r3]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f000 ff98 	bl	8013d10 <dhcp_option_byte>
 8012de0:	4603      	mov	r3, r0
 8012de2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012de4:	7ffb      	ldrb	r3, [r7, #31]
 8012de6:	3301      	adds	r3, #1
 8012de8:	77fb      	strb	r3, [r7, #31]
 8012dea:	7ffb      	ldrb	r3, [r7, #31]
 8012dec:	2b02      	cmp	r3, #2
 8012dee:	d9ed      	bls.n	8012dcc <dhcp_select+0x108>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012df0:	89b8      	ldrh	r0, [r7, #12]
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	33f0      	adds	r3, #240	@ 0xf0
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	f001 f825 	bl	8013e48 <dhcp_option_hostname>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e02:	89b8      	ldrh	r0, [r7, #12]
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	33f0      	adds	r3, #240	@ 0xf0
 8012e08:	697a      	ldr	r2, [r7, #20]
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	f001 fc8e 	bl	801472c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012e10:	4b24      	ldr	r3, [pc, #144]	@ (8012ea4 <dhcp_select+0x1e0>)
 8012e12:	6818      	ldr	r0, [r3, #0]
 8012e14:	4b24      	ldr	r3, [pc, #144]	@ (8012ea8 <dhcp_select+0x1e4>)
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	2343      	movs	r3, #67	@ 0x43
 8012e1e:	4a23      	ldr	r2, [pc, #140]	@ (8012eac <dhcp_select+0x1e8>)
 8012e20:	6979      	ldr	r1, [r7, #20]
 8012e22:	f7ff fbe9 	bl	80125f8 <udp_sendto_if_src>
 8012e26:	4603      	mov	r3, r0
 8012e28:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8012e2a:	6978      	ldr	r0, [r7, #20]
 8012e2c:	f7f9 f8f6 	bl	800c01c <pbuf_free>
 8012e30:	e001      	b.n	8012e36 <dhcp_select+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e32:	23ff      	movs	r3, #255	@ 0xff
 8012e34:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	799b      	ldrb	r3, [r3, #6]
 8012e3a:	2bff      	cmp	r3, #255	@ 0xff
 8012e3c:	d005      	beq.n	8012e4a <dhcp_select+0x186>
    dhcp->tries++;
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	799b      	ldrb	r3, [r3, #6]
 8012e42:	3301      	adds	r3, #1
 8012e44:	b2da      	uxtb	r2, r3
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	799b      	ldrb	r3, [r3, #6]
 8012e4e:	2b05      	cmp	r3, #5
 8012e50:	d80d      	bhi.n	8012e6e <dhcp_select+0x1aa>
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	799b      	ldrb	r3, [r3, #6]
 8012e56:	461a      	mov	r2, r3
 8012e58:	2301      	movs	r3, #1
 8012e5a:	4093      	lsls	r3, r2
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	461a      	mov	r2, r3
 8012e60:	0152      	lsls	r2, r2, #5
 8012e62:	1ad2      	subs	r2, r2, r3
 8012e64:	0092      	lsls	r2, r2, #2
 8012e66:	4413      	add	r3, r2
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	e001      	b.n	8012e72 <dhcp_select+0x1ae>
 8012e6e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8012e72:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e74:	89fb      	ldrh	r3, [r7, #14]
 8012e76:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8012eb0 <dhcp_select+0x1ec>)
 8012e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8012e80:	1152      	asrs	r2, r2, #5
 8012e82:	17db      	asrs	r3, r3, #31
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e8c:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3720      	adds	r7, #32
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bdb0      	pop	{r4, r5, r7, pc}
 8012e98:	0801b2a8 	.word	0x0801b2a8
 8012e9c:	0801b2c4 	.word	0x0801b2c4
 8012ea0:	2000001c 	.word	0x2000001c
 8012ea4:	20004af0 	.word	0x20004af0
 8012ea8:	0801bd9c 	.word	0x0801bd9c
 8012eac:	0801bda0 	.word	0x0801bda0
 8012eb0:	10624dd3 	.word	0x10624dd3

08012eb4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012eba:	4b27      	ldr	r3, [pc, #156]	@ (8012f58 <dhcp_coarse_tmr+0xa4>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	607b      	str	r3, [r7, #4]
 8012ec0:	e042      	b.n	8012f48 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d039      	beq.n	8012f42 <dhcp_coarse_tmr+0x8e>
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	795b      	ldrb	r3, [r3, #5]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d035      	beq.n	8012f42 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	8a9b      	ldrh	r3, [r3, #20]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d012      	beq.n	8012f04 <dhcp_coarse_tmr+0x50>
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	8a5b      	ldrh	r3, [r3, #18]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	825a      	strh	r2, [r3, #18]
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	8a5a      	ldrh	r2, [r3, #18]
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	8a9b      	ldrh	r3, [r3, #20]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d106      	bne.n	8012f04 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 fe1e 	bl	8013b38 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 f969 	bl	80131d4 <dhcp_start>
 8012f02:	e01e      	b.n	8012f42 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	8a1b      	ldrh	r3, [r3, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00b      	beq.n	8012f24 <dhcp_coarse_tmr+0x70>
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	8a1b      	ldrh	r3, [r3, #16]
 8012f10:	1e5a      	subs	r2, r3, #1
 8012f12:	b291      	uxth	r1, r2
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	8211      	strh	r1, [r2, #16]
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d103      	bne.n	8012f24 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f000 f8c6 	bl	80130ae <dhcp_t2_timeout>
 8012f22:	e00e      	b.n	8012f42 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	89db      	ldrh	r3, [r3, #14]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d00a      	beq.n	8012f42 <dhcp_coarse_tmr+0x8e>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	89db      	ldrh	r3, [r3, #14]
 8012f30:	1e5a      	subs	r2, r3, #1
 8012f32:	b291      	uxth	r1, r2
 8012f34:	683a      	ldr	r2, [r7, #0]
 8012f36:	81d1      	strh	r1, [r2, #14]
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d102      	bne.n	8012f42 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f000 f888 	bl	8013052 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	607b      	str	r3, [r7, #4]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d1b9      	bne.n	8012ec2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012f4e:	bf00      	nop
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	2000d8ec 	.word	0x2000d8ec

08012f5c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012f62:	4b16      	ldr	r3, [pc, #88]	@ (8012fbc <dhcp_fine_tmr+0x60>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	607b      	str	r3, [r7, #4]
 8012f68:	e020      	b.n	8012fac <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f6e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d017      	beq.n	8012fa6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	891b      	ldrh	r3, [r3, #8]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d906      	bls.n	8012f8c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	891b      	ldrh	r3, [r3, #8]
 8012f82:	3b01      	subs	r3, #1
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	811a      	strh	r2, [r3, #8]
 8012f8a:	e00c      	b.n	8012fa6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	891b      	ldrh	r3, [r3, #8]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d108      	bne.n	8012fa6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	891b      	ldrh	r3, [r3, #8]
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f000 f80d 	bl	8012fc0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	607b      	str	r3, [r7, #4]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d1db      	bne.n	8012f6a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012fb2:	bf00      	nop
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	2000d8ec 	.word	0x2000d8ec

08012fc0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fcc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	795b      	ldrb	r3, [r3, #5]
 8012fd2:	2b0c      	cmp	r3, #12
 8012fd4:	d003      	beq.n	8012fde <dhcp_timeout+0x1e>
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	795b      	ldrb	r3, [r3, #5]
 8012fda:	2b06      	cmp	r3, #6
 8012fdc:	d103      	bne.n	8012fe6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 fa40 	bl	8013464 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012fe4:	e031      	b.n	801304a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	795b      	ldrb	r3, [r3, #5]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d10e      	bne.n	801300c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	799b      	ldrb	r3, [r3, #6]
 8012ff2:	2b05      	cmp	r3, #5
 8012ff4:	d803      	bhi.n	8012ffe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7ff fe64 	bl	8012cc4 <dhcp_select>
}
 8012ffc:	e025      	b.n	801304a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 fd9a 	bl	8013b38 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 f8e5 	bl	80131d4 <dhcp_start>
}
 801300a:	e01e      	b.n	801304a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	795b      	ldrb	r3, [r3, #5]
 8013010:	2b08      	cmp	r3, #8
 8013012:	d10b      	bne.n	801302c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	799b      	ldrb	r3, [r3, #6]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d803      	bhi.n	8013024 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7ff fdf7 	bl	8012c10 <dhcp_check>
}
 8013022:	e012      	b.n	801304a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f000 fabf 	bl	80135a8 <dhcp_bind>
}
 801302a:	e00e      	b.n	801304a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	795b      	ldrb	r3, [r3, #5]
 8013030:	2b03      	cmp	r3, #3
 8013032:	d10a      	bne.n	801304a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	799b      	ldrb	r3, [r3, #6]
 8013038:	2b01      	cmp	r3, #1
 801303a:	d803      	bhi.n	8013044 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 fcbd 	bl	80139bc <dhcp_reboot>
}
 8013042:	e002      	b.n	801304a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 fa0d 	bl	8013464 <dhcp_discover>
}
 801304a:	bf00      	nop
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013052:	b580      	push	{r7, lr}
 8013054:	b084      	sub	sp, #16
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801305e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	795b      	ldrb	r3, [r3, #5]
 8013064:	2b01      	cmp	r3, #1
 8013066:	d007      	beq.n	8013078 <dhcp_t1_timeout+0x26>
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	795b      	ldrb	r3, [r3, #5]
 801306c:	2b0a      	cmp	r3, #10
 801306e:	d003      	beq.n	8013078 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013074:	2b05      	cmp	r3, #5
 8013076:	d116      	bne.n	80130a6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f000 fb57 	bl	801372c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	899b      	ldrh	r3, [r3, #12]
 8013082:	461a      	mov	r2, r3
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	8a5b      	ldrh	r3, [r3, #18]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	2b01      	cmp	r3, #1
 801308c:	dd0b      	ble.n	80130a6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	899b      	ldrh	r3, [r3, #12]
 8013092:	461a      	mov	r2, r3
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	8a5b      	ldrh	r3, [r3, #18]
 8013098:	1ad3      	subs	r3, r2, r3
 801309a:	0fda      	lsrs	r2, r3, #31
 801309c:	4413      	add	r3, r2
 801309e:	105b      	asrs	r3, r3, #1
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80130a6:	bf00      	nop
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b084      	sub	sp, #16
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	795b      	ldrb	r3, [r3, #5]
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d00b      	beq.n	80130dc <dhcp_t2_timeout+0x2e>
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	795b      	ldrb	r3, [r3, #5]
 80130c8:	2b0a      	cmp	r3, #10
 80130ca:	d007      	beq.n	80130dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80130d0:	2b05      	cmp	r3, #5
 80130d2:	d003      	beq.n	80130dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	795b      	ldrb	r3, [r3, #5]
 80130d8:	2b04      	cmp	r3, #4
 80130da:	d116      	bne.n	801310a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f000 fbc9 	bl	8013874 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	8a9b      	ldrh	r3, [r3, #20]
 80130e6:	461a      	mov	r2, r3
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	8a5b      	ldrh	r3, [r3, #18]
 80130ec:	1ad3      	subs	r3, r2, r3
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	dd0b      	ble.n	801310a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	8a9b      	ldrh	r3, [r3, #20]
 80130f6:	461a      	mov	r2, r3
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	8a5b      	ldrh	r3, [r3, #18]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	0fda      	lsrs	r2, r3, #31
 8013100:	4413      	add	r3, r2
 8013102:	105b      	asrs	r3, r3, #1
 8013104:	b29a      	uxth	r2, r3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801310a:	bf00      	nop
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
	...

08013114 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013122:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2200      	movs	r2, #0
 8013128:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2200      	movs	r2, #0
 801312e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013130:	4b26      	ldr	r3, [pc, #152]	@ (80131cc <dhcp_handle_ack+0xb8>)
 8013132:	78db      	ldrb	r3, [r3, #3]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d003      	beq.n	8013140 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013138:	4b25      	ldr	r3, [pc, #148]	@ (80131d0 <dhcp_handle_ack+0xbc>)
 801313a:	68da      	ldr	r2, [r3, #12]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013140:	4b22      	ldr	r3, [pc, #136]	@ (80131cc <dhcp_handle_ack+0xb8>)
 8013142:	791b      	ldrb	r3, [r3, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d004      	beq.n	8013152 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013148:	4b21      	ldr	r3, [pc, #132]	@ (80131d0 <dhcp_handle_ack+0xbc>)
 801314a:	691a      	ldr	r2, [r3, #16]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013150:	e004      	b.n	801315c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013156:	085a      	lsrs	r2, r3, #1
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801315c:	4b1b      	ldr	r3, [pc, #108]	@ (80131cc <dhcp_handle_ack+0xb8>)
 801315e:	795b      	ldrb	r3, [r3, #5]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d004      	beq.n	801316e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013164:	4b1a      	ldr	r3, [pc, #104]	@ (80131d0 <dhcp_handle_ack+0xbc>)
 8013166:	695a      	ldr	r2, [r3, #20]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	631a      	str	r2, [r3, #48]	@ 0x30
 801316c:	e007      	b.n	801317e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013172:	4613      	mov	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	1a9b      	subs	r3, r3, r2
 8013178:	08da      	lsrs	r2, r3, #3
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	691a      	ldr	r2, [r3, #16]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013186:	4b11      	ldr	r3, [pc, #68]	@ (80131cc <dhcp_handle_ack+0xb8>)
 8013188:	799b      	ldrb	r3, [r3, #6]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00b      	beq.n	80131a6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801318e:	4b10      	ldr	r3, [pc, #64]	@ (80131d0 <dhcp_handle_ack+0xbc>)
 8013190:	699b      	ldr	r3, [r3, #24]
 8013192:	4618      	mov	r0, r3
 8013194:	f7f7 fb13 	bl	800a7be <lwip_htonl>
 8013198:	4602      	mov	r2, r0
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2201      	movs	r2, #1
 80131a2:	71da      	strb	r2, [r3, #7]
 80131a4:	e002      	b.n	80131ac <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80131ac:	4b07      	ldr	r3, [pc, #28]	@ (80131cc <dhcp_handle_ack+0xb8>)
 80131ae:	79db      	ldrb	r3, [r3, #7]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d007      	beq.n	80131c4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80131b4:	4b06      	ldr	r3, [pc, #24]	@ (80131d0 <dhcp_handle_ack+0xbc>)
 80131b6:	69db      	ldr	r3, [r3, #28]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f7 fb00 	bl	800a7be <lwip_htonl>
 80131be:	4602      	mov	r2, r0
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80131c4:	bf00      	nop
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	2000d914 	.word	0x2000d914
 80131d0:	2000d91c 	.word	0x2000d91c

080131d4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d105      	bne.n	80131ee <dhcp_start+0x1a>
 80131e2:	4833      	ldr	r0, [pc, #204]	@ (80132b0 <dhcp_start+0xdc>)
 80131e4:	f7ed fd56 	bl	8000c94 <printf>
 80131e8:	f06f 030f 	mvn.w	r3, #15
 80131ec:	e05c      	b.n	80132a8 <dhcp_start+0xd4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80131f4:	f003 0301 	and.w	r3, r3, #1
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d105      	bne.n	8013208 <dhcp_start+0x34>
 80131fc:	482d      	ldr	r0, [pc, #180]	@ (80132b4 <dhcp_start+0xe0>)
 80131fe:	f7ed fd49 	bl	8000c94 <printf>
 8013202:	f06f 030f 	mvn.w	r3, #15
 8013206:	e04f      	b.n	80132a8 <dhcp_start+0xd4>
  dhcp = netif_dhcp_data(netif);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801320c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013212:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013216:	d202      	bcs.n	801321e <dhcp_start+0x4a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013218:	f04f 33ff 	mov.w	r3, #4294967295
 801321c:	e044      	b.n	80132a8 <dhcp_start+0xd4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d10d      	bne.n	8013240 <dhcp_start+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013224:	2034      	movs	r0, #52	@ 0x34
 8013226:	f7f7 ff43 	bl	800b0b0 <mem_malloc>
 801322a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d102      	bne.n	8013238 <dhcp_start+0x64>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013232:	f04f 33ff 	mov.w	r3, #4294967295
 8013236:	e037      	b.n	80132a8 <dhcp_start+0xd4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	625a      	str	r2, [r3, #36]	@ 0x24
 801323e:	e005      	b.n	801324c <dhcp_start+0x78>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	791b      	ldrb	r3, [r3, #4]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d001      	beq.n	801324c <dhcp_start+0x78>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013248:	f7ff fc9c 	bl	8012b84 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801324c:	2234      	movs	r2, #52	@ 0x34
 801324e:	2100      	movs	r1, #0
 8013250:	68f8      	ldr	r0, [r7, #12]
 8013252:	f004 f97c 	bl	801754e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013256:	f7ff fc43 	bl	8012ae0 <dhcp_inc_pcb_refcount>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d002      	beq.n	8013266 <dhcp_start+0x92>
    return ERR_MEM;
 8013260:	f04f 33ff 	mov.w	r3, #4294967295
 8013264:	e020      	b.n	80132a8 <dhcp_start+0xd4>
  }
  dhcp->pcb_allocated = 1;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2201      	movs	r2, #1
 801326a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013272:	f003 0304 	and.w	r3, r3, #4
 8013276:	2b00      	cmp	r3, #0
 8013278:	d105      	bne.n	8013286 <dhcp_start+0xb2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801327a:	2102      	movs	r1, #2
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f000 fcf9 	bl	8013c74 <dhcp_set_state>
    return ERR_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	e010      	b.n	80132a8 <dhcp_start+0xd4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 f8ec 	bl	8013464 <dhcp_discover>
 801328c:	4603      	mov	r3, r0
 801328e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013290:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d005      	beq.n	80132a4 <dhcp_start+0xd0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f000 fc4d 	bl	8013b38 <dhcp_release_and_stop>
    return ERR_MEM;
 801329e:	f04f 33ff 	mov.w	r3, #4294967295
 80132a2:	e001      	b.n	80132a8 <dhcp_start+0xd4>
  }
  return result;
 80132a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	0801b2e0 	.word	0x0801b2e0
 80132b4:	0801b324 	.word	0x0801b324

080132b8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132c4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d025      	beq.n	8013318 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	795b      	ldrb	r3, [r3, #5]
 80132d0:	2b0a      	cmp	r3, #10
 80132d2:	d008      	beq.n	80132e6 <dhcp_network_changed+0x2e>
 80132d4:	2b0a      	cmp	r3, #10
 80132d6:	dc0d      	bgt.n	80132f4 <dhcp_network_changed+0x3c>
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d01f      	beq.n	801331c <dhcp_network_changed+0x64>
 80132dc:	2b00      	cmp	r3, #0
 80132de:	db09      	blt.n	80132f4 <dhcp_network_changed+0x3c>
 80132e0:	3b03      	subs	r3, #3
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	d806      	bhi.n	80132f4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2200      	movs	r2, #0
 80132ea:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 fb65 	bl	80139bc <dhcp_reboot>
      break;
 80132f2:	e014      	b.n	801331e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	795b      	ldrb	r3, [r3, #5]
 80132f8:	2b0c      	cmp	r3, #12
 80132fa:	d906      	bls.n	801330a <dhcp_network_changed+0x52>
 80132fc:	4b09      	ldr	r3, [pc, #36]	@ (8013324 <dhcp_network_changed+0x6c>)
 80132fe:	f240 3272 	movw	r2, #882	@ 0x372
 8013302:	4909      	ldr	r1, [pc, #36]	@ (8013328 <dhcp_network_changed+0x70>)
 8013304:	4809      	ldr	r0, [pc, #36]	@ (801332c <dhcp_network_changed+0x74>)
 8013306:	f7ed fcc5 	bl	8000c94 <printf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	2200      	movs	r2, #0
 801330e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 f8a7 	bl	8013464 <dhcp_discover>
      break;
 8013316:	e002      	b.n	801331e <dhcp_network_changed+0x66>
    return;
 8013318:	bf00      	nop
 801331a:	e000      	b.n	801331e <dhcp_network_changed+0x66>
      break;
 801331c:	bf00      	nop
  }
}
 801331e:	3710      	adds	r7, #16
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	0801b200 	.word	0x0801b200
 8013328:	0801b348 	.word	0x0801b348
 801332c:	0801b25c 	.word	0x0801b25c

08013330 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d103      	bne.n	8013348 <dhcp_arp_reply+0x18>
 8013340:	480c      	ldr	r0, [pc, #48]	@ (8013374 <dhcp_arp_reply+0x44>)
 8013342:	f7ed fca7 	bl	8000c94 <printf>
 8013346:	e012      	b.n	801336e <dhcp_arp_reply+0x3e>
  dhcp = netif_dhcp_data(netif);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801334c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00c      	beq.n	801336e <dhcp_arp_reply+0x3e>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	795b      	ldrb	r3, [r3, #5]
 8013358:	2b08      	cmp	r3, #8
 801335a:	d108      	bne.n	801336e <dhcp_arp_reply+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	681a      	ldr	r2, [r3, #0]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	69db      	ldr	r3, [r3, #28]
 8013364:	429a      	cmp	r2, r3
 8013366:	d102      	bne.n	801336e <dhcp_arp_reply+0x3e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f000 f805 	bl	8013378 <dhcp_decline>
    }
  }
}
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	0801b2e0 	.word	0x0801b2e0

08013378 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013378:	b5b0      	push	{r4, r5, r7, lr}
 801337a:	b08a      	sub	sp, #40	@ 0x28
 801337c:	af02      	add	r7, sp, #8
 801337e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013384:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013386:	210c      	movs	r1, #12
 8013388:	69b8      	ldr	r0, [r7, #24]
 801338a:	f000 fc73 	bl	8013c74 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801338e:	f107 030c 	add.w	r3, r7, #12
 8013392:	2204      	movs	r2, #4
 8013394:	69b9      	ldr	r1, [r7, #24]
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f001 f8fa 	bl	8014590 <dhcp_create_msg>
 801339c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d035      	beq.n	8013410 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80133aa:	89b8      	ldrh	r0, [r7, #12]
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80133b2:	2304      	movs	r3, #4
 80133b4:	2232      	movs	r2, #50	@ 0x32
 80133b6:	f000 fc77 	bl	8013ca8 <dhcp_option>
 80133ba:	4603      	mov	r3, r0
 80133bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80133be:	89bc      	ldrh	r4, [r7, #12]
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	69db      	ldr	r3, [r3, #28]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7f7 f9f7 	bl	800a7be <lwip_htonl>
 80133d0:	4603      	mov	r3, r0
 80133d2:	461a      	mov	r2, r3
 80133d4:	4629      	mov	r1, r5
 80133d6:	4620      	mov	r0, r4
 80133d8:	f000 fcf2 	bl	8013dc0 <dhcp_option_long>
 80133dc:	4603      	mov	r3, r0
 80133de:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80133e0:	89b8      	ldrh	r0, [r7, #12]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	33f0      	adds	r3, #240	@ 0xf0
 80133e6:	697a      	ldr	r2, [r7, #20]
 80133e8:	4619      	mov	r1, r3
 80133ea:	f001 f99f 	bl	801472c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80133ee:	4b19      	ldr	r3, [pc, #100]	@ (8013454 <dhcp_decline+0xdc>)
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	4b19      	ldr	r3, [pc, #100]	@ (8013458 <dhcp_decline+0xe0>)
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	9300      	str	r3, [sp, #0]
 80133fa:	2343      	movs	r3, #67	@ 0x43
 80133fc:	4a17      	ldr	r2, [pc, #92]	@ (801345c <dhcp_decline+0xe4>)
 80133fe:	6979      	ldr	r1, [r7, #20]
 8013400:	f7ff f8fa 	bl	80125f8 <udp_sendto_if_src>
 8013404:	4603      	mov	r3, r0
 8013406:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013408:	6978      	ldr	r0, [r7, #20]
 801340a:	f7f8 fe07 	bl	800c01c <pbuf_free>
 801340e:	e001      	b.n	8013414 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013410:	23ff      	movs	r3, #255	@ 0xff
 8013412:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	799b      	ldrb	r3, [r3, #6]
 8013418:	2bff      	cmp	r3, #255	@ 0xff
 801341a:	d005      	beq.n	8013428 <dhcp_decline+0xb0>
    dhcp->tries++;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	799b      	ldrb	r3, [r3, #6]
 8013420:	3301      	adds	r3, #1
 8013422:	b2da      	uxtb	r2, r3
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013428:	f242 7310 	movw	r3, #10000	@ 0x2710
 801342c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801342e:	89fb      	ldrh	r3, [r7, #14]
 8013430:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013434:	4a0a      	ldr	r2, [pc, #40]	@ (8013460 <dhcp_decline+0xe8>)
 8013436:	fb82 1203 	smull	r1, r2, r2, r3
 801343a:	1152      	asrs	r2, r2, #5
 801343c:	17db      	asrs	r3, r3, #31
 801343e:	1ad3      	subs	r3, r2, r3
 8013440:	b29a      	uxth	r2, r3
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013446:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3720      	adds	r7, #32
 801344e:	46bd      	mov	sp, r7
 8013450:	bdb0      	pop	{r4, r5, r7, pc}
 8013452:	bf00      	nop
 8013454:	20004af0 	.word	0x20004af0
 8013458:	0801bd9c 	.word	0x0801bd9c
 801345c:	0801bda0 	.word	0x0801bda0
 8013460:	10624dd3 	.word	0x10624dd3

08013464 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b08a      	sub	sp, #40	@ 0x28
 8013468:	af02      	add	r7, sp, #8
 801346a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013470:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013472:	2300      	movs	r3, #0
 8013474:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	2200      	movs	r2, #0
 801347a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801347c:	2106      	movs	r1, #6
 801347e:	69b8      	ldr	r0, [r7, #24]
 8013480:	f000 fbf8 	bl	8013c74 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013484:	f107 0308 	add.w	r3, r7, #8
 8013488:	2201      	movs	r2, #1
 801348a:	69b9      	ldr	r1, [r7, #24]
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f001 f87f 	bl	8014590 <dhcp_create_msg>
 8013492:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d04b      	beq.n	8013532 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80134a0:	8938      	ldrh	r0, [r7, #8]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80134a8:	2302      	movs	r3, #2
 80134aa:	2239      	movs	r2, #57	@ 0x39
 80134ac:	f000 fbfc 	bl	8013ca8 <dhcp_option>
 80134b0:	4603      	mov	r3, r0
 80134b2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80134b4:	8938      	ldrh	r0, [r7, #8]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80134c0:	461a      	mov	r2, r3
 80134c2:	f000 fc4b 	bl	8013d5c <dhcp_option_short>
 80134c6:	4603      	mov	r3, r0
 80134c8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80134ca:	8938      	ldrh	r0, [r7, #8]
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80134d2:	2303      	movs	r3, #3
 80134d4:	2237      	movs	r2, #55	@ 0x37
 80134d6:	f000 fbe7 	bl	8013ca8 <dhcp_option>
 80134da:	4603      	mov	r3, r0
 80134dc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134de:	2300      	movs	r3, #0
 80134e0:	77fb      	strb	r3, [r7, #31]
 80134e2:	e00e      	b.n	8013502 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80134e4:	8938      	ldrh	r0, [r7, #8]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80134ec:	7ffb      	ldrb	r3, [r7, #31]
 80134ee:	4a29      	ldr	r2, [pc, #164]	@ (8013594 <dhcp_discover+0x130>)
 80134f0:	5cd3      	ldrb	r3, [r2, r3]
 80134f2:	461a      	mov	r2, r3
 80134f4:	f000 fc0c 	bl	8013d10 <dhcp_option_byte>
 80134f8:	4603      	mov	r3, r0
 80134fa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134fc:	7ffb      	ldrb	r3, [r7, #31]
 80134fe:	3301      	adds	r3, #1
 8013500:	77fb      	strb	r3, [r7, #31]
 8013502:	7ffb      	ldrb	r3, [r7, #31]
 8013504:	2b02      	cmp	r3, #2
 8013506:	d9ed      	bls.n	80134e4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013508:	8938      	ldrh	r0, [r7, #8]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	33f0      	adds	r3, #240	@ 0xf0
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	4619      	mov	r1, r3
 8013512:	f001 f90b 	bl	801472c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013516:	4b20      	ldr	r3, [pc, #128]	@ (8013598 <dhcp_discover+0x134>)
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	4b20      	ldr	r3, [pc, #128]	@ (801359c <dhcp_discover+0x138>)
 801351c:	9301      	str	r3, [sp, #4]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	2343      	movs	r3, #67	@ 0x43
 8013524:	4a1e      	ldr	r2, [pc, #120]	@ (80135a0 <dhcp_discover+0x13c>)
 8013526:	6939      	ldr	r1, [r7, #16]
 8013528:	f7ff f866 	bl	80125f8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801352c:	6938      	ldr	r0, [r7, #16]
 801352e:	f7f8 fd75 	bl	800c01c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	799b      	ldrb	r3, [r3, #6]
 8013536:	2bff      	cmp	r3, #255	@ 0xff
 8013538:	d005      	beq.n	8013546 <dhcp_discover+0xe2>
    dhcp->tries++;
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	799b      	ldrb	r3, [r3, #6]
 801353e:	3301      	adds	r3, #1
 8013540:	b2da      	uxtb	r2, r3
 8013542:	69bb      	ldr	r3, [r7, #24]
 8013544:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	799b      	ldrb	r3, [r3, #6]
 801354a:	2b05      	cmp	r3, #5
 801354c:	d80d      	bhi.n	801356a <dhcp_discover+0x106>
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	799b      	ldrb	r3, [r3, #6]
 8013552:	461a      	mov	r2, r3
 8013554:	2301      	movs	r3, #1
 8013556:	4093      	lsls	r3, r2
 8013558:	b29b      	uxth	r3, r3
 801355a:	461a      	mov	r2, r3
 801355c:	0152      	lsls	r2, r2, #5
 801355e:	1ad2      	subs	r2, r2, r3
 8013560:	0092      	lsls	r2, r2, #2
 8013562:	4413      	add	r3, r2
 8013564:	00db      	lsls	r3, r3, #3
 8013566:	b29b      	uxth	r3, r3
 8013568:	e001      	b.n	801356e <dhcp_discover+0x10a>
 801356a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801356e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013570:	897b      	ldrh	r3, [r7, #10]
 8013572:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013576:	4a0b      	ldr	r2, [pc, #44]	@ (80135a4 <dhcp_discover+0x140>)
 8013578:	fb82 1203 	smull	r1, r2, r2, r3
 801357c:	1152      	asrs	r2, r2, #5
 801357e:	17db      	asrs	r3, r3, #31
 8013580:	1ad3      	subs	r3, r2, r3
 8013582:	b29a      	uxth	r2, r3
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013588:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3720      	adds	r7, #32
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	2000001c 	.word	0x2000001c
 8013598:	20004af0 	.word	0x20004af0
 801359c:	0801bd9c 	.word	0x0801bd9c
 80135a0:	0801bda0 	.word	0x0801bda0
 80135a4:	10624dd3 	.word	0x10624dd3

080135a8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b088      	sub	sp, #32
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d103      	bne.n	80135be <dhcp_bind+0x16>
 80135b6:	485a      	ldr	r0, [pc, #360]	@ (8013720 <dhcp_bind+0x178>)
 80135b8:	f7ed fb6c 	bl	8000c94 <printf>
 80135bc:	e0ac      	b.n	8013718 <dhcp_bind+0x170>
  dhcp = netif_dhcp_data(netif);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135c2:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d103      	bne.n	80135d2 <dhcp_bind+0x2a>
 80135ca:	4856      	ldr	r0, [pc, #344]	@ (8013724 <dhcp_bind+0x17c>)
 80135cc:	f7ed fb62 	bl	8000c94 <printf>
 80135d0:	e0a2      	b.n	8013718 <dhcp_bind+0x170>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	2200      	movs	r2, #0
 80135d6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135e0:	d019      	beq.n	8013616 <dhcp_bind+0x6e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135e6:	331e      	adds	r3, #30
 80135e8:	4a4f      	ldr	r2, [pc, #316]	@ (8013728 <dhcp_bind+0x180>)
 80135ea:	fba2 2303 	umull	r2, r3, r2, r3
 80135ee:	095b      	lsrs	r3, r3, #5
 80135f0:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135f8:	d302      	bcc.n	8013600 <dhcp_bind+0x58>
      timeout = 0xffff;
 80135fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80135fe:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013600:	69bb      	ldr	r3, [r7, #24]
 8013602:	b29a      	uxth	r2, r3
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	8a9b      	ldrh	r3, [r3, #20]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <dhcp_bind+0x6e>
      dhcp->t0_timeout = 1;
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	2201      	movs	r2, #1
 8013614:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361e:	d01d      	beq.n	801365c <dhcp_bind+0xb4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013624:	331e      	adds	r3, #30
 8013626:	4a40      	ldr	r2, [pc, #256]	@ (8013728 <dhcp_bind+0x180>)
 8013628:	fba2 2303 	umull	r2, r3, r2, r3
 801362c:	095b      	lsrs	r3, r3, #5
 801362e:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8013630:	69bb      	ldr	r3, [r7, #24]
 8013632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013636:	d302      	bcc.n	801363e <dhcp_bind+0x96>
      timeout = 0xffff;
 8013638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801363c:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	b29a      	uxth	r2, r3
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	895b      	ldrh	r3, [r3, #10]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d102      	bne.n	8013654 <dhcp_bind+0xac>
      dhcp->t1_timeout = 1;
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	2201      	movs	r2, #1
 8013652:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	895a      	ldrh	r2, [r3, #10]
 8013658:	69fb      	ldr	r3, [r7, #28]
 801365a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013664:	d01d      	beq.n	80136a2 <dhcp_bind+0xfa>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801366a:	331e      	adds	r3, #30
 801366c:	4a2e      	ldr	r2, [pc, #184]	@ (8013728 <dhcp_bind+0x180>)
 801366e:	fba2 2303 	umull	r2, r3, r2, r3
 8013672:	095b      	lsrs	r3, r3, #5
 8013674:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801367c:	d302      	bcc.n	8013684 <dhcp_bind+0xdc>
      timeout = 0xffff;
 801367e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013682:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	b29a      	uxth	r2, r3
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	899b      	ldrh	r3, [r3, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d102      	bne.n	801369a <dhcp_bind+0xf2>
      dhcp->t2_timeout = 1;
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	2201      	movs	r2, #1
 8013698:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	899a      	ldrh	r2, [r3, #12]
 801369e:	69fb      	ldr	r3, [r7, #28]
 80136a0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	895a      	ldrh	r2, [r3, #10]
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	899b      	ldrh	r3, [r3, #12]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d306      	bcc.n	80136bc <dhcp_bind+0x114>
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	899b      	ldrh	r3, [r3, #12]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d002      	beq.n	80136bc <dhcp_bind+0x114>
    dhcp->t1_timeout = 0;
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	2200      	movs	r2, #0
 80136ba:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80136bc:	69fb      	ldr	r3, [r7, #28]
 80136be:	79db      	ldrb	r3, [r3, #7]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d003      	beq.n	80136cc <dhcp_bind+0x124>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	6a1b      	ldr	r3, [r3, #32]
 80136c8:	613b      	str	r3, [r7, #16]
 80136ca:	e014      	b.n	80136f6 <dhcp_bind+0x14e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	331c      	adds	r3, #28
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80136d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	db02      	blt.n	80136e2 <dhcp_bind+0x13a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80136dc:	23ff      	movs	r3, #255	@ 0xff
 80136de:	613b      	str	r3, [r7, #16]
 80136e0:	e009      	b.n	80136f6 <dhcp_bind+0x14e>
    } else if (first_octet >= 192) {
 80136e2:	7dfb      	ldrb	r3, [r7, #23]
 80136e4:	2bbf      	cmp	r3, #191	@ 0xbf
 80136e6:	d903      	bls.n	80136f0 <dhcp_bind+0x148>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80136e8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80136ec:	613b      	str	r3, [r7, #16]
 80136ee:	e002      	b.n	80136f6 <dhcp_bind+0x14e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80136f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136f4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80136fc:	210a      	movs	r1, #10
 80136fe:	69f8      	ldr	r0, [r7, #28]
 8013700:	f000 fab8 	bl	8013c74 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	f103 011c 	add.w	r1, r3, #28
 801370a:	f107 030c 	add.w	r3, r7, #12
 801370e:	f107 0210 	add.w	r2, r7, #16
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7f8 f81c 	bl	800b750 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013718:	3720      	adds	r7, #32
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	0801b35c 	.word	0x0801b35c
 8013724:	0801b378 	.word	0x0801b378
 8013728:	88888889 	.word	0x88888889

0801372c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b08a      	sub	sp, #40	@ 0x28
 8013730:	af02      	add	r7, sp, #8
 8013732:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013738:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801373a:	2105      	movs	r1, #5
 801373c:	69b8      	ldr	r0, [r7, #24]
 801373e:	f000 fa99 	bl	8013c74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013742:	f107 030c 	add.w	r3, r7, #12
 8013746:	2203      	movs	r2, #3
 8013748:	69b9      	ldr	r1, [r7, #24]
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 ff20 	bl	8014590 <dhcp_create_msg>
 8013750:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d057      	beq.n	8013808 <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801375e:	89b8      	ldrh	r0, [r7, #12]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013766:	2302      	movs	r3, #2
 8013768:	2239      	movs	r2, #57	@ 0x39
 801376a:	f000 fa9d 	bl	8013ca8 <dhcp_option>
 801376e:	4603      	mov	r3, r0
 8013770:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013772:	89b8      	ldrh	r0, [r7, #12]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801377e:	461a      	mov	r2, r3
 8013780:	f000 faec 	bl	8013d5c <dhcp_option_short>
 8013784:	4603      	mov	r3, r0
 8013786:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013788:	89b8      	ldrh	r0, [r7, #12]
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013790:	2303      	movs	r3, #3
 8013792:	2237      	movs	r2, #55	@ 0x37
 8013794:	f000 fa88 	bl	8013ca8 <dhcp_option>
 8013798:	4603      	mov	r3, r0
 801379a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801379c:	2300      	movs	r3, #0
 801379e:	77bb      	strb	r3, [r7, #30]
 80137a0:	e00e      	b.n	80137c0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80137a2:	89b8      	ldrh	r0, [r7, #12]
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80137aa:	7fbb      	ldrb	r3, [r7, #30]
 80137ac:	4a2e      	ldr	r2, [pc, #184]	@ (8013868 <dhcp_renew+0x13c>)
 80137ae:	5cd3      	ldrb	r3, [r2, r3]
 80137b0:	461a      	mov	r2, r3
 80137b2:	f000 faad 	bl	8013d10 <dhcp_option_byte>
 80137b6:	4603      	mov	r3, r0
 80137b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137ba:	7fbb      	ldrb	r3, [r7, #30]
 80137bc:	3301      	adds	r3, #1
 80137be:	77bb      	strb	r3, [r7, #30]
 80137c0:	7fbb      	ldrb	r3, [r7, #30]
 80137c2:	2b02      	cmp	r3, #2
 80137c4:	d9ed      	bls.n	80137a2 <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 80137c6:	89b8      	ldrh	r0, [r7, #12]
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	33f0      	adds	r3, #240	@ 0xf0
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	4619      	mov	r1, r3
 80137d0:	f000 fb3a 	bl	8013e48 <dhcp_option_hostname>
 80137d4:	4603      	mov	r3, r0
 80137d6:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137d8:	89b8      	ldrh	r0, [r7, #12]
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	33f0      	adds	r3, #240	@ 0xf0
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	4619      	mov	r1, r3
 80137e2:	f000 ffa3 	bl	801472c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137e6:	4b21      	ldr	r3, [pc, #132]	@ (801386c <dhcp_renew+0x140>)
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	f103 0218 	add.w	r2, r3, #24
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	9300      	str	r3, [sp, #0]
 80137f4:	2343      	movs	r3, #67	@ 0x43
 80137f6:	6979      	ldr	r1, [r7, #20]
 80137f8:	f7fe fe9e 	bl	8012538 <udp_sendto_if>
 80137fc:	4603      	mov	r3, r0
 80137fe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013800:	6978      	ldr	r0, [r7, #20]
 8013802:	f7f8 fc0b 	bl	800c01c <pbuf_free>
 8013806:	e001      	b.n	801380c <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013808:	23ff      	movs	r3, #255	@ 0xff
 801380a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	799b      	ldrb	r3, [r3, #6]
 8013810:	2bff      	cmp	r3, #255	@ 0xff
 8013812:	d005      	beq.n	8013820 <dhcp_renew+0xf4>
    dhcp->tries++;
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	799b      	ldrb	r3, [r3, #6]
 8013818:	3301      	adds	r3, #1
 801381a:	b2da      	uxtb	r2, r3
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	799b      	ldrb	r3, [r3, #6]
 8013824:	2b09      	cmp	r3, #9
 8013826:	d809      	bhi.n	801383c <dhcp_renew+0x110>
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	799b      	ldrb	r3, [r3, #6]
 801382c:	461a      	mov	r2, r3
 801382e:	0152      	lsls	r2, r2, #5
 8013830:	1ad2      	subs	r2, r2, r3
 8013832:	0092      	lsls	r2, r2, #2
 8013834:	4413      	add	r3, r2
 8013836:	011b      	lsls	r3, r3, #4
 8013838:	b29b      	uxth	r3, r3
 801383a:	e001      	b.n	8013840 <dhcp_renew+0x114>
 801383c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013840:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013848:	4a09      	ldr	r2, [pc, #36]	@ (8013870 <dhcp_renew+0x144>)
 801384a:	fb82 1203 	smull	r1, r2, r2, r3
 801384e:	1152      	asrs	r2, r2, #5
 8013850:	17db      	asrs	r3, r3, #31
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	b29a      	uxth	r2, r3
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801385a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801385e:	4618      	mov	r0, r3
 8013860:	3720      	adds	r7, #32
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	2000001c 	.word	0x2000001c
 801386c:	20004af0 	.word	0x20004af0
 8013870:	10624dd3 	.word	0x10624dd3

08013874 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b08a      	sub	sp, #40	@ 0x28
 8013878:	af02      	add	r7, sp, #8
 801387a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013880:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013882:	2104      	movs	r1, #4
 8013884:	69b8      	ldr	r0, [r7, #24]
 8013886:	f000 f9f5 	bl	8013c74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801388a:	f107 030c 	add.w	r3, r7, #12
 801388e:	2203      	movs	r2, #3
 8013890:	69b9      	ldr	r1, [r7, #24]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 fe7c 	bl	8014590 <dhcp_create_msg>
 8013898:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d055      	beq.n	801394c <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80138a6:	89b8      	ldrh	r0, [r7, #12]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138ae:	2302      	movs	r3, #2
 80138b0:	2239      	movs	r2, #57	@ 0x39
 80138b2:	f000 f9f9 	bl	8013ca8 <dhcp_option>
 80138b6:	4603      	mov	r3, r0
 80138b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80138ba:	89b8      	ldrh	r0, [r7, #12]
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80138c6:	461a      	mov	r2, r3
 80138c8:	f000 fa48 	bl	8013d5c <dhcp_option_short>
 80138cc:	4603      	mov	r3, r0
 80138ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80138d0:	89b8      	ldrh	r0, [r7, #12]
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138d8:	2303      	movs	r3, #3
 80138da:	2237      	movs	r2, #55	@ 0x37
 80138dc:	f000 f9e4 	bl	8013ca8 <dhcp_option>
 80138e0:	4603      	mov	r3, r0
 80138e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138e4:	2300      	movs	r3, #0
 80138e6:	77bb      	strb	r3, [r7, #30]
 80138e8:	e00e      	b.n	8013908 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80138ea:	89b8      	ldrh	r0, [r7, #12]
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80138f2:	7fbb      	ldrb	r3, [r7, #30]
 80138f4:	4a2d      	ldr	r2, [pc, #180]	@ (80139ac <dhcp_rebind+0x138>)
 80138f6:	5cd3      	ldrb	r3, [r2, r3]
 80138f8:	461a      	mov	r2, r3
 80138fa:	f000 fa09 	bl	8013d10 <dhcp_option_byte>
 80138fe:	4603      	mov	r3, r0
 8013900:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013902:	7fbb      	ldrb	r3, [r7, #30]
 8013904:	3301      	adds	r3, #1
 8013906:	77bb      	strb	r3, [r7, #30]
 8013908:	7fbb      	ldrb	r3, [r7, #30]
 801390a:	2b02      	cmp	r3, #2
 801390c:	d9ed      	bls.n	80138ea <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 801390e:	89b8      	ldrh	r0, [r7, #12]
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	33f0      	adds	r3, #240	@ 0xf0
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	4619      	mov	r1, r3
 8013918:	f000 fa96 	bl	8013e48 <dhcp_option_hostname>
 801391c:	4603      	mov	r3, r0
 801391e:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013920:	89b8      	ldrh	r0, [r7, #12]
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	33f0      	adds	r3, #240	@ 0xf0
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	4619      	mov	r1, r3
 801392a:	f000 feff 	bl	801472c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801392e:	4b20      	ldr	r3, [pc, #128]	@ (80139b0 <dhcp_rebind+0x13c>)
 8013930:	6818      	ldr	r0, [r3, #0]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	9300      	str	r3, [sp, #0]
 8013936:	2343      	movs	r3, #67	@ 0x43
 8013938:	4a1e      	ldr	r2, [pc, #120]	@ (80139b4 <dhcp_rebind+0x140>)
 801393a:	6979      	ldr	r1, [r7, #20]
 801393c:	f7fe fdfc 	bl	8012538 <udp_sendto_if>
 8013940:	4603      	mov	r3, r0
 8013942:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013944:	6978      	ldr	r0, [r7, #20]
 8013946:	f7f8 fb69 	bl	800c01c <pbuf_free>
 801394a:	e001      	b.n	8013950 <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801394c:	23ff      	movs	r3, #255	@ 0xff
 801394e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	799b      	ldrb	r3, [r3, #6]
 8013954:	2bff      	cmp	r3, #255	@ 0xff
 8013956:	d005      	beq.n	8013964 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	799b      	ldrb	r3, [r3, #6]
 801395c:	3301      	adds	r3, #1
 801395e:	b2da      	uxtb	r2, r3
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	799b      	ldrb	r3, [r3, #6]
 8013968:	2b09      	cmp	r3, #9
 801396a:	d809      	bhi.n	8013980 <dhcp_rebind+0x10c>
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	799b      	ldrb	r3, [r3, #6]
 8013970:	461a      	mov	r2, r3
 8013972:	0152      	lsls	r2, r2, #5
 8013974:	1ad2      	subs	r2, r2, r3
 8013976:	0092      	lsls	r2, r2, #2
 8013978:	4413      	add	r3, r2
 801397a:	00db      	lsls	r3, r3, #3
 801397c:	b29b      	uxth	r3, r3
 801397e:	e001      	b.n	8013984 <dhcp_rebind+0x110>
 8013980:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013984:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013986:	89fb      	ldrh	r3, [r7, #14]
 8013988:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801398c:	4a0a      	ldr	r2, [pc, #40]	@ (80139b8 <dhcp_rebind+0x144>)
 801398e:	fb82 1203 	smull	r1, r2, r2, r3
 8013992:	1152      	asrs	r2, r2, #5
 8013994:	17db      	asrs	r3, r3, #31
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	b29a      	uxth	r2, r3
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801399e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3720      	adds	r7, #32
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	2000001c 	.word	0x2000001c
 80139b0:	20004af0 	.word	0x20004af0
 80139b4:	0801bda0 	.word	0x0801bda0
 80139b8:	10624dd3 	.word	0x10624dd3

080139bc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80139bc:	b5b0      	push	{r4, r5, r7, lr}
 80139be:	b08a      	sub	sp, #40	@ 0x28
 80139c0:	af02      	add	r7, sp, #8
 80139c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80139ca:	2103      	movs	r1, #3
 80139cc:	69b8      	ldr	r0, [r7, #24]
 80139ce:	f000 f951 	bl	8013c74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80139d2:	f107 030c 	add.w	r3, r7, #12
 80139d6:	2203      	movs	r2, #3
 80139d8:	69b9      	ldr	r1, [r7, #24]
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 fdd8 	bl	8014590 <dhcp_create_msg>
 80139e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d06f      	beq.n	8013ac8 <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80139ee:	89b8      	ldrh	r0, [r7, #12]
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80139f6:	2302      	movs	r3, #2
 80139f8:	2239      	movs	r2, #57	@ 0x39
 80139fa:	f000 f955 	bl	8013ca8 <dhcp_option>
 80139fe:	4603      	mov	r3, r0
 8013a00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013a02:	89b8      	ldrh	r0, [r7, #12]
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	33f0      	adds	r3, #240	@ 0xf0
 8013a08:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	f000 f9a5 	bl	8013d5c <dhcp_option_short>
 8013a12:	4603      	mov	r3, r0
 8013a14:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013a16:	89b8      	ldrh	r0, [r7, #12]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013a1e:	2304      	movs	r3, #4
 8013a20:	2232      	movs	r2, #50	@ 0x32
 8013a22:	f000 f941 	bl	8013ca8 <dhcp_option>
 8013a26:	4603      	mov	r3, r0
 8013a28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013a2a:	89bc      	ldrh	r4, [r7, #12]
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	69db      	ldr	r3, [r3, #28]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f6 fec1 	bl	800a7be <lwip_htonl>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	461a      	mov	r2, r3
 8013a40:	4629      	mov	r1, r5
 8013a42:	4620      	mov	r0, r4
 8013a44:	f000 f9bc 	bl	8013dc0 <dhcp_option_long>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a4c:	89b8      	ldrh	r0, [r7, #12]
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013a54:	2303      	movs	r3, #3
 8013a56:	2237      	movs	r2, #55	@ 0x37
 8013a58:	f000 f926 	bl	8013ca8 <dhcp_option>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a60:	2300      	movs	r3, #0
 8013a62:	77bb      	strb	r3, [r7, #30]
 8013a64:	e00e      	b.n	8013a84 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013a66:	89b8      	ldrh	r0, [r7, #12]
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013a6e:	7fbb      	ldrb	r3, [r7, #30]
 8013a70:	4a2d      	ldr	r2, [pc, #180]	@ (8013b28 <dhcp_reboot+0x16c>)
 8013a72:	5cd3      	ldrb	r3, [r2, r3]
 8013a74:	461a      	mov	r2, r3
 8013a76:	f000 f94b 	bl	8013d10 <dhcp_option_byte>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a7e:	7fbb      	ldrb	r3, [r7, #30]
 8013a80:	3301      	adds	r3, #1
 8013a82:	77bb      	strb	r3, [r7, #30]
 8013a84:	7fbb      	ldrb	r3, [r7, #30]
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d9ed      	bls.n	8013a66 <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8013a8a:	89b8      	ldrh	r0, [r7, #12]
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	33f0      	adds	r3, #240	@ 0xf0
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	4619      	mov	r1, r3
 8013a94:	f000 f9d8 	bl	8013e48 <dhcp_option_hostname>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a9c:	89b8      	ldrh	r0, [r7, #12]
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	33f0      	adds	r3, #240	@ 0xf0
 8013aa2:	697a      	ldr	r2, [r7, #20]
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	f000 fe41 	bl	801472c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013aaa:	4b20      	ldr	r3, [pc, #128]	@ (8013b2c <dhcp_reboot+0x170>)
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	2343      	movs	r3, #67	@ 0x43
 8013ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8013b30 <dhcp_reboot+0x174>)
 8013ab6:	6979      	ldr	r1, [r7, #20]
 8013ab8:	f7fe fd3e 	bl	8012538 <udp_sendto_if>
 8013abc:	4603      	mov	r3, r0
 8013abe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ac0:	6978      	ldr	r0, [r7, #20]
 8013ac2:	f7f8 faab 	bl	800c01c <pbuf_free>
 8013ac6:	e001      	b.n	8013acc <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013ac8:	23ff      	movs	r3, #255	@ 0xff
 8013aca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	799b      	ldrb	r3, [r3, #6]
 8013ad0:	2bff      	cmp	r3, #255	@ 0xff
 8013ad2:	d005      	beq.n	8013ae0 <dhcp_reboot+0x124>
    dhcp->tries++;
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	799b      	ldrb	r3, [r3, #6]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	b2da      	uxtb	r2, r3
 8013adc:	69bb      	ldr	r3, [r7, #24]
 8013ade:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	799b      	ldrb	r3, [r3, #6]
 8013ae4:	2b09      	cmp	r3, #9
 8013ae6:	d809      	bhi.n	8013afc <dhcp_reboot+0x140>
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	799b      	ldrb	r3, [r3, #6]
 8013aec:	461a      	mov	r2, r3
 8013aee:	0152      	lsls	r2, r2, #5
 8013af0:	1ad2      	subs	r2, r2, r3
 8013af2:	0092      	lsls	r2, r2, #2
 8013af4:	4413      	add	r3, r2
 8013af6:	00db      	lsls	r3, r3, #3
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	e001      	b.n	8013b00 <dhcp_reboot+0x144>
 8013afc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013b00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013b02:	89fb      	ldrh	r3, [r7, #14]
 8013b04:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013b08:	4a0a      	ldr	r2, [pc, #40]	@ (8013b34 <dhcp_reboot+0x178>)
 8013b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8013b0e:	1152      	asrs	r2, r2, #5
 8013b10:	17db      	asrs	r3, r3, #31
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013b1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3720      	adds	r7, #32
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bdb0      	pop	{r4, r5, r7, pc}
 8013b26:	bf00      	nop
 8013b28:	2000001c 	.word	0x2000001c
 8013b2c:	20004af0 	.word	0x20004af0
 8013b30:	0801bda0 	.word	0x0801bda0
 8013b34:	10624dd3 	.word	0x10624dd3

08013b38 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013b38:	b5b0      	push	{r4, r5, r7, lr}
 8013b3a:	b08a      	sub	sp, #40	@ 0x28
 8013b3c:	af02      	add	r7, sp, #8
 8013b3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b44:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f000 8089 	beq.w	8013c60 <dhcp_release_and_stop+0x128>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	795b      	ldrb	r3, [r3, #5]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f000 8086 	beq.w	8013c64 <dhcp_release_and_stop+0x12c>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	2200      	movs	r2, #0
 8013b62:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	2200      	movs	r2, #0
 8013b68:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	2200      	movs	r2, #0
 8013b74:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	829a      	strh	r2, [r3, #20]
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	8a9a      	ldrh	r2, [r3, #20]
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	825a      	strh	r2, [r3, #18]
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	8a5a      	ldrh	r2, [r3, #18]
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	821a      	strh	r2, [r3, #16]
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	8a1a      	ldrh	r2, [r3, #16]
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 fdec 	bl	8014788 <dhcp_supplied_address>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d046      	beq.n	8013c44 <dhcp_release_and_stop+0x10c>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	69f8      	ldr	r0, [r7, #28]
 8013bba:	f000 f85b 	bl	8013c74 <dhcp_set_state>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013bbe:	f107 030e 	add.w	r3, r7, #14
 8013bc2:	2207      	movs	r2, #7
 8013bc4:	69f9      	ldr	r1, [r7, #28]
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f000 fce2 	bl	8014590 <dhcp_create_msg>
 8013bcc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013bce:	69bb      	ldr	r3, [r7, #24]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d030      	beq.n	8013c36 <dhcp_release_and_stop+0xfe>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013bda:	89f8      	ldrh	r0, [r7, #14]
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013be2:	2304      	movs	r3, #4
 8013be4:	2236      	movs	r2, #54	@ 0x36
 8013be6:	f000 f85f 	bl	8013ca8 <dhcp_option>
 8013bea:	4603      	mov	r3, r0
 8013bec:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013bee:	89fc      	ldrh	r4, [r7, #14]
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f6 fde0 	bl	800a7be <lwip_htonl>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	4629      	mov	r1, r5
 8013c04:	4620      	mov	r0, r4
 8013c06:	f000 f8db 	bl	8013dc0 <dhcp_option_long>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013c0e:	89f8      	ldrh	r0, [r7, #14]
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	33f0      	adds	r3, #240	@ 0xf0
 8013c14:	69ba      	ldr	r2, [r7, #24]
 8013c16:	4619      	mov	r1, r3
 8013c18:	f000 fd88 	bl	801472c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013c1c:	4b13      	ldr	r3, [pc, #76]	@ (8013c6c <dhcp_release_and_stop+0x134>)
 8013c1e:	6818      	ldr	r0, [r3, #0]
 8013c20:	f107 0210 	add.w	r2, r7, #16
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	2343      	movs	r3, #67	@ 0x43
 8013c2a:	69b9      	ldr	r1, [r7, #24]
 8013c2c:	f7fe fc84 	bl	8012538 <udp_sendto_if>
      pbuf_free(p_out);
 8013c30:	69b8      	ldr	r0, [r7, #24]
 8013c32:	f7f8 f9f3 	bl	800c01c <pbuf_free>
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }

    /* remove IP address from interface (prevents routing from selecting this interface) */
    netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013c36:	4b0e      	ldr	r3, [pc, #56]	@ (8013c70 <dhcp_release_and_stop+0x138>)
 8013c38:	4a0d      	ldr	r2, [pc, #52]	@ (8013c70 <dhcp_release_and_stop+0x138>)
 8013c3a:	490d      	ldr	r1, [pc, #52]	@ (8013c70 <dhcp_release_and_stop+0x138>)
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7f7 fd87 	bl	800b750 <netif_set_addr>
 8013c42:	e003      	b.n	8013c4c <dhcp_release_and_stop+0x114>
  } else {
     dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013c44:	2100      	movs	r1, #0
 8013c46:	69f8      	ldr	r0, [r7, #28]
 8013c48:	f000 f814 	bl	8013c74 <dhcp_set_state>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  if (dhcp->pcb_allocated != 0) {
 8013c4c:	69fb      	ldr	r3, [r7, #28]
 8013c4e:	791b      	ldrb	r3, [r3, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d008      	beq.n	8013c66 <dhcp_release_and_stop+0x12e>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013c54:	f7fe ff96 	bl	8012b84 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	711a      	strb	r2, [r3, #4]
 8013c5e:	e002      	b.n	8013c66 <dhcp_release_and_stop+0x12e>
    return;
 8013c60:	bf00      	nop
 8013c62:	e000      	b.n	8013c66 <dhcp_release_and_stop+0x12e>
    return;
 8013c64:	bf00      	nop
  }
}
 8013c66:	3720      	adds	r7, #32
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8013c6c:	20004af0 	.word	0x20004af0
 8013c70:	0801bd9c 	.word	0x0801bd9c

08013c74 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	795b      	ldrb	r3, [r3, #5]
 8013c84:	78fa      	ldrb	r2, [r7, #3]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d008      	beq.n	8013c9c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	78fa      	ldrb	r2, [r7, #3]
 8013c8e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	811a      	strh	r2, [r3, #8]
  }
}
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6039      	str	r1, [r7, #0]
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	80fb      	strh	r3, [r7, #6]
 8013cb8:	460b      	mov	r3, r1
 8013cba:	717b      	strb	r3, [r7, #5]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013cc0:	88fa      	ldrh	r2, [r7, #6]
 8013cc2:	793b      	ldrb	r3, [r7, #4]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	3302      	adds	r3, #2
 8013cc8:	2b44      	cmp	r3, #68	@ 0x44
 8013cca:	d906      	bls.n	8013cda <dhcp_option+0x32>
 8013ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8013d04 <dhcp_option+0x5c>)
 8013cce:	f240 5299 	movw	r2, #1433	@ 0x599
 8013cd2:	490d      	ldr	r1, [pc, #52]	@ (8013d08 <dhcp_option+0x60>)
 8013cd4:	480d      	ldr	r0, [pc, #52]	@ (8013d0c <dhcp_option+0x64>)
 8013cd6:	f7ec ffdd 	bl	8000c94 <printf>
  options[options_out_len++] = option_type;
 8013cda:	88fb      	ldrh	r3, [r7, #6]
 8013cdc:	1c5a      	adds	r2, r3, #1
 8013cde:	80fa      	strh	r2, [r7, #6]
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	797a      	ldrb	r2, [r7, #5]
 8013ce8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013cea:	88fb      	ldrh	r3, [r7, #6]
 8013cec:	1c5a      	adds	r2, r3, #1
 8013cee:	80fa      	strh	r2, [r7, #6]
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	793a      	ldrb	r2, [r7, #4]
 8013cf8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013cfa:	88fb      	ldrh	r3, [r7, #6]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	0801b200 	.word	0x0801b200
 8013d08:	0801b390 	.word	0x0801b390
 8013d0c:	0801b25c 	.word	0x0801b25c

08013d10 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	4603      	mov	r3, r0
 8013d18:	6039      	str	r1, [r7, #0]
 8013d1a:	80fb      	strh	r3, [r7, #6]
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013d20:	88fb      	ldrh	r3, [r7, #6]
 8013d22:	2b43      	cmp	r3, #67	@ 0x43
 8013d24:	d906      	bls.n	8013d34 <dhcp_option_byte+0x24>
 8013d26:	4b0a      	ldr	r3, [pc, #40]	@ (8013d50 <dhcp_option_byte+0x40>)
 8013d28:	f240 52a5 	movw	r2, #1445	@ 0x5a5
 8013d2c:	4909      	ldr	r1, [pc, #36]	@ (8013d54 <dhcp_option_byte+0x44>)
 8013d2e:	480a      	ldr	r0, [pc, #40]	@ (8013d58 <dhcp_option_byte+0x48>)
 8013d30:	f7ec ffb0 	bl	8000c94 <printf>
  options[options_out_len++] = value;
 8013d34:	88fb      	ldrh	r3, [r7, #6]
 8013d36:	1c5a      	adds	r2, r3, #1
 8013d38:	80fa      	strh	r2, [r7, #6]
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	4413      	add	r3, r2
 8013d40:	797a      	ldrb	r2, [r7, #5]
 8013d42:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013d44:	88fb      	ldrh	r3, [r7, #6]
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3708      	adds	r7, #8
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	0801b200 	.word	0x0801b200
 8013d54:	0801b3d4 	.word	0x0801b3d4
 8013d58:	0801b25c 	.word	0x0801b25c

08013d5c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	4603      	mov	r3, r0
 8013d64:	6039      	str	r1, [r7, #0]
 8013d66:	80fb      	strh	r3, [r7, #6]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013d6c:	88fb      	ldrh	r3, [r7, #6]
 8013d6e:	3302      	adds	r3, #2
 8013d70:	2b44      	cmp	r3, #68	@ 0x44
 8013d72:	d906      	bls.n	8013d82 <dhcp_option_short+0x26>
 8013d74:	4b0f      	ldr	r3, [pc, #60]	@ (8013db4 <dhcp_option_short+0x58>)
 8013d76:	f240 52ad 	movw	r2, #1453	@ 0x5ad
 8013d7a:	490f      	ldr	r1, [pc, #60]	@ (8013db8 <dhcp_option_short+0x5c>)
 8013d7c:	480f      	ldr	r0, [pc, #60]	@ (8013dbc <dhcp_option_short+0x60>)
 8013d7e:	f7ec ff89 	bl	8000c94 <printf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013d82:	88bb      	ldrh	r3, [r7, #4]
 8013d84:	0a1b      	lsrs	r3, r3, #8
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	88fb      	ldrh	r3, [r7, #6]
 8013d8a:	1c59      	adds	r1, r3, #1
 8013d8c:	80f9      	strh	r1, [r7, #6]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	440b      	add	r3, r1
 8013d94:	b2d2      	uxtb	r2, r2
 8013d96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013d98:	88fb      	ldrh	r3, [r7, #6]
 8013d9a:	1c5a      	adds	r2, r3, #1
 8013d9c:	80fa      	strh	r2, [r7, #6]
 8013d9e:	461a      	mov	r2, r3
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	4413      	add	r3, r2
 8013da4:	88ba      	ldrh	r2, [r7, #4]
 8013da6:	b2d2      	uxtb	r2, r2
 8013da8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013daa:	88fb      	ldrh	r3, [r7, #6]
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	0801b200 	.word	0x0801b200
 8013db8:	0801b40c 	.word	0x0801b40c
 8013dbc:	0801b25c 	.word	0x0801b25c

08013dc0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	607a      	str	r2, [r7, #4]
 8013dcc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013dce:	89fb      	ldrh	r3, [r7, #14]
 8013dd0:	3304      	adds	r3, #4
 8013dd2:	2b44      	cmp	r3, #68	@ 0x44
 8013dd4:	d906      	bls.n	8013de4 <dhcp_option_long+0x24>
 8013dd6:	4b19      	ldr	r3, [pc, #100]	@ (8013e3c <dhcp_option_long+0x7c>)
 8013dd8:	f240 52b6 	movw	r2, #1462	@ 0x5b6
 8013ddc:	4918      	ldr	r1, [pc, #96]	@ (8013e40 <dhcp_option_long+0x80>)
 8013dde:	4819      	ldr	r0, [pc, #100]	@ (8013e44 <dhcp_option_long+0x84>)
 8013de0:	f7ec ff58 	bl	8000c94 <printf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	0e1a      	lsrs	r2, r3, #24
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	1c59      	adds	r1, r3, #1
 8013dec:	81f9      	strh	r1, [r7, #14]
 8013dee:	4619      	mov	r1, r3
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	440b      	add	r3, r1
 8013df4:	b2d2      	uxtb	r2, r2
 8013df6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	0c1a      	lsrs	r2, r3, #16
 8013dfc:	89fb      	ldrh	r3, [r7, #14]
 8013dfe:	1c59      	adds	r1, r3, #1
 8013e00:	81f9      	strh	r1, [r7, #14]
 8013e02:	4619      	mov	r1, r3
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	440b      	add	r3, r1
 8013e08:	b2d2      	uxtb	r2, r2
 8013e0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	0a1a      	lsrs	r2, r3, #8
 8013e10:	89fb      	ldrh	r3, [r7, #14]
 8013e12:	1c59      	adds	r1, r3, #1
 8013e14:	81f9      	strh	r1, [r7, #14]
 8013e16:	4619      	mov	r1, r3
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	440b      	add	r3, r1
 8013e1c:	b2d2      	uxtb	r2, r2
 8013e1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013e20:	89fb      	ldrh	r3, [r7, #14]
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	81fa      	strh	r2, [r7, #14]
 8013e26:	461a      	mov	r2, r3
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	b2d2      	uxtb	r2, r2
 8013e30:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013e32:	89fb      	ldrh	r3, [r7, #14]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3710      	adds	r7, #16
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	0801b200 	.word	0x0801b200
 8013e40:	0801b448 	.word	0x0801b448
 8013e44:	0801b25c 	.word	0x0801b25c

08013e48 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b088      	sub	sp, #32
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	4603      	mov	r3, r0
 8013e50:	60b9      	str	r1, [r7, #8]
 8013e52:	607a      	str	r2, [r7, #4]
 8013e54:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d044      	beq.n	8013ee8 <dhcp_option_hostname+0xa0>
    size_t namelen = strlen(netif->hostname);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7ec f9bc 	bl	80001e0 <strlen>
 8013e68:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d03b      	beq.n	8013ee8 <dhcp_option_hostname+0xa0>
      size_t len;
      const char *p = netif->hostname;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e74:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 8013e76:	89fb      	ldrh	r3, [r7, #14]
 8013e78:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8013e7c:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
 8013e7e:	697a      	ldr	r2, [r7, #20]
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d906      	bls.n	8013e94 <dhcp_option_hostname+0x4c>
 8013e86:	4b1b      	ldr	r3, [pc, #108]	@ (8013ef4 <dhcp_option_hostname+0xac>)
 8013e88:	f240 52ca 	movw	r2, #1482	@ 0x5ca
 8013e8c:	491a      	ldr	r1, [pc, #104]	@ (8013ef8 <dhcp_option_hostname+0xb0>)
 8013e8e:	481b      	ldr	r0, [pc, #108]	@ (8013efc <dhcp_option_hostname+0xb4>)
 8013e90:	f7ec ff00 	bl	8000c94 <printf>
      len = LWIP_MIN(namelen, available);
 8013e94:	693a      	ldr	r2, [r7, #16]
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	bf28      	it	cs
 8013e9c:	4613      	movcs	r3, r2
 8013e9e:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
 8013ea0:	69fb      	ldr	r3, [r7, #28]
 8013ea2:	2bff      	cmp	r3, #255	@ 0xff
 8013ea4:	d906      	bls.n	8013eb4 <dhcp_option_hostname+0x6c>
 8013ea6:	4b13      	ldr	r3, [pc, #76]	@ (8013ef4 <dhcp_option_hostname+0xac>)
 8013ea8:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8013eac:	4912      	ldr	r1, [pc, #72]	@ (8013ef8 <dhcp_option_hostname+0xb0>)
 8013eae:	4813      	ldr	r0, [pc, #76]	@ (8013efc <dhcp_option_hostname+0xb4>)
 8013eb0:	f7ec fef0 	bl	8000c94 <printf>
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 8013eb4:	69fb      	ldr	r3, [r7, #28]
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	89f8      	ldrh	r0, [r7, #14]
 8013eba:	220c      	movs	r2, #12
 8013ebc:	68b9      	ldr	r1, [r7, #8]
 8013ebe:	f7ff fef3 	bl	8013ca8 <dhcp_option>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 8013ec6:	e00a      	b.n	8013ede <dhcp_option_hostname+0x96>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	1c5a      	adds	r2, r3, #1
 8013ecc:	61ba      	str	r2, [r7, #24]
 8013ece:	781a      	ldrb	r2, [r3, #0]
 8013ed0:	89fb      	ldrh	r3, [r7, #14]
 8013ed2:	68b9      	ldr	r1, [r7, #8]
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7ff ff1b 	bl	8013d10 <dhcp_option_byte>
 8013eda:	4603      	mov	r3, r0
 8013edc:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	1e5a      	subs	r2, r3, #1
 8013ee2:	61fa      	str	r2, [r7, #28]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d1ef      	bne.n	8013ec8 <dhcp_option_hostname+0x80>
      }
    }
  }
  return options_out_len;
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3720      	adds	r7, #32
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	0801b200 	.word	0x0801b200
 8013ef8:	0801b484 	.word	0x0801b484
 8013efc:	0801b25c 	.word	0x0801b25c

08013f00 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b092      	sub	sp, #72	@ 0x48
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
  u16_t offset_max;
  u16_t options_offset;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013f12:	2208      	movs	r2, #8
 8013f14:	2100      	movs	r1, #0
 8013f16:	48b7      	ldr	r0, [pc, #732]	@ (80141f4 <dhcp_parse_reply+0x2f4>)
 8013f18:	f003 fb19 	bl	801754e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	895b      	ldrh	r3, [r3, #10]
 8013f20:	2b2b      	cmp	r3, #43	@ 0x2b
 8013f22:	d802      	bhi.n	8013f2a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013f24:	f06f 0301 	mvn.w	r3, #1
 8013f28:	e259      	b.n	80143de <dhcp_parse_reply+0x4de>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013f30:	23f0      	movs	r3, #240	@ 0xf0
 8013f32:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	891b      	ldrh	r3, [r3, #8]
 8013f38:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  options_offset = options_idx;
 8013f3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f40:	837b      	strh	r3, [r7, #26]
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f42:	e00c      	b.n	8013f5e <dhcp_parse_reply+0x5e>
    options_idx = (u16_t)(options_idx - q->len);
 8013f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f46:	895b      	ldrh	r3, [r3, #10]
 8013f48:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f50:	895b      	ldrh	r3, [r3, #10]
 8013f52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013f54:	1ad3      	subs	r3, r2, r3
 8013f56:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 8013f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d004      	beq.n	8013f6e <dhcp_parse_reply+0x6e>
 8013f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f66:	895b      	ldrh	r3, [r3, #10]
 8013f68:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d2ea      	bcs.n	8013f44 <dhcp_parse_reply+0x44>
  }
  if (q == NULL) {
 8013f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d102      	bne.n	8013f7a <dhcp_parse_reply+0x7a>
    return ERR_BUF;
 8013f74:	f06f 0301 	mvn.w	r3, #1
 8013f78:	e231      	b.n	80143de <dhcp_parse_reply+0x4de>
  }
  offset = options_idx;
 8013f7a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013f7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 8013f80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013f82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 8013f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013f8a:	e1e6      	b.n	801435a <dhcp_parse_reply+0x45a>
    u8_t op = options[offset];
 8013f8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f92:	4413      	add	r3, r2
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	767b      	strb	r3, [r7, #25]
    u8_t len;
    u8_t decode_len = 0;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8013f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8013fa4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fa8:	3302      	adds	r3, #2
 8013faa:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8013fac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013fae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d202      	bcs.n	8013fbc <dhcp_parse_reply+0xbc>
      /* overflow */
      return ERR_BUF;
 8013fb6:	f06f 0301 	mvn.w	r3, #1
 8013fba:	e210      	b.n	80143de <dhcp_parse_reply+0x4de>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013fbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013fc4:	8952      	ldrh	r2, [r2, #10]
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	da08      	bge.n	8013fdc <dhcp_parse_reply+0xdc>
      len = options[offset + 1];
 8013fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013fce:	3301      	adds	r3, #1
 8013fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013fd2:	4413      	add	r3, r2
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8013fda:	e00b      	b.n	8013ff4 <dhcp_parse_reply+0xf4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d004      	beq.n	8013fee <dhcp_parse_reply+0xee>
 8013fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	e000      	b.n	8013ff0 <dhcp_parse_reply+0xf0>
 8013fee:	2300      	movs	r3, #0
 8013ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 8013ffc:	7e7b      	ldrb	r3, [r7, #25]
 8013ffe:	2b3b      	cmp	r3, #59	@ 0x3b
 8014000:	f200 80df 	bhi.w	80141c2 <dhcp_parse_reply+0x2c2>
 8014004:	a201      	add	r2, pc, #4	@ (adr r2, 801400c <dhcp_parse_reply+0x10c>)
 8014006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801400a:	bf00      	nop
 801400c:	080140fd 	.word	0x080140fd
 8014010:	0801410d 	.word	0x0801410d
 8014014:	080141c3 	.word	0x080141c3
 8014018:	08014121 	.word	0x08014121
 801401c:	080141c3 	.word	0x080141c3
 8014020:	080141c3 	.word	0x080141c3
 8014024:	080141c3 	.word	0x080141c3
 8014028:	080141c3 	.word	0x080141c3
 801402c:	080141c3 	.word	0x080141c3
 8014030:	080141c3 	.word	0x080141c3
 8014034:	080141c3 	.word	0x080141c3
 8014038:	080141c3 	.word	0x080141c3
 801403c:	080141c3 	.word	0x080141c3
 8014040:	080141c3 	.word	0x080141c3
 8014044:	080141c3 	.word	0x080141c3
 8014048:	080141c3 	.word	0x080141c3
 801404c:	080141c3 	.word	0x080141c3
 8014050:	080141c3 	.word	0x080141c3
 8014054:	080141c3 	.word	0x080141c3
 8014058:	080141c3 	.word	0x080141c3
 801405c:	080141c3 	.word	0x080141c3
 8014060:	080141c3 	.word	0x080141c3
 8014064:	080141c3 	.word	0x080141c3
 8014068:	080141c3 	.word	0x080141c3
 801406c:	080141c3 	.word	0x080141c3
 8014070:	080141c3 	.word	0x080141c3
 8014074:	080141c3 	.word	0x080141c3
 8014078:	080141c3 	.word	0x080141c3
 801407c:	080141c3 	.word	0x080141c3
 8014080:	080141c3 	.word	0x080141c3
 8014084:	080141c3 	.word	0x080141c3
 8014088:	080141c3 	.word	0x080141c3
 801408c:	080141c3 	.word	0x080141c3
 8014090:	080141c3 	.word	0x080141c3
 8014094:	080141c3 	.word	0x080141c3
 8014098:	080141c3 	.word	0x080141c3
 801409c:	080141c3 	.word	0x080141c3
 80140a0:	080141c3 	.word	0x080141c3
 80140a4:	080141c3 	.word	0x080141c3
 80140a8:	080141c3 	.word	0x080141c3
 80140ac:	080141c3 	.word	0x080141c3
 80140b0:	080141c3 	.word	0x080141c3
 80140b4:	080141c3 	.word	0x080141c3
 80140b8:	080141c3 	.word	0x080141c3
 80140bc:	080141c3 	.word	0x080141c3
 80140c0:	080141c3 	.word	0x080141c3
 80140c4:	080141c3 	.word	0x080141c3
 80140c8:	080141c3 	.word	0x080141c3
 80140cc:	080141c3 	.word	0x080141c3
 80140d0:	080141c3 	.word	0x080141c3
 80140d4:	080141c3 	.word	0x080141c3
 80140d8:	0801413f 	.word	0x0801413f
 80140dc:	08014153 	.word	0x08014153
 80140e0:	08014173 	.word	0x08014173
 80140e4:	08014187 	.word	0x08014187
 80140e8:	080141c3 	.word	0x080141c3
 80140ec:	080141c3 	.word	0x080141c3
 80140f0:	080141c3 	.word	0x080141c3
 80140f4:	0801419b 	.word	0x0801419b
 80140f8:	080141af 	.word	0x080141af
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8014102:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014106:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 801410a:	e05e      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 801410c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014110:	2b04      	cmp	r3, #4
 8014112:	d002      	beq.n	801411a <dhcp_parse_reply+0x21a>
 8014114:	f06f 0305 	mvn.w	r3, #5
 8014118:	e161      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801411a:	2306      	movs	r3, #6
 801411c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801411e:	e054      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014120:	2304      	movs	r3, #4
 8014122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014126:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801412a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801412e:	429a      	cmp	r2, r3
 8014130:	d202      	bcs.n	8014138 <dhcp_parse_reply+0x238>
 8014132:	f06f 0305 	mvn.w	r3, #5
 8014136:	e152      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014138:	2307      	movs	r3, #7
 801413a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801413c:	e045      	b.n	80141ca <dhcp_parse_reply+0x2ca>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 801413e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014142:	2b04      	cmp	r3, #4
 8014144:	d002      	beq.n	801414c <dhcp_parse_reply+0x24c>
 8014146:	f06f 0305 	mvn.w	r3, #5
 801414a:	e148      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801414c:	2303      	movs	r3, #3
 801414e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8014150:	e03b      	b.n	80141ca <dhcp_parse_reply+0x2ca>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014152:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014156:	2b01      	cmp	r3, #1
 8014158:	d002      	beq.n	8014160 <dhcp_parse_reply+0x260>
 801415a:	f06f 0305 	mvn.w	r3, #5
 801415e:	e13e      	b.n	80143de <dhcp_parse_reply+0x4de>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_DHCP_INPUT_ERROR("overload in file/sname", options_offset == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014160:	8b7b      	ldrh	r3, [r7, #26]
 8014162:	2bf0      	cmp	r3, #240	@ 0xf0
 8014164:	d002      	beq.n	801416c <dhcp_parse_reply+0x26c>
 8014166:	f06f 0305 	mvn.w	r3, #5
 801416a:	e138      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801416c:	2300      	movs	r3, #0
 801416e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8014170:	e02b      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014172:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014176:	2b01      	cmp	r3, #1
 8014178:	d002      	beq.n	8014180 <dhcp_parse_reply+0x280>
 801417a:	f06f 0305 	mvn.w	r3, #5
 801417e:	e12e      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014180:	2301      	movs	r3, #1
 8014182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8014184:	e021      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801418a:	2b04      	cmp	r3, #4
 801418c:	d002      	beq.n	8014194 <dhcp_parse_reply+0x294>
 801418e:	f06f 0305 	mvn.w	r3, #5
 8014192:	e124      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014194:	2302      	movs	r3, #2
 8014196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8014198:	e017      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_T1):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 801419a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801419e:	2b04      	cmp	r3, #4
 80141a0:	d002      	beq.n	80141a8 <dhcp_parse_reply+0x2a8>
 80141a2:	f06f 0305 	mvn.w	r3, #5
 80141a6:	e11a      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_T1;
 80141a8:	2304      	movs	r3, #4
 80141aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80141ac:	e00d      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      case (DHCP_OPTION_T2):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80141b2:	2b04      	cmp	r3, #4
 80141b4:	d002      	beq.n	80141bc <dhcp_parse_reply+0x2bc>
 80141b6:	f06f 0305 	mvn.w	r3, #5
 80141ba:	e110      	b.n	80143de <dhcp_parse_reply+0x4de>
        decode_idx = DHCP_OPTION_IDX_T2;
 80141bc:	2305      	movs	r3, #5
 80141be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80141c0:	e003      	b.n	80141ca <dhcp_parse_reply+0x2ca>
      default:
        decode_len = 0;
 80141c2:	2300      	movs	r3, #0
 80141c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80141c8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80141ca:	7e7b      	ldrb	r3, [r7, #25]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d105      	bne.n	80141dc <dhcp_parse_reply+0x2dc>
      offset++;
 80141d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80141d4:	3301      	adds	r3, #1
 80141d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80141da:	e097      	b.n	801430c <dhcp_parse_reply+0x40c>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80141dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80141e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80141e4:	4413      	add	r3, r2
 80141e6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80141ea:	4293      	cmp	r3, r2
 80141ec:	dd04      	ble.n	80141f8 <dhcp_parse_reply+0x2f8>
        /* overflow */
        return ERR_BUF;
 80141ee:	f06f 0301 	mvn.w	r3, #1
 80141f2:	e0f4      	b.n	80143de <dhcp_parse_reply+0x4de>
 80141f4:	2000d914 	.word	0x2000d914
      }
      offset = (u16_t)(offset + len + 2);
 80141f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80141fc:	b29a      	uxth	r2, r3
 80141fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014202:	4413      	add	r3, r2
 8014204:	b29b      	uxth	r3, r3
 8014206:	3302      	adds	r3, #2
 8014208:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 801420c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014210:	2b00      	cmp	r3, #0
 8014212:	d07b      	beq.n	801430c <dhcp_parse_reply+0x40c>
        u32_t value = 0;
 8014214:	2300      	movs	r3, #0
 8014216:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801421a:	2b00      	cmp	r3, #0
 801421c:	db02      	blt.n	8014224 <dhcp_parse_reply+0x324>
 801421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014220:	2b07      	cmp	r3, #7
 8014222:	dd06      	ble.n	8014232 <dhcp_parse_reply+0x332>
 8014224:	4b70      	ldr	r3, [pc, #448]	@ (80143e8 <dhcp_parse_reply+0x4e8>)
 8014226:	f240 6279 	movw	r2, #1657	@ 0x679
 801422a:	4970      	ldr	r1, [pc, #448]	@ (80143ec <dhcp_parse_reply+0x4ec>)
 801422c:	4870      	ldr	r0, [pc, #448]	@ (80143f0 <dhcp_parse_reply+0x4f0>)
 801422e:	f7ec fd31 	bl	8000c94 <printf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014232:	4a70      	ldr	r2, [pc, #448]	@ (80143f4 <dhcp_parse_reply+0x4f4>)
 8014234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014236:	4413      	add	r3, r2
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d166      	bne.n	801430c <dhcp_parse_reply+0x40c>
          copy_len = LWIP_MIN(decode_len, 4);
 801423e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014242:	2b04      	cmp	r3, #4
 8014244:	bf28      	it	cs
 8014246:	2304      	movcs	r3, #4
 8014248:	b2db      	uxtb	r3, r3
 801424a:	82fb      	strh	r3, [r7, #22]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801424c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801424e:	8afa      	ldrh	r2, [r7, #22]
 8014250:	f107 010c 	add.w	r1, r7, #12
 8014254:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014256:	f7f8 f913 	bl	800c480 <pbuf_copy_partial>
 801425a:	4603      	mov	r3, r0
 801425c:	461a      	mov	r2, r3
 801425e:	8afb      	ldrh	r3, [r7, #22]
 8014260:	4293      	cmp	r3, r2
 8014262:	d002      	beq.n	801426a <dhcp_parse_reply+0x36a>
            return ERR_BUF;
 8014264:	f06f 0301 	mvn.w	r3, #1
 8014268:	e0b9      	b.n	80143de <dhcp_parse_reply+0x4de>
          }
          if (decode_len > 4) {
 801426a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801426e:	2b04      	cmp	r3, #4
 8014270:	d92c      	bls.n	80142cc <dhcp_parse_reply+0x3cc>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_DHCP_INPUT_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014272:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014276:	f003 0303 	and.w	r3, r3, #3
 801427a:	b2db      	uxtb	r3, r3
 801427c:	2b00      	cmp	r3, #0
 801427e:	d002      	beq.n	8014286 <dhcp_parse_reply+0x386>
 8014280:	f06f 0305 	mvn.w	r3, #5
 8014284:	e0ab      	b.n	80143de <dhcp_parse_reply+0x4de>
            dhcp_got_option(dhcp, decode_idx);
 8014286:	4a5b      	ldr	r2, [pc, #364]	@ (80143f4 <dhcp_parse_reply+0x4f4>)
 8014288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801428a:	4413      	add	r3, r2
 801428c:	2201      	movs	r2, #1
 801428e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	4618      	mov	r0, r3
 8014294:	f7f6 fa93 	bl	800a7be <lwip_htonl>
 8014298:	4602      	mov	r2, r0
 801429a:	4957      	ldr	r1, [pc, #348]	@ (80143f8 <dhcp_parse_reply+0x4f8>)
 801429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80142a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80142a6:	3b04      	subs	r3, #4
 80142a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 80142ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142ae:	3304      	adds	r3, #4
 80142b0:	82bb      	strh	r3, [r7, #20]
            if (next_val_offset < val_offset) {
 80142b2:	8aba      	ldrh	r2, [r7, #20]
 80142b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d202      	bcs.n	80142c0 <dhcp_parse_reply+0x3c0>
              /* overflow */
              return ERR_BUF;
 80142ba:	f06f 0301 	mvn.w	r3, #1
 80142be:	e08e      	b.n	80143de <dhcp_parse_reply+0x4de>
            }
            val_offset = next_val_offset;
 80142c0:	8abb      	ldrh	r3, [r7, #20]
 80142c2:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 80142c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c6:	3301      	adds	r3, #1
 80142c8:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 80142ca:	e7a5      	b.n	8014218 <dhcp_parse_reply+0x318>
          } else if (decode_len == 4) {
 80142cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80142d0:	2b04      	cmp	r3, #4
 80142d2:	d106      	bne.n	80142e2 <dhcp_parse_reply+0x3e2>
            value = lwip_ntohl(value);
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7f6 fa71 	bl	800a7be <lwip_htonl>
 80142dc:	4603      	mov	r3, r0
 80142de:	60fb      	str	r3, [r7, #12]
 80142e0:	e00a      	b.n	80142f8 <dhcp_parse_reply+0x3f8>
          } else {
            LWIP_DHCP_INPUT_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80142e2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d002      	beq.n	80142f0 <dhcp_parse_reply+0x3f0>
 80142ea:	f06f 0305 	mvn.w	r3, #5
 80142ee:	e076      	b.n	80143de <dhcp_parse_reply+0x4de>
            value = ((u8_t *)&value)[0];
 80142f0:	f107 030c 	add.w	r3, r7, #12
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 80142f8:	4a3e      	ldr	r2, [pc, #248]	@ (80143f4 <dhcp_parse_reply+0x4f4>)
 80142fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142fc:	4413      	add	r3, r2
 80142fe:	2201      	movs	r2, #1
 8014300:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	493c      	ldr	r1, [pc, #240]	@ (80143f8 <dhcp_parse_reply+0x4f8>)
 8014306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801430e:	895b      	ldrh	r3, [r3, #10]
 8014310:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014314:	429a      	cmp	r2, r3
 8014316:	d320      	bcc.n	801435a <dhcp_parse_reply+0x45a>
      offset = (u16_t)(offset - q->len);
 8014318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431a:	895b      	ldrh	r3, [r3, #10]
 801431c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014320:	1ad3      	subs	r3, r2, r3
 8014322:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8014326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014328:	895b      	ldrh	r3, [r3, #10]
 801432a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 8014330:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014334:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014336:	429a      	cmp	r2, r3
 8014338:	d20c      	bcs.n	8014354 <dhcp_parse_reply+0x454>
        q = q->next;
 801433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_DHCP_INPUT_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014342:	2b00      	cmp	r3, #0
 8014344:	d102      	bne.n	801434c <dhcp_parse_reply+0x44c>
 8014346:	f06f 0305 	mvn.w	r3, #5
 801434a:	e048      	b.n	80143de <dhcp_parse_reply+0x4de>
        options = (u8_t *)q->payload;
 801434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	643b      	str	r3, [r7, #64]	@ 0x40
 8014352:	e002      	b.n	801435a <dhcp_parse_reply+0x45a>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014354:	f06f 0301 	mvn.w	r3, #1
 8014358:	e041      	b.n	80143de <dhcp_parse_reply+0x4de>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00c      	beq.n	801437a <dhcp_parse_reply+0x47a>
 8014360:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014364:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014366:	429a      	cmp	r2, r3
 8014368:	d207      	bcs.n	801437a <dhcp_parse_reply+0x47a>
 801436a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801436e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014370:	4413      	add	r3, r2
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	2bff      	cmp	r3, #255	@ 0xff
 8014376:	f47f ae09 	bne.w	8013f8c <dhcp_parse_reply+0x8c>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801437a:	4b1e      	ldr	r3, [pc, #120]	@ (80143f4 <dhcp_parse_reply+0x4f4>)
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d018      	beq.n	80143b4 <dhcp_parse_reply+0x4b4>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014382:	4b1d      	ldr	r3, [pc, #116]	@ (80143f8 <dhcp_parse_reply+0x4f8>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014388:	4b1a      	ldr	r3, [pc, #104]	@ (80143f4 <dhcp_parse_reply+0x4f4>)
 801438a:	2200      	movs	r2, #0
 801438c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d102      	bne.n	801439a <dhcp_parse_reply+0x49a>
      parse_file_as_options = 1;
 8014394:	2301      	movs	r3, #1
 8014396:	633b      	str	r3, [r7, #48]	@ 0x30
 8014398:	e00c      	b.n	80143b4 <dhcp_parse_reply+0x4b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	2b02      	cmp	r3, #2
 801439e:	d102      	bne.n	80143a6 <dhcp_parse_reply+0x4a6>
      parse_sname_as_options = 1;
 80143a0:	2301      	movs	r3, #1
 80143a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80143a4:	e006      	b.n	80143b4 <dhcp_parse_reply+0x4b4>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d103      	bne.n	80143b4 <dhcp_parse_reply+0x4b4>
      parse_sname_as_options = 1;
 80143ac:	2301      	movs	r3, #1
 80143ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 80143b0:	2301      	movs	r3, #1
 80143b2:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80143b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d006      	beq.n	80143c8 <dhcp_parse_reply+0x4c8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 80143be:	236c      	movs	r3, #108	@ 0x6c
 80143c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80143c2:	23ec      	movs	r3, #236	@ 0xec
 80143c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80143c6:	e5b8      	b.n	8013f3a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80143c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d006      	beq.n	80143dc <dhcp_parse_reply+0x4dc>
    parse_sname_as_options = 0;
 80143ce:	2300      	movs	r3, #0
 80143d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 80143d2:	232c      	movs	r3, #44	@ 0x2c
 80143d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80143d6:	236c      	movs	r3, #108	@ 0x6c
 80143d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 80143da:	e5ae      	b.n	8013f3a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80143dc:	2300      	movs	r3, #0
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3748      	adds	r7, #72	@ 0x48
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop
 80143e8:	0801b200 	.word	0x0801b200
 80143ec:	0801b4a0 	.word	0x0801b4a0
 80143f0:	0801b25c 	.word	0x0801b25c
 80143f4:	2000d914 	.word	0x2000d914
 80143f8:	2000d91c 	.word	0x2000d91c

080143fc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b08a      	sub	sp, #40	@ 0x28
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	607a      	str	r2, [r7, #4]
 8014408:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801440a:	4b5e      	ldr	r3, [pc, #376]	@ (8014584 <dhcp_recv+0x188>)
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014414:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	2b00      	cmp	r3, #0
 8014420:	f000 809a 	beq.w	8014558 <dhcp_recv+0x15c>
 8014424:	69bb      	ldr	r3, [r7, #24]
 8014426:	791b      	ldrb	r3, [r3, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 8095 	beq.w	8014558 <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	895b      	ldrh	r3, [r3, #10]
 8014432:	2b2b      	cmp	r3, #43	@ 0x2b
 8014434:	f240 8092 	bls.w	801455c <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	2b02      	cmp	r3, #2
 801443e:	f040 808f 	bne.w	8014560 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014442:	2300      	movs	r3, #0
 8014444:	74fb      	strb	r3, [r7, #19]
 8014446:	e00e      	b.n	8014466 <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014448:	7cfb      	ldrb	r3, [r7, #19]
 801444a:	69fa      	ldr	r2, [r7, #28]
 801444c:	4413      	add	r3, r2
 801444e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8014452:	7cfb      	ldrb	r3, [r7, #19]
 8014454:	6979      	ldr	r1, [r7, #20]
 8014456:	440b      	add	r3, r1
 8014458:	7f1b      	ldrb	r3, [r3, #28]
 801445a:	429a      	cmp	r2, r3
 801445c:	f040 8082 	bne.w	8014564 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014460:	7cfb      	ldrb	r3, [r7, #19]
 8014462:	3301      	adds	r3, #1
 8014464:	74fb      	strb	r3, [r7, #19]
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801446c:	7cfa      	ldrb	r2, [r7, #19]
 801446e:	429a      	cmp	r2, r3
 8014470:	d202      	bcs.n	8014478 <dhcp_recv+0x7c>
 8014472:	7cfb      	ldrb	r3, [r7, #19]
 8014474:	2b05      	cmp	r3, #5
 8014476:	d9e7      	bls.n	8014448 <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	4618      	mov	r0, r3
 801447e:	f7f6 f99e 	bl	800a7be <lwip_htonl>
 8014482:	4602      	mov	r2, r0
 8014484:	69bb      	ldr	r3, [r7, #24]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	429a      	cmp	r2, r3
 801448a:	d16d      	bne.n	8014568 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801448c:	69b9      	ldr	r1, [r7, #24]
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7ff fd36 	bl	8013f00 <dhcp_parse_reply>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d168      	bne.n	801456c <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801449a:	4b3b      	ldr	r3, [pc, #236]	@ (8014588 <dhcp_recv+0x18c>)
 801449c:	785b      	ldrb	r3, [r3, #1]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d066      	beq.n	8014570 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80144a8:	4b38      	ldr	r3, [pc, #224]	@ (801458c <dhcp_recv+0x190>)
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80144b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80144b4:	2b05      	cmp	r3, #5
 80144b6:	d12a      	bne.n	801450e <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	795b      	ldrb	r3, [r3, #5]
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d112      	bne.n	80144e6 <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 80144c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80144c2:	69f8      	ldr	r0, [r7, #28]
 80144c4:	f7fe fe26 	bl	8013114 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80144ce:	f003 0308 	and.w	r3, r3, #8
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d003      	beq.n	80144de <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80144d6:	69f8      	ldr	r0, [r7, #28]
 80144d8:	f7fe fb9a 	bl	8012c10 <dhcp_check>
 80144dc:	e04b      	b.n	8014576 <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80144de:	69f8      	ldr	r0, [r7, #28]
 80144e0:	f7ff f862 	bl	80135a8 <dhcp_bind>
 80144e4:	e047      	b.n	8014576 <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	795b      	ldrb	r3, [r3, #5]
 80144ea:	2b03      	cmp	r3, #3
 80144ec:	d007      	beq.n	80144fe <dhcp_recv+0x102>
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	795b      	ldrb	r3, [r3, #5]
 80144f2:	2b04      	cmp	r3, #4
 80144f4:	d003      	beq.n	80144fe <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80144fa:	2b05      	cmp	r3, #5
 80144fc:	d13b      	bne.n	8014576 <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 80144fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014500:	69f8      	ldr	r0, [r7, #28]
 8014502:	f7fe fe07 	bl	8013114 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014506:	69f8      	ldr	r0, [r7, #28]
 8014508:	f7ff f84e 	bl	80135a8 <dhcp_bind>
 801450c:	e033      	b.n	8014576 <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801450e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014512:	2b06      	cmp	r3, #6
 8014514:	d113      	bne.n	801453e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014516:	69bb      	ldr	r3, [r7, #24]
 8014518:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801451a:	2b03      	cmp	r3, #3
 801451c:	d00b      	beq.n	8014536 <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	795b      	ldrb	r3, [r3, #5]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d007      	beq.n	8014536 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801452a:	2b04      	cmp	r3, #4
 801452c:	d003      	beq.n	8014536 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	795b      	ldrb	r3, [r3, #5]
 8014532:	2b05      	cmp	r3, #5
 8014534:	d103      	bne.n	801453e <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014536:	69f8      	ldr	r0, [r7, #28]
 8014538:	f7fe fb50 	bl	8012bdc <dhcp_handle_nak>
 801453c:	e01b      	b.n	8014576 <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801453e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014542:	2b02      	cmp	r3, #2
 8014544:	d116      	bne.n	8014574 <dhcp_recv+0x178>
 8014546:	69bb      	ldr	r3, [r7, #24]
 8014548:	795b      	ldrb	r3, [r3, #5]
 801454a:	2b06      	cmp	r3, #6
 801454c:	d112      	bne.n	8014574 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801454e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014550:	69f8      	ldr	r0, [r7, #28]
 8014552:	f7fe fb91 	bl	8012c78 <dhcp_handle_offer>
 8014556:	e00e      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8014558:	bf00      	nop
 801455a:	e00c      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801455c:	bf00      	nop
 801455e:	e00a      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8014560:	bf00      	nop
 8014562:	e008      	b.n	8014576 <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8014564:	bf00      	nop
 8014566:	e006      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8014568:	bf00      	nop
 801456a:	e004      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801456c:	bf00      	nop
 801456e:	e002      	b.n	8014576 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8014570:	bf00      	nop
 8014572:	e000      	b.n	8014576 <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8014574:	bf00      	nop
  pbuf_free(p);
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7f7 fd50 	bl	800c01c <pbuf_free>
}
 801457c:	bf00      	nop
 801457e:	3728      	adds	r7, #40	@ 0x28
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	200054ec 	.word	0x200054ec
 8014588:	2000d914 	.word	0x2000d914
 801458c:	2000d91c 	.word	0x2000d91c

08014590 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b088      	sub	sp, #32
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	603b      	str	r3, [r7, #0]
 801459c:	4613      	mov	r3, r2
 801459e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d104      	bne.n	80145b0 <dhcp_create_msg+0x20>
 80145a6:	485b      	ldr	r0, [pc, #364]	@ (8014714 <dhcp_create_msg+0x184>)
 80145a8:	f7ec fb74 	bl	8000c94 <printf>
 80145ac:	2300      	movs	r3, #0
 80145ae:	e0ad      	b.n	801470c <dhcp_create_msg+0x17c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d104      	bne.n	80145c0 <dhcp_create_msg+0x30>
 80145b6:	4858      	ldr	r0, [pc, #352]	@ (8014718 <dhcp_create_msg+0x188>)
 80145b8:	f7ec fb6c 	bl	8000c94 <printf>
 80145bc:	2300      	movs	r3, #0
 80145be:	e0a5      	b.n	801470c <dhcp_create_msg+0x17c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80145c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80145c4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80145c8:	2036      	movs	r0, #54	@ 0x36
 80145ca:	f7f7 fa47 	bl	800ba5c <pbuf_alloc>
 80145ce:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d101      	bne.n	80145da <dhcp_create_msg+0x4a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80145d6:	2300      	movs	r3, #0
 80145d8:	e098      	b.n	801470c <dhcp_create_msg+0x17c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	895b      	ldrh	r3, [r3, #10]
 80145de:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80145e2:	d206      	bcs.n	80145f2 <dhcp_create_msg+0x62>
 80145e4:	4b4d      	ldr	r3, [pc, #308]	@ (801471c <dhcp_create_msg+0x18c>)
 80145e6:	f240 7272 	movw	r2, #1906	@ 0x772
 80145ea:	494d      	ldr	r1, [pc, #308]	@ (8014720 <dhcp_create_msg+0x190>)
 80145ec:	484d      	ldr	r0, [pc, #308]	@ (8014724 <dhcp_create_msg+0x194>)
 80145ee:	f7ec fb51 	bl	8000c94 <printf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80145f2:	79fb      	ldrb	r3, [r7, #7]
 80145f4:	2b03      	cmp	r3, #3
 80145f6:	d103      	bne.n	8014600 <dhcp_create_msg+0x70>
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	795b      	ldrb	r3, [r3, #5]
 80145fc:	2b03      	cmp	r3, #3
 80145fe:	d10d      	bne.n	801461c <dhcp_create_msg+0x8c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	799b      	ldrb	r3, [r3, #6]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d105      	bne.n	8014614 <dhcp_create_msg+0x84>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014608:	f002 fe4e 	bl	80172a8 <rand>
 801460c:	4603      	mov	r3, r0
 801460e:	461a      	mov	r2, r3
 8014610:	4b45      	ldr	r3, [pc, #276]	@ (8014728 <dhcp_create_msg+0x198>)
 8014612:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014614:	4b44      	ldr	r3, [pc, #272]	@ (8014728 <dhcp_create_msg+0x198>)
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014622:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8014626:	2100      	movs	r1, #0
 8014628:	6978      	ldr	r0, [r7, #20]
 801462a:	f002 ff90 	bl	801754e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	2201      	movs	r2, #1
 8014632:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	2201      	movs	r2, #1
 8014638:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	4618      	mov	r0, r3
 801464a:	f7f6 f8b8 	bl	800a7be <lwip_htonl>
 801464e:	4602      	mov	r2, r0
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014654:	79fb      	ldrb	r3, [r7, #7]
 8014656:	2b08      	cmp	r3, #8
 8014658:	d010      	beq.n	801467c <dhcp_create_msg+0xec>
 801465a:	79fb      	ldrb	r3, [r7, #7]
 801465c:	2b04      	cmp	r3, #4
 801465e:	d00d      	beq.n	801467c <dhcp_create_msg+0xec>
 8014660:	79fb      	ldrb	r3, [r7, #7]
 8014662:	2b07      	cmp	r3, #7
 8014664:	d00a      	beq.n	801467c <dhcp_create_msg+0xec>
 8014666:	79fb      	ldrb	r3, [r7, #7]
 8014668:	2b03      	cmp	r3, #3
 801466a:	d10c      	bne.n	8014686 <dhcp_create_msg+0xf6>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014670:	2b05      	cmp	r3, #5
 8014672:	d003      	beq.n	801467c <dhcp_create_msg+0xec>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	795b      	ldrb	r3, [r3, #5]
 8014678:	2b04      	cmp	r3, #4
 801467a:	d104      	bne.n	8014686 <dhcp_create_msg+0xf6>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	3304      	adds	r3, #4
 8014680:	681a      	ldr	r2, [r3, #0]
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014686:	2300      	movs	r3, #0
 8014688:	83fb      	strh	r3, [r7, #30]
 801468a:	e00c      	b.n	80146a6 <dhcp_create_msg+0x116>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801468c:	8bfa      	ldrh	r2, [r7, #30]
 801468e:	8bfb      	ldrh	r3, [r7, #30]
 8014690:	68f9      	ldr	r1, [r7, #12]
 8014692:	440a      	add	r2, r1
 8014694:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8014698:	697a      	ldr	r2, [r7, #20]
 801469a:	4413      	add	r3, r2
 801469c:	460a      	mov	r2, r1
 801469e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80146a0:	8bfb      	ldrh	r3, [r7, #30]
 80146a2:	3301      	adds	r3, #1
 80146a4:	83fb      	strh	r3, [r7, #30]
 80146a6:	8bfb      	ldrh	r3, [r7, #30]
 80146a8:	2b05      	cmp	r3, #5
 80146aa:	d9ef      	bls.n	801468c <dhcp_create_msg+0xfc>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	2200      	movs	r2, #0
 80146b0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80146b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80146b8:	2200      	movs	r2, #0
 80146ba:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80146be:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80146c2:	2200      	movs	r2, #0
 80146c4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80146c8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80146cc:	2200      	movs	r2, #0
 80146ce:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80146d2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146dc:	2301      	movs	r3, #1
 80146de:	2235      	movs	r2, #53	@ 0x35
 80146e0:	2000      	movs	r0, #0
 80146e2:	f7ff fae1 	bl	8013ca8 <dhcp_option>
 80146e6:	4603      	mov	r3, r0
 80146e8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146f0:	79fa      	ldrb	r2, [r7, #7]
 80146f2:	8a7b      	ldrh	r3, [r7, #18]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7ff fb0b 	bl	8013d10 <dhcp_option_byte>
 80146fa:	4603      	mov	r3, r0
 80146fc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d002      	beq.n	801470a <dhcp_create_msg+0x17a>
    *options_out_len = options_out_len_loc;
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	8a7a      	ldrh	r2, [r7, #18]
 8014708:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801470a:	69bb      	ldr	r3, [r7, #24]
}
 801470c:	4618      	mov	r0, r3
 801470e:	3720      	adds	r7, #32
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}
 8014714:	0801b4b4 	.word	0x0801b4b4
 8014718:	0801b4d4 	.word	0x0801b4d4
 801471c:	0801b200 	.word	0x0801b200
 8014720:	0801b4f4 	.word	0x0801b4f4
 8014724:	0801b25c 	.word	0x0801b25c
 8014728:	20004af8 	.word	0x20004af8

0801472c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b084      	sub	sp, #16
 8014730:	af00      	add	r7, sp, #0
 8014732:	4603      	mov	r3, r0
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	607a      	str	r2, [r7, #4]
 8014738:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801473a:	89fb      	ldrh	r3, [r7, #14]
 801473c:	1c5a      	adds	r2, r3, #1
 801473e:	81fa      	strh	r2, [r7, #14]
 8014740:	461a      	mov	r2, r3
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	4413      	add	r3, r2
 8014746:	22ff      	movs	r2, #255	@ 0xff
 8014748:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801474a:	e007      	b.n	801475c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801474c:	89fb      	ldrh	r3, [r7, #14]
 801474e:	1c5a      	adds	r2, r3, #1
 8014750:	81fa      	strh	r2, [r7, #14]
 8014752:	461a      	mov	r2, r3
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	4413      	add	r3, r2
 8014758:	2200      	movs	r2, #0
 801475a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801475c:	89fb      	ldrh	r3, [r7, #14]
 801475e:	2b43      	cmp	r3, #67	@ 0x43
 8014760:	d904      	bls.n	801476c <dhcp_option_trailer+0x40>
 8014762:	89fb      	ldrh	r3, [r7, #14]
 8014764:	f003 0303 	and.w	r3, r3, #3
 8014768:	2b00      	cmp	r3, #0
 801476a:	d002      	beq.n	8014772 <dhcp_option_trailer+0x46>
 801476c:	89fb      	ldrh	r3, [r7, #14]
 801476e:	2b43      	cmp	r3, #67	@ 0x43
 8014770:	d9ec      	bls.n	801474c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014772:	89fb      	ldrh	r3, [r7, #14]
 8014774:	33f0      	adds	r3, #240	@ 0xf0
 8014776:	b29b      	uxth	r3, r3
 8014778:	4619      	mov	r1, r3
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7f7 facc 	bl	800bd18 <pbuf_realloc>
}
 8014780:	bf00      	nop
 8014782:	3710      	adds	r7, #16
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014788:	b480      	push	{r7}
 801478a:	b085      	sub	sp, #20
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d017      	beq.n	80147c6 <dhcp_supplied_address+0x3e>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801479a:	2b00      	cmp	r3, #0
 801479c:	d013      	beq.n	80147c6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147a2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	795b      	ldrb	r3, [r3, #5]
 80147a8:	2b0a      	cmp	r3, #10
 80147aa:	d007      	beq.n	80147bc <dhcp_supplied_address+0x34>
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	795b      	ldrb	r3, [r3, #5]
 80147b0:	2b05      	cmp	r3, #5
 80147b2:	d003      	beq.n	80147bc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80147b8:	2b04      	cmp	r3, #4
 80147ba:	d101      	bne.n	80147c0 <dhcp_supplied_address+0x38>
 80147bc:	2301      	movs	r3, #1
 80147be:	e000      	b.n	80147c2 <dhcp_supplied_address+0x3a>
 80147c0:	2300      	movs	r3, #0
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	e000      	b.n	80147c8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80147c6:	2300      	movs	r3, #0
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3714      	adds	r7, #20
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80147dc:	492b      	ldr	r1, [pc, #172]	@ (801488c <etharp_free_entry+0xb8>)
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	4613      	mov	r3, r2
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	440b      	add	r3, r1
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d013      	beq.n	8014818 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80147f0:	4926      	ldr	r1, [pc, #152]	@ (801488c <etharp_free_entry+0xb8>)
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4618      	mov	r0, r3
 8014802:	f7f7 fc0b 	bl	800c01c <pbuf_free>
    arp_table[i].q = NULL;
 8014806:	4921      	ldr	r1, [pc, #132]	@ (801488c <etharp_free_entry+0xb8>)
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	4613      	mov	r3, r2
 801480c:	005b      	lsls	r3, r3, #1
 801480e:	4413      	add	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	440b      	add	r3, r1
 8014814:	2200      	movs	r2, #0
 8014816:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014818:	491c      	ldr	r1, [pc, #112]	@ (801488c <etharp_free_entry+0xb8>)
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	4613      	mov	r3, r2
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	4413      	add	r3, r2
 8014822:	00db      	lsls	r3, r3, #3
 8014824:	440b      	add	r3, r1
 8014826:	3314      	adds	r3, #20
 8014828:	2200      	movs	r2, #0
 801482a:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801482c:	4917      	ldr	r1, [pc, #92]	@ (801488c <etharp_free_entry+0xb8>)
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4613      	mov	r3, r2
 8014832:	005b      	lsls	r3, r3, #1
 8014834:	4413      	add	r3, r2
 8014836:	00db      	lsls	r3, r3, #3
 8014838:	440b      	add	r3, r1
 801483a:	3312      	adds	r3, #18
 801483c:	2200      	movs	r2, #0
 801483e:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8014840:	4912      	ldr	r1, [pc, #72]	@ (801488c <etharp_free_entry+0xb8>)
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	4613      	mov	r3, r2
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	4413      	add	r3, r2
 801484a:	00db      	lsls	r3, r3, #3
 801484c:	440b      	add	r3, r1
 801484e:	3308      	adds	r3, #8
 8014850:	2200      	movs	r2, #0
 8014852:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8014854:	490d      	ldr	r1, [pc, #52]	@ (801488c <etharp_free_entry+0xb8>)
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	4613      	mov	r3, r2
 801485a:	005b      	lsls	r3, r3, #1
 801485c:	4413      	add	r3, r2
 801485e:	00db      	lsls	r3, r3, #3
 8014860:	440b      	add	r3, r1
 8014862:	3304      	adds	r3, #4
 8014864:	2200      	movs	r2, #0
 8014866:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8014868:	4908      	ldr	r1, [pc, #32]	@ (801488c <etharp_free_entry+0xb8>)
 801486a:	687a      	ldr	r2, [r7, #4]
 801486c:	4613      	mov	r3, r2
 801486e:	005b      	lsls	r3, r3, #1
 8014870:	4413      	add	r3, r2
 8014872:	00db      	lsls	r3, r3, #3
 8014874:	440b      	add	r3, r1
 8014876:	3308      	adds	r3, #8
 8014878:	4a05      	ldr	r2, [pc, #20]	@ (8014890 <etharp_free_entry+0xbc>)
 801487a:	3304      	adds	r3, #4
 801487c:	6810      	ldr	r0, [r2, #0]
 801487e:	6018      	str	r0, [r3, #0]
 8014880:	8892      	ldrh	r2, [r2, #4]
 8014882:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	20004afc 	.word	0x20004afc
 8014890:	0801bdac 	.word	0x0801bdac

08014894 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801489a:	2300      	movs	r3, #0
 801489c:	607b      	str	r3, [r7, #4]
 801489e:	e096      	b.n	80149ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80148a0:	494f      	ldr	r1, [pc, #316]	@ (80149e0 <etharp_tmr+0x14c>)
 80148a2:	687a      	ldr	r2, [r7, #4]
 80148a4:	4613      	mov	r3, r2
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	4413      	add	r3, r2
 80148aa:	00db      	lsls	r3, r3, #3
 80148ac:	440b      	add	r3, r1
 80148ae:	3314      	adds	r3, #20
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80148b4:	78fb      	ldrb	r3, [r7, #3]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f000 8086 	beq.w	80149c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80148bc:	4948      	ldr	r1, [pc, #288]	@ (80149e0 <etharp_tmr+0x14c>)
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	4613      	mov	r3, r2
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	4413      	add	r3, r2
 80148c6:	00db      	lsls	r3, r3, #3
 80148c8:	440b      	add	r3, r1
 80148ca:	3312      	adds	r3, #18
 80148cc:	881b      	ldrh	r3, [r3, #0]
 80148ce:	3301      	adds	r3, #1
 80148d0:	b298      	uxth	r0, r3
 80148d2:	4943      	ldr	r1, [pc, #268]	@ (80149e0 <etharp_tmr+0x14c>)
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	4613      	mov	r3, r2
 80148d8:	005b      	lsls	r3, r3, #1
 80148da:	4413      	add	r3, r2
 80148dc:	00db      	lsls	r3, r3, #3
 80148de:	440b      	add	r3, r1
 80148e0:	3312      	adds	r3, #18
 80148e2:	4602      	mov	r2, r0
 80148e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80148e6:	493e      	ldr	r1, [pc, #248]	@ (80149e0 <etharp_tmr+0x14c>)
 80148e8:	687a      	ldr	r2, [r7, #4]
 80148ea:	4613      	mov	r3, r2
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	4413      	add	r3, r2
 80148f0:	00db      	lsls	r3, r3, #3
 80148f2:	440b      	add	r3, r1
 80148f4:	3312      	adds	r3, #18
 80148f6:	881b      	ldrh	r3, [r3, #0]
 80148f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80148fc:	d215      	bcs.n	801492a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80148fe:	4938      	ldr	r1, [pc, #224]	@ (80149e0 <etharp_tmr+0x14c>)
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	4613      	mov	r3, r2
 8014904:	005b      	lsls	r3, r3, #1
 8014906:	4413      	add	r3, r2
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	440b      	add	r3, r1
 801490c:	3314      	adds	r3, #20
 801490e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014910:	2b01      	cmp	r3, #1
 8014912:	d10e      	bne.n	8014932 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014914:	4932      	ldr	r1, [pc, #200]	@ (80149e0 <etharp_tmr+0x14c>)
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	4613      	mov	r3, r2
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	4413      	add	r3, r2
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	440b      	add	r3, r1
 8014922:	3312      	adds	r3, #18
 8014924:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014926:	2b04      	cmp	r3, #4
 8014928:	d903      	bls.n	8014932 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f7ff ff52 	bl	80147d4 <etharp_free_entry>
 8014930:	e04a      	b.n	80149c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014932:	492b      	ldr	r1, [pc, #172]	@ (80149e0 <etharp_tmr+0x14c>)
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	440b      	add	r3, r1
 8014940:	3314      	adds	r3, #20
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	2b03      	cmp	r3, #3
 8014946:	d10a      	bne.n	801495e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014948:	4925      	ldr	r1, [pc, #148]	@ (80149e0 <etharp_tmr+0x14c>)
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	4613      	mov	r3, r2
 801494e:	005b      	lsls	r3, r3, #1
 8014950:	4413      	add	r3, r2
 8014952:	00db      	lsls	r3, r3, #3
 8014954:	440b      	add	r3, r1
 8014956:	3314      	adds	r3, #20
 8014958:	2204      	movs	r2, #4
 801495a:	701a      	strb	r2, [r3, #0]
 801495c:	e034      	b.n	80149c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801495e:	4920      	ldr	r1, [pc, #128]	@ (80149e0 <etharp_tmr+0x14c>)
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	4613      	mov	r3, r2
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	4413      	add	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	440b      	add	r3, r1
 801496c:	3314      	adds	r3, #20
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	2b04      	cmp	r3, #4
 8014972:	d10a      	bne.n	801498a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014974:	491a      	ldr	r1, [pc, #104]	@ (80149e0 <etharp_tmr+0x14c>)
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	4613      	mov	r3, r2
 801497a:	005b      	lsls	r3, r3, #1
 801497c:	4413      	add	r3, r2
 801497e:	00db      	lsls	r3, r3, #3
 8014980:	440b      	add	r3, r1
 8014982:	3314      	adds	r3, #20
 8014984:	2202      	movs	r2, #2
 8014986:	701a      	strb	r2, [r3, #0]
 8014988:	e01e      	b.n	80149c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801498a:	4915      	ldr	r1, [pc, #84]	@ (80149e0 <etharp_tmr+0x14c>)
 801498c:	687a      	ldr	r2, [r7, #4]
 801498e:	4613      	mov	r3, r2
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	4413      	add	r3, r2
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	440b      	add	r3, r1
 8014998:	3314      	adds	r3, #20
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	2b01      	cmp	r3, #1
 801499e:	d113      	bne.n	80149c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80149a0:	490f      	ldr	r1, [pc, #60]	@ (80149e0 <etharp_tmr+0x14c>)
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	440b      	add	r3, r1
 80149ae:	3308      	adds	r3, #8
 80149b0:	6818      	ldr	r0, [r3, #0]
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	4613      	mov	r3, r2
 80149b6:	005b      	lsls	r3, r3, #1
 80149b8:	4413      	add	r3, r2
 80149ba:	00db      	lsls	r3, r3, #3
 80149bc:	4a08      	ldr	r2, [pc, #32]	@ (80149e0 <etharp_tmr+0x14c>)
 80149be:	4413      	add	r3, r2
 80149c0:	3304      	adds	r3, #4
 80149c2:	4619      	mov	r1, r3
 80149c4:	f000 fe56 	bl	8015674 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	3301      	adds	r3, #1
 80149cc:	607b      	str	r3, [r7, #4]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b09      	cmp	r3, #9
 80149d2:	f77f af65 	ble.w	80148a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80149d6:	bf00      	nop
 80149d8:	bf00      	nop
 80149da:	3708      	adds	r7, #8
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	20004afc 	.word	0x20004afc

080149e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08a      	sub	sp, #40	@ 0x28
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	460b      	mov	r3, r1
 80149ee:	607a      	str	r2, [r7, #4]
 80149f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80149f2:	230a      	movs	r3, #10
 80149f4:	843b      	strh	r3, [r7, #32]
 80149f6:	230a      	movs	r3, #10
 80149f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80149fa:	230a      	movs	r3, #10
 80149fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014a02:	230a      	movs	r3, #10
 8014a04:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014a06:	2300      	movs	r3, #0
 8014a08:	83bb      	strh	r3, [r7, #28]
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	837b      	strh	r3, [r7, #26]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a12:	2300      	movs	r3, #0
 8014a14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014a16:	e0ae      	b.n	8014b76 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014a18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014a1c:	49a6      	ldr	r1, [pc, #664]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	440b      	add	r3, r1
 8014a28:	3314      	adds	r3, #20
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014a2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014a32:	2b0a      	cmp	r3, #10
 8014a34:	d105      	bne.n	8014a42 <etharp_find_entry+0x5e>
 8014a36:	7dfb      	ldrb	r3, [r7, #23]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d102      	bne.n	8014a42 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014a3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014a3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8014a40:	e095      	b.n	8014b6e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014a42:	7dfb      	ldrb	r3, [r7, #23]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	f000 8092 	beq.w	8014b6e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d009      	beq.n	8014a64 <etharp_find_entry+0x80>
 8014a50:	7dfb      	ldrb	r3, [r7, #23]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d806      	bhi.n	8014a64 <etharp_find_entry+0x80>
 8014a56:	4b99      	ldr	r3, [pc, #612]	@ (8014cbc <etharp_find_entry+0x2d8>)
 8014a58:	f240 1223 	movw	r2, #291	@ 0x123
 8014a5c:	4998      	ldr	r1, [pc, #608]	@ (8014cc0 <etharp_find_entry+0x2dc>)
 8014a5e:	4899      	ldr	r0, [pc, #612]	@ (8014cc4 <etharp_find_entry+0x2e0>)
 8014a60:	f7ec f918 	bl	8000c94 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d020      	beq.n	8014aac <etharp_find_entry+0xc8>
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	6819      	ldr	r1, [r3, #0]
 8014a6e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014a72:	4891      	ldr	r0, [pc, #580]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014a74:	4613      	mov	r3, r2
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	4413      	add	r3, r2
 8014a7a:	00db      	lsls	r3, r3, #3
 8014a7c:	4403      	add	r3, r0
 8014a7e:	3304      	adds	r3, #4
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	4299      	cmp	r1, r3
 8014a84:	d112      	bne.n	8014aac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d00c      	beq.n	8014aa6 <etharp_find_entry+0xc2>
 8014a8c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014a90:	4989      	ldr	r1, [pc, #548]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	440b      	add	r3, r1
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d102      	bne.n	8014aac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014aa6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014aaa:	e100      	b.n	8014cae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014aac:	7dfb      	ldrb	r3, [r7, #23]
 8014aae:	2b01      	cmp	r3, #1
 8014ab0:	d140      	bne.n	8014b34 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014ab2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014ab6:	4980      	ldr	r1, [pc, #512]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014ab8:	4613      	mov	r3, r2
 8014aba:	005b      	lsls	r3, r3, #1
 8014abc:	4413      	add	r3, r2
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	440b      	add	r3, r1
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d01a      	beq.n	8014afe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014ac8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014acc:	497a      	ldr	r1, [pc, #488]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014ace:	4613      	mov	r3, r2
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	4413      	add	r3, r2
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	440b      	add	r3, r1
 8014ad8:	3312      	adds	r3, #18
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	8bba      	ldrh	r2, [r7, #28]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d845      	bhi.n	8014b6e <etharp_find_entry+0x18a>
            old_queue = i;
 8014ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014ae4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014ae6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014aea:	4973      	ldr	r1, [pc, #460]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014aec:	4613      	mov	r3, r2
 8014aee:	005b      	lsls	r3, r3, #1
 8014af0:	4413      	add	r3, r2
 8014af2:	00db      	lsls	r3, r3, #3
 8014af4:	440b      	add	r3, r1
 8014af6:	3312      	adds	r3, #18
 8014af8:	881b      	ldrh	r3, [r3, #0]
 8014afa:	83bb      	strh	r3, [r7, #28]
 8014afc:	e037      	b.n	8014b6e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014afe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014b02:	496d      	ldr	r1, [pc, #436]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014b04:	4613      	mov	r3, r2
 8014b06:	005b      	lsls	r3, r3, #1
 8014b08:	4413      	add	r3, r2
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	440b      	add	r3, r1
 8014b0e:	3312      	adds	r3, #18
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	8b7a      	ldrh	r2, [r7, #26]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d82a      	bhi.n	8014b6e <etharp_find_entry+0x18a>
            old_pending = i;
 8014b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b1a:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8014b1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014b20:	4965      	ldr	r1, [pc, #404]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014b22:	4613      	mov	r3, r2
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	440b      	add	r3, r1
 8014b2c:	3312      	adds	r3, #18
 8014b2e:	881b      	ldrh	r3, [r3, #0]
 8014b30:	837b      	strh	r3, [r7, #26]
 8014b32:	e01c      	b.n	8014b6e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014b34:	7dfb      	ldrb	r3, [r7, #23]
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d919      	bls.n	8014b6e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014b3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014b3e:	495e      	ldr	r1, [pc, #376]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014b40:	4613      	mov	r3, r2
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	4413      	add	r3, r2
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	440b      	add	r3, r1
 8014b4a:	3312      	adds	r3, #18
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	8b3a      	ldrh	r2, [r7, #24]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d80c      	bhi.n	8014b6e <etharp_find_entry+0x18a>
            old_stable = i;
 8014b54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b56:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8014b58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014b5c:	4956      	ldr	r1, [pc, #344]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3312      	adds	r3, #18
 8014b6a:	881b      	ldrh	r3, [r3, #0]
 8014b6c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b70:	3301      	adds	r3, #1
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014b76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014b7a:	2b09      	cmp	r3, #9
 8014b7c:	f77f af4c 	ble.w	8014a18 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014b80:	7afb      	ldrb	r3, [r7, #11]
 8014b82:	f003 0302 	and.w	r3, r3, #2
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d108      	bne.n	8014b9c <etharp_find_entry+0x1b8>
 8014b8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014b8e:	2b0a      	cmp	r3, #10
 8014b90:	d107      	bne.n	8014ba2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014b92:	7afb      	ldrb	r3, [r7, #11]
 8014b94:	f003 0301 	and.w	r3, r3, #1
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d102      	bne.n	8014ba2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba0:	e085      	b.n	8014cae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014ba2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014ba6:	2b09      	cmp	r3, #9
 8014ba8:	dc02      	bgt.n	8014bb0 <etharp_find_entry+0x1cc>
    i = empty;
 8014baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014bae:	e039      	b.n	8014c24 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014bb0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014bb4:	2b09      	cmp	r3, #9
 8014bb6:	dc14      	bgt.n	8014be2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014bb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014bba:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014bbc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014bc0:	493d      	ldr	r1, [pc, #244]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014bc2:	4613      	mov	r3, r2
 8014bc4:	005b      	lsls	r3, r3, #1
 8014bc6:	4413      	add	r3, r2
 8014bc8:	00db      	lsls	r3, r3, #3
 8014bca:	440b      	add	r3, r1
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d018      	beq.n	8014c04 <etharp_find_entry+0x220>
 8014bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8014cbc <etharp_find_entry+0x2d8>)
 8014bd4:	f240 126d 	movw	r2, #365	@ 0x16d
 8014bd8:	493b      	ldr	r1, [pc, #236]	@ (8014cc8 <etharp_find_entry+0x2e4>)
 8014bda:	483a      	ldr	r0, [pc, #232]	@ (8014cc4 <etharp_find_entry+0x2e0>)
 8014bdc:	f7ec f85a 	bl	8000c94 <printf>
 8014be0:	e010      	b.n	8014c04 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014be6:	2b09      	cmp	r3, #9
 8014be8:	dc02      	bgt.n	8014bf0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014bea:	8c3b      	ldrh	r3, [r7, #32]
 8014bec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014bee:	e009      	b.n	8014c04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014bf0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014bf4:	2b09      	cmp	r3, #9
 8014bf6:	dc02      	bgt.n	8014bfe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014bf8:	8bfb      	ldrh	r3, [r7, #30]
 8014bfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014bfc:	e002      	b.n	8014c04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014c02:	e054      	b.n	8014cae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014c08:	2b09      	cmp	r3, #9
 8014c0a:	dd06      	ble.n	8014c1a <etharp_find_entry+0x236>
 8014c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8014cbc <etharp_find_entry+0x2d8>)
 8014c0e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014c12:	492e      	ldr	r1, [pc, #184]	@ (8014ccc <etharp_find_entry+0x2e8>)
 8014c14:	482b      	ldr	r0, [pc, #172]	@ (8014cc4 <etharp_find_entry+0x2e0>)
 8014c16:	f7ec f83d 	bl	8000c94 <printf>
    etharp_free_entry(i);
 8014c1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7ff fdd8 	bl	80147d4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014c24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014c28:	2b09      	cmp	r3, #9
 8014c2a:	dd06      	ble.n	8014c3a <etharp_find_entry+0x256>
 8014c2c:	4b23      	ldr	r3, [pc, #140]	@ (8014cbc <etharp_find_entry+0x2d8>)
 8014c2e:	f240 1283 	movw	r2, #387	@ 0x183
 8014c32:	4926      	ldr	r1, [pc, #152]	@ (8014ccc <etharp_find_entry+0x2e8>)
 8014c34:	4823      	ldr	r0, [pc, #140]	@ (8014cc4 <etharp_find_entry+0x2e0>)
 8014c36:	f7ec f82d 	bl	8000c94 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014c3a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014c3e:	491e      	ldr	r1, [pc, #120]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014c40:	4613      	mov	r3, r2
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	4413      	add	r3, r2
 8014c46:	00db      	lsls	r3, r3, #3
 8014c48:	440b      	add	r3, r1
 8014c4a:	3314      	adds	r3, #20
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d006      	beq.n	8014c60 <etharp_find_entry+0x27c>
 8014c52:	4b1a      	ldr	r3, [pc, #104]	@ (8014cbc <etharp_find_entry+0x2d8>)
 8014c54:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014c58:	491d      	ldr	r1, [pc, #116]	@ (8014cd0 <etharp_find_entry+0x2ec>)
 8014c5a:	481a      	ldr	r0, [pc, #104]	@ (8014cc4 <etharp_find_entry+0x2e0>)
 8014c5c:	f7ec f81a 	bl	8000c94 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00b      	beq.n	8014c7e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014c66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	6819      	ldr	r1, [r3, #0]
 8014c6e:	4812      	ldr	r0, [pc, #72]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014c70:	4613      	mov	r3, r2
 8014c72:	005b      	lsls	r3, r3, #1
 8014c74:	4413      	add	r3, r2
 8014c76:	00db      	lsls	r3, r3, #3
 8014c78:	4403      	add	r3, r0
 8014c7a:	3304      	adds	r3, #4
 8014c7c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014c7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014c82:	490d      	ldr	r1, [pc, #52]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014c84:	4613      	mov	r3, r2
 8014c86:	005b      	lsls	r3, r3, #1
 8014c88:	4413      	add	r3, r2
 8014c8a:	00db      	lsls	r3, r3, #3
 8014c8c:	440b      	add	r3, r1
 8014c8e:	3312      	adds	r3, #18
 8014c90:	2200      	movs	r2, #0
 8014c92:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014c94:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8014c98:	4907      	ldr	r1, [pc, #28]	@ (8014cb8 <etharp_find_entry+0x2d4>)
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	440b      	add	r3, r1
 8014ca4:	3308      	adds	r3, #8
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014caa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	3728      	adds	r7, #40	@ 0x28
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20004afc 	.word	0x20004afc
 8014cbc:	0801b534 	.word	0x0801b534
 8014cc0:	0801b568 	.word	0x0801b568
 8014cc4:	0801b5a8 	.word	0x0801b5a8
 8014cc8:	0801b5d0 	.word	0x0801b5d0
 8014ccc:	0801b5e8 	.word	0x0801b5e8
 8014cd0:	0801b5fc 	.word	0x0801b5fc

08014cd4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b088      	sub	sp, #32
 8014cd8:	af02      	add	r7, sp, #8
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	607a      	str	r2, [r7, #4]
 8014ce0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014ce8:	2b06      	cmp	r3, #6
 8014cea:	d006      	beq.n	8014cfa <etharp_update_arp_entry+0x26>
 8014cec:	4b48      	ldr	r3, [pc, #288]	@ (8014e10 <etharp_update_arp_entry+0x13c>)
 8014cee:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014cf2:	4948      	ldr	r1, [pc, #288]	@ (8014e14 <etharp_update_arp_entry+0x140>)
 8014cf4:	4848      	ldr	r0, [pc, #288]	@ (8014e18 <etharp_update_arp_entry+0x144>)
 8014cf6:	f7eb ffcd 	bl	8000c94 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d012      	beq.n	8014d26 <etharp_update_arp_entry+0x52>
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00e      	beq.n	8014d26 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68f9      	ldr	r1, [r7, #12]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f001 f9ba 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8014d14:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d105      	bne.n	8014d26 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d22:	2be0      	cmp	r3, #224	@ 0xe0
 8014d24:	d102      	bne.n	8014d2c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d26:	f06f 030f 	mvn.w	r3, #15
 8014d2a:	e06c      	b.n	8014e06 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014d2c:	78fb      	ldrb	r3, [r7, #3]
 8014d2e:	68fa      	ldr	r2, [r7, #12]
 8014d30:	4619      	mov	r1, r3
 8014d32:	68b8      	ldr	r0, [r7, #8]
 8014d34:	f7ff fe56 	bl	80149e4 <etharp_find_entry>
 8014d38:	4603      	mov	r3, r0
 8014d3a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014d3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da02      	bge.n	8014d4a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014d44:	8afb      	ldrh	r3, [r7, #22]
 8014d46:	b25b      	sxtb	r3, r3
 8014d48:	e05d      	b.n	8014e06 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014d4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d4e:	4933      	ldr	r1, [pc, #204]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014d50:	4613      	mov	r3, r2
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	4413      	add	r3, r2
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	440b      	add	r3, r1
 8014d5a:	3314      	adds	r3, #20
 8014d5c:	2202      	movs	r2, #2
 8014d5e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014d60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d64:	492d      	ldr	r1, [pc, #180]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014d66:	4613      	mov	r3, r2
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	4413      	add	r3, r2
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	440b      	add	r3, r1
 8014d70:	3308      	adds	r3, #8
 8014d72:	68fa      	ldr	r2, [r7, #12]
 8014d74:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014d76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	005b      	lsls	r3, r3, #1
 8014d7e:	4413      	add	r3, r2
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	3308      	adds	r3, #8
 8014d84:	4a25      	ldr	r2, [pc, #148]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014d86:	4413      	add	r3, r2
 8014d88:	3304      	adds	r3, #4
 8014d8a:	2206      	movs	r2, #6
 8014d8c:	6879      	ldr	r1, [r7, #4]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f002 fcaf 	bl	80176f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014d94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014d98:	4920      	ldr	r1, [pc, #128]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	005b      	lsls	r3, r3, #1
 8014d9e:	4413      	add	r3, r2
 8014da0:	00db      	lsls	r3, r3, #3
 8014da2:	440b      	add	r3, r1
 8014da4:	3312      	adds	r3, #18
 8014da6:	2200      	movs	r2, #0
 8014da8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014daa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dae:	491b      	ldr	r1, [pc, #108]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014db0:	4613      	mov	r3, r2
 8014db2:	005b      	lsls	r3, r3, #1
 8014db4:	4413      	add	r3, r2
 8014db6:	00db      	lsls	r3, r3, #3
 8014db8:	440b      	add	r3, r1
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d021      	beq.n	8014e04 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014dc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dc4:	4915      	ldr	r1, [pc, #84]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014dc6:	4613      	mov	r3, r2
 8014dc8:	005b      	lsls	r3, r3, #1
 8014dca:	4413      	add	r3, r2
 8014dcc:	00db      	lsls	r3, r3, #3
 8014dce:	440b      	add	r3, r1
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014dd8:	4910      	ldr	r1, [pc, #64]	@ (8014e1c <etharp_update_arp_entry+0x148>)
 8014dda:	4613      	mov	r3, r2
 8014ddc:	005b      	lsls	r3, r3, #1
 8014dde:	4413      	add	r3, r2
 8014de0:	00db      	lsls	r3, r3, #3
 8014de2:	440b      	add	r3, r1
 8014de4:	2200      	movs	r2, #0
 8014de6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8014dee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6939      	ldr	r1, [r7, #16]
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f002 f85f 	bl	8016ebc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014dfe:	6938      	ldr	r0, [r7, #16]
 8014e00:	f7f7 f90c 	bl	800c01c <pbuf_free>
  }
  return ERR_OK;
 8014e04:	2300      	movs	r3, #0
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	3718      	adds	r7, #24
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	0801b534 	.word	0x0801b534
 8014e14:	0801b628 	.word	0x0801b628
 8014e18:	0801b5a8 	.word	0x0801b5a8
 8014e1c:	20004afc 	.word	0x20004afc

08014e20 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014e20:	b5b0      	push	{r4, r5, r7, lr}
 8014e22:	b08a      	sub	sp, #40	@ 0x28
 8014e24:	af04      	add	r7, sp, #16
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d103      	bne.n	8014e38 <etharp_input+0x18>
 8014e30:	483d      	ldr	r0, [pc, #244]	@ (8014f28 <etharp_input+0x108>)
 8014e32:	f7eb ff2f 	bl	8000c94 <printf>
 8014e36:	e074      	b.n	8014f22 <etharp_input+0x102>

  hdr = (struct etharp_hdr *)p->payload;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	685b      	ldr	r3, [r3, #4]
 8014e3c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	881b      	ldrh	r3, [r3, #0]
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e48:	d10c      	bne.n	8014e64 <etharp_input+0x44>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014e4e:	2b06      	cmp	r3, #6
 8014e50:	d108      	bne.n	8014e64 <etharp_input+0x44>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014e56:	2b04      	cmp	r3, #4
 8014e58:	d104      	bne.n	8014e64 <etharp_input+0x44>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	885b      	ldrh	r3, [r3, #2]
 8014e5e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014e60:	2b08      	cmp	r3, #8
 8014e62:	d003      	beq.n	8014e6c <etharp_input+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7f7 f8d9 	bl	800c01c <pbuf_free>
    return;
 8014e6a:	e05a      	b.n	8014f22 <etharp_input+0x102>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	330e      	adds	r3, #14
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	3318      	adds	r3, #24
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	3304      	adds	r3, #4
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d102      	bne.n	8014e8c <etharp_input+0x6c>
    for_us = 0;
 8014e86:	2300      	movs	r3, #0
 8014e88:	74fb      	strb	r3, [r7, #19]
 8014e8a:	e009      	b.n	8014ea0 <etharp_input+0x80>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014e8c:	68ba      	ldr	r2, [r7, #8]
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	3304      	adds	r3, #4
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	bf0c      	ite	eq
 8014e98:	2301      	moveq	r3, #1
 8014e9a:	2300      	movne	r3, #0
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	f103 0208 	add.w	r2, r3, #8
 8014ea6:	7cfb      	ldrb	r3, [r7, #19]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d001      	beq.n	8014eb0 <etharp_input+0x90>
 8014eac:	2301      	movs	r3, #1
 8014eae:	e000      	b.n	8014eb2 <etharp_input+0x92>
 8014eb0:	2302      	movs	r3, #2
 8014eb2:	f107 010c 	add.w	r1, r7, #12
 8014eb6:	6838      	ldr	r0, [r7, #0]
 8014eb8:	f7ff ff0c 	bl	8014cd4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	88db      	ldrh	r3, [r3, #6]
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014ec6:	d003      	beq.n	8014ed0 <etharp_input+0xb0>
 8014ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014ecc:	d01e      	beq.n	8014f0c <etharp_input+0xec>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014ece:	e025      	b.n	8014f1c <etharp_input+0xfc>
      if (for_us) {
 8014ed0:	7cfb      	ldrb	r3, [r7, #19]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d021      	beq.n	8014f1a <etharp_input+0xfa>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014eec:	697a      	ldr	r2, [r7, #20]
 8014eee:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014ef0:	2102      	movs	r1, #2
 8014ef2:	9103      	str	r1, [sp, #12]
 8014ef4:	f107 010c 	add.w	r1, r7, #12
 8014ef8:	9102      	str	r1, [sp, #8]
 8014efa:	9201      	str	r2, [sp, #4]
 8014efc:	9300      	str	r3, [sp, #0]
 8014efe:	462b      	mov	r3, r5
 8014f00:	4622      	mov	r2, r4
 8014f02:	4601      	mov	r1, r0
 8014f04:	6838      	ldr	r0, [r7, #0]
 8014f06:	f000 fb07 	bl	8015518 <etharp_raw>
      break;
 8014f0a:	e006      	b.n	8014f1a <etharp_input+0xfa>
      dhcp_arp_reply(netif, &sipaddr);
 8014f0c:	f107 030c 	add.w	r3, r7, #12
 8014f10:	4619      	mov	r1, r3
 8014f12:	6838      	ldr	r0, [r7, #0]
 8014f14:	f7fe fa0c 	bl	8013330 <dhcp_arp_reply>
      break;
 8014f18:	e000      	b.n	8014f1c <etharp_input+0xfc>
      break;
 8014f1a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7f7 f87d 	bl	800c01c <pbuf_free>
}
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bdb0      	pop	{r4, r5, r7, pc}
 8014f28:	0801b680 	.word	0x0801b680

08014f2c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b086      	sub	sp, #24
 8014f30:	af02      	add	r7, sp, #8
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	4613      	mov	r3, r2
 8014f38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014f3a:	79fa      	ldrb	r2, [r7, #7]
 8014f3c:	4944      	ldr	r1, [pc, #272]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014f3e:	4613      	mov	r3, r2
 8014f40:	005b      	lsls	r3, r3, #1
 8014f42:	4413      	add	r3, r2
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	440b      	add	r3, r1
 8014f48:	3314      	adds	r3, #20
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d806      	bhi.n	8014f5e <etharp_output_to_arp_index+0x32>
 8014f50:	4b40      	ldr	r3, [pc, #256]	@ (8015054 <etharp_output_to_arp_index+0x128>)
 8014f52:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014f56:	4940      	ldr	r1, [pc, #256]	@ (8015058 <etharp_output_to_arp_index+0x12c>)
 8014f58:	4840      	ldr	r0, [pc, #256]	@ (801505c <etharp_output_to_arp_index+0x130>)
 8014f5a:	f7eb fe9b 	bl	8000c94 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014f5e:	79fa      	ldrb	r2, [r7, #7]
 8014f60:	493b      	ldr	r1, [pc, #236]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014f62:	4613      	mov	r3, r2
 8014f64:	005b      	lsls	r3, r3, #1
 8014f66:	4413      	add	r3, r2
 8014f68:	00db      	lsls	r3, r3, #3
 8014f6a:	440b      	add	r3, r1
 8014f6c:	3314      	adds	r3, #20
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	d153      	bne.n	801501c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014f74:	79fa      	ldrb	r2, [r7, #7]
 8014f76:	4936      	ldr	r1, [pc, #216]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014f78:	4613      	mov	r3, r2
 8014f7a:	005b      	lsls	r3, r3, #1
 8014f7c:	4413      	add	r3, r2
 8014f7e:	00db      	lsls	r3, r3, #3
 8014f80:	440b      	add	r3, r1
 8014f82:	3312      	adds	r3, #18
 8014f84:	881b      	ldrh	r3, [r3, #0]
 8014f86:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014f8a:	d919      	bls.n	8014fc0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014f8c:	79fa      	ldrb	r2, [r7, #7]
 8014f8e:	4613      	mov	r3, r2
 8014f90:	005b      	lsls	r3, r3, #1
 8014f92:	4413      	add	r3, r2
 8014f94:	00db      	lsls	r3, r3, #3
 8014f96:	4a2e      	ldr	r2, [pc, #184]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014f98:	4413      	add	r3, r2
 8014f9a:	3304      	adds	r3, #4
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	68f8      	ldr	r0, [r7, #12]
 8014fa0:	f000 fb68 	bl	8015674 <etharp_request>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d138      	bne.n	801501c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014faa:	79fa      	ldrb	r2, [r7, #7]
 8014fac:	4928      	ldr	r1, [pc, #160]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014fae:	4613      	mov	r3, r2
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	00db      	lsls	r3, r3, #3
 8014fb6:	440b      	add	r3, r1
 8014fb8:	3314      	adds	r3, #20
 8014fba:	2203      	movs	r2, #3
 8014fbc:	701a      	strb	r2, [r3, #0]
 8014fbe:	e02d      	b.n	801501c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014fc0:	79fa      	ldrb	r2, [r7, #7]
 8014fc2:	4923      	ldr	r1, [pc, #140]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	005b      	lsls	r3, r3, #1
 8014fc8:	4413      	add	r3, r2
 8014fca:	00db      	lsls	r3, r3, #3
 8014fcc:	440b      	add	r3, r1
 8014fce:	3312      	adds	r3, #18
 8014fd0:	881b      	ldrh	r3, [r3, #0]
 8014fd2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014fd6:	d321      	bcc.n	801501c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014fd8:	79fa      	ldrb	r2, [r7, #7]
 8014fda:	4613      	mov	r3, r2
 8014fdc:	005b      	lsls	r3, r3, #1
 8014fde:	4413      	add	r3, r2
 8014fe0:	00db      	lsls	r3, r3, #3
 8014fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014fe4:	4413      	add	r3, r2
 8014fe6:	1d19      	adds	r1, r3, #4
 8014fe8:	79fa      	ldrb	r2, [r7, #7]
 8014fea:	4613      	mov	r3, r2
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	4413      	add	r3, r2
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	3308      	adds	r3, #8
 8014ff4:	4a16      	ldr	r2, [pc, #88]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8014ff6:	4413      	add	r3, r2
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	f000 fb17 	bl	8015630 <etharp_request_dst>
 8015002:	4603      	mov	r3, r0
 8015004:	2b00      	cmp	r3, #0
 8015006:	d109      	bne.n	801501c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015008:	79fa      	ldrb	r2, [r7, #7]
 801500a:	4911      	ldr	r1, [pc, #68]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	3314      	adds	r3, #20
 8015018:	2203      	movs	r2, #3
 801501a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8015022:	79fa      	ldrb	r2, [r7, #7]
 8015024:	4613      	mov	r3, r2
 8015026:	005b      	lsls	r3, r3, #1
 8015028:	4413      	add	r3, r2
 801502a:	00db      	lsls	r3, r3, #3
 801502c:	3308      	adds	r3, #8
 801502e:	4a08      	ldr	r2, [pc, #32]	@ (8015050 <etharp_output_to_arp_index+0x124>)
 8015030:	4413      	add	r3, r2
 8015032:	3304      	adds	r3, #4
 8015034:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015038:	9200      	str	r2, [sp, #0]
 801503a:	460a      	mov	r2, r1
 801503c:	68b9      	ldr	r1, [r7, #8]
 801503e:	68f8      	ldr	r0, [r7, #12]
 8015040:	f001 ff3c 	bl	8016ebc <ethernet_output>
 8015044:	4603      	mov	r3, r0
}
 8015046:	4618      	mov	r0, r3
 8015048:	3710      	adds	r7, #16
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	20004afc 	.word	0x20004afc
 8015054:	0801b534 	.word	0x0801b534
 8015058:	0801b6a0 	.word	0x0801b6a0
 801505c:	0801b5a8 	.word	0x0801b5a8

08015060 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b08a      	sub	sp, #40	@ 0x28
 8015064:	af02      	add	r7, sp, #8
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d106      	bne.n	8015084 <etharp_output+0x24>
 8015076:	4b73      	ldr	r3, [pc, #460]	@ (8015244 <etharp_output+0x1e4>)
 8015078:	f240 321e 	movw	r2, #798	@ 0x31e
 801507c:	4972      	ldr	r1, [pc, #456]	@ (8015248 <etharp_output+0x1e8>)
 801507e:	4873      	ldr	r0, [pc, #460]	@ (801524c <etharp_output+0x1ec>)
 8015080:	f7eb fe08 	bl	8000c94 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d106      	bne.n	8015098 <etharp_output+0x38>
 801508a:	4b6e      	ldr	r3, [pc, #440]	@ (8015244 <etharp_output+0x1e4>)
 801508c:	f240 321f 	movw	r2, #799	@ 0x31f
 8015090:	496f      	ldr	r1, [pc, #444]	@ (8015250 <etharp_output+0x1f0>)
 8015092:	486e      	ldr	r0, [pc, #440]	@ (801524c <etharp_output+0x1ec>)
 8015094:	f7eb fdfe 	bl	8000c94 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d106      	bne.n	80150ac <etharp_output+0x4c>
 801509e:	4b69      	ldr	r3, [pc, #420]	@ (8015244 <etharp_output+0x1e4>)
 80150a0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80150a4:	496b      	ldr	r1, [pc, #428]	@ (8015254 <etharp_output+0x1f4>)
 80150a6:	4869      	ldr	r0, [pc, #420]	@ (801524c <etharp_output+0x1ec>)
 80150a8:	f7eb fdf4 	bl	8000c94 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	68f9      	ldr	r1, [r7, #12]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 ffe8 	bl	8016088 <ip4_addr_isbroadcast_u32>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d002      	beq.n	80150c4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80150be:	4b66      	ldr	r3, [pc, #408]	@ (8015258 <etharp_output+0x1f8>)
 80150c0:	61fb      	str	r3, [r7, #28]
 80150c2:	e0af      	b.n	8015224 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80150cc:	2be0      	cmp	r3, #224	@ 0xe0
 80150ce:	d118      	bne.n	8015102 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80150d0:	2301      	movs	r3, #1
 80150d2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80150d4:	2300      	movs	r3, #0
 80150d6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80150d8:	235e      	movs	r3, #94	@ 0x5e
 80150da:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	3301      	adds	r3, #1
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	3302      	adds	r3, #2
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	3303      	adds	r3, #3
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80150fa:	f107 0310 	add.w	r3, r7, #16
 80150fe:	61fb      	str	r3, [r7, #28]
 8015100:	e090      	b.n	8015224 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3304      	adds	r3, #4
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	405a      	eors	r2, r3
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	3308      	adds	r3, #8
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	4013      	ands	r3, r2
 8015116:	2b00      	cmp	r3, #0
 8015118:	d012      	beq.n	8015140 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015120:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015124:	4293      	cmp	r3, r2
 8015126:	d00b      	beq.n	8015140 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	330c      	adds	r3, #12
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d003      	beq.n	801513a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	330c      	adds	r3, #12
 8015136:	61bb      	str	r3, [r7, #24]
 8015138:	e002      	b.n	8015140 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801513a:	f06f 0303 	mvn.w	r3, #3
 801513e:	e07d      	b.n	801523c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015140:	4b46      	ldr	r3, [pc, #280]	@ (801525c <etharp_output+0x1fc>)
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	4619      	mov	r1, r3
 8015146:	4a46      	ldr	r2, [pc, #280]	@ (8015260 <etharp_output+0x200>)
 8015148:	460b      	mov	r3, r1
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	440b      	add	r3, r1
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	4413      	add	r3, r2
 8015152:	3314      	adds	r3, #20
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	2b01      	cmp	r3, #1
 8015158:	d925      	bls.n	80151a6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801515a:	4b40      	ldr	r3, [pc, #256]	@ (801525c <etharp_output+0x1fc>)
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	4619      	mov	r1, r3
 8015160:	4a3f      	ldr	r2, [pc, #252]	@ (8015260 <etharp_output+0x200>)
 8015162:	460b      	mov	r3, r1
 8015164:	005b      	lsls	r3, r3, #1
 8015166:	440b      	add	r3, r1
 8015168:	00db      	lsls	r3, r3, #3
 801516a:	4413      	add	r3, r2
 801516c:	3308      	adds	r3, #8
 801516e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	429a      	cmp	r2, r3
 8015174:	d117      	bne.n	80151a6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015176:	69bb      	ldr	r3, [r7, #24]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	4b38      	ldr	r3, [pc, #224]	@ (801525c <etharp_output+0x1fc>)
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	4937      	ldr	r1, [pc, #220]	@ (8015260 <etharp_output+0x200>)
 8015182:	4603      	mov	r3, r0
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	4403      	add	r3, r0
 8015188:	00db      	lsls	r3, r3, #3
 801518a:	440b      	add	r3, r1
 801518c:	3304      	adds	r3, #4
 801518e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015190:	429a      	cmp	r2, r3
 8015192:	d108      	bne.n	80151a6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015194:	4b31      	ldr	r3, [pc, #196]	@ (801525c <etharp_output+0x1fc>)
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	461a      	mov	r2, r3
 801519a:	68b9      	ldr	r1, [r7, #8]
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f7ff fec5 	bl	8014f2c <etharp_output_to_arp_index>
 80151a2:	4603      	mov	r3, r0
 80151a4:	e04a      	b.n	801523c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80151a6:	2300      	movs	r3, #0
 80151a8:	75fb      	strb	r3, [r7, #23]
 80151aa:	e031      	b.n	8015210 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80151ac:	7dfa      	ldrb	r2, [r7, #23]
 80151ae:	492c      	ldr	r1, [pc, #176]	@ (8015260 <etharp_output+0x200>)
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3314      	adds	r3, #20
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	2b01      	cmp	r3, #1
 80151c0:	d923      	bls.n	801520a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80151c2:	7dfa      	ldrb	r2, [r7, #23]
 80151c4:	4926      	ldr	r1, [pc, #152]	@ (8015260 <etharp_output+0x200>)
 80151c6:	4613      	mov	r3, r2
 80151c8:	005b      	lsls	r3, r3, #1
 80151ca:	4413      	add	r3, r2
 80151cc:	00db      	lsls	r3, r3, #3
 80151ce:	440b      	add	r3, r1
 80151d0:	3308      	adds	r3, #8
 80151d2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d117      	bne.n	801520a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	6819      	ldr	r1, [r3, #0]
 80151de:	7dfa      	ldrb	r2, [r7, #23]
 80151e0:	481f      	ldr	r0, [pc, #124]	@ (8015260 <etharp_output+0x200>)
 80151e2:	4613      	mov	r3, r2
 80151e4:	005b      	lsls	r3, r3, #1
 80151e6:	4413      	add	r3, r2
 80151e8:	00db      	lsls	r3, r3, #3
 80151ea:	4403      	add	r3, r0
 80151ec:	3304      	adds	r3, #4
 80151ee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80151f0:	4299      	cmp	r1, r3
 80151f2:	d10a      	bne.n	801520a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80151f4:	4a19      	ldr	r2, [pc, #100]	@ (801525c <etharp_output+0x1fc>)
 80151f6:	7dfb      	ldrb	r3, [r7, #23]
 80151f8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80151fa:	7dfb      	ldrb	r3, [r7, #23]
 80151fc:	461a      	mov	r2, r3
 80151fe:	68b9      	ldr	r1, [r7, #8]
 8015200:	68f8      	ldr	r0, [r7, #12]
 8015202:	f7ff fe93 	bl	8014f2c <etharp_output_to_arp_index>
 8015206:	4603      	mov	r3, r0
 8015208:	e018      	b.n	801523c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	3301      	adds	r3, #1
 801520e:	75fb      	strb	r3, [r7, #23]
 8015210:	7dfb      	ldrb	r3, [r7, #23]
 8015212:	2b09      	cmp	r3, #9
 8015214:	d9ca      	bls.n	80151ac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015216:	68ba      	ldr	r2, [r7, #8]
 8015218:	69b9      	ldr	r1, [r7, #24]
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	f000 f822 	bl	8015264 <etharp_query>
 8015220:	4603      	mov	r3, r0
 8015222:	e00b      	b.n	801523c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 801522a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	68b9      	ldr	r1, [r7, #8]
 8015234:	68f8      	ldr	r0, [r7, #12]
 8015236:	f001 fe41 	bl	8016ebc <ethernet_output>
 801523a:	4603      	mov	r3, r0
}
 801523c:	4618      	mov	r0, r3
 801523e:	3720      	adds	r7, #32
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	0801b534 	.word	0x0801b534
 8015248:	0801b680 	.word	0x0801b680
 801524c:	0801b5a8 	.word	0x0801b5a8
 8015250:	0801b6d0 	.word	0x0801b6d0
 8015254:	0801b670 	.word	0x0801b670
 8015258:	0801bda4 	.word	0x0801bda4
 801525c:	20004bec 	.word	0x20004bec
 8015260:	20004afc 	.word	0x20004afc

08015264 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b08c      	sub	sp, #48	@ 0x30
 8015268:	af02      	add	r7, sp, #8
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	332e      	adds	r3, #46	@ 0x2e
 8015274:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015276:	23ff      	movs	r3, #255	@ 0xff
 8015278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  int is_new_entry = 0;
 801527c:	2300      	movs	r3, #0
 801527e:	627b      	str	r3, [r7, #36]	@ 0x24
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	68f9      	ldr	r1, [r7, #12]
 8015286:	4618      	mov	r0, r3
 8015288:	f000 fefe 	bl	8016088 <ip4_addr_isbroadcast_u32>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d10c      	bne.n	80152ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801529a:	2be0      	cmp	r3, #224	@ 0xe0
 801529c:	d006      	beq.n	80152ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d003      	beq.n	80152ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d102      	bne.n	80152b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80152ac:	f06f 030f 	mvn.w	r3, #15
 80152b0:	e11d      	b.n	80154ee <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80152b2:	68fa      	ldr	r2, [r7, #12]
 80152b4:	2101      	movs	r1, #1
 80152b6:	68b8      	ldr	r0, [r7, #8]
 80152b8:	f7ff fb94 	bl	80149e4 <etharp_find_entry>
 80152bc:	4603      	mov	r3, r0
 80152be:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80152c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	da02      	bge.n	80152ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80152c8:	8a7b      	ldrh	r3, [r7, #18]
 80152ca:	b25b      	sxtb	r3, r3
 80152cc:	e10f      	b.n	80154ee <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80152ce:	8a7b      	ldrh	r3, [r7, #18]
 80152d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80152d2:	d906      	bls.n	80152e2 <etharp_query+0x7e>
 80152d4:	4b88      	ldr	r3, [pc, #544]	@ (80154f8 <etharp_query+0x294>)
 80152d6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80152da:	4988      	ldr	r1, [pc, #544]	@ (80154fc <etharp_query+0x298>)
 80152dc:	4888      	ldr	r0, [pc, #544]	@ (8015500 <etharp_query+0x29c>)
 80152de:	f7eb fcd9 	bl	8000c94 <printf>
  i = (netif_addr_idx_t)i_err;
 80152e2:	8a7b      	ldrh	r3, [r7, #18]
 80152e4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80152e6:	7c7a      	ldrb	r2, [r7, #17]
 80152e8:	4986      	ldr	r1, [pc, #536]	@ (8015504 <etharp_query+0x2a0>)
 80152ea:	4613      	mov	r3, r2
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4413      	add	r3, r2
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	440b      	add	r3, r1
 80152f4:	3314      	adds	r3, #20
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d115      	bne.n	8015328 <etharp_query+0xc4>
    is_new_entry = 1;
 80152fc:	2301      	movs	r3, #1
 80152fe:	627b      	str	r3, [r7, #36]	@ 0x24
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015300:	7c7a      	ldrb	r2, [r7, #17]
 8015302:	4980      	ldr	r1, [pc, #512]	@ (8015504 <etharp_query+0x2a0>)
 8015304:	4613      	mov	r3, r2
 8015306:	005b      	lsls	r3, r3, #1
 8015308:	4413      	add	r3, r2
 801530a:	00db      	lsls	r3, r3, #3
 801530c:	440b      	add	r3, r1
 801530e:	3314      	adds	r3, #20
 8015310:	2201      	movs	r2, #1
 8015312:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015314:	7c7a      	ldrb	r2, [r7, #17]
 8015316:	497b      	ldr	r1, [pc, #492]	@ (8015504 <etharp_query+0x2a0>)
 8015318:	4613      	mov	r3, r2
 801531a:	005b      	lsls	r3, r3, #1
 801531c:	4413      	add	r3, r2
 801531e:	00db      	lsls	r3, r3, #3
 8015320:	440b      	add	r3, r1
 8015322:	3308      	adds	r3, #8
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015328:	7c7a      	ldrb	r2, [r7, #17]
 801532a:	4976      	ldr	r1, [pc, #472]	@ (8015504 <etharp_query+0x2a0>)
 801532c:	4613      	mov	r3, r2
 801532e:	005b      	lsls	r3, r3, #1
 8015330:	4413      	add	r3, r2
 8015332:	00db      	lsls	r3, r3, #3
 8015334:	440b      	add	r3, r1
 8015336:	3314      	adds	r3, #20
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d011      	beq.n	8015362 <etharp_query+0xfe>
 801533e:	7c7a      	ldrb	r2, [r7, #17]
 8015340:	4970      	ldr	r1, [pc, #448]	@ (8015504 <etharp_query+0x2a0>)
 8015342:	4613      	mov	r3, r2
 8015344:	005b      	lsls	r3, r3, #1
 8015346:	4413      	add	r3, r2
 8015348:	00db      	lsls	r3, r3, #3
 801534a:	440b      	add	r3, r1
 801534c:	3314      	adds	r3, #20
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	2b01      	cmp	r3, #1
 8015352:	d806      	bhi.n	8015362 <etharp_query+0xfe>
 8015354:	4b68      	ldr	r3, [pc, #416]	@ (80154f8 <etharp_query+0x294>)
 8015356:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801535a:	496b      	ldr	r1, [pc, #428]	@ (8015508 <etharp_query+0x2a4>)
 801535c:	4868      	ldr	r0, [pc, #416]	@ (8015500 <etharp_query+0x29c>)
 801535e:	f7eb fc99 	bl	8000c94 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	d102      	bne.n	801536e <etharp_query+0x10a>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d128      	bne.n	80153c0 <etharp_query+0x15c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801536e:	68b9      	ldr	r1, [r7, #8]
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	f000 f97f 	bl	8015674 <etharp_request>
 8015376:	4603      	mov	r3, r0
 8015378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (result != ERR_OK) {
 801537c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015380:	2b00      	cmp	r3, #0
 8015382:	d117      	bne.n	80153b4 <etharp_query+0x150>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 8015384:	7c7a      	ldrb	r2, [r7, #17]
 8015386:	495f      	ldr	r1, [pc, #380]	@ (8015504 <etharp_query+0x2a0>)
 8015388:	4613      	mov	r3, r2
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	4413      	add	r3, r2
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	440b      	add	r3, r1
 8015392:	3314      	adds	r3, #20
 8015394:	781b      	ldrb	r3, [r3, #0]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d10c      	bne.n	80153b4 <etharp_query+0x150>
 801539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801539c:	2b00      	cmp	r3, #0
 801539e:	d109      	bne.n	80153b4 <etharp_query+0x150>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 80153a0:	7c7a      	ldrb	r2, [r7, #17]
 80153a2:	4958      	ldr	r1, [pc, #352]	@ (8015504 <etharp_query+0x2a0>)
 80153a4:	4613      	mov	r3, r2
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	4413      	add	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	440b      	add	r3, r1
 80153ae:	3312      	adds	r3, #18
 80153b0:	2200      	movs	r2, #0
 80153b2:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d102      	bne.n	80153c0 <etharp_query+0x15c>
      return result;
 80153ba:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80153be:	e096      	b.n	80154ee <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d106      	bne.n	80153d4 <etharp_query+0x170>
 80153c6:	4b4c      	ldr	r3, [pc, #304]	@ (80154f8 <etharp_query+0x294>)
 80153c8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80153cc:	494f      	ldr	r1, [pc, #316]	@ (801550c <etharp_query+0x2a8>)
 80153ce:	484c      	ldr	r0, [pc, #304]	@ (8015500 <etharp_query+0x29c>)
 80153d0:	f7eb fc60 	bl	8000c94 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80153d4:	7c7a      	ldrb	r2, [r7, #17]
 80153d6:	494b      	ldr	r1, [pc, #300]	@ (8015504 <etharp_query+0x2a0>)
 80153d8:	4613      	mov	r3, r2
 80153da:	005b      	lsls	r3, r3, #1
 80153dc:	4413      	add	r3, r2
 80153de:	00db      	lsls	r3, r3, #3
 80153e0:	440b      	add	r3, r1
 80153e2:	3314      	adds	r3, #20
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	d917      	bls.n	801541a <etharp_query+0x1b6>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80153ea:	4a49      	ldr	r2, [pc, #292]	@ (8015510 <etharp_query+0x2ac>)
 80153ec:	7c7b      	ldrb	r3, [r7, #17]
 80153ee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80153f0:	7c7a      	ldrb	r2, [r7, #17]
 80153f2:	4613      	mov	r3, r2
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	4413      	add	r3, r2
 80153f8:	00db      	lsls	r3, r3, #3
 80153fa:	3308      	adds	r3, #8
 80153fc:	4a41      	ldr	r2, [pc, #260]	@ (8015504 <etharp_query+0x2a0>)
 80153fe:	4413      	add	r3, r2
 8015400:	3304      	adds	r3, #4
 8015402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015406:	9200      	str	r2, [sp, #0]
 8015408:	697a      	ldr	r2, [r7, #20]
 801540a:	6879      	ldr	r1, [r7, #4]
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	f001 fd55 	bl	8016ebc <ethernet_output>
 8015412:	4603      	mov	r3, r0
 8015414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015418:	e067      	b.n	80154ea <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801541a:	7c7a      	ldrb	r2, [r7, #17]
 801541c:	4939      	ldr	r1, [pc, #228]	@ (8015504 <etharp_query+0x2a0>)
 801541e:	4613      	mov	r3, r2
 8015420:	005b      	lsls	r3, r3, #1
 8015422:	4413      	add	r3, r2
 8015424:	00db      	lsls	r3, r3, #3
 8015426:	440b      	add	r3, r1
 8015428:	3314      	adds	r3, #20
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	2b01      	cmp	r3, #1
 801542e:	d15c      	bne.n	80154ea <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015430:	2300      	movs	r3, #0
 8015432:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015438:	e01c      	b.n	8015474 <etharp_query+0x210>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	895a      	ldrh	r2, [r3, #10]
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	891b      	ldrh	r3, [r3, #8]
 8015442:	429a      	cmp	r2, r3
 8015444:	d10a      	bne.n	801545c <etharp_query+0x1f8>
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d006      	beq.n	801545c <etharp_query+0x1f8>
 801544e:	4b2a      	ldr	r3, [pc, #168]	@ (80154f8 <etharp_query+0x294>)
 8015450:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 8015454:	492f      	ldr	r1, [pc, #188]	@ (8015514 <etharp_query+0x2b0>)
 8015456:	482a      	ldr	r0, [pc, #168]	@ (8015500 <etharp_query+0x29c>)
 8015458:	f7eb fc1c 	bl	8000c94 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	7b1b      	ldrb	r3, [r3, #12]
 8015460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015464:	2b00      	cmp	r3, #0
 8015466:	d002      	beq.n	801546e <etharp_query+0x20a>
        copy_needed = 1;
 8015468:	2301      	movs	r3, #1
 801546a:	61bb      	str	r3, [r7, #24]
        break;
 801546c:	e005      	b.n	801547a <etharp_query+0x216>
      }
      p = p->next;
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d1df      	bne.n	801543a <etharp_query+0x1d6>
    }
    if (copy_needed) {
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d007      	beq.n	8015490 <etharp_query+0x22c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015486:	200e      	movs	r0, #14
 8015488:	f7f7 f860 	bl	800c54c <pbuf_clone>
 801548c:	61f8      	str	r0, [r7, #28]
 801548e:	e004      	b.n	801549a <etharp_query+0x236>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015494:	69f8      	ldr	r0, [r7, #28]
 8015496:	f7f6 fe61 	bl	800c15c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d021      	beq.n	80154e4 <etharp_query+0x280>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80154a0:	7c7a      	ldrb	r2, [r7, #17]
 80154a2:	4918      	ldr	r1, [pc, #96]	@ (8015504 <etharp_query+0x2a0>)
 80154a4:	4613      	mov	r3, r2
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	4413      	add	r3, r2
 80154aa:	00db      	lsls	r3, r3, #3
 80154ac:	440b      	add	r3, r1
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d00a      	beq.n	80154ca <etharp_query+0x266>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80154b4:	7c7a      	ldrb	r2, [r7, #17]
 80154b6:	4913      	ldr	r1, [pc, #76]	@ (8015504 <etharp_query+0x2a0>)
 80154b8:	4613      	mov	r3, r2
 80154ba:	005b      	lsls	r3, r3, #1
 80154bc:	4413      	add	r3, r2
 80154be:	00db      	lsls	r3, r3, #3
 80154c0:	440b      	add	r3, r1
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7f6 fda9 	bl	800c01c <pbuf_free>
      }
      arp_table[i].q = p;
 80154ca:	7c7a      	ldrb	r2, [r7, #17]
 80154cc:	490d      	ldr	r1, [pc, #52]	@ (8015504 <etharp_query+0x2a0>)
 80154ce:	4613      	mov	r3, r2
 80154d0:	005b      	lsls	r3, r3, #1
 80154d2:	4413      	add	r3, r2
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	440b      	add	r3, r1
 80154d8:	69fa      	ldr	r2, [r7, #28]
 80154da:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80154dc:	2300      	movs	r3, #0
 80154de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80154e2:	e002      	b.n	80154ea <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80154e4:	23ff      	movs	r3, #255	@ 0xff
 80154e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }
  return result;
 80154ea:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3728      	adds	r7, #40	@ 0x28
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	0801b534 	.word	0x0801b534
 80154fc:	0801b6dc 	.word	0x0801b6dc
 8015500:	0801b5a8 	.word	0x0801b5a8
 8015504:	20004afc 	.word	0x20004afc
 8015508:	0801b6ec 	.word	0x0801b6ec
 801550c:	0801b6d0 	.word	0x0801b6d0
 8015510:	20004bec 	.word	0x20004bec
 8015514:	0801b714 	.word	0x0801b714

08015518 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b08a      	sub	sp, #40	@ 0x28
 801551c:	af02      	add	r7, sp, #8
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
 8015524:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015526:	2300      	movs	r3, #0
 8015528:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d106      	bne.n	801553e <etharp_raw+0x26>
 8015530:	4b3a      	ldr	r3, [pc, #232]	@ (801561c <etharp_raw+0x104>)
 8015532:	f240 425f 	movw	r2, #1119	@ 0x45f
 8015536:	493a      	ldr	r1, [pc, #232]	@ (8015620 <etharp_raw+0x108>)
 8015538:	483a      	ldr	r0, [pc, #232]	@ (8015624 <etharp_raw+0x10c>)
 801553a:	f7eb fbab 	bl	8000c94 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801553e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015542:	211c      	movs	r1, #28
 8015544:	200e      	movs	r0, #14
 8015546:	f7f6 fa89 	bl	800ba5c <pbuf_alloc>
 801554a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801554c:	69bb      	ldr	r3, [r7, #24]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d102      	bne.n	8015558 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015552:	f04f 33ff 	mov.w	r3, #4294967295
 8015556:	e05d      	b.n	8015614 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	895b      	ldrh	r3, [r3, #10]
 801555c:	2b1b      	cmp	r3, #27
 801555e:	d806      	bhi.n	801556e <etharp_raw+0x56>
 8015560:	4b2e      	ldr	r3, [pc, #184]	@ (801561c <etharp_raw+0x104>)
 8015562:	f240 426a 	movw	r2, #1130	@ 0x46a
 8015566:	4930      	ldr	r1, [pc, #192]	@ (8015628 <etharp_raw+0x110>)
 8015568:	482e      	ldr	r0, [pc, #184]	@ (8015624 <etharp_raw+0x10c>)
 801556a:	f7eb fb93 	bl	8000c94 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015574:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015576:	4618      	mov	r0, r3
 8015578:	f7f5 f90c 	bl	800a794 <lwip_htons>
 801557c:	4603      	mov	r3, r0
 801557e:	461a      	mov	r2, r3
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801558a:	2b06      	cmp	r3, #6
 801558c:	d006      	beq.n	801559c <etharp_raw+0x84>
 801558e:	4b23      	ldr	r3, [pc, #140]	@ (801561c <etharp_raw+0x104>)
 8015590:	f240 4271 	movw	r2, #1137	@ 0x471
 8015594:	4925      	ldr	r1, [pc, #148]	@ (801562c <etharp_raw+0x114>)
 8015596:	4823      	ldr	r0, [pc, #140]	@ (8015624 <etharp_raw+0x10c>)
 8015598:	f7eb fb7c 	bl	8000c94 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	3308      	adds	r3, #8
 80155a0:	2206      	movs	r2, #6
 80155a2:	6839      	ldr	r1, [r7, #0]
 80155a4:	4618      	mov	r0, r3
 80155a6:	f002 f8a4 	bl	80176f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	3312      	adds	r3, #18
 80155ae:	2206      	movs	r2, #6
 80155b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80155b2:	4618      	mov	r0, r3
 80155b4:	f002 f89d 	bl	80176f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	330e      	adds	r3, #14
 80155bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155be:	6812      	ldr	r2, [r2, #0]
 80155c0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	3318      	adds	r3, #24
 80155c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80155c8:	6812      	ldr	r2, [r2, #0]
 80155ca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	2200      	movs	r2, #0
 80155d0:	701a      	strb	r2, [r3, #0]
 80155d2:	2200      	movs	r2, #0
 80155d4:	f042 0201 	orr.w	r2, r2, #1
 80155d8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	2200      	movs	r2, #0
 80155de:	f042 0208 	orr.w	r2, r2, #8
 80155e2:	709a      	strb	r2, [r3, #2]
 80155e4:	2200      	movs	r2, #0
 80155e6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	2206      	movs	r2, #6
 80155ec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2204      	movs	r2, #4
 80155f2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80155f4:	f640 0306 	movw	r3, #2054	@ 0x806
 80155f8:	9300      	str	r3, [sp, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	68ba      	ldr	r2, [r7, #8]
 80155fe:	69b9      	ldr	r1, [r7, #24]
 8015600:	68f8      	ldr	r0, [r7, #12]
 8015602:	f001 fc5b 	bl	8016ebc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015606:	69b8      	ldr	r0, [r7, #24]
 8015608:	f7f6 fd08 	bl	800c01c <pbuf_free>
  p = NULL;
 801560c:	2300      	movs	r3, #0
 801560e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015610:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3720      	adds	r7, #32
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	0801b534 	.word	0x0801b534
 8015620:	0801b680 	.word	0x0801b680
 8015624:	0801b5a8 	.word	0x0801b5a8
 8015628:	0801b730 	.word	0x0801b730
 801562c:	0801b764 	.word	0x0801b764

08015630 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b088      	sub	sp, #32
 8015634:	af04      	add	r7, sp, #16
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801564c:	2201      	movs	r2, #1
 801564e:	9203      	str	r2, [sp, #12]
 8015650:	68ba      	ldr	r2, [r7, #8]
 8015652:	9202      	str	r2, [sp, #8]
 8015654:	4a06      	ldr	r2, [pc, #24]	@ (8015670 <etharp_request_dst+0x40>)
 8015656:	9201      	str	r2, [sp, #4]
 8015658:	9300      	str	r3, [sp, #0]
 801565a:	4603      	mov	r3, r0
 801565c:	687a      	ldr	r2, [r7, #4]
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f7ff ff5a 	bl	8015518 <etharp_raw>
 8015664:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015666:	4618      	mov	r0, r3
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	0801bdac 	.word	0x0801bdac

08015674 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801567e:	4a05      	ldr	r2, [pc, #20]	@ (8015694 <etharp_request+0x20>)
 8015680:	6839      	ldr	r1, [r7, #0]
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7ff ffd4 	bl	8015630 <etharp_request_dst>
 8015688:	4603      	mov	r3, r0
}
 801568a:	4618      	mov	r0, r3
 801568c:	3708      	adds	r7, #8
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	0801bda4 	.word	0x0801bda4

08015698 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b08e      	sub	sp, #56	@ 0x38
 801569c:	af04      	add	r7, sp, #16
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80156a2:	4b8e      	ldr	r3, [pc, #568]	@ (80158dc <icmp_input+0x244>)
 80156a4:	689b      	ldr	r3, [r3, #8]
 80156a6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80156a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	f003 030f 	and.w	r3, r3, #15
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80156b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156ba:	2b13      	cmp	r3, #19
 80156bc:	f240 80f6 	bls.w	80158ac <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	895b      	ldrh	r3, [r3, #10]
 80156c4:	2b03      	cmp	r3, #3
 80156c6:	f240 80f3 	bls.w	80158b0 <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	785b      	ldrb	r3, [r3, #1]
 80156da:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80156de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f000 80db 	beq.w	801589e <icmp_input+0x206>
 80156e8:	2b08      	cmp	r3, #8
 80156ea:	f040 80db 	bne.w	80158a4 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80156ee:	4b7c      	ldr	r3, [pc, #496]	@ (80158e0 <icmp_input+0x248>)
 80156f0:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156f2:	4b7a      	ldr	r3, [pc, #488]	@ (80158dc <icmp_input+0x244>)
 80156f4:	695b      	ldr	r3, [r3, #20]
 80156f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80156fa:	2be0      	cmp	r3, #224	@ 0xe0
 80156fc:	f000 80df 	beq.w	80158be <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015700:	4b76      	ldr	r3, [pc, #472]	@ (80158dc <icmp_input+0x244>)
 8015702:	695b      	ldr	r3, [r3, #20]
 8015704:	4a75      	ldr	r2, [pc, #468]	@ (80158dc <icmp_input+0x244>)
 8015706:	6812      	ldr	r2, [r2, #0]
 8015708:	4611      	mov	r1, r2
 801570a:	4618      	mov	r0, r3
 801570c:	f000 fcbc 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	f040 80d5 	bne.w	80158c2 <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	891b      	ldrh	r3, [r3, #8]
 801571c:	2b07      	cmp	r3, #7
 801571e:	f240 80c9 	bls.w	80158b4 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015722:	6878      	ldr	r0, [r7, #4]
 8015724:	f7f5 f990 	bl	800aa48 <inet_chksum_pbuf>
 8015728:	4603      	mov	r3, r0
 801572a:	2b00      	cmp	r3, #0
 801572c:	d003      	beq.n	8015736 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7f6 fc74 	bl	800c01c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8015734:	e0ce      	b.n	80158d4 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015736:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015738:	330e      	adds	r3, #14
 801573a:	4619      	mov	r1, r3
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7f6 fbdb 	bl	800bef8 <pbuf_add_header>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d04b      	beq.n	80157e0 <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	891a      	ldrh	r2, [r3, #8]
 801574c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801574e:	4413      	add	r3, r2
 8015750:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	891b      	ldrh	r3, [r3, #8]
 8015756:	8b7a      	ldrh	r2, [r7, #26]
 8015758:	429a      	cmp	r2, r3
 801575a:	f0c0 80b4 	bcc.w	80158c6 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801575e:	8b7b      	ldrh	r3, [r7, #26]
 8015760:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015764:	4619      	mov	r1, r3
 8015766:	200e      	movs	r0, #14
 8015768:	f7f6 f978 	bl	800ba5c <pbuf_alloc>
 801576c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	2b00      	cmp	r3, #0
 8015772:	f000 80aa 	beq.w	80158ca <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	895b      	ldrh	r3, [r3, #10]
 801577a:	461a      	mov	r2, r3
 801577c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801577e:	3308      	adds	r3, #8
 8015780:	429a      	cmp	r2, r3
 8015782:	d203      	bcs.n	801578c <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015784:	6978      	ldr	r0, [r7, #20]
 8015786:	f7f6 fc49 	bl	800c01c <pbuf_free>
          goto icmperr;
 801578a:	e09f      	b.n	80158cc <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015794:	4618      	mov	r0, r3
 8015796:	f001 ffac 	bl	80176f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801579a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801579c:	4619      	mov	r1, r3
 801579e:	6978      	ldr	r0, [r7, #20]
 80157a0:	f7f6 fbba 	bl	800bf18 <pbuf_remove_header>
 80157a4:	4603      	mov	r3, r0
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d009      	beq.n	80157be <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80157aa:	4b4e      	ldr	r3, [pc, #312]	@ (80158e4 <icmp_input+0x24c>)
 80157ac:	22b6      	movs	r2, #182	@ 0xb6
 80157ae:	494e      	ldr	r1, [pc, #312]	@ (80158e8 <icmp_input+0x250>)
 80157b0:	484e      	ldr	r0, [pc, #312]	@ (80158ec <icmp_input+0x254>)
 80157b2:	f7eb fa6f 	bl	8000c94 <printf>
          pbuf_free(r);
 80157b6:	6978      	ldr	r0, [r7, #20]
 80157b8:	f7f6 fc30 	bl	800c01c <pbuf_free>
          goto icmperr;
 80157bc:	e086      	b.n	80158cc <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80157be:	6879      	ldr	r1, [r7, #4]
 80157c0:	6978      	ldr	r0, [r7, #20]
 80157c2:	f7f6 fd4f 	bl	800c264 <pbuf_copy>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d003      	beq.n	80157d4 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80157cc:	6978      	ldr	r0, [r7, #20]
 80157ce:	f7f6 fc25 	bl	800c01c <pbuf_free>
          goto icmperr;
 80157d2:	e07b      	b.n	80158cc <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f7f6 fc21 	bl	800c01c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	607b      	str	r3, [r7, #4]
 80157de:	e00f      	b.n	8015800 <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80157e2:	330e      	adds	r3, #14
 80157e4:	4619      	mov	r1, r3
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7f6 fb96 	bl	800bf18 <pbuf_remove_header>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d006      	beq.n	8015800 <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80157f2:	4b3c      	ldr	r3, [pc, #240]	@ (80158e4 <icmp_input+0x24c>)
 80157f4:	22c7      	movs	r2, #199	@ 0xc7
 80157f6:	493e      	ldr	r1, [pc, #248]	@ (80158f0 <icmp_input+0x258>)
 80157f8:	483c      	ldr	r0, [pc, #240]	@ (80158ec <icmp_input+0x254>)
 80157fa:	f7eb fa4b 	bl	8000c94 <printf>
          goto icmperr;
 80157fe:	e065      	b.n	80158cc <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015806:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015808:	4619      	mov	r1, r3
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7f6 fb74 	bl	800bef8 <pbuf_add_header>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	d145      	bne.n	80158a2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015824:	4b2d      	ldr	r3, [pc, #180]	@ (80158dc <icmp_input+0x244>)
 8015826:	691a      	ldr	r2, [r3, #16]
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	2200      	movs	r2, #0
 8015830:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015832:	693b      	ldr	r3, [r7, #16]
 8015834:	885b      	ldrh	r3, [r3, #2]
 8015836:	b29b      	uxth	r3, r3
 8015838:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801583c:	4293      	cmp	r3, r2
 801583e:	d907      	bls.n	8015850 <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	885b      	ldrh	r3, [r3, #2]
 8015844:	b29b      	uxth	r3, r3
 8015846:	3309      	adds	r3, #9
 8015848:	b29a      	uxth	r2, r3
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	805a      	strh	r2, [r3, #2]
 801584e:	e006      	b.n	801585e <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	885b      	ldrh	r3, [r3, #2]
 8015854:	b29b      	uxth	r3, r3
 8015856:	3308      	adds	r3, #8
 8015858:	b29a      	uxth	r2, r3
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	22ff      	movs	r2, #255	@ 0xff
 8015862:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	2200      	movs	r2, #0
 8015868:	729a      	strb	r2, [r3, #10]
 801586a:	2200      	movs	r2, #0
 801586c:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801586e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015870:	4619      	mov	r1, r3
 8015872:	68f8      	ldr	r0, [r7, #12]
 8015874:	f7f5 f8d6 	bl	800aa24 <inet_chksum>
 8015878:	4603      	mov	r3, r0
 801587a:	461a      	mov	r2, r3
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	9302      	str	r3, [sp, #8]
 8015884:	2301      	movs	r3, #1
 8015886:	9301      	str	r3, [sp, #4]
 8015888:	2300      	movs	r3, #0
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	23ff      	movs	r3, #255	@ 0xff
 801588e:	2200      	movs	r2, #0
 8015890:	69f9      	ldr	r1, [r7, #28]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 faba 	bl	8015e0c <ip4_output_if>
 8015898:	4603      	mov	r3, r0
 801589a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801589c:	e001      	b.n	80158a2 <icmp_input+0x20a>
      break;
 801589e:	bf00      	nop
 80158a0:	e000      	b.n	80158a4 <icmp_input+0x20c>
      break;
 80158a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f7f6 fbb9 	bl	800c01c <pbuf_free>
  return;
 80158aa:	e013      	b.n	80158d4 <icmp_input+0x23c>
    goto lenerr;
 80158ac:	bf00      	nop
 80158ae:	e002      	b.n	80158b6 <icmp_input+0x21e>
    goto lenerr;
 80158b0:	bf00      	nop
 80158b2:	e000      	b.n	80158b6 <icmp_input+0x21e>
        goto lenerr;
 80158b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f7f6 fbb0 	bl	800c01c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158bc:	e00a      	b.n	80158d4 <icmp_input+0x23c>
        goto icmperr;
 80158be:	bf00      	nop
 80158c0:	e004      	b.n	80158cc <icmp_input+0x234>
        goto icmperr;
 80158c2:	bf00      	nop
 80158c4:	e002      	b.n	80158cc <icmp_input+0x234>
          goto icmperr;
 80158c6:	bf00      	nop
 80158c8:	e000      	b.n	80158cc <icmp_input+0x234>
          goto icmperr;
 80158ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f7f6 fba5 	bl	800c01c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80158d4:	3728      	adds	r7, #40	@ 0x28
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	200054ec 	.word	0x200054ec
 80158e0:	20005500 	.word	0x20005500
 80158e4:	0801b7a8 	.word	0x0801b7a8
 80158e8:	0801b7dc 	.word	0x0801b7dc
 80158ec:	0801b814 	.word	0x0801b814
 80158f0:	0801b83c 	.word	0x0801b83c

080158f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	460b      	mov	r3, r1
 80158fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015900:	78fb      	ldrb	r3, [r7, #3]
 8015902:	461a      	mov	r2, r3
 8015904:	2103      	movs	r1, #3
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 f814 	bl	8015934 <icmp_send_response>
}
 801590c:	bf00      	nop
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	460b      	mov	r3, r1
 801591e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015920:	78fb      	ldrb	r3, [r7, #3]
 8015922:	461a      	mov	r2, r3
 8015924:	210b      	movs	r1, #11
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f000 f804 	bl	8015934 <icmp_send_response>
}
 801592c:	bf00      	nop
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b08c      	sub	sp, #48	@ 0x30
 8015938:	af04      	add	r7, sp, #16
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	460b      	mov	r3, r1
 801593e:	70fb      	strb	r3, [r7, #3]
 8015940:	4613      	mov	r3, r2
 8015942:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8015944:	231c      	movs	r3, #28
 8015946:	837b      	strh	r3, [r7, #26]
  if (p->tot_len < response_pkt_len) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	891b      	ldrh	r3, [r3, #8]
 801594c:	8b7a      	ldrh	r2, [r7, #26]
 801594e:	429a      	cmp	r2, r3
 8015950:	d902      	bls.n	8015958 <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	891b      	ldrh	r3, [r3, #8]
 8015956:	837b      	strh	r3, [r7, #26]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + response_pkt_len, PBUF_RAM);
 8015958:	8b7b      	ldrh	r3, [r7, #26]
 801595a:	3308      	adds	r3, #8
 801595c:	b29b      	uxth	r3, r3
 801595e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015962:	4619      	mov	r1, r3
 8015964:	2022      	movs	r0, #34	@ 0x22
 8015966:	f7f6 f879 	bl	800ba5c <pbuf_alloc>
 801596a:	6178      	str	r0, [r7, #20]
  if (q == NULL) {
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d059      	beq.n	8015a26 <icmp_send_response+0xf2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	895b      	ldrh	r3, [r3, #10]
 8015976:	461a      	mov	r2, r3
 8015978:	8b7b      	ldrh	r3, [r7, #26]
 801597a:	3308      	adds	r3, #8
 801597c:	429a      	cmp	r2, r3
 801597e:	d206      	bcs.n	801598e <icmp_send_response+0x5a>
 8015980:	4b2b      	ldr	r3, [pc, #172]	@ (8015a30 <icmp_send_response+0xfc>)
 8015982:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8015986:	492b      	ldr	r1, [pc, #172]	@ (8015a34 <icmp_send_response+0x100>)
 8015988:	482b      	ldr	r0, [pc, #172]	@ (8015a38 <icmp_send_response+0x104>)
 801598a:	f7eb f983 	bl	8000c94 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	685b      	ldr	r3, [r3, #4]
 8015992:	613b      	str	r3, [r7, #16]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	78fa      	ldrb	r2, [r7, #3]
 801599e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	78ba      	ldrb	r2, [r7, #2]
 80159a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2200      	movs	r2, #0
 80159aa:	711a      	strb	r2, [r3, #4]
 80159ac:	2200      	movs	r2, #0
 80159ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	719a      	strb	r2, [r3, #6]
 80159b6:	2200      	movs	r2, #0
 80159b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	f103 0008 	add.w	r0, r3, #8
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	685b      	ldr	r3, [r3, #4]
 80159c6:	8b7a      	ldrh	r2, [r7, #26]
 80159c8:	4619      	mov	r1, r3
 80159ca:	f001 fe92 	bl	80176f2 <memcpy>
          response_pkt_len);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80159d4:	f107 0308 	add.w	r3, r7, #8
 80159d8:	4618      	mov	r0, r3
 80159da:	f000 f82f 	bl	8015a3c <ip4_route>
 80159de:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d01b      	beq.n	8015a1e <icmp_send_response+0xea>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2200      	movs	r2, #0
 80159ea:	709a      	strb	r2, [r3, #2]
 80159ec:	2200      	movs	r2, #0
 80159ee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	895b      	ldrh	r3, [r3, #10]
 80159f4:	4619      	mov	r1, r3
 80159f6:	68f8      	ldr	r0, [r7, #12]
 80159f8:	f7f5 f814 	bl	800aa24 <inet_chksum>
 80159fc:	4603      	mov	r3, r0
 80159fe:	461a      	mov	r2, r3
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015a04:	f107 0208 	add.w	r2, r7, #8
 8015a08:	69fb      	ldr	r3, [r7, #28]
 8015a0a:	9302      	str	r3, [sp, #8]
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	9301      	str	r3, [sp, #4]
 8015a10:	2300      	movs	r3, #0
 8015a12:	9300      	str	r3, [sp, #0]
 8015a14:	23ff      	movs	r3, #255	@ 0xff
 8015a16:	2100      	movs	r1, #0
 8015a18:	6978      	ldr	r0, [r7, #20]
 8015a1a:	f000 f9f7 	bl	8015e0c <ip4_output_if>
  }
  pbuf_free(q);
 8015a1e:	6978      	ldr	r0, [r7, #20]
 8015a20:	f7f6 fafc 	bl	800c01c <pbuf_free>
 8015a24:	e000      	b.n	8015a28 <icmp_send_response+0xf4>
    return;
 8015a26:	bf00      	nop
}
 8015a28:	3720      	adds	r7, #32
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	0801b7a8 	.word	0x0801b7a8
 8015a34:	0801b870 	.word	0x0801b870
 8015a38:	0801b814 	.word	0x0801b814

08015a3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015a44:	4b33      	ldr	r3, [pc, #204]	@ (8015b14 <ip4_route+0xd8>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60fb      	str	r3, [r7, #12]
 8015a4a:	e036      	b.n	8015aba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015a52:	f003 0301 	and.w	r3, r3, #1
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d02b      	beq.n	8015ab4 <ip4_route+0x78>
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015a62:	089b      	lsrs	r3, r3, #2
 8015a64:	f003 0301 	and.w	r3, r3, #1
 8015a68:	b2db      	uxtb	r3, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d022      	beq.n	8015ab4 <ip4_route+0x78>
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	3304      	adds	r3, #4
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d01d      	beq.n	8015ab4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	3304      	adds	r3, #4
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	405a      	eors	r2, r3
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	3308      	adds	r3, #8
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d101      	bne.n	8015a94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	e038      	b.n	8015b06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015a9a:	f003 0302 	and.w	r3, r3, #2
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d108      	bne.n	8015ab4 <ip4_route+0x78>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	330c      	adds	r3, #12
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d101      	bne.n	8015ab4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	e028      	b.n	8015b06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1c5      	bne.n	8015a4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ac0:	4b15      	ldr	r3, [pc, #84]	@ (8015b18 <ip4_route+0xdc>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d01a      	beq.n	8015afe <ip4_route+0xc2>
 8015ac8:	4b13      	ldr	r3, [pc, #76]	@ (8015b18 <ip4_route+0xdc>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015ad0:	f003 0301 	and.w	r3, r3, #1
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d012      	beq.n	8015afe <ip4_route+0xc2>
 8015ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8015b18 <ip4_route+0xdc>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015ae0:	f003 0304 	and.w	r3, r3, #4
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00a      	beq.n	8015afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8015b18 <ip4_route+0xdc>)
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	3304      	adds	r3, #4
 8015aee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d004      	beq.n	8015afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	b2db      	uxtb	r3, r3
 8015afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8015afc:	d101      	bne.n	8015b02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	e001      	b.n	8015b06 <ip4_route+0xca>
  }

  return netif_default;
 8015b02:	4b05      	ldr	r3, [pc, #20]	@ (8015b18 <ip4_route+0xdc>)
 8015b04:	681b      	ldr	r3, [r3, #0]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3714      	adds	r7, #20
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop
 8015b14:	2000d8ec 	.word	0x2000d8ec
 8015b18:	2000d8f0 	.word	0x2000d8f0

08015b1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015b2a:	f003 0301 	and.w	r3, r3, #1
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d016      	beq.n	8015b62 <ip4_input_accept+0x46>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	3304      	adds	r3, #4
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d011      	beq.n	8015b62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015b6c <ip4_input_accept+0x50>)
 8015b40:	695a      	ldr	r2, [r3, #20]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	3304      	adds	r3, #4
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d008      	beq.n	8015b5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015b4c:	4b07      	ldr	r3, [pc, #28]	@ (8015b6c <ip4_input_accept+0x50>)
 8015b4e:	695b      	ldr	r3, [r3, #20]
 8015b50:	6879      	ldr	r1, [r7, #4]
 8015b52:	4618      	mov	r0, r3
 8015b54:	f000 fa98 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015b58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d001      	beq.n	8015b62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015b5e:	2301      	movs	r3, #1
 8015b60:	e000      	b.n	8015b64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015b62:	2300      	movs	r3, #0
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	200054ec 	.word	0x200054ec

08015b70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b088      	sub	sp, #32
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	091b      	lsrs	r3, r3, #4
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	2b04      	cmp	r3, #4
 8015b8e:	d004      	beq.n	8015b9a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7f6 fa43 	bl	800c01c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	e130      	b.n	8015dfc <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	f003 030f 	and.w	r3, r3, #15
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	885b      	ldrh	r3, [r3, #2]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f4 fdef 	bl	800a794 <lwip_htons>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	891b      	ldrh	r3, [r3, #8]
 8015bbe:	89ba      	ldrh	r2, [r7, #12]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d204      	bcs.n	8015bce <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015bc4:	89bb      	ldrh	r3, [r7, #12]
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7f6 f8a5 	bl	800bd18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	895b      	ldrh	r3, [r3, #10]
 8015bd2:	89fa      	ldrh	r2, [r7, #14]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d807      	bhi.n	8015be8 <ip4_input+0x78>
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	891b      	ldrh	r3, [r3, #8]
 8015bdc:	89ba      	ldrh	r2, [r7, #12]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d802      	bhi.n	8015be8 <ip4_input+0x78>
 8015be2:	89fb      	ldrh	r3, [r7, #14]
 8015be4:	2b13      	cmp	r3, #19
 8015be6:	d804      	bhi.n	8015bf2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7f6 fa17 	bl	800c01c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	e104      	b.n	8015dfc <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8015bf2:	89fb      	ldrh	r3, [r7, #14]
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6938      	ldr	r0, [r7, #16]
 8015bf8:	f7f4 ff14 	bl	800aa24 <inet_chksum>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d004      	beq.n	8015c0c <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f7f6 fa0a 	bl	800c01c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	e0f7      	b.n	8015dfc <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	691b      	ldr	r3, [r3, #16]
 8015c10:	4a7c      	ldr	r2, [pc, #496]	@ (8015e04 <ip4_input+0x294>)
 8015c12:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	68db      	ldr	r3, [r3, #12]
 8015c18:	4a7a      	ldr	r2, [pc, #488]	@ (8015e04 <ip4_input+0x294>)
 8015c1a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c1c:	4b79      	ldr	r3, [pc, #484]	@ (8015e04 <ip4_input+0x294>)
 8015c1e:	695b      	ldr	r3, [r3, #20]
 8015c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015c24:	2be0      	cmp	r3, #224	@ 0xe0
 8015c26:	d112      	bne.n	8015c4e <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015c2e:	f003 0301 	and.w	r3, r3, #1
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d007      	beq.n	8015c48 <ip4_input+0xd8>
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d002      	beq.n	8015c48 <ip4_input+0xd8>
      netif = inp;
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	61fb      	str	r3, [r7, #28]
 8015c46:	e02a      	b.n	8015c9e <ip4_input+0x12e>
    } else {
      netif = NULL;
 8015c48:	2300      	movs	r3, #0
 8015c4a:	61fb      	str	r3, [r7, #28]
 8015c4c:	e027      	b.n	8015c9e <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015c4e:	6838      	ldr	r0, [r7, #0]
 8015c50:	f7ff ff64 	bl	8015b1c <ip4_input_accept>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d002      	beq.n	8015c60 <ip4_input+0xf0>
      netif = inp;
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	61fb      	str	r3, [r7, #28]
 8015c5e:	e01e      	b.n	8015c9e <ip4_input+0x12e>
    } else {
      netif = NULL;
 8015c60:	2300      	movs	r3, #0
 8015c62:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015c64:	4b67      	ldr	r3, [pc, #412]	@ (8015e04 <ip4_input+0x294>)
 8015c66:	695b      	ldr	r3, [r3, #20]
 8015c68:	b2db      	uxtb	r3, r3
 8015c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015c6c:	d017      	beq.n	8015c9e <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015c6e:	4b66      	ldr	r3, [pc, #408]	@ (8015e08 <ip4_input+0x298>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	61fb      	str	r3, [r7, #28]
 8015c74:	e00e      	b.n	8015c94 <ip4_input+0x124>
          if (netif == inp) {
 8015c76:	69fa      	ldr	r2, [r7, #28]
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d006      	beq.n	8015c8c <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015c7e:	69f8      	ldr	r0, [r7, #28]
 8015c80:	f7ff ff4c 	bl	8015b1c <ip4_input_accept>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d108      	bne.n	8015c9c <ip4_input+0x12c>
 8015c8a:	e000      	b.n	8015c8e <ip4_input+0x11e>
            continue;
 8015c8c:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	61fb      	str	r3, [r7, #28]
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d1ed      	bne.n	8015c76 <ip4_input+0x106>
 8015c9a:	e000      	b.n	8015c9e <ip4_input+0x12e>
            break;
 8015c9c:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d111      	bne.n	8015cc8 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	7a5b      	ldrb	r3, [r3, #9]
 8015ca8:	2b11      	cmp	r3, #17
 8015caa:	d10d      	bne.n	8015cc8 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015cac:	89fb      	ldrh	r3, [r7, #14]
 8015cae:	693a      	ldr	r2, [r7, #16]
 8015cb0:	4413      	add	r3, r2
 8015cb2:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015cb4:	69bb      	ldr	r3, [r7, #24]
 8015cb6:	885b      	ldrh	r3, [r3, #2]
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8015cbe:	d103      	bne.n	8015cc8 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d017      	beq.n	8015cfe <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015cce:	4b4d      	ldr	r3, [pc, #308]	@ (8015e04 <ip4_input+0x294>)
 8015cd0:	691b      	ldr	r3, [r3, #16]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d013      	beq.n	8015cfe <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8015e04 <ip4_input+0x294>)
 8015cd8:	691b      	ldr	r3, [r3, #16]
 8015cda:	6839      	ldr	r1, [r7, #0]
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f000 f9d3 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d105      	bne.n	8015cf4 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015ce8:	4b46      	ldr	r3, [pc, #280]	@ (8015e04 <ip4_input+0x294>)
 8015cea:	691b      	ldr	r3, [r3, #16]
 8015cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015cf0:	2be0      	cmp	r3, #224	@ 0xe0
 8015cf2:	d104      	bne.n	8015cfe <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f7f6 f991 	bl	800c01c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	e07e      	b.n	8015dfc <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015cfe:	69fb      	ldr	r3, [r7, #28]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d104      	bne.n	8015d0e <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7f6 f989 	bl	800c01c <pbuf_free>
    return ERR_OK;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	e076      	b.n	8015dfc <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015d0e:	693b      	ldr	r3, [r7, #16]
 8015d10:	88db      	ldrh	r3, [r3, #6]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	461a      	mov	r2, r3
 8015d16:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015d1a:	4013      	ands	r3, r2
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00b      	beq.n	8015d38 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f000 fcf7 	bl	8016714 <ip4_reass>
 8015d26:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d101      	bne.n	8015d32 <ip4_input+0x1c2>
      return ERR_OK;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	e064      	b.n	8015dfc <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015d38:	4a32      	ldr	r2, [pc, #200]	@ (8015e04 <ip4_input+0x294>)
 8015d3a:	69fb      	ldr	r3, [r7, #28]
 8015d3c:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015d3e:	4a31      	ldr	r2, [pc, #196]	@ (8015e04 <ip4_input+0x294>)
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015d44:	4a2f      	ldr	r2, [pc, #188]	@ (8015e04 <ip4_input+0x294>)
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	f003 030f 	and.w	r3, r3, #15
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	009b      	lsls	r3, r3, #2
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	461a      	mov	r2, r3
 8015d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8015e04 <ip4_input+0x294>)
 8015d5c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015d5e:	89fb      	ldrh	r3, [r7, #14]
 8015d60:	4619      	mov	r1, r3
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f7f6 f8d8 	bl	800bf18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	7a5b      	ldrb	r3, [r3, #9]
 8015d6c:	2b11      	cmp	r3, #17
 8015d6e:	d006      	beq.n	8015d7e <ip4_input+0x20e>
 8015d70:	2b11      	cmp	r3, #17
 8015d72:	dc13      	bgt.n	8015d9c <ip4_input+0x22c>
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d00c      	beq.n	8015d92 <ip4_input+0x222>
 8015d78:	2b06      	cmp	r3, #6
 8015d7a:	d005      	beq.n	8015d88 <ip4_input+0x218>
 8015d7c:	e00e      	b.n	8015d9c <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015d7e:	6839      	ldr	r1, [r7, #0]
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7fc faad 	bl	80122e0 <udp_input>
        break;
 8015d86:	e026      	b.n	8015dd6 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7f8 f97e 	bl	800e08c <tcp_input>
        break;
 8015d90:	e021      	b.n	8015dd6 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015d92:	6839      	ldr	r1, [r7, #0]
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f7ff fc7f 	bl	8015698 <icmp_input>
        break;
 8015d9a:	e01c      	b.n	8015dd6 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d9c:	4b19      	ldr	r3, [pc, #100]	@ (8015e04 <ip4_input+0x294>)
 8015d9e:	695b      	ldr	r3, [r3, #20]
 8015da0:	69f9      	ldr	r1, [r7, #28]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f000 f970 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d10f      	bne.n	8015dce <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015dae:	4b15      	ldr	r3, [pc, #84]	@ (8015e04 <ip4_input+0x294>)
 8015db0:	695b      	ldr	r3, [r3, #20]
 8015db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015db6:	2be0      	cmp	r3, #224	@ 0xe0
 8015db8:	d009      	beq.n	8015dce <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f7f6 f918 	bl	800bff6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015dc6:	2102      	movs	r1, #2
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f7ff fd93 	bl	80158f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7f6 f924 	bl	800c01c <pbuf_free>
        break;
 8015dd4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8015e04 <ip4_input+0x294>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015ddc:	4b09      	ldr	r3, [pc, #36]	@ (8015e04 <ip4_input+0x294>)
 8015dde:	2200      	movs	r2, #0
 8015de0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015de2:	4b08      	ldr	r3, [pc, #32]	@ (8015e04 <ip4_input+0x294>)
 8015de4:	2200      	movs	r2, #0
 8015de6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015de8:	4b06      	ldr	r3, [pc, #24]	@ (8015e04 <ip4_input+0x294>)
 8015dea:	2200      	movs	r2, #0
 8015dec:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015dee:	4b05      	ldr	r3, [pc, #20]	@ (8015e04 <ip4_input+0x294>)
 8015df0:	2200      	movs	r2, #0
 8015df2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015df4:	4b03      	ldr	r3, [pc, #12]	@ (8015e04 <ip4_input+0x294>)
 8015df6:	2200      	movs	r2, #0
 8015df8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015dfa:	2300      	movs	r3, #0
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3720      	adds	r7, #32
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}
 8015e04:	200054ec 	.word	0x200054ec
 8015e08:	2000d8ec 	.word	0x2000d8ec

08015e0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b08a      	sub	sp, #40	@ 0x28
 8015e10:	af04      	add	r7, sp, #16
 8015e12:	60f8      	str	r0, [r7, #12]
 8015e14:	60b9      	str	r1, [r7, #8]
 8015e16:	607a      	str	r2, [r7, #4]
 8015e18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d009      	beq.n	8015e38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d003      	beq.n	8015e32 <ip4_output_if+0x26>
 8015e2a:	68bb      	ldr	r3, [r7, #8]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d102      	bne.n	8015e38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e34:	3304      	adds	r3, #4
 8015e36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015e38:	78fa      	ldrb	r2, [r7, #3]
 8015e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e3c:	9302      	str	r3, [sp, #8]
 8015e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015e42:	9301      	str	r3, [sp, #4]
 8015e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	687a      	ldr	r2, [r7, #4]
 8015e4e:	6979      	ldr	r1, [r7, #20]
 8015e50:	68f8      	ldr	r0, [r7, #12]
 8015e52:	f000 f805 	bl	8015e60 <ip4_output_if_src>
 8015e56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3718      	adds	r7, #24
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd80      	pop	{r7, pc}

08015e60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b088      	sub	sp, #32
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
 8015e6c:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	7b9b      	ldrb	r3, [r3, #14]
 8015e76:	2b01      	cmp	r3, #1
 8015e78:	d006      	beq.n	8015e88 <ip4_output_if_src+0x28>
 8015e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8016070 <ip4_output_if_src+0x210>)
 8015e7c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015e80:	497c      	ldr	r1, [pc, #496]	@ (8016074 <ip4_output_if_src+0x214>)
 8015e82:	487d      	ldr	r0, [pc, #500]	@ (8016078 <ip4_output_if_src+0x218>)
 8015e84:	f7ea ff06 	bl	8000c94 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	f000 80c4 	beq.w	8016018 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8015e90:	2314      	movs	r3, #20
 8015e92:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015e94:	2114      	movs	r1, #20
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7f6 f82e 	bl	800bef8 <pbuf_add_header>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d002      	beq.n	8015ea8 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ea2:	f06f 0301 	mvn.w	r3, #1
 8015ea6:	e0df      	b.n	8016068 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	685b      	ldr	r3, [r3, #4]
 8015eac:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	895b      	ldrh	r3, [r3, #10]
 8015eb2:	2b13      	cmp	r3, #19
 8015eb4:	d806      	bhi.n	8015ec4 <ip4_output_if_src+0x64>
 8015eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8016070 <ip4_output_if_src+0x210>)
 8015eb8:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015ebc:	496f      	ldr	r1, [pc, #444]	@ (801607c <ip4_output_if_src+0x21c>)
 8015ebe:	486e      	ldr	r0, [pc, #440]	@ (8016078 <ip4_output_if_src+0x218>)
 8015ec0:	f7ea fee8 	bl	8000c94 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015ec4:	69bb      	ldr	r3, [r7, #24]
 8015ec6:	78fa      	ldrb	r2, [r7, #3]
 8015ec8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015ed0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8015ed2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015ed6:	78fb      	ldrb	r3, [r7, #3]
 8015ed8:	021b      	lsls	r3, r3, #8
 8015eda:	4313      	orrs	r3, r2
 8015edc:	021b      	lsls	r3, r3, #8
 8015ede:	b21a      	sxth	r2, r3
 8015ee0:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8015ee4:	78fb      	ldrb	r3, [r7, #3]
 8015ee6:	021b      	lsls	r3, r3, #8
 8015ee8:	430b      	orrs	r3, r1
 8015eea:	121b      	asrs	r3, r3, #8
 8015eec:	b21b      	sxth	r3, r3
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	b21b      	sxth	r3, r3
 8015ef2:	4313      	orrs	r3, r2
 8015ef4:	b21b      	sxth	r3, r3
 8015ef6:	b29b      	uxth	r3, r3
 8015ef8:	461a      	mov	r2, r3
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	4413      	add	r3, r2
 8015efe:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	69bb      	ldr	r3, [r7, #24]
 8015f06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	691b      	ldr	r3, [r3, #16]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	69fa      	ldr	r2, [r7, #28]
 8015f10:	4413      	add	r3, r2
 8015f12:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8015f14:	69bb      	ldr	r3, [r7, #24]
 8015f16:	691b      	ldr	r3, [r3, #16]
 8015f18:	0c1b      	lsrs	r3, r3, #16
 8015f1a:	69fa      	ldr	r2, [r7, #28]
 8015f1c:	4413      	add	r3, r2
 8015f1e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015f20:	8afb      	ldrh	r3, [r7, #22]
 8015f22:	089b      	lsrs	r3, r3, #2
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	69bb      	ldr	r3, [r7, #24]
 8015f30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015f32:	69bb      	ldr	r3, [r7, #24]
 8015f34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015f38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8015f3a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015f3e:	69bb      	ldr	r3, [r7, #24]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	021b      	lsls	r3, r3, #8
 8015f44:	4313      	orrs	r3, r2
 8015f46:	021b      	lsls	r3, r3, #8
 8015f48:	b21a      	sxth	r2, r3
 8015f4a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	021b      	lsls	r3, r3, #8
 8015f54:	430b      	orrs	r3, r1
 8015f56:	121b      	asrs	r3, r3, #8
 8015f58:	b21b      	sxth	r3, r3
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	b21b      	sxth	r3, r3
 8015f5e:	4313      	orrs	r3, r2
 8015f60:	b21b      	sxth	r3, r3
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	461a      	mov	r2, r3
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	4413      	add	r3, r2
 8015f6a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	891b      	ldrh	r3, [r3, #8]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f7f4 fc0f 	bl	800a794 <lwip_htons>
 8015f76:	4603      	mov	r3, r0
 8015f78:	461a      	mov	r2, r3
 8015f7a:	69bb      	ldr	r3, [r7, #24]
 8015f7c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	885b      	ldrh	r3, [r3, #2]
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	461a      	mov	r2, r3
 8015f86:	69fb      	ldr	r3, [r7, #28]
 8015f88:	4413      	add	r3, r2
 8015f8a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	719a      	strb	r2, [r3, #6]
 8015f92:	2200      	movs	r2, #0
 8015f94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015f96:	4b3a      	ldr	r3, [pc, #232]	@ (8016080 <ip4_output_if_src+0x220>)
 8015f98:	881b      	ldrh	r3, [r3, #0]
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7f4 fbfa 	bl	800a794 <lwip_htons>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	889b      	ldrh	r3, [r3, #4]
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	461a      	mov	r2, r3
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015fb6:	4b32      	ldr	r3, [pc, #200]	@ (8016080 <ip4_output_if_src+0x220>)
 8015fb8:	881b      	ldrh	r3, [r3, #0]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	b29a      	uxth	r2, r3
 8015fbe:	4b30      	ldr	r3, [pc, #192]	@ (8016080 <ip4_output_if_src+0x220>)
 8015fc0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d104      	bne.n	8015fd2 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8016084 <ip4_output_if_src+0x224>)
 8015fca:	681a      	ldr	r2, [r3, #0]
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	60da      	str	r2, [r3, #12]
 8015fd0:	e003      	b.n	8015fda <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	69bb      	ldr	r3, [r7, #24]
 8015fd8:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	68db      	ldr	r3, [r3, #12]
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	69fa      	ldr	r2, [r7, #28]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	68db      	ldr	r3, [r3, #12]
 8015fea:	0c1b      	lsrs	r3, r3, #16
 8015fec:	69fa      	ldr	r2, [r7, #28]
 8015fee:	4413      	add	r3, r2
 8015ff0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8015ff2:	69fb      	ldr	r3, [r7, #28]
 8015ff4:	0c1a      	lsrs	r2, r3, #16
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	4413      	add	r3, r2
 8015ffc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	0c1b      	lsrs	r3, r3, #16
 8016002:	69fa      	ldr	r2, [r7, #28]
 8016004:	4413      	add	r3, r2
 8016006:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8016008:	69fb      	ldr	r3, [r7, #28]
 801600a:	43db      	mvns	r3, r3
 801600c:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	b29a      	uxth	r2, r3
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	815a      	strh	r2, [r3, #10]
 8016016:	e00f      	b.n	8016038 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	895b      	ldrh	r3, [r3, #10]
 801601c:	2b13      	cmp	r3, #19
 801601e:	d802      	bhi.n	8016026 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016020:	f06f 0301 	mvn.w	r3, #1
 8016024:	e020      	b.n	8016068 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801602c:	69bb      	ldr	r3, [r7, #24]
 801602e:	691b      	ldr	r3, [r3, #16]
 8016030:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8016032:	f107 0310 	add.w	r3, r7, #16
 8016036:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801603c:	2b00      	cmp	r3, #0
 801603e:	d00c      	beq.n	801605a <ip4_output_if_src+0x1fa>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	891a      	ldrh	r2, [r3, #8]
 8016044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016046:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016048:	429a      	cmp	r2, r3
 801604a:	d906      	bls.n	801605a <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f000 fd5b 	bl	8016b0c <ip4_frag>
 8016056:	4603      	mov	r3, r0
 8016058:	e006      	b.n	8016068 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801605c:	695b      	ldr	r3, [r3, #20]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016064:	4798      	blx	r3
 8016066:	4603      	mov	r3, r0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3720      	adds	r7, #32
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	0801b89c 	.word	0x0801b89c
 8016074:	0801b8cc 	.word	0x0801b8cc
 8016078:	0801b8d8 	.word	0x0801b8d8
 801607c:	0801b900 	.word	0x0801b900
 8016080:	20004bee 	.word	0x20004bee
 8016084:	0801bd9c 	.word	0x0801bd9c

08016088 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016088:	b480      	push	{r7}
 801608a:	b085      	sub	sp, #20
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801609c:	d002      	beq.n	80160a4 <ip4_addr_isbroadcast_u32+0x1c>
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d101      	bne.n	80160a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80160a4:	2301      	movs	r3, #1
 80160a6:	e02a      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80160ae:	f003 0302 	and.w	r3, r3, #2
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d101      	bne.n	80160ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	e021      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	3304      	adds	r3, #4
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d101      	bne.n	80160ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	e019      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80160ca:	68fa      	ldr	r2, [r7, #12]
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	3304      	adds	r3, #4
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	405a      	eors	r2, r3
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	3308      	adds	r3, #8
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	4013      	ands	r3, r2
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10d      	bne.n	80160fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	3308      	adds	r3, #8
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	43da      	mvns	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	3308      	adds	r3, #8
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d101      	bne.n	80160fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80160f8:	2301      	movs	r3, #1
 80160fa:	e000      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80160fc:	2300      	movs	r3, #0
  }
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3714      	adds	r7, #20
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
	...

0801610c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016112:	2300      	movs	r3, #0
 8016114:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016116:	4b12      	ldr	r3, [pc, #72]	@ (8016160 <ip_reass_tmr+0x54>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801611c:	e018      	b.n	8016150 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	7fdb      	ldrb	r3, [r3, #31]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00b      	beq.n	801613e <ip_reass_tmr+0x32>
      r->timer--;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	7fdb      	ldrb	r3, [r3, #31]
 801612a:	3b01      	subs	r3, #1
 801612c:	b2da      	uxtb	r2, r3
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	e008      	b.n	8016150 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016148:	68b9      	ldr	r1, [r7, #8]
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f80a 	bl	8016164 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1e3      	bne.n	801611e <ip_reass_tmr+0x12>
    }
  }
}
 8016156:	bf00      	nop
 8016158:	bf00      	nop
 801615a:	3710      	adds	r7, #16
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	20004bf0 	.word	0x20004bf0

08016164 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801616e:	2300      	movs	r3, #0
 8016170:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016172:	683a      	ldr	r2, [r7, #0]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	429a      	cmp	r2, r3
 8016178:	d105      	bne.n	8016186 <ip_reass_free_complete_datagram+0x22>
 801617a:	4b45      	ldr	r3, [pc, #276]	@ (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801617c:	22ab      	movs	r2, #171	@ 0xab
 801617e:	4945      	ldr	r1, [pc, #276]	@ (8016294 <ip_reass_free_complete_datagram+0x130>)
 8016180:	4845      	ldr	r0, [pc, #276]	@ (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016182:	f7ea fd87 	bl	8000c94 <printf>
  if (prev != NULL) {
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d00a      	beq.n	80161a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	687a      	ldr	r2, [r7, #4]
 8016192:	429a      	cmp	r2, r3
 8016194:	d005      	beq.n	80161a2 <ip_reass_free_complete_datagram+0x3e>
 8016196:	4b3e      	ldr	r3, [pc, #248]	@ (8016290 <ip_reass_free_complete_datagram+0x12c>)
 8016198:	22ad      	movs	r2, #173	@ 0xad
 801619a:	4940      	ldr	r1, [pc, #256]	@ (801629c <ip_reass_free_complete_datagram+0x138>)
 801619c:	483e      	ldr	r0, [pc, #248]	@ (8016298 <ip_reass_free_complete_datagram+0x134>)
 801619e:	f7ea fd79 	bl	8000c94 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	889b      	ldrh	r3, [r3, #4]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d12a      	bne.n	801620a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	6858      	ldr	r0, [r3, #4]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	3308      	adds	r3, #8
 80161ca:	2214      	movs	r2, #20
 80161cc:	4619      	mov	r1, r3
 80161ce:	f001 fa90 	bl	80176f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80161d2:	2101      	movs	r1, #1
 80161d4:	69b8      	ldr	r0, [r7, #24]
 80161d6:	f7ff fb9d 	bl	8015914 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80161da:	69b8      	ldr	r0, [r7, #24]
 80161dc:	f7f5 ffa6 	bl	800c12c <pbuf_clen>
 80161e0:	4603      	mov	r3, r0
 80161e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80161e4:	8bfa      	ldrh	r2, [r7, #30]
 80161e6:	8a7b      	ldrh	r3, [r7, #18]
 80161e8:	4413      	add	r3, r2
 80161ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161ee:	db05      	blt.n	80161fc <ip_reass_free_complete_datagram+0x98>
 80161f0:	4b27      	ldr	r3, [pc, #156]	@ (8016290 <ip_reass_free_complete_datagram+0x12c>)
 80161f2:	22bc      	movs	r2, #188	@ 0xbc
 80161f4:	492a      	ldr	r1, [pc, #168]	@ (80162a0 <ip_reass_free_complete_datagram+0x13c>)
 80161f6:	4828      	ldr	r0, [pc, #160]	@ (8016298 <ip_reass_free_complete_datagram+0x134>)
 80161f8:	f7ea fd4c 	bl	8000c94 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80161fc:	8bfa      	ldrh	r2, [r7, #30]
 80161fe:	8a7b      	ldrh	r3, [r7, #18]
 8016200:	4413      	add	r3, r2
 8016202:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016204:	69b8      	ldr	r0, [r7, #24]
 8016206:	f7f5 ff09 	bl	800c01c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016210:	e01f      	b.n	8016252 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016218:	69bb      	ldr	r3, [r7, #24]
 801621a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7f5 ff82 	bl	800c12c <pbuf_clen>
 8016228:	4603      	mov	r3, r0
 801622a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801622c:	8bfa      	ldrh	r2, [r7, #30]
 801622e:	8a7b      	ldrh	r3, [r7, #18]
 8016230:	4413      	add	r3, r2
 8016232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016236:	db05      	blt.n	8016244 <ip_reass_free_complete_datagram+0xe0>
 8016238:	4b15      	ldr	r3, [pc, #84]	@ (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801623a:	22cc      	movs	r2, #204	@ 0xcc
 801623c:	4918      	ldr	r1, [pc, #96]	@ (80162a0 <ip_reass_free_complete_datagram+0x13c>)
 801623e:	4816      	ldr	r0, [pc, #88]	@ (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016240:	f7ea fd28 	bl	8000c94 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016244:	8bfa      	ldrh	r2, [r7, #30]
 8016246:	8a7b      	ldrh	r3, [r7, #18]
 8016248:	4413      	add	r3, r2
 801624a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801624c:	68f8      	ldr	r0, [r7, #12]
 801624e:	f7f5 fee5 	bl	800c01c <pbuf_free>
  while (p != NULL) {
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d1dc      	bne.n	8016212 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f8c2 	bl	80163e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016260:	4b10      	ldr	r3, [pc, #64]	@ (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016262:	881b      	ldrh	r3, [r3, #0]
 8016264:	8bfa      	ldrh	r2, [r7, #30]
 8016266:	429a      	cmp	r2, r3
 8016268:	d905      	bls.n	8016276 <ip_reass_free_complete_datagram+0x112>
 801626a:	4b09      	ldr	r3, [pc, #36]	@ (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801626c:	22d2      	movs	r2, #210	@ 0xd2
 801626e:	490e      	ldr	r1, [pc, #56]	@ (80162a8 <ip_reass_free_complete_datagram+0x144>)
 8016270:	4809      	ldr	r0, [pc, #36]	@ (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016272:	f7ea fd0f 	bl	8000c94 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016276:	4b0b      	ldr	r3, [pc, #44]	@ (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016278:	881a      	ldrh	r2, [r3, #0]
 801627a:	8bfb      	ldrh	r3, [r7, #30]
 801627c:	1ad3      	subs	r3, r2, r3
 801627e:	b29a      	uxth	r2, r3
 8016280:	4b08      	ldr	r3, [pc, #32]	@ (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016282:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016284:	8bfb      	ldrh	r3, [r7, #30]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3720      	adds	r7, #32
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	0801b930 	.word	0x0801b930
 8016294:	0801b968 	.word	0x0801b968
 8016298:	0801b974 	.word	0x0801b974
 801629c:	0801b99c 	.word	0x0801b99c
 80162a0:	0801b9b0 	.word	0x0801b9b0
 80162a4:	20004bf4 	.word	0x20004bf4
 80162a8:	0801b9d0 	.word	0x0801b9d0

080162ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	@ 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80162b6:	2300      	movs	r3, #0
 80162b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80162ba:	2300      	movs	r3, #0
 80162bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80162be:	2300      	movs	r3, #0
 80162c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80162ca:	4b28      	ldr	r3, [pc, #160]	@ (801636c <ip_reass_remove_oldest_datagram+0xc0>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80162d0:	e030      	b.n	8016334 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80162d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162d4:	695a      	ldr	r2, [r3, #20]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d10c      	bne.n	80162f8 <ip_reass_remove_oldest_datagram+0x4c>
 80162de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e0:	699a      	ldr	r2, [r3, #24]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	691b      	ldr	r3, [r3, #16]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d106      	bne.n	80162f8 <ip_reass_remove_oldest_datagram+0x4c>
 80162ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ec:	899a      	ldrh	r2, [r3, #12]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	889b      	ldrh	r3, [r3, #4]
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d014      	beq.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	3301      	adds	r3, #1
 80162fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80162fe:	6a3b      	ldr	r3, [r7, #32]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d104      	bne.n	801630e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016306:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	61bb      	str	r3, [r7, #24]
 801630c:	e009      	b.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016310:	7fda      	ldrb	r2, [r3, #31]
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	7fdb      	ldrb	r3, [r3, #31]
 8016316:	429a      	cmp	r2, r3
 8016318:	d803      	bhi.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801631c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016336:	2b00      	cmp	r3, #0
 8016338:	d1cb      	bne.n	80162d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801633a:	6a3b      	ldr	r3, [r7, #32]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d008      	beq.n	8016352 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016340:	69b9      	ldr	r1, [r7, #24]
 8016342:	6a38      	ldr	r0, [r7, #32]
 8016344:	f7ff ff0e 	bl	8016164 <ip_reass_free_complete_datagram>
 8016348:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801634a:	697a      	ldr	r2, [r7, #20]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	4413      	add	r3, r2
 8016350:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016352:	697a      	ldr	r2, [r7, #20]
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	429a      	cmp	r2, r3
 8016358:	da02      	bge.n	8016360 <ip_reass_remove_oldest_datagram+0xb4>
 801635a:	693b      	ldr	r3, [r7, #16]
 801635c:	2b01      	cmp	r3, #1
 801635e:	dcac      	bgt.n	80162ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016360:	697b      	ldr	r3, [r7, #20]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3728      	adds	r7, #40	@ 0x28
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	20004bf0 	.word	0x20004bf0

08016370 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801637a:	2004      	movs	r0, #4
 801637c:	f7f5 f812 	bl	800b3a4 <memp_malloc>
 8016380:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d110      	bne.n	80163aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff ff8e 	bl	80162ac <ip_reass_remove_oldest_datagram>
 8016390:	4602      	mov	r2, r0
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	4293      	cmp	r3, r2
 8016396:	dc03      	bgt.n	80163a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016398:	2004      	movs	r0, #4
 801639a:	f7f5 f803 	bl	800b3a4 <memp_malloc>
 801639e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e016      	b.n	80163d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80163aa:	2220      	movs	r2, #32
 80163ac:	2100      	movs	r1, #0
 80163ae:	68f8      	ldr	r0, [r7, #12]
 80163b0:	f001 f8cd 	bl	801754e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	220f      	movs	r2, #15
 80163b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80163ba:	4b09      	ldr	r3, [pc, #36]	@ (80163e0 <ip_reass_enqueue_new_datagram+0x70>)
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80163c2:	4a07      	ldr	r2, [pc, #28]	@ (80163e0 <ip_reass_enqueue_new_datagram+0x70>)
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	3308      	adds	r3, #8
 80163cc:	2214      	movs	r2, #20
 80163ce:	6879      	ldr	r1, [r7, #4]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f001 f98e 	bl	80176f2 <memcpy>
  return ipr;
 80163d6:	68fb      	ldr	r3, [r7, #12]
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3710      	adds	r7, #16
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	20004bf0 	.word	0x20004bf0

080163e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80163ee:	4b10      	ldr	r3, [pc, #64]	@ (8016430 <ip_reass_dequeue_datagram+0x4c>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d104      	bne.n	8016402 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4a0c      	ldr	r2, [pc, #48]	@ (8016430 <ip_reass_dequeue_datagram+0x4c>)
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	e00d      	b.n	801641e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d106      	bne.n	8016416 <ip_reass_dequeue_datagram+0x32>
 8016408:	4b0a      	ldr	r3, [pc, #40]	@ (8016434 <ip_reass_dequeue_datagram+0x50>)
 801640a:	f240 1245 	movw	r2, #325	@ 0x145
 801640e:	490a      	ldr	r1, [pc, #40]	@ (8016438 <ip_reass_dequeue_datagram+0x54>)
 8016410:	480a      	ldr	r0, [pc, #40]	@ (801643c <ip_reass_dequeue_datagram+0x58>)
 8016412:	f7ea fc3f 	bl	8000c94 <printf>
    prev->next = ipr->next;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801641e:	6879      	ldr	r1, [r7, #4]
 8016420:	2004      	movs	r0, #4
 8016422:	f7f5 f803 	bl	800b42c <memp_free>
}
 8016426:	bf00      	nop
 8016428:	3708      	adds	r7, #8
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	20004bf0 	.word	0x20004bf0
 8016434:	0801b930 	.word	0x0801b930
 8016438:	0801b9f4 	.word	0x0801b9f4
 801643c:	0801b974 	.word	0x0801b974

08016440 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b08c      	sub	sp, #48	@ 0x30
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801644c:	2300      	movs	r3, #0
 801644e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016450:	2301      	movs	r3, #1
 8016452:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	685b      	ldr	r3, [r3, #4]
 8016458:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	885b      	ldrh	r3, [r3, #2]
 801645e:	b29b      	uxth	r3, r3
 8016460:	4618      	mov	r0, r3
 8016462:	f7f4 f997 	bl	800a794 <lwip_htons>
 8016466:	4603      	mov	r3, r0
 8016468:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	f003 030f 	and.w	r3, r3, #15
 8016472:	b2db      	uxtb	r3, r3
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016478:	7e7b      	ldrb	r3, [r7, #25]
 801647a:	b29b      	uxth	r3, r3
 801647c:	8b7a      	ldrh	r2, [r7, #26]
 801647e:	429a      	cmp	r2, r3
 8016480:	d202      	bcs.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016482:	f04f 33ff 	mov.w	r3, #4294967295
 8016486:	e135      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016488:	7e7b      	ldrb	r3, [r7, #25]
 801648a:	b29b      	uxth	r3, r3
 801648c:	8b7a      	ldrh	r2, [r7, #26]
 801648e:	1ad3      	subs	r3, r2, r3
 8016490:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	88db      	ldrh	r3, [r3, #6]
 8016496:	b29b      	uxth	r3, r3
 8016498:	4618      	mov	r0, r3
 801649a:	f7f4 f97b 	bl	800a794 <lwip_htons>
 801649e:	4603      	mov	r3, r0
 80164a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80164b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164b2:	2200      	movs	r2, #0
 80164b4:	701a      	strb	r2, [r3, #0]
 80164b6:	2200      	movs	r2, #0
 80164b8:	705a      	strb	r2, [r3, #1]
 80164ba:	2200      	movs	r2, #0
 80164bc:	709a      	strb	r2, [r3, #2]
 80164be:	2200      	movs	r2, #0
 80164c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80164c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164c4:	8afa      	ldrh	r2, [r7, #22]
 80164c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80164c8:	8afa      	ldrh	r2, [r7, #22]
 80164ca:	8b7b      	ldrh	r3, [r7, #26]
 80164cc:	4413      	add	r3, r2
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80164d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164d6:	88db      	ldrh	r3, [r3, #6]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	8afa      	ldrh	r2, [r7, #22]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d902      	bls.n	80164e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295
 80164e4:	e106      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80164ec:	e068      	b.n	80165c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80164ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80164f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164f6:	889b      	ldrh	r3, [r3, #4]
 80164f8:	b29a      	uxth	r2, r3
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	889b      	ldrh	r3, [r3, #4]
 80164fe:	b29b      	uxth	r3, r3
 8016500:	429a      	cmp	r2, r3
 8016502:	d235      	bcs.n	8016570 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016508:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801650c:	2b00      	cmp	r3, #0
 801650e:	d020      	beq.n	8016552 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016512:	889b      	ldrh	r3, [r3, #4]
 8016514:	b29a      	uxth	r2, r3
 8016516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016518:	88db      	ldrh	r3, [r3, #6]
 801651a:	b29b      	uxth	r3, r3
 801651c:	429a      	cmp	r2, r3
 801651e:	d307      	bcc.n	8016530 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016522:	88db      	ldrh	r3, [r3, #6]
 8016524:	b29a      	uxth	r2, r3
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	889b      	ldrh	r3, [r3, #4]
 801652a:	b29b      	uxth	r3, r3
 801652c:	429a      	cmp	r2, r3
 801652e:	d902      	bls.n	8016536 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016530:	f04f 33ff 	mov.w	r3, #4294967295
 8016534:	e0de      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016538:	68ba      	ldr	r2, [r7, #8]
 801653a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801653e:	88db      	ldrh	r3, [r3, #6]
 8016540:	b29a      	uxth	r2, r3
 8016542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016544:	889b      	ldrh	r3, [r3, #4]
 8016546:	b29b      	uxth	r3, r3
 8016548:	429a      	cmp	r2, r3
 801654a:	d03d      	beq.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801654c:	2300      	movs	r3, #0
 801654e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016550:	e03a      	b.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016554:	88db      	ldrh	r3, [r3, #6]
 8016556:	b29a      	uxth	r2, r3
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	889b      	ldrh	r3, [r3, #4]
 801655c:	b29b      	uxth	r3, r3
 801655e:	429a      	cmp	r2, r3
 8016560:	d902      	bls.n	8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016562:	f04f 33ff 	mov.w	r3, #4294967295
 8016566:	e0c5      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	68ba      	ldr	r2, [r7, #8]
 801656c:	605a      	str	r2, [r3, #4]
      break;
 801656e:	e02b      	b.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016572:	889b      	ldrh	r3, [r3, #4]
 8016574:	b29a      	uxth	r2, r3
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	889b      	ldrh	r3, [r3, #4]
 801657a:	b29b      	uxth	r3, r3
 801657c:	429a      	cmp	r2, r3
 801657e:	d102      	bne.n	8016586 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016580:	f04f 33ff 	mov.w	r3, #4294967295
 8016584:	e0b6      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016588:	889b      	ldrh	r3, [r3, #4]
 801658a:	b29a      	uxth	r2, r3
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	88db      	ldrh	r3, [r3, #6]
 8016590:	b29b      	uxth	r3, r3
 8016592:	429a      	cmp	r2, r3
 8016594:	d202      	bcs.n	801659c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016596:	f04f 33ff 	mov.w	r3, #4294967295
 801659a:	e0ab      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d009      	beq.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80165a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165a4:	88db      	ldrh	r3, [r3, #6]
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	889b      	ldrh	r3, [r3, #4]
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d001      	beq.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80165c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d193      	bne.n	80164ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80165c6:	e000      	b.n	80165ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80165c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80165ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d12d      	bne.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80165d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d01c      	beq.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80165d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d8:	88db      	ldrh	r3, [r3, #6]
 80165da:	b29a      	uxth	r2, r3
 80165dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165de:	889b      	ldrh	r3, [r3, #4]
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d906      	bls.n	80165f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80165e6:	4b45      	ldr	r3, [pc, #276]	@ (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165e8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80165ec:	4944      	ldr	r1, [pc, #272]	@ (8016700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80165ee:	4845      	ldr	r0, [pc, #276]	@ (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165f0:	f7ea fb50 	bl	8000c94 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80165f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f6:	68ba      	ldr	r2, [r7, #8]
 80165f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80165fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165fc:	88db      	ldrh	r3, [r3, #6]
 80165fe:	b29a      	uxth	r2, r3
 8016600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016602:	889b      	ldrh	r3, [r3, #4]
 8016604:	b29b      	uxth	r3, r3
 8016606:	429a      	cmp	r2, r3
 8016608:	d010      	beq.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801660a:	2300      	movs	r3, #0
 801660c:	623b      	str	r3, [r7, #32]
 801660e:	e00d      	b.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d006      	beq.n	8016626 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016618:	4b38      	ldr	r3, [pc, #224]	@ (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801661a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801661e:	493a      	ldr	r1, [pc, #232]	@ (8016708 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016620:	4838      	ldr	r0, [pc, #224]	@ (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016622:	f7ea fb37 	bl	8000c94 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	68ba      	ldr	r2, [r7, #8]
 801662a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d105      	bne.n	801663e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	7f9b      	ldrb	r3, [r3, #30]
 8016636:	f003 0301 	and.w	r3, r3, #1
 801663a:	2b00      	cmp	r3, #0
 801663c:	d059      	beq.n	80166f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801663e:	6a3b      	ldr	r3, [r7, #32]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d04f      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d006      	beq.n	801665a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	889b      	ldrh	r3, [r3, #4]
 8016654:	b29b      	uxth	r3, r3
 8016656:	2b00      	cmp	r3, #0
 8016658:	d002      	beq.n	8016660 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	623b      	str	r3, [r7, #32]
 801665e:	e041      	b.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016662:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801666a:	e012      	b.n	8016692 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016674:	88db      	ldrh	r3, [r3, #6]
 8016676:	b29a      	uxth	r2, r3
 8016678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801667a:	889b      	ldrh	r3, [r3, #4]
 801667c:	b29b      	uxth	r3, r3
 801667e:	429a      	cmp	r2, r3
 8016680:	d002      	beq.n	8016688 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016682:	2300      	movs	r3, #0
 8016684:	623b      	str	r3, [r7, #32]
            break;
 8016686:	e007      	b.n	8016698 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801668a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1e9      	bne.n	801666c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016698:	6a3b      	ldr	r3, [r7, #32]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d022      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d106      	bne.n	80166b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80166a6:	4b15      	ldr	r3, [pc, #84]	@ (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166a8:	f240 12df 	movw	r2, #479	@ 0x1df
 80166ac:	4917      	ldr	r1, [pc, #92]	@ (801670c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80166ae:	4815      	ldr	r0, [pc, #84]	@ (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166b0:	f7ea faf0 	bl	8000c94 <printf>
          LWIP_ASSERT("sanity check",
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166bc:	429a      	cmp	r2, r3
 80166be:	d106      	bne.n	80166ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80166c0:	4b0e      	ldr	r3, [pc, #56]	@ (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80166c6:	4911      	ldr	r1, [pc, #68]	@ (801670c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80166c8:	480e      	ldr	r0, [pc, #56]	@ (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166ca:	f7ea fae3 	bl	8000c94 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80166ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d006      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80166d6:	4b09      	ldr	r3, [pc, #36]	@ (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166d8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80166dc:	490c      	ldr	r1, [pc, #48]	@ (8016710 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80166de:	4809      	ldr	r0, [pc, #36]	@ (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166e0:	f7ea fad8 	bl	8000c94 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	bf14      	ite	ne
 80166ea:	2301      	movne	r3, #1
 80166ec:	2300      	moveq	r3, #0
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	e000      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80166f2:	2300      	movs	r3, #0
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3730      	adds	r7, #48	@ 0x30
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	0801b930 	.word	0x0801b930
 8016700:	0801ba10 	.word	0x0801ba10
 8016704:	0801b974 	.word	0x0801b974
 8016708:	0801ba30 	.word	0x0801ba30
 801670c:	0801ba68 	.word	0x0801ba68
 8016710:	0801ba78 	.word	0x0801ba78

08016714 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b08e      	sub	sp, #56	@ 0x38
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	f003 030f 	and.w	r3, r3, #15
 801672a:	b2db      	uxtb	r3, r3
 801672c:	009b      	lsls	r3, r3, #2
 801672e:	b2db      	uxtb	r3, r3
 8016730:	2b14      	cmp	r3, #20
 8016732:	f040 8179 	bne.w	8016a28 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016738:	88db      	ldrh	r3, [r3, #6]
 801673a:	b29b      	uxth	r3, r3
 801673c:	4618      	mov	r0, r3
 801673e:	f7f4 f829 	bl	800a794 <lwip_htons>
 8016742:	4603      	mov	r3, r0
 8016744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016748:	b29b      	uxth	r3, r3
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016750:	885b      	ldrh	r3, [r3, #2]
 8016752:	b29b      	uxth	r3, r3
 8016754:	4618      	mov	r0, r3
 8016756:	f7f4 f81d 	bl	800a794 <lwip_htons>
 801675a:	4603      	mov	r3, r0
 801675c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	f003 030f 	and.w	r3, r3, #15
 8016766:	b2db      	uxtb	r3, r3
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801676e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016772:	b29b      	uxth	r3, r3
 8016774:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016776:	429a      	cmp	r2, r3
 8016778:	f0c0 8158 	bcc.w	8016a2c <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801677c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016780:	b29b      	uxth	r3, r3
 8016782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016784:	1ad3      	subs	r3, r2, r3
 8016786:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7f5 fccf 	bl	800c12c <pbuf_clen>
 801678e:	4603      	mov	r3, r0
 8016790:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016792:	4b90      	ldr	r3, [pc, #576]	@ (80169d4 <ip4_reass+0x2c0>)
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	461a      	mov	r2, r3
 8016798:	8c3b      	ldrh	r3, [r7, #32]
 801679a:	4413      	add	r3, r2
 801679c:	2b0a      	cmp	r3, #10
 801679e:	dd10      	ble.n	80167c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80167a0:	8c3b      	ldrh	r3, [r7, #32]
 80167a2:	4619      	mov	r1, r3
 80167a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80167a6:	f7ff fd81 	bl	80162ac <ip_reass_remove_oldest_datagram>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f000 813f 	beq.w	8016a30 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80167b2:	4b88      	ldr	r3, [pc, #544]	@ (80169d4 <ip4_reass+0x2c0>)
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	461a      	mov	r2, r3
 80167b8:	8c3b      	ldrh	r3, [r7, #32]
 80167ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80167bc:	2b0a      	cmp	r3, #10
 80167be:	f300 8137 	bgt.w	8016a30 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167c2:	4b85      	ldr	r3, [pc, #532]	@ (80169d8 <ip4_reass+0x2c4>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80167c8:	e015      	b.n	80167f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80167ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167cc:	695a      	ldr	r2, [r3, #20]
 80167ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d10c      	bne.n	80167f0 <ip4_reass+0xdc>
 80167d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d8:	699a      	ldr	r2, [r3, #24]
 80167da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167dc:	691b      	ldr	r3, [r3, #16]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d106      	bne.n	80167f0 <ip4_reass+0xdc>
 80167e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e4:	899a      	ldrh	r2, [r3, #12]
 80167e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167e8:	889b      	ldrh	r3, [r3, #4]
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d006      	beq.n	80167fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80167f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d1e6      	bne.n	80167ca <ip4_reass+0xb6>
 80167fc:	e000      	b.n	8016800 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80167fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016802:	2b00      	cmp	r3, #0
 8016804:	d109      	bne.n	801681a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016806:	8c3b      	ldrh	r3, [r7, #32]
 8016808:	4619      	mov	r1, r3
 801680a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801680c:	f7ff fdb0 	bl	8016370 <ip_reass_enqueue_new_datagram>
 8016810:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016814:	2b00      	cmp	r3, #0
 8016816:	d11c      	bne.n	8016852 <ip4_reass+0x13e>
      goto nullreturn;
 8016818:	e10d      	b.n	8016a36 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	b29b      	uxth	r3, r3
 8016820:	4618      	mov	r0, r3
 8016822:	f7f3 ffb7 	bl	800a794 <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801682c:	2b00      	cmp	r3, #0
 801682e:	d110      	bne.n	8016852 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016832:	89db      	ldrh	r3, [r3, #14]
 8016834:	4618      	mov	r0, r3
 8016836:	f7f3 ffad 	bl	800a794 <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016840:	2b00      	cmp	r3, #0
 8016842:	d006      	beq.n	8016852 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016846:	3308      	adds	r3, #8
 8016848:	2214      	movs	r2, #20
 801684a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801684c:	4618      	mov	r0, r3
 801684e:	f000 ff50 	bl	80176f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016854:	88db      	ldrh	r3, [r3, #6]
 8016856:	b29b      	uxth	r3, r3
 8016858:	f003 0320 	and.w	r3, r3, #32
 801685c:	2b00      	cmp	r3, #0
 801685e:	bf0c      	ite	eq
 8016860:	2301      	moveq	r3, #1
 8016862:	2300      	movne	r3, #0
 8016864:	b2db      	uxtb	r3, r3
 8016866:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d00e      	beq.n	801688c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801686e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016872:	4413      	add	r3, r2
 8016874:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016876:	8b7a      	ldrh	r2, [r7, #26]
 8016878:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801687a:	429a      	cmp	r2, r3
 801687c:	f0c0 80a8 	bcc.w	80169d0 <ip4_reass+0x2bc>
 8016880:	8b7b      	ldrh	r3, [r7, #26]
 8016882:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016886:	4293      	cmp	r3, r2
 8016888:	f200 80a2 	bhi.w	80169d0 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801688c:	69fa      	ldr	r2, [r7, #28]
 801688e:	6879      	ldr	r1, [r7, #4]
 8016890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016892:	f7ff fdd5 	bl	8016440 <ip_reass_chain_frag_into_datagram_and_validate>
 8016896:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801689e:	f000 80a3 	beq.w	80169e8 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80168a2:	4b4c      	ldr	r3, [pc, #304]	@ (80169d4 <ip4_reass+0x2c0>)
 80168a4:	881a      	ldrh	r2, [r3, #0]
 80168a6:	8c3b      	ldrh	r3, [r7, #32]
 80168a8:	4413      	add	r3, r2
 80168aa:	b29a      	uxth	r2, r3
 80168ac:	4b49      	ldr	r3, [pc, #292]	@ (80169d4 <ip4_reass+0x2c0>)
 80168ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d00d      	beq.n	80168d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80168b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80168b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80168ba:	4413      	add	r3, r2
 80168bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80168be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168c0:	8a7a      	ldrh	r2, [r7, #18]
 80168c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80168c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168c6:	7f9b      	ldrb	r3, [r3, #30]
 80168c8:	f043 0301 	orr.w	r3, r3, #1
 80168cc:	b2da      	uxtb	r2, r3
 80168ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d179      	bne.n	80169cc <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80168d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168da:	8b9b      	ldrh	r3, [r3, #28]
 80168dc:	3314      	adds	r3, #20
 80168de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80168e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168e2:	685b      	ldr	r3, [r3, #4]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80168ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80168f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168f4:	3308      	adds	r3, #8
 80168f6:	2214      	movs	r2, #20
 80168f8:	4619      	mov	r1, r3
 80168fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80168fc:	f000 fef9 	bl	80176f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016900:	8a3b      	ldrh	r3, [r7, #16]
 8016902:	4618      	mov	r0, r3
 8016904:	f7f3 ff46 	bl	800a794 <lwip_htons>
 8016908:	4603      	mov	r3, r0
 801690a:	461a      	mov	r2, r3
 801690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801690e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016912:	2200      	movs	r2, #0
 8016914:	719a      	strb	r2, [r3, #6]
 8016916:	2200      	movs	r2, #0
 8016918:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801691c:	2200      	movs	r2, #0
 801691e:	729a      	strb	r2, [r3, #10]
 8016920:	2200      	movs	r2, #0
 8016922:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8016924:	2114      	movs	r1, #20
 8016926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016928:	f7f4 f87c 	bl	800aa24 <inet_chksum>
 801692c:	4603      	mov	r3, r0
 801692e:	461a      	mov	r2, r3
 8016930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016932:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801693a:	e00d      	b.n	8016958 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016942:	2114      	movs	r1, #20
 8016944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016946:	f7f5 fae7 	bl	800bf18 <pbuf_remove_header>
      pbuf_cat(p, r);
 801694a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7f5 fc27 	bl	800c1a0 <pbuf_cat>
      r = iprh->next_pbuf;
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8016958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801695a:	2b00      	cmp	r3, #0
 801695c:	d1ee      	bne.n	801693c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801695e:	4b1e      	ldr	r3, [pc, #120]	@ (80169d8 <ip4_reass+0x2c4>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016964:	429a      	cmp	r2, r3
 8016966:	d102      	bne.n	801696e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8016968:	2300      	movs	r3, #0
 801696a:	637b      	str	r3, [r7, #52]	@ 0x34
 801696c:	e010      	b.n	8016990 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801696e:	4b1a      	ldr	r3, [pc, #104]	@ (80169d8 <ip4_reass+0x2c4>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	637b      	str	r3, [r7, #52]	@ 0x34
 8016974:	e007      	b.n	8016986 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8016976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801697c:	429a      	cmp	r2, r3
 801697e:	d006      	beq.n	801698e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	637b      	str	r3, [r7, #52]	@ 0x34
 8016986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016988:	2b00      	cmp	r3, #0
 801698a:	d1f4      	bne.n	8016976 <ip4_reass+0x262>
 801698c:	e000      	b.n	8016990 <ip4_reass+0x27c>
          break;
 801698e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016990:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016994:	f7ff fd26 	bl	80163e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f7f5 fbc7 	bl	800c12c <pbuf_clen>
 801699e:	4603      	mov	r3, r0
 80169a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80169a2:	4b0c      	ldr	r3, [pc, #48]	@ (80169d4 <ip4_reass+0x2c0>)
 80169a4:	881b      	ldrh	r3, [r3, #0]
 80169a6:	8c3a      	ldrh	r2, [r7, #32]
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d906      	bls.n	80169ba <ip4_reass+0x2a6>
 80169ac:	4b0b      	ldr	r3, [pc, #44]	@ (80169dc <ip4_reass+0x2c8>)
 80169ae:	f240 229b 	movw	r2, #667	@ 0x29b
 80169b2:	490b      	ldr	r1, [pc, #44]	@ (80169e0 <ip4_reass+0x2cc>)
 80169b4:	480b      	ldr	r0, [pc, #44]	@ (80169e4 <ip4_reass+0x2d0>)
 80169b6:	f7ea f96d 	bl	8000c94 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80169ba:	4b06      	ldr	r3, [pc, #24]	@ (80169d4 <ip4_reass+0x2c0>)
 80169bc:	881a      	ldrh	r2, [r3, #0]
 80169be:	8c3b      	ldrh	r3, [r7, #32]
 80169c0:	1ad3      	subs	r3, r2, r3
 80169c2:	b29a      	uxth	r2, r3
 80169c4:	4b03      	ldr	r3, [pc, #12]	@ (80169d4 <ip4_reass+0x2c0>)
 80169c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	e038      	b.n	8016a3e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80169cc:	2300      	movs	r3, #0
 80169ce:	e036      	b.n	8016a3e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 80169d0:	bf00      	nop
 80169d2:	e00a      	b.n	80169ea <ip4_reass+0x2d6>
 80169d4:	20004bf4 	.word	0x20004bf4
 80169d8:	20004bf0 	.word	0x20004bf0
 80169dc:	0801b930 	.word	0x0801b930
 80169e0:	0801ba9c 	.word	0x0801ba9c
 80169e4:	0801b974 	.word	0x0801b974
    goto nullreturn_ipr;
 80169e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80169ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d106      	bne.n	80169fe <ip4_reass+0x2ea>
 80169f0:	4b15      	ldr	r3, [pc, #84]	@ (8016a48 <ip4_reass+0x334>)
 80169f2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80169f6:	4915      	ldr	r1, [pc, #84]	@ (8016a4c <ip4_reass+0x338>)
 80169f8:	4815      	ldr	r0, [pc, #84]	@ (8016a50 <ip4_reass+0x33c>)
 80169fa:	f7ea f94b 	bl	8000c94 <printf>
  if (ipr->p == NULL) {
 80169fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d116      	bne.n	8016a34 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016a06:	4b13      	ldr	r3, [pc, #76]	@ (8016a54 <ip4_reass+0x340>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d006      	beq.n	8016a1e <ip4_reass+0x30a>
 8016a10:	4b0d      	ldr	r3, [pc, #52]	@ (8016a48 <ip4_reass+0x334>)
 8016a12:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016a16:	4910      	ldr	r1, [pc, #64]	@ (8016a58 <ip4_reass+0x344>)
 8016a18:	480d      	ldr	r0, [pc, #52]	@ (8016a50 <ip4_reass+0x33c>)
 8016a1a:	f7ea f93b 	bl	8000c94 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016a1e:	2100      	movs	r1, #0
 8016a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016a22:	f7ff fcdf 	bl	80163e4 <ip_reass_dequeue_datagram>
 8016a26:	e006      	b.n	8016a36 <ip4_reass+0x322>
    goto nullreturn;
 8016a28:	bf00      	nop
 8016a2a:	e004      	b.n	8016a36 <ip4_reass+0x322>
    goto nullreturn;
 8016a2c:	bf00      	nop
 8016a2e:	e002      	b.n	8016a36 <ip4_reass+0x322>
      goto nullreturn;
 8016a30:	bf00      	nop
 8016a32:	e000      	b.n	8016a36 <ip4_reass+0x322>
  }

nullreturn:
 8016a34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7f5 faf0 	bl	800c01c <pbuf_free>
  return NULL;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	3738      	adds	r7, #56	@ 0x38
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	0801b930 	.word	0x0801b930
 8016a4c:	0801bab8 	.word	0x0801bab8
 8016a50:	0801b974 	.word	0x0801b974
 8016a54:	20004bf0 	.word	0x20004bf0
 8016a58:	0801bac4 	.word	0x0801bac4

08016a5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016a60:	2005      	movs	r0, #5
 8016a62:	f7f4 fc9f 	bl	800b3a4 <memp_malloc>
 8016a66:	4603      	mov	r3, r0
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	bd80      	pop	{r7, pc}

08016a6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d106      	bne.n	8016a88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016a7a:	4b07      	ldr	r3, [pc, #28]	@ (8016a98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016a7c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016a80:	4906      	ldr	r1, [pc, #24]	@ (8016a9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016a82:	4807      	ldr	r0, [pc, #28]	@ (8016aa0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016a84:	f7ea f906 	bl	8000c94 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016a88:	6879      	ldr	r1, [r7, #4]
 8016a8a:	2005      	movs	r0, #5
 8016a8c:	f7f4 fcce 	bl	800b42c <memp_free>
}
 8016a90:	bf00      	nop
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	0801b930 	.word	0x0801b930
 8016a9c:	0801bae4 	.word	0x0801bae4
 8016aa0:	0801b974 	.word	0x0801b974

08016aa4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b084      	sub	sp, #16
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d106      	bne.n	8016ac4 <ipfrag_free_pbuf_custom+0x20>
 8016ab6:	4b11      	ldr	r3, [pc, #68]	@ (8016afc <ipfrag_free_pbuf_custom+0x58>)
 8016ab8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016abc:	4910      	ldr	r1, [pc, #64]	@ (8016b00 <ipfrag_free_pbuf_custom+0x5c>)
 8016abe:	4811      	ldr	r0, [pc, #68]	@ (8016b04 <ipfrag_free_pbuf_custom+0x60>)
 8016ac0:	f7ea f8e8 	bl	8000c94 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016ac4:	68fa      	ldr	r2, [r7, #12]
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d006      	beq.n	8016ada <ipfrag_free_pbuf_custom+0x36>
 8016acc:	4b0b      	ldr	r3, [pc, #44]	@ (8016afc <ipfrag_free_pbuf_custom+0x58>)
 8016ace:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016ad2:	490d      	ldr	r1, [pc, #52]	@ (8016b08 <ipfrag_free_pbuf_custom+0x64>)
 8016ad4:	480b      	ldr	r0, [pc, #44]	@ (8016b04 <ipfrag_free_pbuf_custom+0x60>)
 8016ad6:	f7ea f8dd 	bl	8000c94 <printf>
  if (pcr->original != NULL) {
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	695b      	ldr	r3, [r3, #20]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d004      	beq.n	8016aec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	695b      	ldr	r3, [r3, #20]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7f5 fa98 	bl	800c01c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016aec:	68f8      	ldr	r0, [r7, #12]
 8016aee:	f7ff ffbd 	bl	8016a6c <ip_frag_free_pbuf_custom_ref>
}
 8016af2:	bf00      	nop
 8016af4:	3710      	adds	r7, #16
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	0801b930 	.word	0x0801b930
 8016b00:	0801baf0 	.word	0x0801baf0
 8016b04:	0801b974 	.word	0x0801b974
 8016b08:	0801bafc 	.word	0x0801bafc

08016b0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b094      	sub	sp, #80	@ 0x50
 8016b10:	af02      	add	r7, sp, #8
 8016b12:	60f8      	str	r0, [r7, #12]
 8016b14:	60b9      	str	r1, [r7, #8]
 8016b16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016b22:	3b14      	subs	r3, #20
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da00      	bge.n	8016b2a <ip4_frag+0x1e>
 8016b28:	3307      	adds	r3, #7
 8016b2a:	10db      	asrs	r3, r3, #3
 8016b2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016b2e:	2314      	movs	r3, #20
 8016b30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	f003 030f 	and.w	r3, r3, #15
 8016b44:	b2db      	uxtb	r3, r3
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	2b14      	cmp	r3, #20
 8016b4c:	d002      	beq.n	8016b54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016b4e:	f06f 0305 	mvn.w	r3, #5
 8016b52:	e114      	b.n	8016d7e <ip4_frag+0x272>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	895b      	ldrh	r3, [r3, #10]
 8016b58:	2b13      	cmp	r3, #19
 8016b5a:	d805      	bhi.n	8016b68 <ip4_frag+0x5c>
 8016b5c:	488a      	ldr	r0, [pc, #552]	@ (8016d88 <ip4_frag+0x27c>)
 8016b5e:	f7ea f899 	bl	8000c94 <printf>
 8016b62:	f06f 0305 	mvn.w	r3, #5
 8016b66:	e10a      	b.n	8016d7e <ip4_frag+0x272>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b6a:	88db      	ldrh	r3, [r3, #6]
 8016b6c:	b29b      	uxth	r3, r3
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f3 fe10 	bl	800a794 <lwip_htons>
 8016b74:	4603      	mov	r3, r0
 8016b76:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016b78:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016b82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	891b      	ldrh	r3, [r3, #8]
 8016b8e:	3b14      	subs	r3, #20
 8016b90:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016b94:	e0e9      	b.n	8016d6a <ip4_frag+0x25e>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016b96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016b98:	00db      	lsls	r3, r3, #3
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016ba0:	4293      	cmp	r3, r2
 8016ba2:	bf28      	it	cs
 8016ba4:	4613      	movcs	r3, r2
 8016ba6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016ba8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016bac:	2114      	movs	r1, #20
 8016bae:	200e      	movs	r0, #14
 8016bb0:	f7f4 ff54 	bl	800ba5c <pbuf_alloc>
 8016bb4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	f000 80dd 	beq.w	8016d78 <ip4_frag+0x26c>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bc0:	895b      	ldrh	r3, [r3, #10]
 8016bc2:	2b13      	cmp	r3, #19
 8016bc4:	d806      	bhi.n	8016bd4 <ip4_frag+0xc8>
 8016bc6:	4b71      	ldr	r3, [pc, #452]	@ (8016d8c <ip4_frag+0x280>)
 8016bc8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016bcc:	4970      	ldr	r1, [pc, #448]	@ (8016d90 <ip4_frag+0x284>)
 8016bce:	4871      	ldr	r0, [pc, #452]	@ (8016d94 <ip4_frag+0x288>)
 8016bd0:	f7ea f860 	bl	8000c94 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd6:	685b      	ldr	r3, [r3, #4]
 8016bd8:	2214      	movs	r2, #20
 8016bda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f000 fd88 	bl	80176f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016be8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016bea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016bee:	e064      	b.n	8016cba <ip4_frag+0x1ae>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	895a      	ldrh	r2, [r3, #10]
 8016bf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	895b      	ldrh	r3, [r3, #10]
 8016bfe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d906      	bls.n	8016c12 <ip4_frag+0x106>
 8016c04:	4b61      	ldr	r3, [pc, #388]	@ (8016d8c <ip4_frag+0x280>)
 8016c06:	f240 322d 	movw	r2, #813	@ 0x32d
 8016c0a:	4963      	ldr	r1, [pc, #396]	@ (8016d98 <ip4_frag+0x28c>)
 8016c0c:	4861      	ldr	r0, [pc, #388]	@ (8016d94 <ip4_frag+0x288>)
 8016c0e:	f7ea f841 	bl	8000c94 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016c12:	8bfa      	ldrh	r2, [r7, #30]
 8016c14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	bf28      	it	cs
 8016c1c:	4613      	movcs	r3, r2
 8016c1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016c22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d105      	bne.n	8016c36 <ip4_frag+0x12a>
        poff = 0;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	60fb      	str	r3, [r7, #12]
        continue;
 8016c34:	e041      	b.n	8016cba <ip4_frag+0x1ae>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016c36:	f7ff ff11 	bl	8016a5c <ip_frag_alloc_pbuf_custom_ref>
 8016c3a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d103      	bne.n	8016c4a <ip4_frag+0x13e>
        pbuf_free(rambuf);
 8016c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c44:	f7f5 f9ea 	bl	800c01c <pbuf_free>
        goto memerr;
 8016c48:	e097      	b.n	8016d7a <ip4_frag+0x26e>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c4a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016c52:	4413      	add	r3, r2
 8016c54:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016c58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016c5c:	9201      	str	r2, [sp, #4]
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	4603      	mov	r3, r0
 8016c62:	2241      	movs	r2, #65	@ 0x41
 8016c64:	2000      	movs	r0, #0
 8016c66:	f7f5 f823 	bl	800bcb0 <pbuf_alloced_custom>
 8016c6a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d106      	bne.n	8016c80 <ip4_frag+0x174>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016c72:	69b8      	ldr	r0, [r7, #24]
 8016c74:	f7ff fefa 	bl	8016a6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016c78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c7a:	f7f5 f9cf 	bl	800c01c <pbuf_free>
        goto memerr;
 8016c7e:	e07c      	b.n	8016d7a <ip4_frag+0x26e>
      }
      pbuf_ref(p);
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f7f5 fa6b 	bl	800c15c <pbuf_ref>
      pcr->original = p;
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016c8c:	69bb      	ldr	r3, [r7, #24]
 8016c8e:	4a43      	ldr	r2, [pc, #268]	@ (8016d9c <ip4_frag+0x290>)
 8016c90:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016c92:	6979      	ldr	r1, [r7, #20]
 8016c94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c96:	f7f5 fa83 	bl	800c1a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016c9a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016c9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016ca2:	1ad3      	subs	r3, r2, r3
 8016ca4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016ca8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d004      	beq.n	8016cba <ip4_frag+0x1ae>
        poff = 0;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016cba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d196      	bne.n	8016bf0 <ip4_frag+0xe4>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016cc2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016cc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016cc8:	4413      	add	r3, r2
 8016cca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016cd0:	f1a3 0213 	sub.w	r2, r3, #19
 8016cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	bfcc      	ite	gt
 8016cdc:	2301      	movgt	r3, #1
 8016cde:	2300      	movle	r3, #0
 8016ce0:	b2db      	uxtb	r3, r3
 8016ce2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016ce4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016cec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016cee:	6a3b      	ldr	r3, [r7, #32]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d002      	beq.n	8016cfa <ip4_frag+0x1ee>
 8016cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d003      	beq.n	8016d02 <ip4_frag+0x1f6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016cfa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016cfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016d00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016d02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7f3 fd45 	bl	800a794 <lwip_htons>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d10:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016d12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016d14:	3314      	adds	r3, #20
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f3 fd3b 	bl	800a794 <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	461a      	mov	r2, r3
 8016d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d24:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d28:	2200      	movs	r2, #0
 8016d2a:	729a      	strb	r2, [r3, #10]
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8016d30:	2114      	movs	r1, #20
 8016d32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d34:	f7f3 fe76 	bl	800aa24 <inet_chksum>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	461a      	mov	r2, r3
 8016d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d3e:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	695b      	ldr	r3, [r3, #20]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016d48:	68b8      	ldr	r0, [r7, #8]
 8016d4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016d4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d4e:	f7f5 f965 	bl	800c01c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016d52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016d56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016d58:	1ad3      	subs	r3, r2, r3
 8016d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016d5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016d62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016d64:	4413      	add	r3, r2
 8016d66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016d6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	f47f af11 	bne.w	8016b96 <ip4_frag+0x8a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016d74:	2300      	movs	r3, #0
 8016d76:	e002      	b.n	8016d7e <ip4_frag+0x272>
      goto memerr;
 8016d78:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3748      	adds	r7, #72	@ 0x48
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	0801bb08 	.word	0x0801bb08
 8016d8c:	0801b930 	.word	0x0801b930
 8016d90:	0801bb24 	.word	0x0801bb24
 8016d94:	0801b974 	.word	0x0801b974
 8016d98:	0801bb44 	.word	0x0801bb44
 8016d9c:	08016aa5 	.word	0x08016aa5

08016da0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b086      	sub	sp, #24
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016daa:	230e      	movs	r3, #14
 8016dac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	895b      	ldrh	r3, [r3, #10]
 8016db2:	2b0e      	cmp	r3, #14
 8016db4:	d96e      	bls.n	8016e94 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	7bdb      	ldrb	r3, [r3, #15]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d106      	bne.n	8016dcc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	b2da      	uxtb	r2, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016dd2:	693b      	ldr	r3, [r7, #16]
 8016dd4:	7b1a      	ldrb	r2, [r3, #12]
 8016dd6:	7b5b      	ldrb	r3, [r3, #13]
 8016dd8:	021b      	lsls	r3, r3, #8
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	f003 0301 	and.w	r3, r3, #1
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d023      	beq.n	8016e32 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	781b      	ldrb	r3, [r3, #0]
 8016dee:	2b01      	cmp	r3, #1
 8016df0:	d10f      	bne.n	8016e12 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016df2:	693b      	ldr	r3, [r7, #16]
 8016df4:	785b      	ldrb	r3, [r3, #1]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d11b      	bne.n	8016e32 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dfe:	2b5e      	cmp	r3, #94	@ 0x5e
 8016e00:	d117      	bne.n	8016e32 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	7b5b      	ldrb	r3, [r3, #13]
 8016e06:	f043 0310 	orr.w	r3, r3, #16
 8016e0a:	b2da      	uxtb	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	735a      	strb	r2, [r3, #13]
 8016e10:	e00f      	b.n	8016e32 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016e12:	693b      	ldr	r3, [r7, #16]
 8016e14:	2206      	movs	r2, #6
 8016e16:	4928      	ldr	r1, [pc, #160]	@ (8016eb8 <ethernet_input+0x118>)
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f000 fb88 	bl	801752e <memcmp>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d106      	bne.n	8016e32 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	7b5b      	ldrb	r3, [r3, #13]
 8016e28:	f043 0308 	orr.w	r3, r3, #8
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016e32:	89fb      	ldrh	r3, [r7, #14]
 8016e34:	2b08      	cmp	r3, #8
 8016e36:	d003      	beq.n	8016e40 <ethernet_input+0xa0>
 8016e38:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016e3c:	d014      	beq.n	8016e68 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016e3e:	e032      	b.n	8016ea6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016e46:	f003 0308 	and.w	r3, r3, #8
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d024      	beq.n	8016e98 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e4e:	8afb      	ldrh	r3, [r7, #22]
 8016e50:	4619      	mov	r1, r3
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f7f5 f860 	bl	800bf18 <pbuf_remove_header>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d11e      	bne.n	8016e9c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016e5e:	6839      	ldr	r1, [r7, #0]
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f7fe fe85 	bl	8015b70 <ip4_input>
      break;
 8016e66:	e013      	b.n	8016e90 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016e6e:	f003 0308 	and.w	r3, r3, #8
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d014      	beq.n	8016ea0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e76:	8afb      	ldrh	r3, [r7, #22]
 8016e78:	4619      	mov	r1, r3
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f7f5 f84c 	bl	800bf18 <pbuf_remove_header>
 8016e80:	4603      	mov	r3, r0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10e      	bne.n	8016ea4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016e86:	6839      	ldr	r1, [r7, #0]
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f7fd ffc9 	bl	8014e20 <etharp_input>
      break;
 8016e8e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	e00c      	b.n	8016eae <ethernet_input+0x10e>
    goto free_and_return;
 8016e94:	bf00      	nop
 8016e96:	e006      	b.n	8016ea6 <ethernet_input+0x106>
        goto free_and_return;
 8016e98:	bf00      	nop
 8016e9a:	e004      	b.n	8016ea6 <ethernet_input+0x106>
        goto free_and_return;
 8016e9c:	bf00      	nop
 8016e9e:	e002      	b.n	8016ea6 <ethernet_input+0x106>
        goto free_and_return;
 8016ea0:	bf00      	nop
 8016ea2:	e000      	b.n	8016ea6 <ethernet_input+0x106>
        goto free_and_return;
 8016ea4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f7f5 f8b8 	bl	800c01c <pbuf_free>
  return ERR_OK;
 8016eac:	2300      	movs	r3, #0
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3718      	adds	r7, #24
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	0801bda4 	.word	0x0801bda4

08016ebc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016eca:	8c3b      	ldrh	r3, [r7, #32]
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7f3 fc61 	bl	800a794 <lwip_htons>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016ed6:	210e      	movs	r1, #14
 8016ed8:	68b8      	ldr	r0, [r7, #8]
 8016eda:	f7f5 f80d 	bl	800bef8 <pbuf_add_header>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d125      	bne.n	8016f30 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	8afa      	ldrh	r2, [r7, #22]
 8016eee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	2206      	movs	r2, #6
 8016ef4:	6839      	ldr	r1, [r7, #0]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f000 fbfb 	bl	80176f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	3306      	adds	r3, #6
 8016f00:	2206      	movs	r2, #6
 8016f02:	6879      	ldr	r1, [r7, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f000 fbf4 	bl	80176f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016f10:	2b06      	cmp	r3, #6
 8016f12:	d006      	beq.n	8016f22 <ethernet_output+0x66>
 8016f14:	4b0a      	ldr	r3, [pc, #40]	@ (8016f40 <ethernet_output+0x84>)
 8016f16:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016f1a:	490a      	ldr	r1, [pc, #40]	@ (8016f44 <ethernet_output+0x88>)
 8016f1c:	480a      	ldr	r0, [pc, #40]	@ (8016f48 <ethernet_output+0x8c>)
 8016f1e:	f7e9 feb9 	bl	8000c94 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	699b      	ldr	r3, [r3, #24]
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	4798      	blx	r3
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	e002      	b.n	8016f36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016f30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016f32:	f06f 0301 	mvn.w	r3, #1
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3718      	adds	r7, #24
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	0801bb54 	.word	0x0801bb54
 8016f44:	0801bb88 	.word	0x0801bb88
 8016f48:	0801bbbc 	.word	0x0801bbbc

08016f4c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	2104      	movs	r1, #4
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ee f95d 	bl	800521c <osMessageQueueNew>
 8016f62:	4602      	mov	r2, r0
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d102      	bne.n	8016f76 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295
 8016f74:	e000      	b.n	8016f78 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7ee fa77 	bl	8005480 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7ee fa92 	bl	80054c0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016f9c:	bf00      	nop
 8016f9e:	3708      	adds	r7, #8
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
 8016fae:	bf00      	nop
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	6818      	ldr	r0, [r3, #0]
 8016fb4:	4639      	mov	r1, r7
 8016fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8016fba:	2200      	movs	r2, #0
 8016fbc:	f7ee f9a2 	bl	8005304 <osMessageQueuePut>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1f4      	bne.n	8016fb0 <sys_mbox_post+0xc>
#endif
}
 8016fc6:	bf00      	nop
 8016fc8:	bf00      	nop
 8016fca:	3708      	adds	r7, #8
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	6818      	ldr	r0, [r3, #0]
 8016fde:	4639      	mov	r1, r7
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	f7ee f98e 	bl	8005304 <osMessageQueuePut>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d102      	bne.n	8016ff4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	73fb      	strb	r3, [r7, #15]
 8016ff2:	e001      	b.n	8016ff8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016ff4:	23ff      	movs	r3, #255	@ 0xff
 8016ff6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3710      	adds	r7, #16
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}

08017004 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017010:	f7ed fdf0 	bl	8004bf4 <osKernelGetTickCount>
 8017014:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d013      	beq.n	8017044 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	6818      	ldr	r0, [r3, #0]
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2200      	movs	r2, #0
 8017024:	68b9      	ldr	r1, [r7, #8]
 8017026:	f7ee f9cd 	bl	80053c4 <osMessageQueueGet>
 801702a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801702c:	693b      	ldr	r3, [r7, #16]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d105      	bne.n	801703e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017032:	f7ed fddf 	bl	8004bf4 <osKernelGetTickCount>
 8017036:	4602      	mov	r2, r0
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	1ad3      	subs	r3, r2, r3
 801703c:	e00f      	b.n	801705e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801703e:	f04f 33ff 	mov.w	r3, #4294967295
 8017042:	e00c      	b.n	801705e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	6818      	ldr	r0, [r3, #0]
 8017048:	f04f 33ff 	mov.w	r3, #4294967295
 801704c:	2200      	movs	r2, #0
 801704e:	68b9      	ldr	r1, [r7, #8]
 8017050:	f7ee f9b8 	bl	80053c4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017054:	f7ed fdce 	bl	8004bf4 <osKernelGetTickCount>
 8017058:	4602      	mov	r2, r0
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801705e:	4618      	mov	r0, r3
 8017060:	3718      	adds	r7, #24
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}

08017066 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017066:	b580      	push	{r7, lr}
 8017068:	b082      	sub	sp, #8
 801706a:	af00      	add	r7, sp, #0
 801706c:	6078      	str	r0, [r7, #4]
 801706e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6818      	ldr	r0, [r3, #0]
 8017074:	2300      	movs	r3, #0
 8017076:	2200      	movs	r2, #0
 8017078:	6839      	ldr	r1, [r7, #0]
 801707a:	f7ee f9a3 	bl	80053c4 <osMessageQueueGet>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d101      	bne.n	8017088 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017084:	2300      	movs	r3, #0
 8017086:	e001      	b.n	801708c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017088:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801708c:	4618      	mov	r0, r3
 801708e:	3708      	adds	r7, #8
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}

08017094 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d101      	bne.n	80170a8 <sys_mbox_valid+0x14>
    return 0;
 80170a4:	2300      	movs	r3, #0
 80170a6:	e000      	b.n	80170aa <sys_mbox_valid+0x16>
  else
    return 1;
 80170a8:	2301      	movs	r3, #1
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	370c      	adds	r7, #12
 80170ae:	46bd      	mov	sp, r7
 80170b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b4:	4770      	bx	lr

080170b6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80170b6:	b480      	push	{r7}
 80170b8:	b083      	sub	sp, #12
 80170ba:	af00      	add	r7, sp, #0
 80170bc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	2200      	movs	r2, #0
 80170c2:	601a      	str	r2, [r3, #0]
}
 80170c4:	bf00      	nop
 80170c6:	370c      	adds	r7, #12
 80170c8:	46bd      	mov	sp, r7
 80170ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ce:	4770      	bx	lr

080170d0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	460b      	mov	r3, r1
 80170da:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80170dc:	78fb      	ldrb	r3, [r7, #3]
 80170de:	2200      	movs	r2, #0
 80170e0:	4619      	mov	r1, r3
 80170e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80170e6:	f7ed ff55 	bl	8004f94 <osSemaphoreNew>
 80170ea:	4602      	mov	r2, r0
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d102      	bne.n	80170fe <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80170f8:	f04f 33ff 	mov.w	r3, #4294967295
 80170fc:	e009      	b.n	8017112 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80170fe:	78fb      	ldrb	r3, [r7, #3]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d105      	bne.n	8017110 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	2100      	movs	r1, #0
 801710a:	4618      	mov	r0, r3
 801710c:	f7ed ffcc 	bl	80050a8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017110:	2300      	movs	r3, #0
}
 8017112:	4618      	mov	r0, r3
 8017114:	3708      	adds	r7, #8
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}

0801711a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801711a:	b580      	push	{r7, lr}
 801711c:	b084      	sub	sp, #16
 801711e:	af00      	add	r7, sp, #0
 8017120:	6078      	str	r0, [r7, #4]
 8017122:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8017124:	f7ed fd66 	bl	8004bf4 <osKernelGetTickCount>
 8017128:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d011      	beq.n	8017154 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	6839      	ldr	r1, [r7, #0]
 8017136:	4618      	mov	r0, r3
 8017138:	f7ed ffb6 	bl	80050a8 <osSemaphoreAcquire>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d105      	bne.n	801714e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8017142:	f7ed fd57 	bl	8004bf4 <osKernelGetTickCount>
 8017146:	4602      	mov	r2, r0
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	1ad3      	subs	r3, r2, r3
 801714c:	e012      	b.n	8017174 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801714e:	f04f 33ff 	mov.w	r3, #4294967295
 8017152:	e00f      	b.n	8017174 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8017154:	bf00      	nop
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	f04f 31ff 	mov.w	r1, #4294967295
 801715e:	4618      	mov	r0, r3
 8017160:	f7ed ffa2 	bl	80050a8 <osSemaphoreAcquire>
 8017164:	4603      	mov	r3, r0
 8017166:	2b00      	cmp	r3, #0
 8017168:	d1f5      	bne.n	8017156 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801716a:	f7ed fd43 	bl	8004bf4 <osKernelGetTickCount>
 801716e:	4602      	mov	r2, r0
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017174:	4618      	mov	r0, r3
 8017176:	3710      	adds	r7, #16
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}

0801717c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b082      	sub	sp, #8
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	4618      	mov	r0, r3
 801718a:	f7ed ffdf 	bl	800514c <osSemaphoreRelease>
}
 801718e:	bf00      	nop
 8017190:	3708      	adds	r7, #8
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}

08017196 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017196:	b580      	push	{r7, lr}
 8017198:	b082      	sub	sp, #8
 801719a:	af00      	add	r7, sp, #0
 801719c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7ee f816 	bl	80051d4 <osSemaphoreDelete>
}
 80171a8:	bf00      	nop
 80171aa:	3708      	adds	r7, #8
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80171b0:	b480      	push	{r7}
 80171b2:	b083      	sub	sp, #12
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d101      	bne.n	80171c4 <sys_sem_valid+0x14>
    return 0;
 80171c0:	2300      	movs	r3, #0
 80171c2:	e000      	b.n	80171c6 <sys_sem_valid+0x16>
  else
    return 1;
 80171c4:	2301      	movs	r3, #1
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	370c      	adds	r7, #12
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr

080171d2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80171d2:	b480      	push	{r7}
 80171d4:	b083      	sub	sp, #12
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	2200      	movs	r2, #0
 80171de:	601a      	str	r2, [r3, #0]
}
 80171e0:	bf00      	nop
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80171f0:	2000      	movs	r0, #0
 80171f2:	f7ed fdc1 	bl	8004d78 <osMutexNew>
 80171f6:	4603      	mov	r3, r0
 80171f8:	4a01      	ldr	r2, [pc, #4]	@ (8017200 <sys_init+0x14>)
 80171fa:	6013      	str	r3, [r2, #0]
#endif
}
 80171fc:	bf00      	nop
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	2000d93c 	.word	0x2000d93c

08017204 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801720c:	2000      	movs	r0, #0
 801720e:	f7ed fdb3 	bl	8004d78 <osMutexNew>
 8017212:	4602      	mov	r2, r0
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d102      	bne.n	8017226 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017220:	f04f 33ff 	mov.w	r3, #4294967295
 8017224:	e000      	b.n	8017228 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017226:	2300      	movs	r3, #0
}
 8017228:	4618      	mov	r0, r3
 801722a:	3708      	adds	r7, #8
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}

08017230 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	f04f 31ff 	mov.w	r1, #4294967295
 8017240:	4618      	mov	r0, r3
 8017242:	f7ed fe1f 	bl	8004e84 <osMutexAcquire>
#endif
}
 8017246:	bf00      	nop
 8017248:	3708      	adds	r7, #8
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}

0801724e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801724e:	b580      	push	{r7, lr}
 8017250:	b082      	sub	sp, #8
 8017252:	af00      	add	r7, sp, #0
 8017254:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	4618      	mov	r0, r3
 801725c:	f7ed fe5d 	bl	8004f1a <osMutexRelease>
}
 8017260:	bf00      	nop
 8017262:	3708      	adds	r7, #8
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}

08017268 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b08e      	sub	sp, #56	@ 0x38
 801726c:	af00      	add	r7, sp, #0
 801726e:	60f8      	str	r0, [r7, #12]
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
 8017274:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017276:	f107 0314 	add.w	r3, r7, #20
 801727a:	2224      	movs	r2, #36	@ 0x24
 801727c:	2100      	movs	r1, #0
 801727e:	4618      	mov	r0, r3
 8017280:	f000 f965 	bl	801754e <memset>
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	617b      	str	r3, [r7, #20]
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801728c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801728e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017290:	f107 0314 	add.w	r3, r7, #20
 8017294:	461a      	mov	r2, r3
 8017296:	6879      	ldr	r1, [r7, #4]
 8017298:	68b8      	ldr	r0, [r7, #8]
 801729a:	f7ed fcc0 	bl	8004c1e <osThreadNew>
 801729e:	4603      	mov	r3, r0
#endif
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3738      	adds	r7, #56	@ 0x38
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <rand>:
 80172a8:	4b16      	ldr	r3, [pc, #88]	@ (8017304 <rand+0x5c>)
 80172aa:	b510      	push	{r4, lr}
 80172ac:	681c      	ldr	r4, [r3, #0]
 80172ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172b0:	b9b3      	cbnz	r3, 80172e0 <rand+0x38>
 80172b2:	2018      	movs	r0, #24
 80172b4:	f000 fa94 	bl	80177e0 <malloc>
 80172b8:	4602      	mov	r2, r0
 80172ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80172bc:	b920      	cbnz	r0, 80172c8 <rand+0x20>
 80172be:	4b12      	ldr	r3, [pc, #72]	@ (8017308 <rand+0x60>)
 80172c0:	4812      	ldr	r0, [pc, #72]	@ (801730c <rand+0x64>)
 80172c2:	2152      	movs	r1, #82	@ 0x52
 80172c4:	f000 fa24 	bl	8017710 <__assert_func>
 80172c8:	4911      	ldr	r1, [pc, #68]	@ (8017310 <rand+0x68>)
 80172ca:	4b12      	ldr	r3, [pc, #72]	@ (8017314 <rand+0x6c>)
 80172cc:	e9c0 1300 	strd	r1, r3, [r0]
 80172d0:	4b11      	ldr	r3, [pc, #68]	@ (8017318 <rand+0x70>)
 80172d2:	6083      	str	r3, [r0, #8]
 80172d4:	230b      	movs	r3, #11
 80172d6:	8183      	strh	r3, [r0, #12]
 80172d8:	2100      	movs	r1, #0
 80172da:	2001      	movs	r0, #1
 80172dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80172e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80172e2:	480e      	ldr	r0, [pc, #56]	@ (801731c <rand+0x74>)
 80172e4:	690b      	ldr	r3, [r1, #16]
 80172e6:	694c      	ldr	r4, [r1, #20]
 80172e8:	4a0d      	ldr	r2, [pc, #52]	@ (8017320 <rand+0x78>)
 80172ea:	4358      	muls	r0, r3
 80172ec:	fb02 0004 	mla	r0, r2, r4, r0
 80172f0:	fba3 3202 	umull	r3, r2, r3, r2
 80172f4:	3301      	adds	r3, #1
 80172f6:	eb40 0002 	adc.w	r0, r0, r2
 80172fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80172fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017302:	bd10      	pop	{r4, pc}
 8017304:	2000002c 	.word	0x2000002c
 8017308:	0801bdb2 	.word	0x0801bdb2
 801730c:	0801bdc9 	.word	0x0801bdc9
 8017310:	abcd330e 	.word	0xabcd330e
 8017314:	e66d1234 	.word	0xe66d1234
 8017318:	0005deec 	.word	0x0005deec
 801731c:	5851f42d 	.word	0x5851f42d
 8017320:	4c957f2d 	.word	0x4c957f2d

08017324 <std>:
 8017324:	2300      	movs	r3, #0
 8017326:	b510      	push	{r4, lr}
 8017328:	4604      	mov	r4, r0
 801732a:	e9c0 3300 	strd	r3, r3, [r0]
 801732e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017332:	6083      	str	r3, [r0, #8]
 8017334:	8181      	strh	r1, [r0, #12]
 8017336:	6643      	str	r3, [r0, #100]	@ 0x64
 8017338:	81c2      	strh	r2, [r0, #14]
 801733a:	6183      	str	r3, [r0, #24]
 801733c:	4619      	mov	r1, r3
 801733e:	2208      	movs	r2, #8
 8017340:	305c      	adds	r0, #92	@ 0x5c
 8017342:	f000 f904 	bl	801754e <memset>
 8017346:	4b0d      	ldr	r3, [pc, #52]	@ (801737c <std+0x58>)
 8017348:	6263      	str	r3, [r4, #36]	@ 0x24
 801734a:	4b0d      	ldr	r3, [pc, #52]	@ (8017380 <std+0x5c>)
 801734c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801734e:	4b0d      	ldr	r3, [pc, #52]	@ (8017384 <std+0x60>)
 8017350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017352:	4b0d      	ldr	r3, [pc, #52]	@ (8017388 <std+0x64>)
 8017354:	6323      	str	r3, [r4, #48]	@ 0x30
 8017356:	4b0d      	ldr	r3, [pc, #52]	@ (801738c <std+0x68>)
 8017358:	6224      	str	r4, [r4, #32]
 801735a:	429c      	cmp	r4, r3
 801735c:	d006      	beq.n	801736c <std+0x48>
 801735e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017362:	4294      	cmp	r4, r2
 8017364:	d002      	beq.n	801736c <std+0x48>
 8017366:	33d0      	adds	r3, #208	@ 0xd0
 8017368:	429c      	cmp	r4, r3
 801736a:	d105      	bne.n	8017378 <std+0x54>
 801736c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017374:	f000 b9ba 	b.w	80176ec <__retarget_lock_init_recursive>
 8017378:	bd10      	pop	{r4, pc}
 801737a:	bf00      	nop
 801737c:	080174a9 	.word	0x080174a9
 8017380:	080174cb 	.word	0x080174cb
 8017384:	08017503 	.word	0x08017503
 8017388:	08017527 	.word	0x08017527
 801738c:	20004bf8 	.word	0x20004bf8

08017390 <stdio_exit_handler>:
 8017390:	4a02      	ldr	r2, [pc, #8]	@ (801739c <stdio_exit_handler+0xc>)
 8017392:	4903      	ldr	r1, [pc, #12]	@ (80173a0 <stdio_exit_handler+0x10>)
 8017394:	4803      	ldr	r0, [pc, #12]	@ (80173a4 <stdio_exit_handler+0x14>)
 8017396:	f000 b869 	b.w	801746c <_fwalk_sglue>
 801739a:	bf00      	nop
 801739c:	20000020 	.word	0x20000020
 80173a0:	08017a55 	.word	0x08017a55
 80173a4:	20000030 	.word	0x20000030

080173a8 <cleanup_stdio>:
 80173a8:	6841      	ldr	r1, [r0, #4]
 80173aa:	4b0c      	ldr	r3, [pc, #48]	@ (80173dc <cleanup_stdio+0x34>)
 80173ac:	4299      	cmp	r1, r3
 80173ae:	b510      	push	{r4, lr}
 80173b0:	4604      	mov	r4, r0
 80173b2:	d001      	beq.n	80173b8 <cleanup_stdio+0x10>
 80173b4:	f000 fb4e 	bl	8017a54 <_fflush_r>
 80173b8:	68a1      	ldr	r1, [r4, #8]
 80173ba:	4b09      	ldr	r3, [pc, #36]	@ (80173e0 <cleanup_stdio+0x38>)
 80173bc:	4299      	cmp	r1, r3
 80173be:	d002      	beq.n	80173c6 <cleanup_stdio+0x1e>
 80173c0:	4620      	mov	r0, r4
 80173c2:	f000 fb47 	bl	8017a54 <_fflush_r>
 80173c6:	68e1      	ldr	r1, [r4, #12]
 80173c8:	4b06      	ldr	r3, [pc, #24]	@ (80173e4 <cleanup_stdio+0x3c>)
 80173ca:	4299      	cmp	r1, r3
 80173cc:	d004      	beq.n	80173d8 <cleanup_stdio+0x30>
 80173ce:	4620      	mov	r0, r4
 80173d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173d4:	f000 bb3e 	b.w	8017a54 <_fflush_r>
 80173d8:	bd10      	pop	{r4, pc}
 80173da:	bf00      	nop
 80173dc:	20004bf8 	.word	0x20004bf8
 80173e0:	20004c60 	.word	0x20004c60
 80173e4:	20004cc8 	.word	0x20004cc8

080173e8 <global_stdio_init.part.0>:
 80173e8:	b510      	push	{r4, lr}
 80173ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017418 <global_stdio_init.part.0+0x30>)
 80173ec:	4c0b      	ldr	r4, [pc, #44]	@ (801741c <global_stdio_init.part.0+0x34>)
 80173ee:	4a0c      	ldr	r2, [pc, #48]	@ (8017420 <global_stdio_init.part.0+0x38>)
 80173f0:	601a      	str	r2, [r3, #0]
 80173f2:	4620      	mov	r0, r4
 80173f4:	2200      	movs	r2, #0
 80173f6:	2104      	movs	r1, #4
 80173f8:	f7ff ff94 	bl	8017324 <std>
 80173fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017400:	2201      	movs	r2, #1
 8017402:	2109      	movs	r1, #9
 8017404:	f7ff ff8e 	bl	8017324 <std>
 8017408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801740c:	2202      	movs	r2, #2
 801740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017412:	2112      	movs	r1, #18
 8017414:	f7ff bf86 	b.w	8017324 <std>
 8017418:	20004d30 	.word	0x20004d30
 801741c:	20004bf8 	.word	0x20004bf8
 8017420:	08017391 	.word	0x08017391

08017424 <__sfp_lock_acquire>:
 8017424:	4801      	ldr	r0, [pc, #4]	@ (801742c <__sfp_lock_acquire+0x8>)
 8017426:	f000 b962 	b.w	80176ee <__retarget_lock_acquire_recursive>
 801742a:	bf00      	nop
 801742c:	20004d39 	.word	0x20004d39

08017430 <__sfp_lock_release>:
 8017430:	4801      	ldr	r0, [pc, #4]	@ (8017438 <__sfp_lock_release+0x8>)
 8017432:	f000 b95d 	b.w	80176f0 <__retarget_lock_release_recursive>
 8017436:	bf00      	nop
 8017438:	20004d39 	.word	0x20004d39

0801743c <__sinit>:
 801743c:	b510      	push	{r4, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	f7ff fff0 	bl	8017424 <__sfp_lock_acquire>
 8017444:	6a23      	ldr	r3, [r4, #32]
 8017446:	b11b      	cbz	r3, 8017450 <__sinit+0x14>
 8017448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801744c:	f7ff bff0 	b.w	8017430 <__sfp_lock_release>
 8017450:	4b04      	ldr	r3, [pc, #16]	@ (8017464 <__sinit+0x28>)
 8017452:	6223      	str	r3, [r4, #32]
 8017454:	4b04      	ldr	r3, [pc, #16]	@ (8017468 <__sinit+0x2c>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d1f5      	bne.n	8017448 <__sinit+0xc>
 801745c:	f7ff ffc4 	bl	80173e8 <global_stdio_init.part.0>
 8017460:	e7f2      	b.n	8017448 <__sinit+0xc>
 8017462:	bf00      	nop
 8017464:	080173a9 	.word	0x080173a9
 8017468:	20004d30 	.word	0x20004d30

0801746c <_fwalk_sglue>:
 801746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017470:	4607      	mov	r7, r0
 8017472:	4688      	mov	r8, r1
 8017474:	4614      	mov	r4, r2
 8017476:	2600      	movs	r6, #0
 8017478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801747c:	f1b9 0901 	subs.w	r9, r9, #1
 8017480:	d505      	bpl.n	801748e <_fwalk_sglue+0x22>
 8017482:	6824      	ldr	r4, [r4, #0]
 8017484:	2c00      	cmp	r4, #0
 8017486:	d1f7      	bne.n	8017478 <_fwalk_sglue+0xc>
 8017488:	4630      	mov	r0, r6
 801748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801748e:	89ab      	ldrh	r3, [r5, #12]
 8017490:	2b01      	cmp	r3, #1
 8017492:	d907      	bls.n	80174a4 <_fwalk_sglue+0x38>
 8017494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017498:	3301      	adds	r3, #1
 801749a:	d003      	beq.n	80174a4 <_fwalk_sglue+0x38>
 801749c:	4629      	mov	r1, r5
 801749e:	4638      	mov	r0, r7
 80174a0:	47c0      	blx	r8
 80174a2:	4306      	orrs	r6, r0
 80174a4:	3568      	adds	r5, #104	@ 0x68
 80174a6:	e7e9      	b.n	801747c <_fwalk_sglue+0x10>

080174a8 <__sread>:
 80174a8:	b510      	push	{r4, lr}
 80174aa:	460c      	mov	r4, r1
 80174ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b0:	f000 f8ce 	bl	8017650 <_read_r>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	bfab      	itete	ge
 80174b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80174ba:	89a3      	ldrhlt	r3, [r4, #12]
 80174bc:	181b      	addge	r3, r3, r0
 80174be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80174c2:	bfac      	ite	ge
 80174c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80174c6:	81a3      	strhlt	r3, [r4, #12]
 80174c8:	bd10      	pop	{r4, pc}

080174ca <__swrite>:
 80174ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ce:	461f      	mov	r7, r3
 80174d0:	898b      	ldrh	r3, [r1, #12]
 80174d2:	05db      	lsls	r3, r3, #23
 80174d4:	4605      	mov	r5, r0
 80174d6:	460c      	mov	r4, r1
 80174d8:	4616      	mov	r6, r2
 80174da:	d505      	bpl.n	80174e8 <__swrite+0x1e>
 80174dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174e0:	2302      	movs	r3, #2
 80174e2:	2200      	movs	r2, #0
 80174e4:	f000 f8a2 	bl	801762c <_lseek_r>
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80174f2:	81a3      	strh	r3, [r4, #12]
 80174f4:	4632      	mov	r2, r6
 80174f6:	463b      	mov	r3, r7
 80174f8:	4628      	mov	r0, r5
 80174fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174fe:	f000 b8b9 	b.w	8017674 <_write_r>

08017502 <__sseek>:
 8017502:	b510      	push	{r4, lr}
 8017504:	460c      	mov	r4, r1
 8017506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801750a:	f000 f88f 	bl	801762c <_lseek_r>
 801750e:	1c43      	adds	r3, r0, #1
 8017510:	89a3      	ldrh	r3, [r4, #12]
 8017512:	bf15      	itete	ne
 8017514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801751a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801751e:	81a3      	strheq	r3, [r4, #12]
 8017520:	bf18      	it	ne
 8017522:	81a3      	strhne	r3, [r4, #12]
 8017524:	bd10      	pop	{r4, pc}

08017526 <__sclose>:
 8017526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801752a:	f000 b819 	b.w	8017560 <_close_r>

0801752e <memcmp>:
 801752e:	b510      	push	{r4, lr}
 8017530:	3901      	subs	r1, #1
 8017532:	4402      	add	r2, r0
 8017534:	4290      	cmp	r0, r2
 8017536:	d101      	bne.n	801753c <memcmp+0xe>
 8017538:	2000      	movs	r0, #0
 801753a:	e005      	b.n	8017548 <memcmp+0x1a>
 801753c:	7803      	ldrb	r3, [r0, #0]
 801753e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017542:	42a3      	cmp	r3, r4
 8017544:	d001      	beq.n	801754a <memcmp+0x1c>
 8017546:	1b18      	subs	r0, r3, r4
 8017548:	bd10      	pop	{r4, pc}
 801754a:	3001      	adds	r0, #1
 801754c:	e7f2      	b.n	8017534 <memcmp+0x6>

0801754e <memset>:
 801754e:	4402      	add	r2, r0
 8017550:	4603      	mov	r3, r0
 8017552:	4293      	cmp	r3, r2
 8017554:	d100      	bne.n	8017558 <memset+0xa>
 8017556:	4770      	bx	lr
 8017558:	f803 1b01 	strb.w	r1, [r3], #1
 801755c:	e7f9      	b.n	8017552 <memset+0x4>
	...

08017560 <_close_r>:
 8017560:	b538      	push	{r3, r4, r5, lr}
 8017562:	4d06      	ldr	r5, [pc, #24]	@ (801757c <_close_r+0x1c>)
 8017564:	2300      	movs	r3, #0
 8017566:	4604      	mov	r4, r0
 8017568:	4608      	mov	r0, r1
 801756a:	602b      	str	r3, [r5, #0]
 801756c:	f7e9 fd0e 	bl	8000f8c <_close>
 8017570:	1c43      	adds	r3, r0, #1
 8017572:	d102      	bne.n	801757a <_close_r+0x1a>
 8017574:	682b      	ldr	r3, [r5, #0]
 8017576:	b103      	cbz	r3, 801757a <_close_r+0x1a>
 8017578:	6023      	str	r3, [r4, #0]
 801757a:	bd38      	pop	{r3, r4, r5, pc}
 801757c:	20004d34 	.word	0x20004d34

08017580 <_reclaim_reent>:
 8017580:	4b29      	ldr	r3, [pc, #164]	@ (8017628 <_reclaim_reent+0xa8>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	4283      	cmp	r3, r0
 8017586:	b570      	push	{r4, r5, r6, lr}
 8017588:	4604      	mov	r4, r0
 801758a:	d04b      	beq.n	8017624 <_reclaim_reent+0xa4>
 801758c:	69c3      	ldr	r3, [r0, #28]
 801758e:	b1ab      	cbz	r3, 80175bc <_reclaim_reent+0x3c>
 8017590:	68db      	ldr	r3, [r3, #12]
 8017592:	b16b      	cbz	r3, 80175b0 <_reclaim_reent+0x30>
 8017594:	2500      	movs	r5, #0
 8017596:	69e3      	ldr	r3, [r4, #28]
 8017598:	68db      	ldr	r3, [r3, #12]
 801759a:	5959      	ldr	r1, [r3, r5]
 801759c:	2900      	cmp	r1, #0
 801759e:	d13b      	bne.n	8017618 <_reclaim_reent+0x98>
 80175a0:	3504      	adds	r5, #4
 80175a2:	2d80      	cmp	r5, #128	@ 0x80
 80175a4:	d1f7      	bne.n	8017596 <_reclaim_reent+0x16>
 80175a6:	69e3      	ldr	r3, [r4, #28]
 80175a8:	4620      	mov	r0, r4
 80175aa:	68d9      	ldr	r1, [r3, #12]
 80175ac:	f000 f8ce 	bl	801774c <_free_r>
 80175b0:	69e3      	ldr	r3, [r4, #28]
 80175b2:	6819      	ldr	r1, [r3, #0]
 80175b4:	b111      	cbz	r1, 80175bc <_reclaim_reent+0x3c>
 80175b6:	4620      	mov	r0, r4
 80175b8:	f000 f8c8 	bl	801774c <_free_r>
 80175bc:	6961      	ldr	r1, [r4, #20]
 80175be:	b111      	cbz	r1, 80175c6 <_reclaim_reent+0x46>
 80175c0:	4620      	mov	r0, r4
 80175c2:	f000 f8c3 	bl	801774c <_free_r>
 80175c6:	69e1      	ldr	r1, [r4, #28]
 80175c8:	b111      	cbz	r1, 80175d0 <_reclaim_reent+0x50>
 80175ca:	4620      	mov	r0, r4
 80175cc:	f000 f8be 	bl	801774c <_free_r>
 80175d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80175d2:	b111      	cbz	r1, 80175da <_reclaim_reent+0x5a>
 80175d4:	4620      	mov	r0, r4
 80175d6:	f000 f8b9 	bl	801774c <_free_r>
 80175da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80175dc:	b111      	cbz	r1, 80175e4 <_reclaim_reent+0x64>
 80175de:	4620      	mov	r0, r4
 80175e0:	f000 f8b4 	bl	801774c <_free_r>
 80175e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80175e6:	b111      	cbz	r1, 80175ee <_reclaim_reent+0x6e>
 80175e8:	4620      	mov	r0, r4
 80175ea:	f000 f8af 	bl	801774c <_free_r>
 80175ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80175f0:	b111      	cbz	r1, 80175f8 <_reclaim_reent+0x78>
 80175f2:	4620      	mov	r0, r4
 80175f4:	f000 f8aa 	bl	801774c <_free_r>
 80175f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80175fa:	b111      	cbz	r1, 8017602 <_reclaim_reent+0x82>
 80175fc:	4620      	mov	r0, r4
 80175fe:	f000 f8a5 	bl	801774c <_free_r>
 8017602:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017604:	b111      	cbz	r1, 801760c <_reclaim_reent+0x8c>
 8017606:	4620      	mov	r0, r4
 8017608:	f000 f8a0 	bl	801774c <_free_r>
 801760c:	6a23      	ldr	r3, [r4, #32]
 801760e:	b14b      	cbz	r3, 8017624 <_reclaim_reent+0xa4>
 8017610:	4620      	mov	r0, r4
 8017612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017616:	4718      	bx	r3
 8017618:	680e      	ldr	r6, [r1, #0]
 801761a:	4620      	mov	r0, r4
 801761c:	f000 f896 	bl	801774c <_free_r>
 8017620:	4631      	mov	r1, r6
 8017622:	e7bb      	b.n	801759c <_reclaim_reent+0x1c>
 8017624:	bd70      	pop	{r4, r5, r6, pc}
 8017626:	bf00      	nop
 8017628:	2000002c 	.word	0x2000002c

0801762c <_lseek_r>:
 801762c:	b538      	push	{r3, r4, r5, lr}
 801762e:	4d07      	ldr	r5, [pc, #28]	@ (801764c <_lseek_r+0x20>)
 8017630:	4604      	mov	r4, r0
 8017632:	4608      	mov	r0, r1
 8017634:	4611      	mov	r1, r2
 8017636:	2200      	movs	r2, #0
 8017638:	602a      	str	r2, [r5, #0]
 801763a:	461a      	mov	r2, r3
 801763c:	f7e9 fccd 	bl	8000fda <_lseek>
 8017640:	1c43      	adds	r3, r0, #1
 8017642:	d102      	bne.n	801764a <_lseek_r+0x1e>
 8017644:	682b      	ldr	r3, [r5, #0]
 8017646:	b103      	cbz	r3, 801764a <_lseek_r+0x1e>
 8017648:	6023      	str	r3, [r4, #0]
 801764a:	bd38      	pop	{r3, r4, r5, pc}
 801764c:	20004d34 	.word	0x20004d34

08017650 <_read_r>:
 8017650:	b538      	push	{r3, r4, r5, lr}
 8017652:	4d07      	ldr	r5, [pc, #28]	@ (8017670 <_read_r+0x20>)
 8017654:	4604      	mov	r4, r0
 8017656:	4608      	mov	r0, r1
 8017658:	4611      	mov	r1, r2
 801765a:	2200      	movs	r2, #0
 801765c:	602a      	str	r2, [r5, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	f7e9 fc5b 	bl	8000f1a <_read>
 8017664:	1c43      	adds	r3, r0, #1
 8017666:	d102      	bne.n	801766e <_read_r+0x1e>
 8017668:	682b      	ldr	r3, [r5, #0]
 801766a:	b103      	cbz	r3, 801766e <_read_r+0x1e>
 801766c:	6023      	str	r3, [r4, #0]
 801766e:	bd38      	pop	{r3, r4, r5, pc}
 8017670:	20004d34 	.word	0x20004d34

08017674 <_write_r>:
 8017674:	b538      	push	{r3, r4, r5, lr}
 8017676:	4d07      	ldr	r5, [pc, #28]	@ (8017694 <_write_r+0x20>)
 8017678:	4604      	mov	r4, r0
 801767a:	4608      	mov	r0, r1
 801767c:	4611      	mov	r1, r2
 801767e:	2200      	movs	r2, #0
 8017680:	602a      	str	r2, [r5, #0]
 8017682:	461a      	mov	r2, r3
 8017684:	f7e9 fc66 	bl	8000f54 <_write>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	d102      	bne.n	8017692 <_write_r+0x1e>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	b103      	cbz	r3, 8017692 <_write_r+0x1e>
 8017690:	6023      	str	r3, [r4, #0]
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	20004d34 	.word	0x20004d34

08017698 <__errno>:
 8017698:	4b01      	ldr	r3, [pc, #4]	@ (80176a0 <__errno+0x8>)
 801769a:	6818      	ldr	r0, [r3, #0]
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop
 80176a0:	2000002c 	.word	0x2000002c

080176a4 <__libc_init_array>:
 80176a4:	b570      	push	{r4, r5, r6, lr}
 80176a6:	4d0d      	ldr	r5, [pc, #52]	@ (80176dc <__libc_init_array+0x38>)
 80176a8:	4c0d      	ldr	r4, [pc, #52]	@ (80176e0 <__libc_init_array+0x3c>)
 80176aa:	1b64      	subs	r4, r4, r5
 80176ac:	10a4      	asrs	r4, r4, #2
 80176ae:	2600      	movs	r6, #0
 80176b0:	42a6      	cmp	r6, r4
 80176b2:	d109      	bne.n	80176c8 <__libc_init_array+0x24>
 80176b4:	4d0b      	ldr	r5, [pc, #44]	@ (80176e4 <__libc_init_array+0x40>)
 80176b6:	4c0c      	ldr	r4, [pc, #48]	@ (80176e8 <__libc_init_array+0x44>)
 80176b8:	f000 fe48 	bl	801834c <_init>
 80176bc:	1b64      	subs	r4, r4, r5
 80176be:	10a4      	asrs	r4, r4, #2
 80176c0:	2600      	movs	r6, #0
 80176c2:	42a6      	cmp	r6, r4
 80176c4:	d105      	bne.n	80176d2 <__libc_init_array+0x2e>
 80176c6:	bd70      	pop	{r4, r5, r6, pc}
 80176c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80176cc:	4798      	blx	r3
 80176ce:	3601      	adds	r6, #1
 80176d0:	e7ee      	b.n	80176b0 <__libc_init_array+0xc>
 80176d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80176d6:	4798      	blx	r3
 80176d8:	3601      	adds	r6, #1
 80176da:	e7f2      	b.n	80176c2 <__libc_init_array+0x1e>
 80176dc:	0801be98 	.word	0x0801be98
 80176e0:	0801be98 	.word	0x0801be98
 80176e4:	0801be98 	.word	0x0801be98
 80176e8:	0801be9c 	.word	0x0801be9c

080176ec <__retarget_lock_init_recursive>:
 80176ec:	4770      	bx	lr

080176ee <__retarget_lock_acquire_recursive>:
 80176ee:	4770      	bx	lr

080176f0 <__retarget_lock_release_recursive>:
 80176f0:	4770      	bx	lr

080176f2 <memcpy>:
 80176f2:	440a      	add	r2, r1
 80176f4:	4291      	cmp	r1, r2
 80176f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80176fa:	d100      	bne.n	80176fe <memcpy+0xc>
 80176fc:	4770      	bx	lr
 80176fe:	b510      	push	{r4, lr}
 8017700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017708:	4291      	cmp	r1, r2
 801770a:	d1f9      	bne.n	8017700 <memcpy+0xe>
 801770c:	bd10      	pop	{r4, pc}
	...

08017710 <__assert_func>:
 8017710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017712:	4614      	mov	r4, r2
 8017714:	461a      	mov	r2, r3
 8017716:	4b09      	ldr	r3, [pc, #36]	@ (801773c <__assert_func+0x2c>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	4605      	mov	r5, r0
 801771c:	68d8      	ldr	r0, [r3, #12]
 801771e:	b954      	cbnz	r4, 8017736 <__assert_func+0x26>
 8017720:	4b07      	ldr	r3, [pc, #28]	@ (8017740 <__assert_func+0x30>)
 8017722:	461c      	mov	r4, r3
 8017724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017728:	9100      	str	r1, [sp, #0]
 801772a:	462b      	mov	r3, r5
 801772c:	4905      	ldr	r1, [pc, #20]	@ (8017744 <__assert_func+0x34>)
 801772e:	f000 f9b9 	bl	8017aa4 <fiprintf>
 8017732:	f000 f9d9 	bl	8017ae8 <abort>
 8017736:	4b04      	ldr	r3, [pc, #16]	@ (8017748 <__assert_func+0x38>)
 8017738:	e7f4      	b.n	8017724 <__assert_func+0x14>
 801773a:	bf00      	nop
 801773c:	2000002c 	.word	0x2000002c
 8017740:	0801be5c 	.word	0x0801be5c
 8017744:	0801be2e 	.word	0x0801be2e
 8017748:	0801be21 	.word	0x0801be21

0801774c <_free_r>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4605      	mov	r5, r0
 8017750:	2900      	cmp	r1, #0
 8017752:	d041      	beq.n	80177d8 <_free_r+0x8c>
 8017754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017758:	1f0c      	subs	r4, r1, #4
 801775a:	2b00      	cmp	r3, #0
 801775c:	bfb8      	it	lt
 801775e:	18e4      	addlt	r4, r4, r3
 8017760:	f000 f8e8 	bl	8017934 <__malloc_lock>
 8017764:	4a1d      	ldr	r2, [pc, #116]	@ (80177dc <_free_r+0x90>)
 8017766:	6813      	ldr	r3, [r2, #0]
 8017768:	b933      	cbnz	r3, 8017778 <_free_r+0x2c>
 801776a:	6063      	str	r3, [r4, #4]
 801776c:	6014      	str	r4, [r2, #0]
 801776e:	4628      	mov	r0, r5
 8017770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017774:	f000 b8e4 	b.w	8017940 <__malloc_unlock>
 8017778:	42a3      	cmp	r3, r4
 801777a:	d908      	bls.n	801778e <_free_r+0x42>
 801777c:	6820      	ldr	r0, [r4, #0]
 801777e:	1821      	adds	r1, r4, r0
 8017780:	428b      	cmp	r3, r1
 8017782:	bf01      	itttt	eq
 8017784:	6819      	ldreq	r1, [r3, #0]
 8017786:	685b      	ldreq	r3, [r3, #4]
 8017788:	1809      	addeq	r1, r1, r0
 801778a:	6021      	streq	r1, [r4, #0]
 801778c:	e7ed      	b.n	801776a <_free_r+0x1e>
 801778e:	461a      	mov	r2, r3
 8017790:	685b      	ldr	r3, [r3, #4]
 8017792:	b10b      	cbz	r3, 8017798 <_free_r+0x4c>
 8017794:	42a3      	cmp	r3, r4
 8017796:	d9fa      	bls.n	801778e <_free_r+0x42>
 8017798:	6811      	ldr	r1, [r2, #0]
 801779a:	1850      	adds	r0, r2, r1
 801779c:	42a0      	cmp	r0, r4
 801779e:	d10b      	bne.n	80177b8 <_free_r+0x6c>
 80177a0:	6820      	ldr	r0, [r4, #0]
 80177a2:	4401      	add	r1, r0
 80177a4:	1850      	adds	r0, r2, r1
 80177a6:	4283      	cmp	r3, r0
 80177a8:	6011      	str	r1, [r2, #0]
 80177aa:	d1e0      	bne.n	801776e <_free_r+0x22>
 80177ac:	6818      	ldr	r0, [r3, #0]
 80177ae:	685b      	ldr	r3, [r3, #4]
 80177b0:	6053      	str	r3, [r2, #4]
 80177b2:	4408      	add	r0, r1
 80177b4:	6010      	str	r0, [r2, #0]
 80177b6:	e7da      	b.n	801776e <_free_r+0x22>
 80177b8:	d902      	bls.n	80177c0 <_free_r+0x74>
 80177ba:	230c      	movs	r3, #12
 80177bc:	602b      	str	r3, [r5, #0]
 80177be:	e7d6      	b.n	801776e <_free_r+0x22>
 80177c0:	6820      	ldr	r0, [r4, #0]
 80177c2:	1821      	adds	r1, r4, r0
 80177c4:	428b      	cmp	r3, r1
 80177c6:	bf04      	itt	eq
 80177c8:	6819      	ldreq	r1, [r3, #0]
 80177ca:	685b      	ldreq	r3, [r3, #4]
 80177cc:	6063      	str	r3, [r4, #4]
 80177ce:	bf04      	itt	eq
 80177d0:	1809      	addeq	r1, r1, r0
 80177d2:	6021      	streq	r1, [r4, #0]
 80177d4:	6054      	str	r4, [r2, #4]
 80177d6:	e7ca      	b.n	801776e <_free_r+0x22>
 80177d8:	bd38      	pop	{r3, r4, r5, pc}
 80177da:	bf00      	nop
 80177dc:	20004d40 	.word	0x20004d40

080177e0 <malloc>:
 80177e0:	4b02      	ldr	r3, [pc, #8]	@ (80177ec <malloc+0xc>)
 80177e2:	4601      	mov	r1, r0
 80177e4:	6818      	ldr	r0, [r3, #0]
 80177e6:	f000 b825 	b.w	8017834 <_malloc_r>
 80177ea:	bf00      	nop
 80177ec:	2000002c 	.word	0x2000002c

080177f0 <sbrk_aligned>:
 80177f0:	b570      	push	{r4, r5, r6, lr}
 80177f2:	4e0f      	ldr	r6, [pc, #60]	@ (8017830 <sbrk_aligned+0x40>)
 80177f4:	460c      	mov	r4, r1
 80177f6:	6831      	ldr	r1, [r6, #0]
 80177f8:	4605      	mov	r5, r0
 80177fa:	b911      	cbnz	r1, 8017802 <sbrk_aligned+0x12>
 80177fc:	f000 f964 	bl	8017ac8 <_sbrk_r>
 8017800:	6030      	str	r0, [r6, #0]
 8017802:	4621      	mov	r1, r4
 8017804:	4628      	mov	r0, r5
 8017806:	f000 f95f 	bl	8017ac8 <_sbrk_r>
 801780a:	1c43      	adds	r3, r0, #1
 801780c:	d103      	bne.n	8017816 <sbrk_aligned+0x26>
 801780e:	f04f 34ff 	mov.w	r4, #4294967295
 8017812:	4620      	mov	r0, r4
 8017814:	bd70      	pop	{r4, r5, r6, pc}
 8017816:	1cc4      	adds	r4, r0, #3
 8017818:	f024 0403 	bic.w	r4, r4, #3
 801781c:	42a0      	cmp	r0, r4
 801781e:	d0f8      	beq.n	8017812 <sbrk_aligned+0x22>
 8017820:	1a21      	subs	r1, r4, r0
 8017822:	4628      	mov	r0, r5
 8017824:	f000 f950 	bl	8017ac8 <_sbrk_r>
 8017828:	3001      	adds	r0, #1
 801782a:	d1f2      	bne.n	8017812 <sbrk_aligned+0x22>
 801782c:	e7ef      	b.n	801780e <sbrk_aligned+0x1e>
 801782e:	bf00      	nop
 8017830:	20004d3c 	.word	0x20004d3c

08017834 <_malloc_r>:
 8017834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017838:	1ccd      	adds	r5, r1, #3
 801783a:	f025 0503 	bic.w	r5, r5, #3
 801783e:	3508      	adds	r5, #8
 8017840:	2d0c      	cmp	r5, #12
 8017842:	bf38      	it	cc
 8017844:	250c      	movcc	r5, #12
 8017846:	2d00      	cmp	r5, #0
 8017848:	4606      	mov	r6, r0
 801784a:	db01      	blt.n	8017850 <_malloc_r+0x1c>
 801784c:	42a9      	cmp	r1, r5
 801784e:	d904      	bls.n	801785a <_malloc_r+0x26>
 8017850:	230c      	movs	r3, #12
 8017852:	6033      	str	r3, [r6, #0]
 8017854:	2000      	movs	r0, #0
 8017856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801785a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017930 <_malloc_r+0xfc>
 801785e:	f000 f869 	bl	8017934 <__malloc_lock>
 8017862:	f8d8 3000 	ldr.w	r3, [r8]
 8017866:	461c      	mov	r4, r3
 8017868:	bb44      	cbnz	r4, 80178bc <_malloc_r+0x88>
 801786a:	4629      	mov	r1, r5
 801786c:	4630      	mov	r0, r6
 801786e:	f7ff ffbf 	bl	80177f0 <sbrk_aligned>
 8017872:	1c43      	adds	r3, r0, #1
 8017874:	4604      	mov	r4, r0
 8017876:	d158      	bne.n	801792a <_malloc_r+0xf6>
 8017878:	f8d8 4000 	ldr.w	r4, [r8]
 801787c:	4627      	mov	r7, r4
 801787e:	2f00      	cmp	r7, #0
 8017880:	d143      	bne.n	801790a <_malloc_r+0xd6>
 8017882:	2c00      	cmp	r4, #0
 8017884:	d04b      	beq.n	801791e <_malloc_r+0xea>
 8017886:	6823      	ldr	r3, [r4, #0]
 8017888:	4639      	mov	r1, r7
 801788a:	4630      	mov	r0, r6
 801788c:	eb04 0903 	add.w	r9, r4, r3
 8017890:	f000 f91a 	bl	8017ac8 <_sbrk_r>
 8017894:	4581      	cmp	r9, r0
 8017896:	d142      	bne.n	801791e <_malloc_r+0xea>
 8017898:	6821      	ldr	r1, [r4, #0]
 801789a:	1a6d      	subs	r5, r5, r1
 801789c:	4629      	mov	r1, r5
 801789e:	4630      	mov	r0, r6
 80178a0:	f7ff ffa6 	bl	80177f0 <sbrk_aligned>
 80178a4:	3001      	adds	r0, #1
 80178a6:	d03a      	beq.n	801791e <_malloc_r+0xea>
 80178a8:	6823      	ldr	r3, [r4, #0]
 80178aa:	442b      	add	r3, r5
 80178ac:	6023      	str	r3, [r4, #0]
 80178ae:	f8d8 3000 	ldr.w	r3, [r8]
 80178b2:	685a      	ldr	r2, [r3, #4]
 80178b4:	bb62      	cbnz	r2, 8017910 <_malloc_r+0xdc>
 80178b6:	f8c8 7000 	str.w	r7, [r8]
 80178ba:	e00f      	b.n	80178dc <_malloc_r+0xa8>
 80178bc:	6822      	ldr	r2, [r4, #0]
 80178be:	1b52      	subs	r2, r2, r5
 80178c0:	d420      	bmi.n	8017904 <_malloc_r+0xd0>
 80178c2:	2a0b      	cmp	r2, #11
 80178c4:	d917      	bls.n	80178f6 <_malloc_r+0xc2>
 80178c6:	1961      	adds	r1, r4, r5
 80178c8:	42a3      	cmp	r3, r4
 80178ca:	6025      	str	r5, [r4, #0]
 80178cc:	bf18      	it	ne
 80178ce:	6059      	strne	r1, [r3, #4]
 80178d0:	6863      	ldr	r3, [r4, #4]
 80178d2:	bf08      	it	eq
 80178d4:	f8c8 1000 	streq.w	r1, [r8]
 80178d8:	5162      	str	r2, [r4, r5]
 80178da:	604b      	str	r3, [r1, #4]
 80178dc:	4630      	mov	r0, r6
 80178de:	f000 f82f 	bl	8017940 <__malloc_unlock>
 80178e2:	f104 000b 	add.w	r0, r4, #11
 80178e6:	1d23      	adds	r3, r4, #4
 80178e8:	f020 0007 	bic.w	r0, r0, #7
 80178ec:	1ac2      	subs	r2, r0, r3
 80178ee:	bf1c      	itt	ne
 80178f0:	1a1b      	subne	r3, r3, r0
 80178f2:	50a3      	strne	r3, [r4, r2]
 80178f4:	e7af      	b.n	8017856 <_malloc_r+0x22>
 80178f6:	6862      	ldr	r2, [r4, #4]
 80178f8:	42a3      	cmp	r3, r4
 80178fa:	bf0c      	ite	eq
 80178fc:	f8c8 2000 	streq.w	r2, [r8]
 8017900:	605a      	strne	r2, [r3, #4]
 8017902:	e7eb      	b.n	80178dc <_malloc_r+0xa8>
 8017904:	4623      	mov	r3, r4
 8017906:	6864      	ldr	r4, [r4, #4]
 8017908:	e7ae      	b.n	8017868 <_malloc_r+0x34>
 801790a:	463c      	mov	r4, r7
 801790c:	687f      	ldr	r7, [r7, #4]
 801790e:	e7b6      	b.n	801787e <_malloc_r+0x4a>
 8017910:	461a      	mov	r2, r3
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	42a3      	cmp	r3, r4
 8017916:	d1fb      	bne.n	8017910 <_malloc_r+0xdc>
 8017918:	2300      	movs	r3, #0
 801791a:	6053      	str	r3, [r2, #4]
 801791c:	e7de      	b.n	80178dc <_malloc_r+0xa8>
 801791e:	230c      	movs	r3, #12
 8017920:	6033      	str	r3, [r6, #0]
 8017922:	4630      	mov	r0, r6
 8017924:	f000 f80c 	bl	8017940 <__malloc_unlock>
 8017928:	e794      	b.n	8017854 <_malloc_r+0x20>
 801792a:	6005      	str	r5, [r0, #0]
 801792c:	e7d6      	b.n	80178dc <_malloc_r+0xa8>
 801792e:	bf00      	nop
 8017930:	20004d40 	.word	0x20004d40

08017934 <__malloc_lock>:
 8017934:	4801      	ldr	r0, [pc, #4]	@ (801793c <__malloc_lock+0x8>)
 8017936:	f7ff beda 	b.w	80176ee <__retarget_lock_acquire_recursive>
 801793a:	bf00      	nop
 801793c:	20004d38 	.word	0x20004d38

08017940 <__malloc_unlock>:
 8017940:	4801      	ldr	r0, [pc, #4]	@ (8017948 <__malloc_unlock+0x8>)
 8017942:	f7ff bed5 	b.w	80176f0 <__retarget_lock_release_recursive>
 8017946:	bf00      	nop
 8017948:	20004d38 	.word	0x20004d38

0801794c <__sflush_r>:
 801794c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017954:	0716      	lsls	r6, r2, #28
 8017956:	4605      	mov	r5, r0
 8017958:	460c      	mov	r4, r1
 801795a:	d454      	bmi.n	8017a06 <__sflush_r+0xba>
 801795c:	684b      	ldr	r3, [r1, #4]
 801795e:	2b00      	cmp	r3, #0
 8017960:	dc02      	bgt.n	8017968 <__sflush_r+0x1c>
 8017962:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017964:	2b00      	cmp	r3, #0
 8017966:	dd48      	ble.n	80179fa <__sflush_r+0xae>
 8017968:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801796a:	2e00      	cmp	r6, #0
 801796c:	d045      	beq.n	80179fa <__sflush_r+0xae>
 801796e:	2300      	movs	r3, #0
 8017970:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017974:	682f      	ldr	r7, [r5, #0]
 8017976:	6a21      	ldr	r1, [r4, #32]
 8017978:	602b      	str	r3, [r5, #0]
 801797a:	d030      	beq.n	80179de <__sflush_r+0x92>
 801797c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801797e:	89a3      	ldrh	r3, [r4, #12]
 8017980:	0759      	lsls	r1, r3, #29
 8017982:	d505      	bpl.n	8017990 <__sflush_r+0x44>
 8017984:	6863      	ldr	r3, [r4, #4]
 8017986:	1ad2      	subs	r2, r2, r3
 8017988:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801798a:	b10b      	cbz	r3, 8017990 <__sflush_r+0x44>
 801798c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801798e:	1ad2      	subs	r2, r2, r3
 8017990:	2300      	movs	r3, #0
 8017992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017994:	6a21      	ldr	r1, [r4, #32]
 8017996:	4628      	mov	r0, r5
 8017998:	47b0      	blx	r6
 801799a:	1c43      	adds	r3, r0, #1
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	d106      	bne.n	80179ae <__sflush_r+0x62>
 80179a0:	6829      	ldr	r1, [r5, #0]
 80179a2:	291d      	cmp	r1, #29
 80179a4:	d82b      	bhi.n	80179fe <__sflush_r+0xb2>
 80179a6:	4a2a      	ldr	r2, [pc, #168]	@ (8017a50 <__sflush_r+0x104>)
 80179a8:	410a      	asrs	r2, r1
 80179aa:	07d6      	lsls	r6, r2, #31
 80179ac:	d427      	bmi.n	80179fe <__sflush_r+0xb2>
 80179ae:	2200      	movs	r2, #0
 80179b0:	6062      	str	r2, [r4, #4]
 80179b2:	04d9      	lsls	r1, r3, #19
 80179b4:	6922      	ldr	r2, [r4, #16]
 80179b6:	6022      	str	r2, [r4, #0]
 80179b8:	d504      	bpl.n	80179c4 <__sflush_r+0x78>
 80179ba:	1c42      	adds	r2, r0, #1
 80179bc:	d101      	bne.n	80179c2 <__sflush_r+0x76>
 80179be:	682b      	ldr	r3, [r5, #0]
 80179c0:	b903      	cbnz	r3, 80179c4 <__sflush_r+0x78>
 80179c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80179c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179c6:	602f      	str	r7, [r5, #0]
 80179c8:	b1b9      	cbz	r1, 80179fa <__sflush_r+0xae>
 80179ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80179ce:	4299      	cmp	r1, r3
 80179d0:	d002      	beq.n	80179d8 <__sflush_r+0x8c>
 80179d2:	4628      	mov	r0, r5
 80179d4:	f7ff feba 	bl	801774c <_free_r>
 80179d8:	2300      	movs	r3, #0
 80179da:	6363      	str	r3, [r4, #52]	@ 0x34
 80179dc:	e00d      	b.n	80179fa <__sflush_r+0xae>
 80179de:	2301      	movs	r3, #1
 80179e0:	4628      	mov	r0, r5
 80179e2:	47b0      	blx	r6
 80179e4:	4602      	mov	r2, r0
 80179e6:	1c50      	adds	r0, r2, #1
 80179e8:	d1c9      	bne.n	801797e <__sflush_r+0x32>
 80179ea:	682b      	ldr	r3, [r5, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d0c6      	beq.n	801797e <__sflush_r+0x32>
 80179f0:	2b1d      	cmp	r3, #29
 80179f2:	d001      	beq.n	80179f8 <__sflush_r+0xac>
 80179f4:	2b16      	cmp	r3, #22
 80179f6:	d11e      	bne.n	8017a36 <__sflush_r+0xea>
 80179f8:	602f      	str	r7, [r5, #0]
 80179fa:	2000      	movs	r0, #0
 80179fc:	e022      	b.n	8017a44 <__sflush_r+0xf8>
 80179fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a02:	b21b      	sxth	r3, r3
 8017a04:	e01b      	b.n	8017a3e <__sflush_r+0xf2>
 8017a06:	690f      	ldr	r7, [r1, #16]
 8017a08:	2f00      	cmp	r7, #0
 8017a0a:	d0f6      	beq.n	80179fa <__sflush_r+0xae>
 8017a0c:	0793      	lsls	r3, r2, #30
 8017a0e:	680e      	ldr	r6, [r1, #0]
 8017a10:	bf08      	it	eq
 8017a12:	694b      	ldreq	r3, [r1, #20]
 8017a14:	600f      	str	r7, [r1, #0]
 8017a16:	bf18      	it	ne
 8017a18:	2300      	movne	r3, #0
 8017a1a:	eba6 0807 	sub.w	r8, r6, r7
 8017a1e:	608b      	str	r3, [r1, #8]
 8017a20:	f1b8 0f00 	cmp.w	r8, #0
 8017a24:	dde9      	ble.n	80179fa <__sflush_r+0xae>
 8017a26:	6a21      	ldr	r1, [r4, #32]
 8017a28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a2a:	4643      	mov	r3, r8
 8017a2c:	463a      	mov	r2, r7
 8017a2e:	4628      	mov	r0, r5
 8017a30:	47b0      	blx	r6
 8017a32:	2800      	cmp	r0, #0
 8017a34:	dc08      	bgt.n	8017a48 <__sflush_r+0xfc>
 8017a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a3e:	81a3      	strh	r3, [r4, #12]
 8017a40:	f04f 30ff 	mov.w	r0, #4294967295
 8017a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a48:	4407      	add	r7, r0
 8017a4a:	eba8 0800 	sub.w	r8, r8, r0
 8017a4e:	e7e7      	b.n	8017a20 <__sflush_r+0xd4>
 8017a50:	dfbffffe 	.word	0xdfbffffe

08017a54 <_fflush_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	690b      	ldr	r3, [r1, #16]
 8017a58:	4605      	mov	r5, r0
 8017a5a:	460c      	mov	r4, r1
 8017a5c:	b913      	cbnz	r3, 8017a64 <_fflush_r+0x10>
 8017a5e:	2500      	movs	r5, #0
 8017a60:	4628      	mov	r0, r5
 8017a62:	bd38      	pop	{r3, r4, r5, pc}
 8017a64:	b118      	cbz	r0, 8017a6e <_fflush_r+0x1a>
 8017a66:	6a03      	ldr	r3, [r0, #32]
 8017a68:	b90b      	cbnz	r3, 8017a6e <_fflush_r+0x1a>
 8017a6a:	f7ff fce7 	bl	801743c <__sinit>
 8017a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d0f3      	beq.n	8017a5e <_fflush_r+0xa>
 8017a76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017a78:	07d0      	lsls	r0, r2, #31
 8017a7a:	d404      	bmi.n	8017a86 <_fflush_r+0x32>
 8017a7c:	0599      	lsls	r1, r3, #22
 8017a7e:	d402      	bmi.n	8017a86 <_fflush_r+0x32>
 8017a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a82:	f7ff fe34 	bl	80176ee <__retarget_lock_acquire_recursive>
 8017a86:	4628      	mov	r0, r5
 8017a88:	4621      	mov	r1, r4
 8017a8a:	f7ff ff5f 	bl	801794c <__sflush_r>
 8017a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a90:	07da      	lsls	r2, r3, #31
 8017a92:	4605      	mov	r5, r0
 8017a94:	d4e4      	bmi.n	8017a60 <_fflush_r+0xc>
 8017a96:	89a3      	ldrh	r3, [r4, #12]
 8017a98:	059b      	lsls	r3, r3, #22
 8017a9a:	d4e1      	bmi.n	8017a60 <_fflush_r+0xc>
 8017a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a9e:	f7ff fe27 	bl	80176f0 <__retarget_lock_release_recursive>
 8017aa2:	e7dd      	b.n	8017a60 <_fflush_r+0xc>

08017aa4 <fiprintf>:
 8017aa4:	b40e      	push	{r1, r2, r3}
 8017aa6:	b503      	push	{r0, r1, lr}
 8017aa8:	4601      	mov	r1, r0
 8017aaa:	ab03      	add	r3, sp, #12
 8017aac:	4805      	ldr	r0, [pc, #20]	@ (8017ac4 <fiprintf+0x20>)
 8017aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ab2:	6800      	ldr	r0, [r0, #0]
 8017ab4:	9301      	str	r3, [sp, #4]
 8017ab6:	f000 f847 	bl	8017b48 <_vfiprintf_r>
 8017aba:	b002      	add	sp, #8
 8017abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ac0:	b003      	add	sp, #12
 8017ac2:	4770      	bx	lr
 8017ac4:	2000002c 	.word	0x2000002c

08017ac8 <_sbrk_r>:
 8017ac8:	b538      	push	{r3, r4, r5, lr}
 8017aca:	4d06      	ldr	r5, [pc, #24]	@ (8017ae4 <_sbrk_r+0x1c>)
 8017acc:	2300      	movs	r3, #0
 8017ace:	4604      	mov	r4, r0
 8017ad0:	4608      	mov	r0, r1
 8017ad2:	602b      	str	r3, [r5, #0]
 8017ad4:	f7e9 fa8e 	bl	8000ff4 <_sbrk>
 8017ad8:	1c43      	adds	r3, r0, #1
 8017ada:	d102      	bne.n	8017ae2 <_sbrk_r+0x1a>
 8017adc:	682b      	ldr	r3, [r5, #0]
 8017ade:	b103      	cbz	r3, 8017ae2 <_sbrk_r+0x1a>
 8017ae0:	6023      	str	r3, [r4, #0]
 8017ae2:	bd38      	pop	{r3, r4, r5, pc}
 8017ae4:	20004d34 	.word	0x20004d34

08017ae8 <abort>:
 8017ae8:	b508      	push	{r3, lr}
 8017aea:	2006      	movs	r0, #6
 8017aec:	f000 fb8e 	bl	801820c <raise>
 8017af0:	2001      	movs	r0, #1
 8017af2:	f7e9 fa07 	bl	8000f04 <_exit>

08017af6 <__sfputc_r>:
 8017af6:	6893      	ldr	r3, [r2, #8]
 8017af8:	3b01      	subs	r3, #1
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	b410      	push	{r4}
 8017afe:	6093      	str	r3, [r2, #8]
 8017b00:	da08      	bge.n	8017b14 <__sfputc_r+0x1e>
 8017b02:	6994      	ldr	r4, [r2, #24]
 8017b04:	42a3      	cmp	r3, r4
 8017b06:	db01      	blt.n	8017b0c <__sfputc_r+0x16>
 8017b08:	290a      	cmp	r1, #10
 8017b0a:	d103      	bne.n	8017b14 <__sfputc_r+0x1e>
 8017b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b10:	f000 bac0 	b.w	8018094 <__swbuf_r>
 8017b14:	6813      	ldr	r3, [r2, #0]
 8017b16:	1c58      	adds	r0, r3, #1
 8017b18:	6010      	str	r0, [r2, #0]
 8017b1a:	7019      	strb	r1, [r3, #0]
 8017b1c:	4608      	mov	r0, r1
 8017b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b22:	4770      	bx	lr

08017b24 <__sfputs_r>:
 8017b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b26:	4606      	mov	r6, r0
 8017b28:	460f      	mov	r7, r1
 8017b2a:	4614      	mov	r4, r2
 8017b2c:	18d5      	adds	r5, r2, r3
 8017b2e:	42ac      	cmp	r4, r5
 8017b30:	d101      	bne.n	8017b36 <__sfputs_r+0x12>
 8017b32:	2000      	movs	r0, #0
 8017b34:	e007      	b.n	8017b46 <__sfputs_r+0x22>
 8017b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b3a:	463a      	mov	r2, r7
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	f7ff ffda 	bl	8017af6 <__sfputc_r>
 8017b42:	1c43      	adds	r3, r0, #1
 8017b44:	d1f3      	bne.n	8017b2e <__sfputs_r+0xa>
 8017b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017b48 <_vfiprintf_r>:
 8017b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b4c:	460d      	mov	r5, r1
 8017b4e:	b09d      	sub	sp, #116	@ 0x74
 8017b50:	4614      	mov	r4, r2
 8017b52:	4698      	mov	r8, r3
 8017b54:	4606      	mov	r6, r0
 8017b56:	b118      	cbz	r0, 8017b60 <_vfiprintf_r+0x18>
 8017b58:	6a03      	ldr	r3, [r0, #32]
 8017b5a:	b90b      	cbnz	r3, 8017b60 <_vfiprintf_r+0x18>
 8017b5c:	f7ff fc6e 	bl	801743c <__sinit>
 8017b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b62:	07d9      	lsls	r1, r3, #31
 8017b64:	d405      	bmi.n	8017b72 <_vfiprintf_r+0x2a>
 8017b66:	89ab      	ldrh	r3, [r5, #12]
 8017b68:	059a      	lsls	r2, r3, #22
 8017b6a:	d402      	bmi.n	8017b72 <_vfiprintf_r+0x2a>
 8017b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b6e:	f7ff fdbe 	bl	80176ee <__retarget_lock_acquire_recursive>
 8017b72:	89ab      	ldrh	r3, [r5, #12]
 8017b74:	071b      	lsls	r3, r3, #28
 8017b76:	d501      	bpl.n	8017b7c <_vfiprintf_r+0x34>
 8017b78:	692b      	ldr	r3, [r5, #16]
 8017b7a:	b99b      	cbnz	r3, 8017ba4 <_vfiprintf_r+0x5c>
 8017b7c:	4629      	mov	r1, r5
 8017b7e:	4630      	mov	r0, r6
 8017b80:	f000 fac6 	bl	8018110 <__swsetup_r>
 8017b84:	b170      	cbz	r0, 8017ba4 <_vfiprintf_r+0x5c>
 8017b86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b88:	07dc      	lsls	r4, r3, #31
 8017b8a:	d504      	bpl.n	8017b96 <_vfiprintf_r+0x4e>
 8017b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b90:	b01d      	add	sp, #116	@ 0x74
 8017b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b96:	89ab      	ldrh	r3, [r5, #12]
 8017b98:	0598      	lsls	r0, r3, #22
 8017b9a:	d4f7      	bmi.n	8017b8c <_vfiprintf_r+0x44>
 8017b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b9e:	f7ff fda7 	bl	80176f0 <__retarget_lock_release_recursive>
 8017ba2:	e7f3      	b.n	8017b8c <_vfiprintf_r+0x44>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ba8:	2320      	movs	r3, #32
 8017baa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bb2:	2330      	movs	r3, #48	@ 0x30
 8017bb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d64 <_vfiprintf_r+0x21c>
 8017bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017bbc:	f04f 0901 	mov.w	r9, #1
 8017bc0:	4623      	mov	r3, r4
 8017bc2:	469a      	mov	sl, r3
 8017bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bc8:	b10a      	cbz	r2, 8017bce <_vfiprintf_r+0x86>
 8017bca:	2a25      	cmp	r2, #37	@ 0x25
 8017bcc:	d1f9      	bne.n	8017bc2 <_vfiprintf_r+0x7a>
 8017bce:	ebba 0b04 	subs.w	fp, sl, r4
 8017bd2:	d00b      	beq.n	8017bec <_vfiprintf_r+0xa4>
 8017bd4:	465b      	mov	r3, fp
 8017bd6:	4622      	mov	r2, r4
 8017bd8:	4629      	mov	r1, r5
 8017bda:	4630      	mov	r0, r6
 8017bdc:	f7ff ffa2 	bl	8017b24 <__sfputs_r>
 8017be0:	3001      	adds	r0, #1
 8017be2:	f000 80a7 	beq.w	8017d34 <_vfiprintf_r+0x1ec>
 8017be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017be8:	445a      	add	r2, fp
 8017bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8017bec:	f89a 3000 	ldrb.w	r3, [sl]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	f000 809f 	beq.w	8017d34 <_vfiprintf_r+0x1ec>
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8017bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c00:	f10a 0a01 	add.w	sl, sl, #1
 8017c04:	9304      	str	r3, [sp, #16]
 8017c06:	9307      	str	r3, [sp, #28]
 8017c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c0e:	4654      	mov	r4, sl
 8017c10:	2205      	movs	r2, #5
 8017c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c16:	4853      	ldr	r0, [pc, #332]	@ (8017d64 <_vfiprintf_r+0x21c>)
 8017c18:	f7e8 faea 	bl	80001f0 <memchr>
 8017c1c:	9a04      	ldr	r2, [sp, #16]
 8017c1e:	b9d8      	cbnz	r0, 8017c58 <_vfiprintf_r+0x110>
 8017c20:	06d1      	lsls	r1, r2, #27
 8017c22:	bf44      	itt	mi
 8017c24:	2320      	movmi	r3, #32
 8017c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c2a:	0713      	lsls	r3, r2, #28
 8017c2c:	bf44      	itt	mi
 8017c2e:	232b      	movmi	r3, #43	@ 0x2b
 8017c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c34:	f89a 3000 	ldrb.w	r3, [sl]
 8017c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c3a:	d015      	beq.n	8017c68 <_vfiprintf_r+0x120>
 8017c3c:	9a07      	ldr	r2, [sp, #28]
 8017c3e:	4654      	mov	r4, sl
 8017c40:	2000      	movs	r0, #0
 8017c42:	f04f 0c0a 	mov.w	ip, #10
 8017c46:	4621      	mov	r1, r4
 8017c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c4c:	3b30      	subs	r3, #48	@ 0x30
 8017c4e:	2b09      	cmp	r3, #9
 8017c50:	d94b      	bls.n	8017cea <_vfiprintf_r+0x1a2>
 8017c52:	b1b0      	cbz	r0, 8017c82 <_vfiprintf_r+0x13a>
 8017c54:	9207      	str	r2, [sp, #28]
 8017c56:	e014      	b.n	8017c82 <_vfiprintf_r+0x13a>
 8017c58:	eba0 0308 	sub.w	r3, r0, r8
 8017c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8017c60:	4313      	orrs	r3, r2
 8017c62:	9304      	str	r3, [sp, #16]
 8017c64:	46a2      	mov	sl, r4
 8017c66:	e7d2      	b.n	8017c0e <_vfiprintf_r+0xc6>
 8017c68:	9b03      	ldr	r3, [sp, #12]
 8017c6a:	1d19      	adds	r1, r3, #4
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	9103      	str	r1, [sp, #12]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	bfbb      	ittet	lt
 8017c74:	425b      	neglt	r3, r3
 8017c76:	f042 0202 	orrlt.w	r2, r2, #2
 8017c7a:	9307      	strge	r3, [sp, #28]
 8017c7c:	9307      	strlt	r3, [sp, #28]
 8017c7e:	bfb8      	it	lt
 8017c80:	9204      	strlt	r2, [sp, #16]
 8017c82:	7823      	ldrb	r3, [r4, #0]
 8017c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c86:	d10a      	bne.n	8017c9e <_vfiprintf_r+0x156>
 8017c88:	7863      	ldrb	r3, [r4, #1]
 8017c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c8c:	d132      	bne.n	8017cf4 <_vfiprintf_r+0x1ac>
 8017c8e:	9b03      	ldr	r3, [sp, #12]
 8017c90:	1d1a      	adds	r2, r3, #4
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	9203      	str	r2, [sp, #12]
 8017c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c9a:	3402      	adds	r4, #2
 8017c9c:	9305      	str	r3, [sp, #20]
 8017c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017d74 <_vfiprintf_r+0x22c>
 8017ca2:	7821      	ldrb	r1, [r4, #0]
 8017ca4:	2203      	movs	r2, #3
 8017ca6:	4650      	mov	r0, sl
 8017ca8:	f7e8 faa2 	bl	80001f0 <memchr>
 8017cac:	b138      	cbz	r0, 8017cbe <_vfiprintf_r+0x176>
 8017cae:	9b04      	ldr	r3, [sp, #16]
 8017cb0:	eba0 000a 	sub.w	r0, r0, sl
 8017cb4:	2240      	movs	r2, #64	@ 0x40
 8017cb6:	4082      	lsls	r2, r0
 8017cb8:	4313      	orrs	r3, r2
 8017cba:	3401      	adds	r4, #1
 8017cbc:	9304      	str	r3, [sp, #16]
 8017cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cc2:	4829      	ldr	r0, [pc, #164]	@ (8017d68 <_vfiprintf_r+0x220>)
 8017cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017cc8:	2206      	movs	r2, #6
 8017cca:	f7e8 fa91 	bl	80001f0 <memchr>
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d03f      	beq.n	8017d52 <_vfiprintf_r+0x20a>
 8017cd2:	4b26      	ldr	r3, [pc, #152]	@ (8017d6c <_vfiprintf_r+0x224>)
 8017cd4:	bb1b      	cbnz	r3, 8017d1e <_vfiprintf_r+0x1d6>
 8017cd6:	9b03      	ldr	r3, [sp, #12]
 8017cd8:	3307      	adds	r3, #7
 8017cda:	f023 0307 	bic.w	r3, r3, #7
 8017cde:	3308      	adds	r3, #8
 8017ce0:	9303      	str	r3, [sp, #12]
 8017ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ce4:	443b      	add	r3, r7
 8017ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ce8:	e76a      	b.n	8017bc0 <_vfiprintf_r+0x78>
 8017cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8017cee:	460c      	mov	r4, r1
 8017cf0:	2001      	movs	r0, #1
 8017cf2:	e7a8      	b.n	8017c46 <_vfiprintf_r+0xfe>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	3401      	adds	r4, #1
 8017cf8:	9305      	str	r3, [sp, #20]
 8017cfa:	4619      	mov	r1, r3
 8017cfc:	f04f 0c0a 	mov.w	ip, #10
 8017d00:	4620      	mov	r0, r4
 8017d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d06:	3a30      	subs	r2, #48	@ 0x30
 8017d08:	2a09      	cmp	r2, #9
 8017d0a:	d903      	bls.n	8017d14 <_vfiprintf_r+0x1cc>
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d0c6      	beq.n	8017c9e <_vfiprintf_r+0x156>
 8017d10:	9105      	str	r1, [sp, #20]
 8017d12:	e7c4      	b.n	8017c9e <_vfiprintf_r+0x156>
 8017d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d18:	4604      	mov	r4, r0
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	e7f0      	b.n	8017d00 <_vfiprintf_r+0x1b8>
 8017d1e:	ab03      	add	r3, sp, #12
 8017d20:	9300      	str	r3, [sp, #0]
 8017d22:	462a      	mov	r2, r5
 8017d24:	4b12      	ldr	r3, [pc, #72]	@ (8017d70 <_vfiprintf_r+0x228>)
 8017d26:	a904      	add	r1, sp, #16
 8017d28:	4630      	mov	r0, r6
 8017d2a:	f3af 8000 	nop.w
 8017d2e:	4607      	mov	r7, r0
 8017d30:	1c78      	adds	r0, r7, #1
 8017d32:	d1d6      	bne.n	8017ce2 <_vfiprintf_r+0x19a>
 8017d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d36:	07d9      	lsls	r1, r3, #31
 8017d38:	d405      	bmi.n	8017d46 <_vfiprintf_r+0x1fe>
 8017d3a:	89ab      	ldrh	r3, [r5, #12]
 8017d3c:	059a      	lsls	r2, r3, #22
 8017d3e:	d402      	bmi.n	8017d46 <_vfiprintf_r+0x1fe>
 8017d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d42:	f7ff fcd5 	bl	80176f0 <__retarget_lock_release_recursive>
 8017d46:	89ab      	ldrh	r3, [r5, #12]
 8017d48:	065b      	lsls	r3, r3, #25
 8017d4a:	f53f af1f 	bmi.w	8017b8c <_vfiprintf_r+0x44>
 8017d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d50:	e71e      	b.n	8017b90 <_vfiprintf_r+0x48>
 8017d52:	ab03      	add	r3, sp, #12
 8017d54:	9300      	str	r3, [sp, #0]
 8017d56:	462a      	mov	r2, r5
 8017d58:	4b05      	ldr	r3, [pc, #20]	@ (8017d70 <_vfiprintf_r+0x228>)
 8017d5a:	a904      	add	r1, sp, #16
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	f000 f879 	bl	8017e54 <_printf_i>
 8017d62:	e7e4      	b.n	8017d2e <_vfiprintf_r+0x1e6>
 8017d64:	0801be5d 	.word	0x0801be5d
 8017d68:	0801be67 	.word	0x0801be67
 8017d6c:	00000000 	.word	0x00000000
 8017d70:	08017b25 	.word	0x08017b25
 8017d74:	0801be63 	.word	0x0801be63

08017d78 <_printf_common>:
 8017d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d7c:	4616      	mov	r6, r2
 8017d7e:	4698      	mov	r8, r3
 8017d80:	688a      	ldr	r2, [r1, #8]
 8017d82:	690b      	ldr	r3, [r1, #16]
 8017d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017d88:	4293      	cmp	r3, r2
 8017d8a:	bfb8      	it	lt
 8017d8c:	4613      	movlt	r3, r2
 8017d8e:	6033      	str	r3, [r6, #0]
 8017d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017d94:	4607      	mov	r7, r0
 8017d96:	460c      	mov	r4, r1
 8017d98:	b10a      	cbz	r2, 8017d9e <_printf_common+0x26>
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	6033      	str	r3, [r6, #0]
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	0699      	lsls	r1, r3, #26
 8017da2:	bf42      	ittt	mi
 8017da4:	6833      	ldrmi	r3, [r6, #0]
 8017da6:	3302      	addmi	r3, #2
 8017da8:	6033      	strmi	r3, [r6, #0]
 8017daa:	6825      	ldr	r5, [r4, #0]
 8017dac:	f015 0506 	ands.w	r5, r5, #6
 8017db0:	d106      	bne.n	8017dc0 <_printf_common+0x48>
 8017db2:	f104 0a19 	add.w	sl, r4, #25
 8017db6:	68e3      	ldr	r3, [r4, #12]
 8017db8:	6832      	ldr	r2, [r6, #0]
 8017dba:	1a9b      	subs	r3, r3, r2
 8017dbc:	42ab      	cmp	r3, r5
 8017dbe:	dc26      	bgt.n	8017e0e <_printf_common+0x96>
 8017dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017dc4:	6822      	ldr	r2, [r4, #0]
 8017dc6:	3b00      	subs	r3, #0
 8017dc8:	bf18      	it	ne
 8017dca:	2301      	movne	r3, #1
 8017dcc:	0692      	lsls	r2, r2, #26
 8017dce:	d42b      	bmi.n	8017e28 <_printf_common+0xb0>
 8017dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017dd4:	4641      	mov	r1, r8
 8017dd6:	4638      	mov	r0, r7
 8017dd8:	47c8      	blx	r9
 8017dda:	3001      	adds	r0, #1
 8017ddc:	d01e      	beq.n	8017e1c <_printf_common+0xa4>
 8017dde:	6823      	ldr	r3, [r4, #0]
 8017de0:	6922      	ldr	r2, [r4, #16]
 8017de2:	f003 0306 	and.w	r3, r3, #6
 8017de6:	2b04      	cmp	r3, #4
 8017de8:	bf02      	ittt	eq
 8017dea:	68e5      	ldreq	r5, [r4, #12]
 8017dec:	6833      	ldreq	r3, [r6, #0]
 8017dee:	1aed      	subeq	r5, r5, r3
 8017df0:	68a3      	ldr	r3, [r4, #8]
 8017df2:	bf0c      	ite	eq
 8017df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017df8:	2500      	movne	r5, #0
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	bfc4      	itt	gt
 8017dfe:	1a9b      	subgt	r3, r3, r2
 8017e00:	18ed      	addgt	r5, r5, r3
 8017e02:	2600      	movs	r6, #0
 8017e04:	341a      	adds	r4, #26
 8017e06:	42b5      	cmp	r5, r6
 8017e08:	d11a      	bne.n	8017e40 <_printf_common+0xc8>
 8017e0a:	2000      	movs	r0, #0
 8017e0c:	e008      	b.n	8017e20 <_printf_common+0xa8>
 8017e0e:	2301      	movs	r3, #1
 8017e10:	4652      	mov	r2, sl
 8017e12:	4641      	mov	r1, r8
 8017e14:	4638      	mov	r0, r7
 8017e16:	47c8      	blx	r9
 8017e18:	3001      	adds	r0, #1
 8017e1a:	d103      	bne.n	8017e24 <_printf_common+0xac>
 8017e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e24:	3501      	adds	r5, #1
 8017e26:	e7c6      	b.n	8017db6 <_printf_common+0x3e>
 8017e28:	18e1      	adds	r1, r4, r3
 8017e2a:	1c5a      	adds	r2, r3, #1
 8017e2c:	2030      	movs	r0, #48	@ 0x30
 8017e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e32:	4422      	add	r2, r4
 8017e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e3c:	3302      	adds	r3, #2
 8017e3e:	e7c7      	b.n	8017dd0 <_printf_common+0x58>
 8017e40:	2301      	movs	r3, #1
 8017e42:	4622      	mov	r2, r4
 8017e44:	4641      	mov	r1, r8
 8017e46:	4638      	mov	r0, r7
 8017e48:	47c8      	blx	r9
 8017e4a:	3001      	adds	r0, #1
 8017e4c:	d0e6      	beq.n	8017e1c <_printf_common+0xa4>
 8017e4e:	3601      	adds	r6, #1
 8017e50:	e7d9      	b.n	8017e06 <_printf_common+0x8e>
	...

08017e54 <_printf_i>:
 8017e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e58:	7e0f      	ldrb	r7, [r1, #24]
 8017e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e5c:	2f78      	cmp	r7, #120	@ 0x78
 8017e5e:	4691      	mov	r9, r2
 8017e60:	4680      	mov	r8, r0
 8017e62:	460c      	mov	r4, r1
 8017e64:	469a      	mov	sl, r3
 8017e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e6a:	d807      	bhi.n	8017e7c <_printf_i+0x28>
 8017e6c:	2f62      	cmp	r7, #98	@ 0x62
 8017e6e:	d80a      	bhi.n	8017e86 <_printf_i+0x32>
 8017e70:	2f00      	cmp	r7, #0
 8017e72:	f000 80d2 	beq.w	801801a <_printf_i+0x1c6>
 8017e76:	2f58      	cmp	r7, #88	@ 0x58
 8017e78:	f000 80b9 	beq.w	8017fee <_printf_i+0x19a>
 8017e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017e84:	e03a      	b.n	8017efc <_printf_i+0xa8>
 8017e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017e8a:	2b15      	cmp	r3, #21
 8017e8c:	d8f6      	bhi.n	8017e7c <_printf_i+0x28>
 8017e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8017e94 <_printf_i+0x40>)
 8017e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017e94:	08017eed 	.word	0x08017eed
 8017e98:	08017f01 	.word	0x08017f01
 8017e9c:	08017e7d 	.word	0x08017e7d
 8017ea0:	08017e7d 	.word	0x08017e7d
 8017ea4:	08017e7d 	.word	0x08017e7d
 8017ea8:	08017e7d 	.word	0x08017e7d
 8017eac:	08017f01 	.word	0x08017f01
 8017eb0:	08017e7d 	.word	0x08017e7d
 8017eb4:	08017e7d 	.word	0x08017e7d
 8017eb8:	08017e7d 	.word	0x08017e7d
 8017ebc:	08017e7d 	.word	0x08017e7d
 8017ec0:	08018001 	.word	0x08018001
 8017ec4:	08017f2b 	.word	0x08017f2b
 8017ec8:	08017fbb 	.word	0x08017fbb
 8017ecc:	08017e7d 	.word	0x08017e7d
 8017ed0:	08017e7d 	.word	0x08017e7d
 8017ed4:	08018023 	.word	0x08018023
 8017ed8:	08017e7d 	.word	0x08017e7d
 8017edc:	08017f2b 	.word	0x08017f2b
 8017ee0:	08017e7d 	.word	0x08017e7d
 8017ee4:	08017e7d 	.word	0x08017e7d
 8017ee8:	08017fc3 	.word	0x08017fc3
 8017eec:	6833      	ldr	r3, [r6, #0]
 8017eee:	1d1a      	adds	r2, r3, #4
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	6032      	str	r2, [r6, #0]
 8017ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017efc:	2301      	movs	r3, #1
 8017efe:	e09d      	b.n	801803c <_printf_i+0x1e8>
 8017f00:	6833      	ldr	r3, [r6, #0]
 8017f02:	6820      	ldr	r0, [r4, #0]
 8017f04:	1d19      	adds	r1, r3, #4
 8017f06:	6031      	str	r1, [r6, #0]
 8017f08:	0606      	lsls	r6, r0, #24
 8017f0a:	d501      	bpl.n	8017f10 <_printf_i+0xbc>
 8017f0c:	681d      	ldr	r5, [r3, #0]
 8017f0e:	e003      	b.n	8017f18 <_printf_i+0xc4>
 8017f10:	0645      	lsls	r5, r0, #25
 8017f12:	d5fb      	bpl.n	8017f0c <_printf_i+0xb8>
 8017f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f18:	2d00      	cmp	r5, #0
 8017f1a:	da03      	bge.n	8017f24 <_printf_i+0xd0>
 8017f1c:	232d      	movs	r3, #45	@ 0x2d
 8017f1e:	426d      	negs	r5, r5
 8017f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f24:	4859      	ldr	r0, [pc, #356]	@ (801808c <_printf_i+0x238>)
 8017f26:	230a      	movs	r3, #10
 8017f28:	e011      	b.n	8017f4e <_printf_i+0xfa>
 8017f2a:	6821      	ldr	r1, [r4, #0]
 8017f2c:	6833      	ldr	r3, [r6, #0]
 8017f2e:	0608      	lsls	r0, r1, #24
 8017f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f34:	d402      	bmi.n	8017f3c <_printf_i+0xe8>
 8017f36:	0649      	lsls	r1, r1, #25
 8017f38:	bf48      	it	mi
 8017f3a:	b2ad      	uxthmi	r5, r5
 8017f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f3e:	4853      	ldr	r0, [pc, #332]	@ (801808c <_printf_i+0x238>)
 8017f40:	6033      	str	r3, [r6, #0]
 8017f42:	bf14      	ite	ne
 8017f44:	230a      	movne	r3, #10
 8017f46:	2308      	moveq	r3, #8
 8017f48:	2100      	movs	r1, #0
 8017f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f4e:	6866      	ldr	r6, [r4, #4]
 8017f50:	60a6      	str	r6, [r4, #8]
 8017f52:	2e00      	cmp	r6, #0
 8017f54:	bfa2      	ittt	ge
 8017f56:	6821      	ldrge	r1, [r4, #0]
 8017f58:	f021 0104 	bicge.w	r1, r1, #4
 8017f5c:	6021      	strge	r1, [r4, #0]
 8017f5e:	b90d      	cbnz	r5, 8017f64 <_printf_i+0x110>
 8017f60:	2e00      	cmp	r6, #0
 8017f62:	d04b      	beq.n	8017ffc <_printf_i+0x1a8>
 8017f64:	4616      	mov	r6, r2
 8017f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8017f6e:	5dc7      	ldrb	r7, [r0, r7]
 8017f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f74:	462f      	mov	r7, r5
 8017f76:	42bb      	cmp	r3, r7
 8017f78:	460d      	mov	r5, r1
 8017f7a:	d9f4      	bls.n	8017f66 <_printf_i+0x112>
 8017f7c:	2b08      	cmp	r3, #8
 8017f7e:	d10b      	bne.n	8017f98 <_printf_i+0x144>
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	07df      	lsls	r7, r3, #31
 8017f84:	d508      	bpl.n	8017f98 <_printf_i+0x144>
 8017f86:	6923      	ldr	r3, [r4, #16]
 8017f88:	6861      	ldr	r1, [r4, #4]
 8017f8a:	4299      	cmp	r1, r3
 8017f8c:	bfde      	ittt	le
 8017f8e:	2330      	movle	r3, #48	@ 0x30
 8017f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f98:	1b92      	subs	r2, r2, r6
 8017f9a:	6122      	str	r2, [r4, #16]
 8017f9c:	f8cd a000 	str.w	sl, [sp]
 8017fa0:	464b      	mov	r3, r9
 8017fa2:	aa03      	add	r2, sp, #12
 8017fa4:	4621      	mov	r1, r4
 8017fa6:	4640      	mov	r0, r8
 8017fa8:	f7ff fee6 	bl	8017d78 <_printf_common>
 8017fac:	3001      	adds	r0, #1
 8017fae:	d14a      	bne.n	8018046 <_printf_i+0x1f2>
 8017fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb4:	b004      	add	sp, #16
 8017fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fba:	6823      	ldr	r3, [r4, #0]
 8017fbc:	f043 0320 	orr.w	r3, r3, #32
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	4833      	ldr	r0, [pc, #204]	@ (8018090 <_printf_i+0x23c>)
 8017fc4:	2778      	movs	r7, #120	@ 0x78
 8017fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017fca:	6823      	ldr	r3, [r4, #0]
 8017fcc:	6831      	ldr	r1, [r6, #0]
 8017fce:	061f      	lsls	r7, r3, #24
 8017fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8017fd4:	d402      	bmi.n	8017fdc <_printf_i+0x188>
 8017fd6:	065f      	lsls	r7, r3, #25
 8017fd8:	bf48      	it	mi
 8017fda:	b2ad      	uxthmi	r5, r5
 8017fdc:	6031      	str	r1, [r6, #0]
 8017fde:	07d9      	lsls	r1, r3, #31
 8017fe0:	bf44      	itt	mi
 8017fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8017fe6:	6023      	strmi	r3, [r4, #0]
 8017fe8:	b11d      	cbz	r5, 8017ff2 <_printf_i+0x19e>
 8017fea:	2310      	movs	r3, #16
 8017fec:	e7ac      	b.n	8017f48 <_printf_i+0xf4>
 8017fee:	4827      	ldr	r0, [pc, #156]	@ (801808c <_printf_i+0x238>)
 8017ff0:	e7e9      	b.n	8017fc6 <_printf_i+0x172>
 8017ff2:	6823      	ldr	r3, [r4, #0]
 8017ff4:	f023 0320 	bic.w	r3, r3, #32
 8017ff8:	6023      	str	r3, [r4, #0]
 8017ffa:	e7f6      	b.n	8017fea <_printf_i+0x196>
 8017ffc:	4616      	mov	r6, r2
 8017ffe:	e7bd      	b.n	8017f7c <_printf_i+0x128>
 8018000:	6833      	ldr	r3, [r6, #0]
 8018002:	6825      	ldr	r5, [r4, #0]
 8018004:	6961      	ldr	r1, [r4, #20]
 8018006:	1d18      	adds	r0, r3, #4
 8018008:	6030      	str	r0, [r6, #0]
 801800a:	062e      	lsls	r6, r5, #24
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	d501      	bpl.n	8018014 <_printf_i+0x1c0>
 8018010:	6019      	str	r1, [r3, #0]
 8018012:	e002      	b.n	801801a <_printf_i+0x1c6>
 8018014:	0668      	lsls	r0, r5, #25
 8018016:	d5fb      	bpl.n	8018010 <_printf_i+0x1bc>
 8018018:	8019      	strh	r1, [r3, #0]
 801801a:	2300      	movs	r3, #0
 801801c:	6123      	str	r3, [r4, #16]
 801801e:	4616      	mov	r6, r2
 8018020:	e7bc      	b.n	8017f9c <_printf_i+0x148>
 8018022:	6833      	ldr	r3, [r6, #0]
 8018024:	1d1a      	adds	r2, r3, #4
 8018026:	6032      	str	r2, [r6, #0]
 8018028:	681e      	ldr	r6, [r3, #0]
 801802a:	6862      	ldr	r2, [r4, #4]
 801802c:	2100      	movs	r1, #0
 801802e:	4630      	mov	r0, r6
 8018030:	f7e8 f8de 	bl	80001f0 <memchr>
 8018034:	b108      	cbz	r0, 801803a <_printf_i+0x1e6>
 8018036:	1b80      	subs	r0, r0, r6
 8018038:	6060      	str	r0, [r4, #4]
 801803a:	6863      	ldr	r3, [r4, #4]
 801803c:	6123      	str	r3, [r4, #16]
 801803e:	2300      	movs	r3, #0
 8018040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018044:	e7aa      	b.n	8017f9c <_printf_i+0x148>
 8018046:	6923      	ldr	r3, [r4, #16]
 8018048:	4632      	mov	r2, r6
 801804a:	4649      	mov	r1, r9
 801804c:	4640      	mov	r0, r8
 801804e:	47d0      	blx	sl
 8018050:	3001      	adds	r0, #1
 8018052:	d0ad      	beq.n	8017fb0 <_printf_i+0x15c>
 8018054:	6823      	ldr	r3, [r4, #0]
 8018056:	079b      	lsls	r3, r3, #30
 8018058:	d413      	bmi.n	8018082 <_printf_i+0x22e>
 801805a:	68e0      	ldr	r0, [r4, #12]
 801805c:	9b03      	ldr	r3, [sp, #12]
 801805e:	4298      	cmp	r0, r3
 8018060:	bfb8      	it	lt
 8018062:	4618      	movlt	r0, r3
 8018064:	e7a6      	b.n	8017fb4 <_printf_i+0x160>
 8018066:	2301      	movs	r3, #1
 8018068:	4632      	mov	r2, r6
 801806a:	4649      	mov	r1, r9
 801806c:	4640      	mov	r0, r8
 801806e:	47d0      	blx	sl
 8018070:	3001      	adds	r0, #1
 8018072:	d09d      	beq.n	8017fb0 <_printf_i+0x15c>
 8018074:	3501      	adds	r5, #1
 8018076:	68e3      	ldr	r3, [r4, #12]
 8018078:	9903      	ldr	r1, [sp, #12]
 801807a:	1a5b      	subs	r3, r3, r1
 801807c:	42ab      	cmp	r3, r5
 801807e:	dcf2      	bgt.n	8018066 <_printf_i+0x212>
 8018080:	e7eb      	b.n	801805a <_printf_i+0x206>
 8018082:	2500      	movs	r5, #0
 8018084:	f104 0619 	add.w	r6, r4, #25
 8018088:	e7f5      	b.n	8018076 <_printf_i+0x222>
 801808a:	bf00      	nop
 801808c:	0801be6e 	.word	0x0801be6e
 8018090:	0801be7f 	.word	0x0801be7f

08018094 <__swbuf_r>:
 8018094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018096:	460e      	mov	r6, r1
 8018098:	4614      	mov	r4, r2
 801809a:	4605      	mov	r5, r0
 801809c:	b118      	cbz	r0, 80180a6 <__swbuf_r+0x12>
 801809e:	6a03      	ldr	r3, [r0, #32]
 80180a0:	b90b      	cbnz	r3, 80180a6 <__swbuf_r+0x12>
 80180a2:	f7ff f9cb 	bl	801743c <__sinit>
 80180a6:	69a3      	ldr	r3, [r4, #24]
 80180a8:	60a3      	str	r3, [r4, #8]
 80180aa:	89a3      	ldrh	r3, [r4, #12]
 80180ac:	071a      	lsls	r2, r3, #28
 80180ae:	d501      	bpl.n	80180b4 <__swbuf_r+0x20>
 80180b0:	6923      	ldr	r3, [r4, #16]
 80180b2:	b943      	cbnz	r3, 80180c6 <__swbuf_r+0x32>
 80180b4:	4621      	mov	r1, r4
 80180b6:	4628      	mov	r0, r5
 80180b8:	f000 f82a 	bl	8018110 <__swsetup_r>
 80180bc:	b118      	cbz	r0, 80180c6 <__swbuf_r+0x32>
 80180be:	f04f 37ff 	mov.w	r7, #4294967295
 80180c2:	4638      	mov	r0, r7
 80180c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	6922      	ldr	r2, [r4, #16]
 80180ca:	1a98      	subs	r0, r3, r2
 80180cc:	6963      	ldr	r3, [r4, #20]
 80180ce:	b2f6      	uxtb	r6, r6
 80180d0:	4283      	cmp	r3, r0
 80180d2:	4637      	mov	r7, r6
 80180d4:	dc05      	bgt.n	80180e2 <__swbuf_r+0x4e>
 80180d6:	4621      	mov	r1, r4
 80180d8:	4628      	mov	r0, r5
 80180da:	f7ff fcbb 	bl	8017a54 <_fflush_r>
 80180de:	2800      	cmp	r0, #0
 80180e0:	d1ed      	bne.n	80180be <__swbuf_r+0x2a>
 80180e2:	68a3      	ldr	r3, [r4, #8]
 80180e4:	3b01      	subs	r3, #1
 80180e6:	60a3      	str	r3, [r4, #8]
 80180e8:	6823      	ldr	r3, [r4, #0]
 80180ea:	1c5a      	adds	r2, r3, #1
 80180ec:	6022      	str	r2, [r4, #0]
 80180ee:	701e      	strb	r6, [r3, #0]
 80180f0:	6962      	ldr	r2, [r4, #20]
 80180f2:	1c43      	adds	r3, r0, #1
 80180f4:	429a      	cmp	r2, r3
 80180f6:	d004      	beq.n	8018102 <__swbuf_r+0x6e>
 80180f8:	89a3      	ldrh	r3, [r4, #12]
 80180fa:	07db      	lsls	r3, r3, #31
 80180fc:	d5e1      	bpl.n	80180c2 <__swbuf_r+0x2e>
 80180fe:	2e0a      	cmp	r6, #10
 8018100:	d1df      	bne.n	80180c2 <__swbuf_r+0x2e>
 8018102:	4621      	mov	r1, r4
 8018104:	4628      	mov	r0, r5
 8018106:	f7ff fca5 	bl	8017a54 <_fflush_r>
 801810a:	2800      	cmp	r0, #0
 801810c:	d0d9      	beq.n	80180c2 <__swbuf_r+0x2e>
 801810e:	e7d6      	b.n	80180be <__swbuf_r+0x2a>

08018110 <__swsetup_r>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4b29      	ldr	r3, [pc, #164]	@ (80181b8 <__swsetup_r+0xa8>)
 8018114:	4605      	mov	r5, r0
 8018116:	6818      	ldr	r0, [r3, #0]
 8018118:	460c      	mov	r4, r1
 801811a:	b118      	cbz	r0, 8018124 <__swsetup_r+0x14>
 801811c:	6a03      	ldr	r3, [r0, #32]
 801811e:	b90b      	cbnz	r3, 8018124 <__swsetup_r+0x14>
 8018120:	f7ff f98c 	bl	801743c <__sinit>
 8018124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018128:	0719      	lsls	r1, r3, #28
 801812a:	d422      	bmi.n	8018172 <__swsetup_r+0x62>
 801812c:	06da      	lsls	r2, r3, #27
 801812e:	d407      	bmi.n	8018140 <__swsetup_r+0x30>
 8018130:	2209      	movs	r2, #9
 8018132:	602a      	str	r2, [r5, #0]
 8018134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018138:	81a3      	strh	r3, [r4, #12]
 801813a:	f04f 30ff 	mov.w	r0, #4294967295
 801813e:	e033      	b.n	80181a8 <__swsetup_r+0x98>
 8018140:	0758      	lsls	r0, r3, #29
 8018142:	d512      	bpl.n	801816a <__swsetup_r+0x5a>
 8018144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018146:	b141      	cbz	r1, 801815a <__swsetup_r+0x4a>
 8018148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801814c:	4299      	cmp	r1, r3
 801814e:	d002      	beq.n	8018156 <__swsetup_r+0x46>
 8018150:	4628      	mov	r0, r5
 8018152:	f7ff fafb 	bl	801774c <_free_r>
 8018156:	2300      	movs	r3, #0
 8018158:	6363      	str	r3, [r4, #52]	@ 0x34
 801815a:	89a3      	ldrh	r3, [r4, #12]
 801815c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018160:	81a3      	strh	r3, [r4, #12]
 8018162:	2300      	movs	r3, #0
 8018164:	6063      	str	r3, [r4, #4]
 8018166:	6923      	ldr	r3, [r4, #16]
 8018168:	6023      	str	r3, [r4, #0]
 801816a:	89a3      	ldrh	r3, [r4, #12]
 801816c:	f043 0308 	orr.w	r3, r3, #8
 8018170:	81a3      	strh	r3, [r4, #12]
 8018172:	6923      	ldr	r3, [r4, #16]
 8018174:	b94b      	cbnz	r3, 801818a <__swsetup_r+0x7a>
 8018176:	89a3      	ldrh	r3, [r4, #12]
 8018178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801817c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018180:	d003      	beq.n	801818a <__swsetup_r+0x7a>
 8018182:	4621      	mov	r1, r4
 8018184:	4628      	mov	r0, r5
 8018186:	f000 f883 	bl	8018290 <__smakebuf_r>
 801818a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801818e:	f013 0201 	ands.w	r2, r3, #1
 8018192:	d00a      	beq.n	80181aa <__swsetup_r+0x9a>
 8018194:	2200      	movs	r2, #0
 8018196:	60a2      	str	r2, [r4, #8]
 8018198:	6962      	ldr	r2, [r4, #20]
 801819a:	4252      	negs	r2, r2
 801819c:	61a2      	str	r2, [r4, #24]
 801819e:	6922      	ldr	r2, [r4, #16]
 80181a0:	b942      	cbnz	r2, 80181b4 <__swsetup_r+0xa4>
 80181a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80181a6:	d1c5      	bne.n	8018134 <__swsetup_r+0x24>
 80181a8:	bd38      	pop	{r3, r4, r5, pc}
 80181aa:	0799      	lsls	r1, r3, #30
 80181ac:	bf58      	it	pl
 80181ae:	6962      	ldrpl	r2, [r4, #20]
 80181b0:	60a2      	str	r2, [r4, #8]
 80181b2:	e7f4      	b.n	801819e <__swsetup_r+0x8e>
 80181b4:	2000      	movs	r0, #0
 80181b6:	e7f7      	b.n	80181a8 <__swsetup_r+0x98>
 80181b8:	2000002c 	.word	0x2000002c

080181bc <_raise_r>:
 80181bc:	291f      	cmp	r1, #31
 80181be:	b538      	push	{r3, r4, r5, lr}
 80181c0:	4605      	mov	r5, r0
 80181c2:	460c      	mov	r4, r1
 80181c4:	d904      	bls.n	80181d0 <_raise_r+0x14>
 80181c6:	2316      	movs	r3, #22
 80181c8:	6003      	str	r3, [r0, #0]
 80181ca:	f04f 30ff 	mov.w	r0, #4294967295
 80181ce:	bd38      	pop	{r3, r4, r5, pc}
 80181d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181d2:	b112      	cbz	r2, 80181da <_raise_r+0x1e>
 80181d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181d8:	b94b      	cbnz	r3, 80181ee <_raise_r+0x32>
 80181da:	4628      	mov	r0, r5
 80181dc:	f000 f830 	bl	8018240 <_getpid_r>
 80181e0:	4622      	mov	r2, r4
 80181e2:	4601      	mov	r1, r0
 80181e4:	4628      	mov	r0, r5
 80181e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181ea:	f000 b817 	b.w	801821c <_kill_r>
 80181ee:	2b01      	cmp	r3, #1
 80181f0:	d00a      	beq.n	8018208 <_raise_r+0x4c>
 80181f2:	1c59      	adds	r1, r3, #1
 80181f4:	d103      	bne.n	80181fe <_raise_r+0x42>
 80181f6:	2316      	movs	r3, #22
 80181f8:	6003      	str	r3, [r0, #0]
 80181fa:	2001      	movs	r0, #1
 80181fc:	e7e7      	b.n	80181ce <_raise_r+0x12>
 80181fe:	2100      	movs	r1, #0
 8018200:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018204:	4620      	mov	r0, r4
 8018206:	4798      	blx	r3
 8018208:	2000      	movs	r0, #0
 801820a:	e7e0      	b.n	80181ce <_raise_r+0x12>

0801820c <raise>:
 801820c:	4b02      	ldr	r3, [pc, #8]	@ (8018218 <raise+0xc>)
 801820e:	4601      	mov	r1, r0
 8018210:	6818      	ldr	r0, [r3, #0]
 8018212:	f7ff bfd3 	b.w	80181bc <_raise_r>
 8018216:	bf00      	nop
 8018218:	2000002c 	.word	0x2000002c

0801821c <_kill_r>:
 801821c:	b538      	push	{r3, r4, r5, lr}
 801821e:	4d07      	ldr	r5, [pc, #28]	@ (801823c <_kill_r+0x20>)
 8018220:	2300      	movs	r3, #0
 8018222:	4604      	mov	r4, r0
 8018224:	4608      	mov	r0, r1
 8018226:	4611      	mov	r1, r2
 8018228:	602b      	str	r3, [r5, #0]
 801822a:	f7e8 fe5b 	bl	8000ee4 <_kill>
 801822e:	1c43      	adds	r3, r0, #1
 8018230:	d102      	bne.n	8018238 <_kill_r+0x1c>
 8018232:	682b      	ldr	r3, [r5, #0]
 8018234:	b103      	cbz	r3, 8018238 <_kill_r+0x1c>
 8018236:	6023      	str	r3, [r4, #0]
 8018238:	bd38      	pop	{r3, r4, r5, pc}
 801823a:	bf00      	nop
 801823c:	20004d34 	.word	0x20004d34

08018240 <_getpid_r>:
 8018240:	f7e8 be48 	b.w	8000ed4 <_getpid>

08018244 <__swhatbuf_r>:
 8018244:	b570      	push	{r4, r5, r6, lr}
 8018246:	460c      	mov	r4, r1
 8018248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801824c:	2900      	cmp	r1, #0
 801824e:	b096      	sub	sp, #88	@ 0x58
 8018250:	4615      	mov	r5, r2
 8018252:	461e      	mov	r6, r3
 8018254:	da0d      	bge.n	8018272 <__swhatbuf_r+0x2e>
 8018256:	89a3      	ldrh	r3, [r4, #12]
 8018258:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801825c:	f04f 0100 	mov.w	r1, #0
 8018260:	bf14      	ite	ne
 8018262:	2340      	movne	r3, #64	@ 0x40
 8018264:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018268:	2000      	movs	r0, #0
 801826a:	6031      	str	r1, [r6, #0]
 801826c:	602b      	str	r3, [r5, #0]
 801826e:	b016      	add	sp, #88	@ 0x58
 8018270:	bd70      	pop	{r4, r5, r6, pc}
 8018272:	466a      	mov	r2, sp
 8018274:	f000 f848 	bl	8018308 <_fstat_r>
 8018278:	2800      	cmp	r0, #0
 801827a:	dbec      	blt.n	8018256 <__swhatbuf_r+0x12>
 801827c:	9901      	ldr	r1, [sp, #4]
 801827e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018282:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018286:	4259      	negs	r1, r3
 8018288:	4159      	adcs	r1, r3
 801828a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801828e:	e7eb      	b.n	8018268 <__swhatbuf_r+0x24>

08018290 <__smakebuf_r>:
 8018290:	898b      	ldrh	r3, [r1, #12]
 8018292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018294:	079d      	lsls	r5, r3, #30
 8018296:	4606      	mov	r6, r0
 8018298:	460c      	mov	r4, r1
 801829a:	d507      	bpl.n	80182ac <__smakebuf_r+0x1c>
 801829c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	6123      	str	r3, [r4, #16]
 80182a4:	2301      	movs	r3, #1
 80182a6:	6163      	str	r3, [r4, #20]
 80182a8:	b003      	add	sp, #12
 80182aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ac:	ab01      	add	r3, sp, #4
 80182ae:	466a      	mov	r2, sp
 80182b0:	f7ff ffc8 	bl	8018244 <__swhatbuf_r>
 80182b4:	9f00      	ldr	r7, [sp, #0]
 80182b6:	4605      	mov	r5, r0
 80182b8:	4639      	mov	r1, r7
 80182ba:	4630      	mov	r0, r6
 80182bc:	f7ff faba 	bl	8017834 <_malloc_r>
 80182c0:	b948      	cbnz	r0, 80182d6 <__smakebuf_r+0x46>
 80182c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182c6:	059a      	lsls	r2, r3, #22
 80182c8:	d4ee      	bmi.n	80182a8 <__smakebuf_r+0x18>
 80182ca:	f023 0303 	bic.w	r3, r3, #3
 80182ce:	f043 0302 	orr.w	r3, r3, #2
 80182d2:	81a3      	strh	r3, [r4, #12]
 80182d4:	e7e2      	b.n	801829c <__smakebuf_r+0xc>
 80182d6:	89a3      	ldrh	r3, [r4, #12]
 80182d8:	6020      	str	r0, [r4, #0]
 80182da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80182de:	81a3      	strh	r3, [r4, #12]
 80182e0:	9b01      	ldr	r3, [sp, #4]
 80182e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80182e6:	b15b      	cbz	r3, 8018300 <__smakebuf_r+0x70>
 80182e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182ec:	4630      	mov	r0, r6
 80182ee:	f000 f81d 	bl	801832c <_isatty_r>
 80182f2:	b128      	cbz	r0, 8018300 <__smakebuf_r+0x70>
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	f023 0303 	bic.w	r3, r3, #3
 80182fa:	f043 0301 	orr.w	r3, r3, #1
 80182fe:	81a3      	strh	r3, [r4, #12]
 8018300:	89a3      	ldrh	r3, [r4, #12]
 8018302:	431d      	orrs	r5, r3
 8018304:	81a5      	strh	r5, [r4, #12]
 8018306:	e7cf      	b.n	80182a8 <__smakebuf_r+0x18>

08018308 <_fstat_r>:
 8018308:	b538      	push	{r3, r4, r5, lr}
 801830a:	4d07      	ldr	r5, [pc, #28]	@ (8018328 <_fstat_r+0x20>)
 801830c:	2300      	movs	r3, #0
 801830e:	4604      	mov	r4, r0
 8018310:	4608      	mov	r0, r1
 8018312:	4611      	mov	r1, r2
 8018314:	602b      	str	r3, [r5, #0]
 8018316:	f7e8 fe45 	bl	8000fa4 <_fstat>
 801831a:	1c43      	adds	r3, r0, #1
 801831c:	d102      	bne.n	8018324 <_fstat_r+0x1c>
 801831e:	682b      	ldr	r3, [r5, #0]
 8018320:	b103      	cbz	r3, 8018324 <_fstat_r+0x1c>
 8018322:	6023      	str	r3, [r4, #0]
 8018324:	bd38      	pop	{r3, r4, r5, pc}
 8018326:	bf00      	nop
 8018328:	20004d34 	.word	0x20004d34

0801832c <_isatty_r>:
 801832c:	b538      	push	{r3, r4, r5, lr}
 801832e:	4d06      	ldr	r5, [pc, #24]	@ (8018348 <_isatty_r+0x1c>)
 8018330:	2300      	movs	r3, #0
 8018332:	4604      	mov	r4, r0
 8018334:	4608      	mov	r0, r1
 8018336:	602b      	str	r3, [r5, #0]
 8018338:	f7e8 fe44 	bl	8000fc4 <_isatty>
 801833c:	1c43      	adds	r3, r0, #1
 801833e:	d102      	bne.n	8018346 <_isatty_r+0x1a>
 8018340:	682b      	ldr	r3, [r5, #0]
 8018342:	b103      	cbz	r3, 8018346 <_isatty_r+0x1a>
 8018344:	6023      	str	r3, [r4, #0]
 8018346:	bd38      	pop	{r3, r4, r5, pc}
 8018348:	20004d34 	.word	0x20004d34

0801834c <_init>:
 801834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834e:	bf00      	nop
 8018350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018352:	bc08      	pop	{r3}
 8018354:	469e      	mov	lr, r3
 8018356:	4770      	bx	lr

08018358 <_fini>:
 8018358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835a:	bf00      	nop
 801835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801835e:	bc08      	pop	{r3}
 8018360:	469e      	mov	lr, r3
 8018362:	4770      	bx	lr
