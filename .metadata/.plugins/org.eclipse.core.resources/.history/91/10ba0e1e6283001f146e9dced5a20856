
lwip_compile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006258  08006258  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006260  08006260  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006264  08006264  00007264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006268  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  20000070  080062d8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  080062d8  00008c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a45d  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b50  00000000  00000000  000224fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00026050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001158  00000000  00000000  000276c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0af  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f15  00000000  00000000  000448c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6ec4  00000000  00000000  0005e7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001056a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006720  00000000  00000000  001056e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010be04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006100 	.word	0x08006100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006100 	.word	0x08006100

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000574:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <MX_FREERTOS_Init+0x18>)
 8000576:	2100      	movs	r1, #0
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <MX_FREERTOS_Init+0x1c>)
 800057a:	f002 f805 	bl	8002588 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a03      	ldr	r2, [pc, #12]	@ (8000590 <MX_FREERTOS_Init+0x20>)
 8000582:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	0800613c 	.word	0x0800613c
 800058c:	080006dd 	.word	0x080006dd
 8000590:	20004b8c 	.word	0x20004b8c

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a08      	ldr	r2, [pc, #32]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <MX_GPIO_Init+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fad6 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f80c 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ffd0 	bl	8000594 <MX_GPIO_Init>
  //MX_SPI1_Init();
  MX_USART2_UART_Init();
 80005f4:	f000 fa34 	bl	8000a60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f001 ff7c 	bl	80024f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80005fc:	f7ff ffb8 	bl	8000570 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000600:	f001 ff9c 	bl	800253c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0x20>

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fe73 	bl	8005302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000654:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800067c:	2319      	movs	r3, #25
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	@ 0xa8
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fd29 	bl	80010e8 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800069c:	f000 f83e 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff8b 	bl	80015d8 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f828 	bl	800071c <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	@ 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <StartDefaultTask>:




void StartDefaultTask(void *argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	 osDelay(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006e8:	f001 ffe0 	bl	80026ac <osDelay>
	 tcp_init(NULL,NULL);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f004 fcb2 	bl	8005058 <tcp_init>

	 //Netif_Config();
	 while(1);
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <StartDefaultTask+0x18>

080006f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a04      	ldr	r2, [pc, #16]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800070a:	f000 fa67 	bl	8000bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40014400 	.word	0x40014400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_MspInit+0x54>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	4a11      	ldr	r2, [pc, #68]	@ (800077c <HAL_MspInit+0x54>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073c:	6453      	str	r3, [r2, #68]	@ 0x44
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <HAL_MspInit+0x54>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <HAL_MspInit+0x54>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	@ 0x40
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 fb0d 	bl	8000d8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <HAL_InitTick+0xd0>)
 8000796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000798:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <HAL_InitTick+0xd0>)
 800079a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079e:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <HAL_InitTick+0xd0>)
 80007a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 020c 	add.w	r2, r7, #12
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f8ee 	bl	8001998 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007bc:	f001 f8d8 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 80007c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c4:	4a23      	ldr	r2, [pc, #140]	@ (8000854 <HAL_InitTick+0xd4>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <HAL_InitTick+0xd8>)
 80007d2:	4a22      	ldr	r2, [pc, #136]	@ (800085c <HAL_InitTick+0xdc>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <HAL_InitTick+0xd8>)
 80007d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80007de:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <HAL_InitTick+0xd8>)
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <HAL_InitTick+0xd8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <HAL_InitTick+0xd8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <HAL_InitTick+0xd8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80007f6:	4818      	ldr	r0, [pc, #96]	@ (8000858 <HAL_InitTick+0xd8>)
 80007f8:	f001 f900 	bl	80019fc <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000806:	2b00      	cmp	r3, #0
 8000808:	d11b      	bne.n	8000842 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800080a:	4813      	ldr	r0, [pc, #76]	@ (8000858 <HAL_InitTick+0xd8>)
 800080c:	f001 f950 	bl	8001ab0 <HAL_TIM_Base_Start_IT>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800081a:	2b00      	cmp	r3, #0
 800081c:	d111      	bne.n	8000842 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800081e:	2019      	movs	r0, #25
 8000820:	f000 fad0 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d808      	bhi.n	800083c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800082a:	2200      	movs	r2, #0
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	2019      	movs	r0, #25
 8000830:	f000 faac 	bl	8000d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000834:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_InitTick+0xe0>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e002      	b.n	8000842 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000846:	4618      	mov	r0, r3
 8000848:	3730      	adds	r7, #48	@ 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	431bde83 	.word	0x431bde83
 8000858:	20004b90 	.word	0x20004b90
 800085c:	40014400 	.word	0x40014400
 8000860:	20000004 	.word	0x20000004

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <NMI_Handler+0x4>

0800086c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <MemManage_Handler+0x4>

0800087c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <UsageFault_Handler+0x4>

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008a2:	f001 f967 	bl	8001b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20004b90 	.word	0x20004b90

080008b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return 1;
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_kill>:

int _kill(int pid, int sig)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008ca:	f004 fdbf 	bl	800544c <__errno>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2216      	movs	r2, #22
 80008d2:	601a      	str	r2, [r3, #0]
  return -1;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_exit>:

void _exit (int status)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffe7 	bl	80008c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <_exit+0x12>

080008f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e00a      	b.n	800091e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000908:	f3af 8000 	nop.w
 800090c:	4601      	mov	r1, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf0      	blt.n	8000908 <_read+0x12>
  }

  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e009      	b.n	8000956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbf1      	blt.n	8000942 <_write+0x12>
  }
  return len;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_close>:

int _close(int file)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000990:	605a      	str	r2, [r3, #4]
  return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_isatty>:

int _isatty(int file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f004 fd24 	bl	800544c <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20018000 	.word	0x20018000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	2000008c 	.word	0x2000008c
 8000a38:	20004c68 	.word	0x20004c68

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f001 fa24 	bl	8001ee4 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f7ff fe3b 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20004bd8 	.word	0x20004bd8
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	@ (8000b38 <HAL_UART_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <HAL_UART_MspInit+0x8c>)
 8000b2a:	f000 f959 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b48:	f7ff ff78 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b72:	f004 fc71 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b76:	f7ff fd35 	bl	80005e4 <main>
  bx  lr    
 8000b7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b88:	08006268 	.word	0x08006268
  ldr r2, =_sbss
 8000b8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b90:	20004c64 	.word	0x20004c64

08000b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <HAL_Init+0x40>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_Init+0x40>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_Init+0x40>)
 8000bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f8d8 	bl	8000d76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f7ff fdda 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fdac 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023c00 	.word	0x40023c00

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20004c20 	.word	0x20004c20

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20004c20 	.word	0x20004c20

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	@ (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff4c 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff61 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb1 	bl	8000d10 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff80 	bl	8000cbc <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff54 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e159      	b.n	80010b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	f040 8148 	bne.w	80010aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d005      	beq.n	8000e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d130      	bne.n	8000e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	f003 0201 	and.w	r2, r3, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d017      	beq.n	8000ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d123      	bne.n	8000f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0203 	and.w	r2, r3, #3
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 80a2 	beq.w	80010aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b57      	ldr	r3, [pc, #348]	@ (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a56      	ldr	r2, [pc, #344]	@ (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b54      	ldr	r3, [pc, #336]	@ (80010c8 <HAL_GPIO_Init+0x2e8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f82:	4a52      	ldr	r2, [pc, #328]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a49      	ldr	r2, [pc, #292]	@ (80010d0 <HAL_GPIO_Init+0x2f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x202>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a48      	ldr	r2, [pc, #288]	@ (80010d4 <HAL_GPIO_Init+0x2f4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x1fe>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a47      	ldr	r2, [pc, #284]	@ (80010d8 <HAL_GPIO_Init+0x2f8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x1fa>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a46      	ldr	r2, [pc, #280]	@ (80010dc <HAL_GPIO_Init+0x2fc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x1f6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a45      	ldr	r2, [pc, #276]	@ (80010e0 <HAL_GPIO_Init+0x300>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x1f2>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	@ (80010cc <HAL_GPIO_Init+0x2ec>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a2f      	ldr	r2, [pc, #188]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107a:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a4:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <HAL_GPIO_Init+0x304>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f aea2 	bls.w	8000dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40013c00 	.word	0x40013c00

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e267      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d075      	beq.n	80011f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001106:	4b88      	ldr	r3, [pc, #544]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b04      	cmp	r3, #4
 8001110:	d00c      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b85      	ldr	r3, [pc, #532]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800111a:	2b08      	cmp	r3, #8
 800111c:	d112      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b82      	ldr	r3, [pc, #520]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001126:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b7e      	ldr	r3, [pc, #504]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d157      	bne.n	80011f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e242      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x74>
 800114e:	4b76      	ldr	r3, [pc, #472]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x98>
 8001166:	4b70      	ldr	r3, [pc, #448]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6f      	ldr	r2, [pc, #444]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b6d      	ldr	r3, [pc, #436]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6c      	ldr	r2, [pc, #432]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xb0>
 8001180:	4b69      	ldr	r3, [pc, #420]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a68      	ldr	r2, [pc, #416]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b66      	ldr	r3, [pc, #408]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a65      	ldr	r2, [pc, #404]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fd30 	bl	8000c04 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fd2c 	bl	8000c04 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e207      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xc0>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fd1c 	bl	8000c04 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fd18 	bl	8000c04 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	@ 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1f3      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	4b51      	ldr	r3, [pc, #324]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0xe8>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d063      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001212:	2b08      	cmp	r3, #8
 8001214:	d11c      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b44      	ldr	r3, [pc, #272]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d116      	bne.n	8001250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	4b41      	ldr	r3, [pc, #260]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e1c7      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4937      	ldr	r1, [pc, #220]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	e03a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d020      	beq.n	800129a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_OscConfig+0x244>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fcd1 	bl	8000c04 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fccd 	bl	8000c04 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1a8      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4925      	ldr	r1, [pc, #148]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e015      	b.n	80012c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129a:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_RCC_OscConfig+0x244>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcb0 	bl	8000c04 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fcac 	bl	8000c04 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e187      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d036      	beq.n	8001340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_RCC_OscConfig+0x248>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e0:	f7ff fc90 	bl	8000c04 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc8c 	bl	8000c04 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e167      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_RCC_OscConfig+0x240>)
 80012fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x200>
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_RCC_OscConfig+0x248>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc79 	bl	8000c04 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	e00e      	b.n	8001334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001316:	f7ff fc75 	bl	8000c04 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d907      	bls.n	8001334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e150      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b88      	ldr	r3, [pc, #544]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ea      	bne.n	8001316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8097 	beq.w	800147c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b81      	ldr	r3, [pc, #516]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b7d      	ldr	r3, [pc, #500]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a7c      	ldr	r2, [pc, #496]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b7a      	ldr	r3, [pc, #488]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b77      	ldr	r3, [pc, #476]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d118      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b74      	ldr	r3, [pc, #464]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc35 	bl	8000c04 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139e:	f7ff fc31 	bl	8000c04 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e10c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_RCC_OscConfig+0x474>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	4b64      	ldr	r3, [pc, #400]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c8:	4a63      	ldr	r2, [pc, #396]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x30c>
 80013da:	4b5f      	ldr	r3, [pc, #380]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013de:	4a5e      	ldr	r2, [pc, #376]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0x324>
 80013f4:	4b58      	ldr	r3, [pc, #352]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f8:	4a57      	ldr	r2, [pc, #348]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001400:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a54      	ldr	r2, [pc, #336]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d015      	beq.n	8001440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fbf6 	bl	8000c04 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fbf2 	bl	8000c04 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e0cb      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0ee      	beq.n	800141c <HAL_RCC_OscConfig+0x334>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001440:	f7ff fbe0 	bl	8000c04 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001446:	e00a      	b.n	800145e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001448:	f7ff fbdc 	bl	8000c04 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0b5      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145e:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ee      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a38      	ldr	r2, [pc, #224]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a1 	beq.w	80015c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d05c      	beq.n	800154c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d141      	bne.n	800151e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fbb0 	bl	8000c04 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fbac 	bl	8000c04 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e087      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	3b01      	subs	r3, #1
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	491b      	ldr	r1, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb85 	bl	8000c04 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fb81 	bl	8000c04 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e05c      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x416>
 800151c:	e054      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_RCC_OscConfig+0x478>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb6e 	bl	8000c04 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fb6a 	bl	8000c04 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e045      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_RCC_OscConfig+0x470>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x444>
 800154a:	e03d      	b.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e038      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000
 8001560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d028      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d121      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800159a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	4293      	cmp	r3, r2
 800159e:	d111      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cc      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d90c      	bls.n	8001614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b65      	ldr	r3, [pc, #404]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b63      	ldr	r3, [pc, #396]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0b8      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a58      	ldr	r2, [pc, #352]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001644:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a52      	ldr	r2, [pc, #328]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800164e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	494d      	ldr	r1, [pc, #308]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d044      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e07f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e06f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0203 	bic.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4934      	ldr	r1, [pc, #208]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fa9c 	bl	8000c04 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa98 	bl	8000c04 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04f      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 020c 	and.w	r2, r3, #12
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1eb      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d20c      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e032      	b.n	8001786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4916      	ldr	r1, [pc, #88]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	490e      	ldr	r1, [pc, #56]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175e:	f000 f821 	bl	80017a4 <HAL_RCC_GetSysClockFreq>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	490a      	ldr	r1, [pc, #40]	@ (8001798 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	5ccb      	ldrb	r3, [r1, r3]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fffe 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00
 8001794:	40023800 	.word	0x40023800
 8001798:	08006160 	.word	0x08006160
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004

080017a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a8:	b090      	sub	sp, #64	@ 0x40
 80017aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017bc:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d00d      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x40>
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	f200 80a1 	bhi.w	8001910 <HAL_RCC_GetSysClockFreq+0x16c>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x34>
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d003      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x3a>
 80017d6:	e09b      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x184>)
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017dc:	e09b      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017de:	4b53      	ldr	r3, [pc, #332]	@ (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e2:	e098      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	627a      	str	r2, [r7, #36]	@ 0x24
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800180c:	2100      	movs	r1, #0
 800180e:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 8001810:	fb03 f201 	mul.w	r2, r3, r1
 8001814:	2300      	movs	r3, #0
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	4413      	add	r3, r2
 800181c:	4a43      	ldr	r2, [pc, #268]	@ (800192c <HAL_RCC_GetSysClockFreq+0x188>)
 800181e:	fba0 1202 	umull	r1, r2, r0, r2
 8001822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001824:	460a      	mov	r2, r1
 8001826:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800182a:	4413      	add	r3, r2
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001830:	2200      	movs	r2, #0
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	61fa      	str	r2, [r7, #28]
 8001836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800183a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800183e:	f7fe fd1f 	bl	8000280 <__aeabi_uldivmod>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4613      	mov	r3, r2
 8001848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800184a:	e053      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	2200      	movs	r2, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	617a      	str	r2, [r7, #20]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800185e:	f04f 0b00 	mov.w	fp, #0
 8001862:	4652      	mov	r2, sl
 8001864:	465b      	mov	r3, fp
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	0159      	lsls	r1, r3, #5
 8001870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001874:	0150      	lsls	r0, r2, #5
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	ebb2 080a 	subs.w	r8, r2, sl
 800187e:	eb63 090b 	sbc.w	r9, r3, fp
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800188e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001892:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001896:	ebb2 0408 	subs.w	r4, r2, r8
 800189a:	eb63 0509 	sbc.w	r5, r3, r9
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	00eb      	lsls	r3, r5, #3
 80018a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ac:	00e2      	lsls	r2, r4, #3
 80018ae:	4614      	mov	r4, r2
 80018b0:	461d      	mov	r5, r3
 80018b2:	eb14 030a 	adds.w	r3, r4, sl
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	eb45 030b 	adc.w	r3, r5, fp
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018de:	2200      	movs	r2, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018e8:	f7fe fcca 	bl	8000280 <__aeabi_uldivmod>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4613      	mov	r3, r2
 80018f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x180>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800190e:	e002      	b.n	8001916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x184>)
 8001912:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001918:	4618      	mov	r0, r3
 800191a:	3740      	adds	r7, #64	@ 0x40
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	00f42400 	.word	0x00f42400
 800192c:	017d7840 	.word	0x017d7840

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08006170 	.word	0x08006170

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001974:	f7ff ffdc 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	@ (8001994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08006170 	.word	0x08006170

08001998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	220f      	movs	r2, #15
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_RCC_GetClockConfig+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0207 	and.w	r2, r3, #7
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e041      	b.n	8001a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f839 	bl	8001a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f000 f9b2 	bl	8001da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e044      	b.n	8001b52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x6c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af2:	d013      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x6c>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b64 <HAL_TIM_Base_Start_IT+0xb4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00e      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x6c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x6c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xbc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_TIM_Base_Start_IT+0x6c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d010      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3e:	e007      	b.n	8001b50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40000800 	.word	0x40000800
 8001b6c:	40000c00 	.word	0x40000c00
 8001b70:	40014000 	.word	0x40014000

08001b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d020      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0202 	mvn.w	r2, #2
 8001ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8d2 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8c4 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f8d5 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0204 	mvn.w	r2, #4
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8ac 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f89e 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f8af 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0208 	mvn.w	r2, #8
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f886 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f878 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f889 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d020      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0210 	mvn.w	r2, #16
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2208      	movs	r2, #8
 8001c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f860 	bl	8001d68 <HAL_TIM_IC_CaptureCallback>
 8001ca8:	e005      	b.n	8001cb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f852 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f863 	bl	8001d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0201 	mvn.w	r2, #1
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fd0c 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8e6 	bl	8001ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f834 	bl	8001d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0220 	mvn.w	r2, #32
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8b8 	bl	8001ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3a      	ldr	r2, [pc, #232]	@ (8001ea0 <TIM_Base_SetConfig+0xfc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00f      	beq.n	8001ddc <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc2:	d00b      	beq.n	8001ddc <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	@ (8001ea4 <TIM_Base_SetConfig+0x100>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <TIM_Base_SetConfig+0x38>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a36      	ldr	r2, [pc, #216]	@ (8001ea8 <TIM_Base_SetConfig+0x104>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d003      	beq.n	8001ddc <TIM_Base_SetConfig+0x38>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a35      	ldr	r2, [pc, #212]	@ (8001eac <TIM_Base_SetConfig+0x108>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d108      	bne.n	8001dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <TIM_Base_SetConfig+0xfc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01b      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfc:	d017      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a28      	ldr	r2, [pc, #160]	@ (8001ea4 <TIM_Base_SetConfig+0x100>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <TIM_Base_SetConfig+0x104>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00f      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a26      	ldr	r2, [pc, #152]	@ (8001eac <TIM_Base_SetConfig+0x108>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00b      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a25      	ldr	r2, [pc, #148]	@ (8001eb0 <TIM_Base_SetConfig+0x10c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a24      	ldr	r2, [pc, #144]	@ (8001eb4 <TIM_Base_SetConfig+0x110>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d003      	beq.n	8001e2e <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <TIM_Base_SetConfig+0x114>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d108      	bne.n	8001e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <TIM_Base_SetConfig+0xfc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d103      	bne.n	8001e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f023 0201 	bic.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]
  }
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800
 8001eac:	40000c00 	.word	0x40000c00
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40014400 	.word	0x40014400
 8001eb8:	40014800 	.word	0x40014800

08001ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e042      	b.n	8001f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fdd2 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2224      	movs	r2, #36	@ 0x24
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f82b 	bl	8001f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f88:	b0c0      	sub	sp, #256	@ 0x100
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	ea40 0301 	orr.w	r3, r0, r1
 8001fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fdc:	f021 010c 	bic.w	r1, r1, #12
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fea:	430b      	orrs	r3, r1
 8001fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffe:	6999      	ldr	r1, [r3, #24]
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	ea40 0301 	orr.w	r3, r0, r1
 800200a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b8f      	ldr	r3, [pc, #572]	@ (8002250 <UART_SetConfig+0x2cc>)
 8002014:	429a      	cmp	r2, r3
 8002016:	d005      	beq.n	8002024 <UART_SetConfig+0xa0>
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b8d      	ldr	r3, [pc, #564]	@ (8002254 <UART_SetConfig+0x2d0>)
 8002020:	429a      	cmp	r2, r3
 8002022:	d104      	bne.n	800202e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002024:	f7ff fca4 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800202c:	e003      	b.n	8002036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800202e:	f7ff fc8b 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 8002032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002040:	f040 810c 	bne.w	800225c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002048:	2200      	movs	r2, #0
 800204a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800204e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002056:	4622      	mov	r2, r4
 8002058:	462b      	mov	r3, r5
 800205a:	1891      	adds	r1, r2, r2
 800205c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800205e:	415b      	adcs	r3, r3
 8002060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002066:	4621      	mov	r1, r4
 8002068:	eb12 0801 	adds.w	r8, r2, r1
 800206c:	4629      	mov	r1, r5
 800206e:	eb43 0901 	adc.w	r9, r3, r1
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800207e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002086:	4690      	mov	r8, r2
 8002088:	4699      	mov	r9, r3
 800208a:	4623      	mov	r3, r4
 800208c:	eb18 0303 	adds.w	r3, r8, r3
 8002090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002094:	462b      	mov	r3, r5
 8002096:	eb49 0303 	adc.w	r3, r9, r3
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020b2:	460b      	mov	r3, r1
 80020b4:	18db      	adds	r3, r3, r3
 80020b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80020b8:	4613      	mov	r3, r2
 80020ba:	eb42 0303 	adc.w	r3, r2, r3
 80020be:	657b      	str	r3, [r7, #84]	@ 0x54
 80020c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020c8:	f7fe f8da 	bl	8000280 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <UART_SetConfig+0x2d4>)
 80020d2:	fba3 2302 	umull	r2, r3, r3, r2
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	011c      	lsls	r4, r3, #4
 80020da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	1891      	adds	r1, r2, r2
 80020f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020f4:	415b      	adcs	r3, r3
 80020f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020fc:	4641      	mov	r1, r8
 80020fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002102:	4649      	mov	r1, r9
 8002104:	eb43 0b01 	adc.w	fp, r3, r1
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800211c:	4692      	mov	sl, r2
 800211e:	469b      	mov	fp, r3
 8002120:	4643      	mov	r3, r8
 8002122:	eb1a 0303 	adds.w	r3, sl, r3
 8002126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800212a:	464b      	mov	r3, r9
 800212c:	eb4b 0303 	adc.w	r3, fp, r3
 8002130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002148:	460b      	mov	r3, r1
 800214a:	18db      	adds	r3, r3, r3
 800214c:	643b      	str	r3, [r7, #64]	@ 0x40
 800214e:	4613      	mov	r3, r2
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	647b      	str	r3, [r7, #68]	@ 0x44
 8002156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800215a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800215e:	f7fe f88f 	bl	8000280 <__aeabi_uldivmod>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4611      	mov	r1, r2
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <UART_SetConfig+0x2d4>)
 800216a:	fba3 2301 	umull	r2, r3, r3, r1
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2264      	movs	r2, #100	@ 0x64
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	1acb      	subs	r3, r1, r3
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800217e:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <UART_SetConfig+0x2d4>)
 8002180:	fba3 2302 	umull	r2, r3, r3, r2
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800218c:	441c      	add	r4, r3
 800218e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002192:	2200      	movs	r2, #0
 8002194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800219c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021a0:	4642      	mov	r2, r8
 80021a2:	464b      	mov	r3, r9
 80021a4:	1891      	adds	r1, r2, r2
 80021a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021a8:	415b      	adcs	r3, r3
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021b0:	4641      	mov	r1, r8
 80021b2:	1851      	adds	r1, r2, r1
 80021b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80021b6:	4649      	mov	r1, r9
 80021b8:	414b      	adcs	r3, r1
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021c8:	4659      	mov	r1, fp
 80021ca:	00cb      	lsls	r3, r1, #3
 80021cc:	4651      	mov	r1, sl
 80021ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021d2:	4651      	mov	r1, sl
 80021d4:	00ca      	lsls	r2, r1, #3
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	4642      	mov	r2, r8
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021e4:	464b      	mov	r3, r9
 80021e6:	460a      	mov	r2, r1
 80021e8:	eb42 0303 	adc.w	r3, r2, r3
 80021ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002204:	460b      	mov	r3, r1
 8002206:	18db      	adds	r3, r3, r3
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800220a:	4613      	mov	r3, r2
 800220c:	eb42 0303 	adc.w	r3, r2, r3
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800221a:	f7fe f831 	bl	8000280 <__aeabi_uldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <UART_SetConfig+0x2d4>)
 8002224:	fba3 1302 	umull	r1, r3, r3, r2
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	2164      	movs	r1, #100	@ 0x64
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	3332      	adds	r3, #50	@ 0x32
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <UART_SetConfig+0x2d4>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4422      	add	r2, r4
 800224a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800224c:	e106      	b.n	800245c <UART_SetConfig+0x4d8>
 800224e:	bf00      	nop
 8002250:	40011000 	.word	0x40011000
 8002254:	40011400 	.word	0x40011400
 8002258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800225c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002260:	2200      	movs	r2, #0
 8002262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800226a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800226e:	4642      	mov	r2, r8
 8002270:	464b      	mov	r3, r9
 8002272:	1891      	adds	r1, r2, r2
 8002274:	6239      	str	r1, [r7, #32]
 8002276:	415b      	adcs	r3, r3
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
 800227a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800227e:	4641      	mov	r1, r8
 8002280:	1854      	adds	r4, r2, r1
 8002282:	4649      	mov	r1, r9
 8002284:	eb43 0501 	adc.w	r5, r3, r1
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	00eb      	lsls	r3, r5, #3
 8002292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002296:	00e2      	lsls	r2, r4, #3
 8002298:	4614      	mov	r4, r2
 800229a:	461d      	mov	r5, r3
 800229c:	4643      	mov	r3, r8
 800229e:	18e3      	adds	r3, r4, r3
 80022a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022a4:	464b      	mov	r3, r9
 80022a6:	eb45 0303 	adc.w	r3, r5, r3
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022ca:	4629      	mov	r1, r5
 80022cc:	008b      	lsls	r3, r1, #2
 80022ce:	4621      	mov	r1, r4
 80022d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022d4:	4621      	mov	r1, r4
 80022d6:	008a      	lsls	r2, r1, #2
 80022d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022dc:	f7fd ffd0 	bl	8000280 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4b60      	ldr	r3, [pc, #384]	@ (8002468 <UART_SetConfig+0x4e4>)
 80022e6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	011c      	lsls	r4, r3, #4
 80022ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	1891      	adds	r1, r2, r2
 8002306:	61b9      	str	r1, [r7, #24]
 8002308:	415b      	adcs	r3, r3
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002310:	4641      	mov	r1, r8
 8002312:	1851      	adds	r1, r2, r1
 8002314:	6139      	str	r1, [r7, #16]
 8002316:	4649      	mov	r1, r9
 8002318:	414b      	adcs	r3, r1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002328:	4659      	mov	r1, fp
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4651      	mov	r1, sl
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4651      	mov	r1, sl
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4642      	mov	r2, r8
 800233e:	189b      	adds	r3, r3, r2
 8002340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002344:	464b      	mov	r3, r9
 8002346:	460a      	mov	r2, r1
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800235a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002368:	4649      	mov	r1, r9
 800236a:	008b      	lsls	r3, r1, #2
 800236c:	4641      	mov	r1, r8
 800236e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002372:	4641      	mov	r1, r8
 8002374:	008a      	lsls	r2, r1, #2
 8002376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800237a:	f7fd ff81 	bl	8000280 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4611      	mov	r1, r2
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <UART_SetConfig+0x4e4>)
 8002386:	fba3 2301 	umull	r2, r3, r3, r1
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2264      	movs	r2, #100	@ 0x64
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	1acb      	subs	r3, r1, r3
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	3332      	adds	r3, #50	@ 0x32
 8002398:	4a33      	ldr	r2, [pc, #204]	@ (8002468 <UART_SetConfig+0x4e4>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023a4:	441c      	add	r4, r3
 80023a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023aa:	2200      	movs	r2, #0
 80023ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80023b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023b4:	4642      	mov	r2, r8
 80023b6:	464b      	mov	r3, r9
 80023b8:	1891      	adds	r1, r2, r2
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	415b      	adcs	r3, r3
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c4:	4641      	mov	r1, r8
 80023c6:	1851      	adds	r1, r2, r1
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	4649      	mov	r1, r9
 80023cc:	414b      	adcs	r3, r1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023dc:	4659      	mov	r1, fp
 80023de:	00cb      	lsls	r3, r1, #3
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023e6:	4651      	mov	r1, sl
 80023e8:	00ca      	lsls	r2, r1, #3
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	4642      	mov	r2, r8
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023f6:	464b      	mov	r3, r9
 80023f8:	460a      	mov	r2, r1
 80023fa:	eb42 0303 	adc.w	r3, r2, r3
 80023fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	663b      	str	r3, [r7, #96]	@ 0x60
 800240a:	667a      	str	r2, [r7, #100]	@ 0x64
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002418:	4649      	mov	r1, r9
 800241a:	008b      	lsls	r3, r1, #2
 800241c:	4641      	mov	r1, r8
 800241e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002422:	4641      	mov	r1, r8
 8002424:	008a      	lsls	r2, r1, #2
 8002426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800242a:	f7fd ff29 	bl	8000280 <__aeabi_uldivmod>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <UART_SetConfig+0x4e4>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2164      	movs	r1, #100	@ 0x64
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	3332      	adds	r3, #50	@ 0x32
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <UART_SetConfig+0x4e4>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4422      	add	r2, r4
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002462:	46bd      	mov	sp, r7
 8002464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002468:	51eb851f 	.word	0x51eb851f

0800246c <__NVIC_SetPriority>:
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	@ (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	@ (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Handler+0x1c>)
 80024c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80024c8:	f001 fd48 	bl	8003f5c <xTaskGetSchedulerState>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024d2:	f002 fb41 	bl	8004b58 <xPortSysTickHandler>
  }
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80024e4:	2100      	movs	r1, #0
 80024e6:	f06f 0004 	mvn.w	r0, #4
 80024ea:	f7ff ffbf 	bl	800246c <__NVIC_SetPriority>
#endif
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024fa:	f3ef 8305 	mrs	r3, IPSR
 80024fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002500:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002506:	f06f 0305 	mvn.w	r3, #5
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	e00c      	b.n	8002528 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <osKernelInitialize+0x44>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002516:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <osKernelInitialize+0x44>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	e002      	b.n	8002528 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000090 	.word	0x20000090

0800253c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002542:	f3ef 8305 	mrs	r3, IPSR
 8002546:	603b      	str	r3, [r7, #0]
  return(result);
 8002548:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <osKernelStart+0x1a>
    stat = osErrorISR;
 800254e:	f06f 0305 	mvn.w	r3, #5
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e010      	b.n	8002578 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002556:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <osKernelStart+0x48>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d109      	bne.n	8002572 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800255e:	f7ff ffbf 	bl	80024e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <osKernelStart+0x48>)
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002568:	f001 f894 	bl	8003694 <vTaskStartScheduler>
      stat = osOK;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	e002      	b.n	8002578 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000090 	.word	0x20000090

08002588 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	@ 0x38
 800258c:	af04      	add	r7, sp, #16
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002598:	f3ef 8305 	mrs	r3, IPSR
 800259c:	617b      	str	r3, [r7, #20]
  return(result);
 800259e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d17e      	bne.n	80026a2 <osThreadNew+0x11a>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d07b      	beq.n	80026a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025ae:	2318      	movs	r3, #24
 80025b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d045      	beq.n	800264e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <osThreadNew+0x48>
        name = attr->name;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <osThreadNew+0x6e>
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b38      	cmp	r3, #56	@ 0x38
 80025e8:	d805      	bhi.n	80025f6 <osThreadNew+0x6e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <osThreadNew+0x72>
        return (NULL);
 80025f6:	2300      	movs	r3, #0
 80025f8:	e054      	b.n	80026a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00e      	beq.n	8002630 <osThreadNew+0xa8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2bab      	cmp	r3, #171	@ 0xab
 8002618:	d90a      	bls.n	8002630 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <osThreadNew+0xa8>
        mem = 1;
 800262a:	2301      	movs	r3, #1
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	e010      	b.n	8002652 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10c      	bne.n	8002652 <osThreadNew+0xca>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <osThreadNew+0xca>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <osThreadNew+0xca>
          mem = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e001      	b.n	8002652 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d110      	bne.n	800267a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002660:	9202      	str	r2, [sp, #8]
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fe1a 	bl	80032a8 <xTaskCreateStatic>
 8002674:	4603      	mov	r3, r0
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e013      	b.n	80026a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d110      	bne.n	80026a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fe68 	bl	8003368 <xTaskCreate>
 8002698:	4603      	mov	r3, r0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <osThreadNew+0x11a>
            hTask = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026a2:	693b      	ldr	r3, [r7, #16]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3728      	adds	r7, #40	@ 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026b4:	f3ef 8305 	mrs	r3, IPSR
 80026b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80026ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <osDelay+0x1c>
    stat = osErrorISR;
 80026c0:	f06f 0305 	mvn.w	r3, #5
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e007      	b.n	80026d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 ffa8 	bl	8003628 <vTaskDelay>
    }
  }

  return (stat);
 80026d8:	68fb      	ldr	r3, [r7, #12]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <vApplicationGetIdleTaskMemory+0x2c>)
 80026f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <vApplicationGetIdleTaskMemory+0x30>)
 80026fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2280      	movs	r2, #128	@ 0x80
 8002700:	601a      	str	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000094 	.word	0x20000094
 8002714:	20000140 	.word	0x20000140

08002718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <vApplicationGetTimerTaskMemory+0x2c>)
 8002728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <vApplicationGetTimerTaskMemory+0x30>)
 800272e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	20000340 	.word	0x20000340
 8002748:	200003ec 	.word	0x200003ec

0800274c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f103 0208 	add.w	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f103 0208 	add.w	r2, r3, #8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0208 	add.w	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d103      	bne.n	800280e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	e00c      	b.n	8002828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3308      	adds	r3, #8
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e002      	b.n	800281c <vListInsert+0x2e>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d2f6      	bcs.n	8002816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6852      	ldr	r2, [r2, #4]
 8002880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d103      	bne.n	8002894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1e5a      	subs	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028e0:	f002 f8aa 	bl	8004a38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	441a      	add	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	3b01      	subs	r3, #1
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	22ff      	movs	r2, #255	@ 0xff
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01a      	beq.n	8002974 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3310      	adds	r3, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f944 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <xQueueGenericReset+0xd0>)
 8002950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	e009      	b.n	8002974 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3310      	adds	r3, #16
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fef1 	bl	800274c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff feec 	bl	800274c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002974:	f002 f892 	bl	8004a9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	@ 0x38
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10b      	bne.n	80029d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	e7fd      	b.n	80029ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <xQueueGenericCreateStatic+0x56>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <xQueueGenericCreateStatic+0x5a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <xQueueGenericCreateStatic+0x5c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	623b      	str	r3, [r7, #32]
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	e7fd      	b.n	80029fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <xQueueGenericCreateStatic+0x84>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <xQueueGenericCreateStatic+0x88>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <xQueueGenericCreateStatic+0x8a>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	61fb      	str	r3, [r7, #28]
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a2e:	2350      	movs	r3, #80	@ 0x50
 8002a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b50      	cmp	r3, #80	@ 0x50
 8002a36:	d00b      	beq.n	8002a50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	61bb      	str	r3, [r7, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f805 	bl	8002a82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3730      	adds	r7, #48	@ 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e002      	b.n	8002aa4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	69b8      	ldr	r0, [r7, #24]
 8002ab4:	f7ff fefe 	bl	80028b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08e      	sub	sp, #56	@ 0x38
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <xQueueGenericSend+0x34>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueGenericSend+0x42>
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueGenericSend+0x46>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericSend+0x48>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericSend+0x64>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d103      	bne.n	8002b3a <xQueueGenericSend+0x72>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <xQueueGenericSend+0x76>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueGenericSend+0x78>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10b      	bne.n	8002b5c <xQueueGenericSend+0x94>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	623b      	str	r3, [r7, #32]
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b5c:	f001 f9fe 	bl	8003f5c <xTaskGetSchedulerState>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d102      	bne.n	8002b6c <xQueueGenericSend+0xa4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <xQueueGenericSend+0xa8>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <xQueueGenericSend+0xaa>
 8002b70:	2300      	movs	r3, #0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <xQueueGenericSend+0xc6>
	__asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	61fb      	str	r3, [r7, #28]
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	e7fd      	b.n	8002b8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b8e:	f001 ff53 	bl	8004a38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <xQueueGenericSend+0xdc>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d129      	bne.n	8002bf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002baa:	f000 fa0f 	bl	8002fcc <prvCopyDataToQueue>
 8002bae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	3324      	adds	r3, #36	@ 0x24
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f807 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc8 <xQueueGenericSend+0x200>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	e00a      	b.n	8002bf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002be0:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <xQueueGenericSend+0x200>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bf0:	f001 ff54 	bl	8004a9c <vPortExitCritical>
				return pdPASS;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e063      	b.n	8002cc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bfe:	f001 ff4d 	bl	8004a9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e05c      	b.n	8002cc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f841 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c1a:	f001 ff3f 	bl	8004a9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c1e:	f000 fda9 	bl	8003774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c22:	f001 ff09 	bl	8004a38 <vPortEnterCritical>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d103      	bne.n	8002c3c <xQueueGenericSend+0x174>
 8002c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x18a>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c52:	f001 ff23 	bl	8004a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c56:	1d3a      	adds	r2, r7, #4
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f830 	bl	8003cc4 <xTaskCheckForTimeOut>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d124      	bne.n	8002cb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c6c:	f000 faa6 	bl	80031bc <prvIsQueueFull>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	3310      	adds	r3, #16
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 ff54 	bl	8003b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c86:	f000 fa31 	bl	80030ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c8a:	f000 fd81 	bl	8003790 <xTaskResumeAll>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af7c 	bne.w	8002b8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <xQueueGenericSend+0x200>)
 8002c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	e772      	b.n	8002b8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002caa:	f000 fa1f 	bl	80030ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cae:	f000 fd6f 	bl	8003790 <xTaskResumeAll>
 8002cb2:	e76c      	b.n	8002b8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cb6:	f000 fa19 	bl	80030ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cba:	f000 fd69 	bl	8003790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3738      	adds	r7, #56	@ 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b090      	sub	sp, #64	@ 0x40
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSendFromISR+0x3e>
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSendFromISR+0x42>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSendFromISR+0x44>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d103      	bne.n	8002d3a <xQueueGenericSendFromISR+0x6e>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <xQueueGenericSendFromISR+0x72>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <xQueueGenericSendFromISR+0x74>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	623b      	str	r3, [r7, #32]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d5c:	f001 ff4c 	bl	8004bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d60:	f3ef 8211 	mrs	r2, BASEPRI
 8002d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	61fa      	str	r2, [r7, #28]
 8002d76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <xQueueGenericSendFromISR+0xc2>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d12f      	bne.n	8002dee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002da4:	f000 f912 	bl	8002fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002da8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d112      	bne.n	8002dd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbc:	3324      	adds	r3, #36	@ 0x24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 ff06 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e007      	b.n	8002de8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	b25a      	sxtb	r2, r3
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002dec:	e001      	b.n	8002df2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3740      	adds	r7, #64	@ 0x40
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <xQueueReceive+0x32>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	623b      	str	r3, [r7, #32]
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <xQueueReceive+0x40>
 8002e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <xQueueReceive+0x44>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <xQueueReceive+0x46>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <xQueueReceive+0x62>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	61fb      	str	r3, [r7, #28]
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e6a:	f001 f877 	bl	8003f5c <xTaskGetSchedulerState>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <xQueueReceive+0x72>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <xQueueReceive+0x76>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <xQueueReceive+0x78>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <xQueueReceive+0x94>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	61bb      	str	r3, [r7, #24]
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e9c:	f001 fdcc 	bl	8004a38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01f      	beq.n	8002eec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002eb0:	f000 f8f6 	bl	80030a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00f      	beq.n	8002ee4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fe81 	bl	8003bd0 <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <xQueueReceive+0x1c0>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ee4:	f001 fdda 	bl	8004a9c <vPortExitCritical>
				return pdPASS;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e069      	b.n	8002fc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d103      	bne.n	8002efa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ef2:	f001 fdd3 	bl	8004a9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e062      	b.n	8002fc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fec7 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f0e:	f001 fdc5 	bl	8004a9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f12:	f000 fc2f 	bl	8003774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f16:	f001 fd8f 	bl	8004a38 <vPortEnterCritical>
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d103      	bne.n	8002f30 <xQueueReceive+0x128>
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d103      	bne.n	8002f46 <xQueueReceive+0x13e>
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f46:	f001 fda9 	bl	8004a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f4a:	1d3a      	adds	r2, r7, #4
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 feb6 	bl	8003cc4 <xTaskCheckForTimeOut>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d123      	bne.n	8002fa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f60:	f000 f916 	bl	8003190 <prvIsQueueEmpty>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d017      	beq.n	8002f9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	3324      	adds	r3, #36	@ 0x24
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fdda 	bl	8003b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f7a:	f000 f8b7 	bl	80030ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f7e:	f000 fc07 	bl	8003790 <xTaskResumeAll>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d189      	bne.n	8002e9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <xQueueReceive+0x1c0>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	e780      	b.n	8002e9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f9c:	f000 f8a6 	bl	80030ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fa0:	f000 fbf6 	bl	8003790 <xTaskResumeAll>
 8002fa4:	e77a      	b.n	8002e9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fa8:	f000 f8a0 	bl	80030ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fac:	f000 fbf0 	bl	8003790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb2:	f000 f8ed 	bl	8003190 <prvIsQueueEmpty>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f43f af6f 	beq.w	8002e9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3730      	adds	r7, #48	@ 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d14d      	bne.n	800308e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 ffce 	bl	8003f98 <xTaskPriorityDisinherit>
 8002ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e043      	b.n	800308e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d119      	bne.n	8003040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6858      	ldr	r0, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	461a      	mov	r2, r3
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	f002 fa45 	bl	80054a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	441a      	add	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d32b      	bcc.n	800308e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	e026      	b.n	800308e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68d8      	ldr	r0, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	461a      	mov	r2, r3
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	f002 fa2b 	bl	80054a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	425b      	negs	r3, r3
 800305a:	441a      	add	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d207      	bcs.n	800307c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	425b      	negs	r3, r3
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d105      	bne.n	800308e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3b01      	subs	r3, #1
 800308c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003096:	697b      	ldr	r3, [r7, #20]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	441a      	add	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d303      	bcc.n	80030d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	461a      	mov	r2, r3
 80030de:	6838      	ldr	r0, [r7, #0]
 80030e0:	f002 f9e1 	bl	80054a6 <memcpy>
	}
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030f4:	f001 fca0 	bl	8004a38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003100:	e011      	b.n	8003126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3324      	adds	r3, #36	@ 0x24
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fd5e 	bl	8003bd0 <xTaskRemoveFromEventList>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800311a:	f000 fe37 	bl	8003d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	3b01      	subs	r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	dce9      	bgt.n	8003102 <prvUnlockQueue+0x16>
 800312e:	e000      	b.n	8003132 <prvUnlockQueue+0x46>
					break;
 8003130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	22ff      	movs	r2, #255	@ 0xff
 8003136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fcaf 	bl	8004a9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800313e:	f001 fc7b 	bl	8004a38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800314a:	e011      	b.n	8003170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fd39 	bl	8003bd0 <xTaskRemoveFromEventList>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003164:	f000 fe12 	bl	8003d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	3b01      	subs	r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dce9      	bgt.n	800314c <prvUnlockQueue+0x60>
 8003178:	e000      	b.n	800317c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800317a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	22ff      	movs	r2, #255	@ 0xff
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003184:	f001 fc8a 	bl	8004a9c <vPortExitCritical>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003198:	f001 fc4e 	bl	8004a38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e001      	b.n	80031ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ae:	f001 fc75 	bl	8004a9c <vPortExitCritical>

	return xReturn;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c4:	f001 fc38 	bl	8004a38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d102      	bne.n	80031da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031de:	f001 fc5d 	bl	8004a9c <vPortExitCritical>

	return xReturn;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e014      	b.n	8003226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031fc:	4a0f      	ldr	r2, [pc, #60]	@ (800323c <vQueueAddToRegistry+0x50>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003208:	490c      	ldr	r1, [pc, #48]	@ (800323c <vQueueAddToRegistry+0x50>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003212:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <vQueueAddToRegistry+0x50>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800321e:	e006      	b.n	800322e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d9e7      	bls.n	80031fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20004c24 	.word	0x20004c24

08003240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003250:	f001 fbf2 	bl	8004a38 <vPortEnterCritical>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800325a:	b25b      	sxtb	r3, r3
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d103      	bne.n	800326a <vQueueWaitForMessageRestricted+0x2a>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003270:	b25b      	sxtb	r3, r3
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <vQueueWaitForMessageRestricted+0x40>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003280:	f001 fc0c 	bl	8004a9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3324      	adds	r3, #36	@ 0x24
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fc6f 	bl	8003b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff26 	bl	80030ec <prvUnlockQueue>
	}
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08e      	sub	sp, #56	@ 0x38
 80032ac:	af04      	add	r7, sp, #16
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	623b      	str	r3, [r7, #32]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	61fb      	str	r3, [r7, #28]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032f2:	23ac      	movs	r3, #172	@ 0xac
 80032f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2bac      	cmp	r3, #172	@ 0xac
 80032fa:	d00b      	beq.n	8003314 <xTaskCreateStatic+0x6c>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	61bb      	str	r3, [r7, #24]
}
 800330e:	bf00      	nop
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01e      	beq.n	800335a <xTaskCreateStatic+0xb2>
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01b      	beq.n	800335a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	2202      	movs	r2, #2
 8003330:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003334:	2300      	movs	r3, #0
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f851 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003354:	f000 f8f8 	bl	8003548 <prvAddNewTaskToReadyList>
 8003358:	e001      	b.n	800335e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800335e:	697b      	ldr	r3, [r7, #20]
	}
 8003360:	4618      	mov	r0, r3
 8003362:	3728      	adds	r7, #40	@ 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	@ 0x30
 800336c:	af04      	add	r7, sp, #16
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f001 fc7d 	bl	8004c7c <pvPortMalloc>
 8003382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800338a:	20ac      	movs	r0, #172	@ 0xac
 800338c:	f001 fc76 	bl	8004c7c <pvPortMalloc>
 8003390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
 800339e:	e005      	b.n	80033ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f001 fd39 	bl	8004e18 <vPortFree>
 80033a6:	e001      	b.n	80033ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	2300      	movs	r3, #0
 80033be:	9303      	str	r3, [sp, #12]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	9302      	str	r3, [sp, #8]
 80033c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f80f 	bl	80033f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d6:	69f8      	ldr	r0, [r7, #28]
 80033d8:	f000 f8b6 	bl	8003548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033dc:	2301      	movs	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e002      	b.n	80033e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033e8:	69bb      	ldr	r3, [r7, #24]
	}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	21a5      	movs	r1, #165	@ 0xa5
 800340e:	f001 ff78 	bl	8005302 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800341c:	3b01      	subs	r3, #1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01f      	beq.n	800349a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e012      	b.n	8003486 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	7819      	ldrb	r1, [r3, #0]
 8003468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	3334      	adds	r3, #52	@ 0x34
 8003470:	460a      	mov	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d006      	beq.n	800348e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b0f      	cmp	r3, #15
 800348a:	d9e9      	bls.n	8003460 <prvInitialiseNewTask+0x6c>
 800348c:	e000      	b.n	8003490 <prvInitialiseNewTask+0x9c>
			{
				break;
 800348e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003498:	e003      	b.n	80034a2 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	2b37      	cmp	r3, #55	@ 0x37
 80034a6:	d901      	bls.n	80034ac <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a8:	2337      	movs	r3, #55	@ 0x37
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	3304      	adds	r3, #4
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f962 	bl	800278c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f95d 	bl	800278c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fa:	3358      	adds	r3, #88	@ 0x58
 80034fc:	224c      	movs	r2, #76	@ 0x4c
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fefe 	bl	8005302 <memset>
 8003506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003508:	4a0c      	ldr	r2, [pc, #48]	@ (800353c <prvInitialiseNewTask+0x148>)
 800350a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <prvInitialiseNewTask+0x14c>)
 8003510:	661a      	str	r2, [r3, #96]	@ 0x60
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <prvInitialiseNewTask+0x150>)
 8003516:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	69b8      	ldr	r0, [r7, #24]
 800351e:	f001 f959 	bl	80047d4 <pxPortInitialiseStack>
 8003522:	4602      	mov	r2, r0
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003532:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003534:	bf00      	nop
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20004a40 	.word	0x20004a40
 8003540:	20004aa8 	.word	0x20004aa8
 8003544:	20004b10 	.word	0x20004b10

08003548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003550:	f001 fa72 	bl	8004a38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <prvAddNewTaskToReadyList+0xc4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <prvAddNewTaskToReadyList+0xc4>)
 800355c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800355e:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <prvAddNewTaskToReadyList+0xc8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003566:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <prvAddNewTaskToReadyList+0xc8>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <prvAddNewTaskToReadyList+0xc4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d110      	bne.n	8003596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003574:	f000 fc2e 	bl	8003dd4 <prvInitialiseTaskLists>
 8003578:	e00d      	b.n	8003596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <prvAddNewTaskToReadyList+0xcc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003582:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <prvAddNewTaskToReadyList+0xc8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	429a      	cmp	r2, r3
 800358e:	d802      	bhi.n	8003596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003590:	4a1f      	ldr	r2, [pc, #124]	@ (8003610 <prvAddNewTaskToReadyList+0xc8>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <prvAddNewTaskToReadyList+0xd0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a1e      	ldr	r2, [pc, #120]	@ (8003618 <prvAddNewTaskToReadyList+0xd0>)
 800359e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <prvAddNewTaskToReadyList+0xd0>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ac:	4b1b      	ldr	r3, [pc, #108]	@ (800361c <prvAddNewTaskToReadyList+0xd4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d903      	bls.n	80035bc <prvAddNewTaskToReadyList+0x74>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <prvAddNewTaskToReadyList+0xd4>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4a15      	ldr	r2, [pc, #84]	@ (8003620 <prvAddNewTaskToReadyList+0xd8>)
 80035ca:	441a      	add	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7ff f8e7 	bl	80027a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035d8:	f001 fa60 	bl	8004a9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <prvAddNewTaskToReadyList+0xcc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <prvAddNewTaskToReadyList+0xc8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d207      	bcs.n	8003602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <prvAddNewTaskToReadyList+0xdc>)
 80035f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000cc0 	.word	0x20000cc0
 8003610:	200007ec 	.word	0x200007ec
 8003614:	20000ccc 	.word	0x20000ccc
 8003618:	20000cdc 	.word	0x20000cdc
 800361c:	20000cc8 	.word	0x20000cc8
 8003620:	200007f0 	.word	0x200007f0
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800363a:	4b14      	ldr	r3, [pc, #80]	@ (800368c <vTaskDelay+0x64>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <vTaskDelay+0x32>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	60bb      	str	r3, [r7, #8]
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	e7fd      	b.n	8003656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800365a:	f000 f88b 	bl	8003774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800365e:	2100      	movs	r1, #0
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fd09 	bl	8004078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003666:	f000 f893 	bl	8003790 <xTaskResumeAll>
 800366a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003672:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <vTaskDelay+0x68>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000ce8 	.word	0x20000ce8
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	@ 0x28
 8003698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036a2:	463a      	mov	r2, r7
 80036a4:	1d39      	adds	r1, r7, #4
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f81a 	bl	80026e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	9202      	str	r2, [sp, #8]
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	460a      	mov	r2, r1
 80036c2:	4924      	ldr	r1, [pc, #144]	@ (8003754 <vTaskStartScheduler+0xc0>)
 80036c4:	4824      	ldr	r0, [pc, #144]	@ (8003758 <vTaskStartScheduler+0xc4>)
 80036c6:	f7ff fdef 	bl	80032a8 <xTaskCreateStatic>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a23      	ldr	r2, [pc, #140]	@ (800375c <vTaskStartScheduler+0xc8>)
 80036ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036d0:	4b22      	ldr	r3, [pc, #136]	@ (800375c <vTaskStartScheduler+0xc8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e001      	b.n	80036e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036e8:	f000 fd1a 	bl	8004120 <xTimerCreateTimerTask>
 80036ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d11b      	bne.n	800372c <vTaskStartScheduler+0x98>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	613b      	str	r3, [r7, #16]
}
 8003706:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <vTaskStartScheduler+0xcc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3358      	adds	r3, #88	@ 0x58
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <vTaskStartScheduler+0xd0>)
 8003710:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <vTaskStartScheduler+0xd4>)
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800371a:	4b14      	ldr	r3, [pc, #80]	@ (800376c <vTaskStartScheduler+0xd8>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003720:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <vTaskStartScheduler+0xdc>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003726:	f001 f8e3 	bl	80048f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800372a:	e00f      	b.n	800374c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d10b      	bne.n	800374c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	60fb      	str	r3, [r7, #12]
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <vTaskStartScheduler+0xb4>
}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08006124 	.word	0x08006124
 8003758:	08003da5 	.word	0x08003da5
 800375c:	20000ce4 	.word	0x20000ce4
 8003760:	200007ec 	.word	0x200007ec
 8003764:	20000020 	.word	0x20000020
 8003768:	20000ce0 	.word	0x20000ce0
 800376c:	20000ccc 	.word	0x20000ccc
 8003770:	20000cc4 	.word	0x20000cc4

08003774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <vTaskSuspendAll+0x18>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a03      	ldr	r2, [pc, #12]	@ (800378c <vTaskSuspendAll+0x18>)
 8003780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000ce8 	.word	0x20000ce8

08003790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800379e:	4b42      	ldr	r3, [pc, #264]	@ (80038a8 <xTaskResumeAll+0x118>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <xTaskResumeAll+0x2e>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	603b      	str	r3, [r7, #0]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037be:	f001 f93b 	bl	8004a38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037c2:	4b39      	ldr	r3, [pc, #228]	@ (80038a8 <xTaskResumeAll+0x118>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4a37      	ldr	r2, [pc, #220]	@ (80038a8 <xTaskResumeAll+0x118>)
 80037ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037cc:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <xTaskResumeAll+0x118>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d162      	bne.n	800389a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037d4:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <xTaskResumeAll+0x11c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05e      	beq.n	800389a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037dc:	e02f      	b.n	800383e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <xTaskResumeAll+0x120>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3318      	adds	r3, #24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f838 	bl	8002860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f833 	bl	8002860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4b2d      	ldr	r3, [pc, #180]	@ (80038b4 <xTaskResumeAll+0x124>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d903      	bls.n	800380e <xTaskResumeAll+0x7e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <xTaskResumeAll+0x124>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <xTaskResumeAll+0x128>)
 800381c:	441a      	add	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe ffbe 	bl	80027a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <xTaskResumeAll+0x12c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003838:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <xTaskResumeAll+0x130>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383e:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <xTaskResumeAll+0x120>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1cb      	bne.n	80037de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800384c:	f000 fb66 	bl	8003f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <xTaskResumeAll+0x134>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800385c:	f000 f846 	bl	80038ec <xTaskIncrementTick>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003866:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <xTaskResumeAll+0x130>)
 8003868:	2201      	movs	r2, #1
 800386a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f1      	bne.n	800385c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <xTaskResumeAll+0x134>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <xTaskResumeAll+0x130>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800388a:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <xTaskResumeAll+0x138>)
 800388c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800389a:	f001 f8ff 	bl	8004a9c <vPortExitCritical>

	return xAlreadyYielded;
 800389e:	68bb      	ldr	r3, [r7, #8]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000ce8 	.word	0x20000ce8
 80038ac:	20000cc0 	.word	0x20000cc0
 80038b0:	20000c80 	.word	0x20000c80
 80038b4:	20000cc8 	.word	0x20000cc8
 80038b8:	200007f0 	.word	0x200007f0
 80038bc:	200007ec 	.word	0x200007ec
 80038c0:	20000cd4 	.word	0x20000cd4
 80038c4:	20000cd0 	.word	0x20000cd0
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <xTaskGetTickCount+0x1c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000cc4 	.word	0x20000cc4

080038ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a34 <xTaskIncrementTick+0x148>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 8090 	bne.w	8003a20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003900:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <xTaskIncrementTick+0x14c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003908:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <xTaskIncrementTick+0x14c>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d121      	bne.n	8003958 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003914:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <xTaskIncrementTick+0x4a>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	603b      	str	r3, [r7, #0]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskIncrementTick+0x46>
 8003936:	4b41      	ldr	r3, [pc, #260]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	4b40      	ldr	r3, [pc, #256]	@ (8003a40 <xTaskIncrementTick+0x154>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3e      	ldr	r2, [pc, #248]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4a3e      	ldr	r2, [pc, #248]	@ (8003a40 <xTaskIncrementTick+0x154>)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <xTaskIncrementTick+0x158>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a3c      	ldr	r2, [pc, #240]	@ (8003a44 <xTaskIncrementTick+0x158>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	f000 fae2 	bl	8003f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003958:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d349      	bcc.n	80039f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003962:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396c:	4b36      	ldr	r3, [pc, #216]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 800396e:	f04f 32ff 	mov.w	r2, #4294967295
 8003972:	601a      	str	r2, [r3, #0]
					break;
 8003974:	e03f      	b.n	80039f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003976:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <xTaskIncrementTick+0x150>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d203      	bcs.n	8003996 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800398e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <xTaskIncrementTick+0x15c>)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003994:	e02f      	b.n	80039f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	3304      	adds	r3, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe ff60 	bl	8002860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3318      	adds	r3, #24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe ff57 	bl	8002860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <xTaskIncrementTick+0x160>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d903      	bls.n	80039c6 <xTaskIncrementTick+0xda>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <xTaskIncrementTick+0x160>)
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <xTaskIncrementTick+0x164>)
 80039d4:	441a      	add	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe fee2 	bl	80027a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <xTaskIncrementTick+0x168>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3b8      	bcc.n	8003962 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f4:	e7b5      	b.n	8003962 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039f6:	4b17      	ldr	r3, [pc, #92]	@ (8003a54 <xTaskIncrementTick+0x168>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4914      	ldr	r1, [pc, #80]	@ (8003a50 <xTaskIncrementTick+0x164>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d901      	bls.n	8003a12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a12:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <xTaskIncrementTick+0x16c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e004      	b.n	8003a2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	@ (8003a5c <xTaskIncrementTick+0x170>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <xTaskIncrementTick+0x170>)
 8003a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a2a:	697b      	ldr	r3, [r7, #20]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000ce8 	.word	0x20000ce8
 8003a38:	20000cc4 	.word	0x20000cc4
 8003a3c:	20000c78 	.word	0x20000c78
 8003a40:	20000c7c 	.word	0x20000c7c
 8003a44:	20000cd8 	.word	0x20000cd8
 8003a48:	20000ce0 	.word	0x20000ce0
 8003a4c:	20000cc8 	.word	0x20000cc8
 8003a50:	200007f0 	.word	0x200007f0
 8003a54:	200007ec 	.word	0x200007ec
 8003a58:	20000cd4 	.word	0x20000cd4
 8003a5c:	20000cd0 	.word	0x20000cd0

08003a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a66:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <vTaskSwitchContext+0xb4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b18 <vTaskSwitchContext+0xb8>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a74:	e047      	b.n	8003b06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003a76:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <vTaskSwitchContext+0xb8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <vTaskSwitchContext+0xbc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e011      	b.n	8003aa8 <vTaskSwitchContext+0x48>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	607b      	str	r3, [r7, #4]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <vTaskSwitchContext+0x3e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	491d      	ldr	r1, [pc, #116]	@ (8003b20 <vTaskSwitchContext+0xc0>)
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0e3      	beq.n	8003a84 <vTaskSwitchContext+0x24>
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4a16      	ldr	r2, [pc, #88]	@ (8003b20 <vTaskSwitchContext+0xc0>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	3308      	adds	r3, #8
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d104      	bne.n	8003aec <vTaskSwitchContext+0x8c>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <vTaskSwitchContext+0xc4>)
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <vTaskSwitchContext+0xbc>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <vTaskSwitchContext+0xc4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3358      	adds	r3, #88	@ 0x58
 8003b02:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <vTaskSwitchContext+0xc8>)
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000ce8 	.word	0x20000ce8
 8003b18:	20000cd4 	.word	0x20000cd4
 8003b1c:	20000cc8 	.word	0x20000cc8
 8003b20:	200007f0 	.word	0x200007f0
 8003b24:	200007ec 	.word	0x200007ec
 8003b28:	20000020 	.word	0x20000020

08003b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b54:	4b07      	ldr	r3, [pc, #28]	@ (8003b74 <vTaskPlaceOnEventList+0x48>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3318      	adds	r3, #24
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fe fe46 	bl	80027ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b62:	2101      	movs	r1, #1
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f000 fa87 	bl	8004078 <prvAddCurrentTaskToDelayedList>
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200007ec 	.word	0x200007ec

08003b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	617b      	str	r3, [r7, #20]
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7fe fdfb 	bl	80027a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68b8      	ldr	r0, [r7, #8]
 8003bc0:	f000 fa5a 	bl	8004078 <prvAddCurrentTaskToDelayedList>
	}
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200007ec 	.word	0x200007ec

08003bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	60fb      	str	r3, [r7, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3318      	adds	r3, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fe2c 	bl	8002860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <xTaskRemoveFromEventList+0xb0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fe23 	bl	8002860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1e:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <xTaskRemoveFromEventList+0xb4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d903      	bls.n	8003c2e <xTaskRemoveFromEventList+0x5e>
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <xTaskRemoveFromEventList+0xb4>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a13      	ldr	r2, [pc, #76]	@ (8003c88 <xTaskRemoveFromEventList+0xb8>)
 8003c3c:	441a      	add	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe fdae 	bl	80027a6 <vListInsertEnd>
 8003c4a:	e005      	b.n	8003c58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	4619      	mov	r1, r3
 8003c52:	480e      	ldr	r0, [pc, #56]	@ (8003c8c <xTaskRemoveFromEventList+0xbc>)
 8003c54:	f7fe fda7 	bl	80027a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <xTaskRemoveFromEventList+0xc0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d905      	bls.n	8003c72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c94 <xTaskRemoveFromEventList+0xc4>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e001      	b.n	8003c76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000ce8 	.word	0x20000ce8
 8003c84:	20000cc8 	.word	0x20000cc8
 8003c88:	200007f0 	.word	0x200007f0
 8003c8c:	20000c80 	.word	0x20000c80
 8003c90:	200007ec 	.word	0x200007ec
 8003c94:	20000cd4 	.word	0x20000cd4

08003c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <vTaskInternalSetTimeOutState+0x24>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <vTaskInternalSetTimeOutState+0x28>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000cd8 	.word	0x20000cd8
 8003cc0:	20000cc4 	.word	0x20000cc4

08003cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	613b      	str	r3, [r7, #16]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	60fb      	str	r3, [r7, #12]
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003d0a:	f000 fe95 	bl	8004a38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <xTaskCheckForTimeOut+0xc0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d102      	bne.n	8003d2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e023      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <xTaskCheckForTimeOut+0xc4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d007      	beq.n	8003d4a <xTaskCheckForTimeOut+0x86>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	61fb      	str	r3, [r7, #28]
 8003d48:	e015      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d20b      	bcs.n	8003d6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad2      	subs	r2, r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff99 	bl	8003c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e004      	b.n	8003d76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d76:	f000 fe91 	bl	8004a9c <vPortExitCritical>

	return xReturn;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000cc4 	.word	0x20000cc4
 8003d88:	20000cd8 	.word	0x20000cd8

08003d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d90:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <vTaskMissedYield+0x14>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	20000cd4 	.word	0x20000cd4

08003da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dac:	f000 f852 	bl	8003e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <prvIdleTask+0x28>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d9f9      	bls.n	8003dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <prvIdleTask+0x2c>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dc8:	e7f0      	b.n	8003dac <prvIdleTask+0x8>
 8003dca:	bf00      	nop
 8003dcc:	200007f0 	.word	0x200007f0
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	e00c      	b.n	8003dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <prvInitialiseTaskLists+0x60>)
 8003dec:	4413      	add	r3, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fcac 	bl	800274c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3301      	adds	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b37      	cmp	r3, #55	@ 0x37
 8003dfe:	d9ef      	bls.n	8003de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e00:	480d      	ldr	r0, [pc, #52]	@ (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e02:	f7fe fca3 	bl	800274c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e06:	480d      	ldr	r0, [pc, #52]	@ (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e08:	f7fe fca0 	bl	800274c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e0c:	480c      	ldr	r0, [pc, #48]	@ (8003e40 <prvInitialiseTaskLists+0x6c>)
 8003e0e:	f7fe fc9d 	bl	800274c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e12:	480c      	ldr	r0, [pc, #48]	@ (8003e44 <prvInitialiseTaskLists+0x70>)
 8003e14:	f7fe fc9a 	bl	800274c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e18:	480b      	ldr	r0, [pc, #44]	@ (8003e48 <prvInitialiseTaskLists+0x74>)
 8003e1a:	f7fe fc97 	bl	800274c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <prvInitialiseTaskLists+0x78>)
 8003e20:	4a05      	ldr	r2, [pc, #20]	@ (8003e38 <prvInitialiseTaskLists+0x64>)
 8003e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <prvInitialiseTaskLists+0x7c>)
 8003e26:	4a05      	ldr	r2, [pc, #20]	@ (8003e3c <prvInitialiseTaskLists+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200007f0 	.word	0x200007f0
 8003e38:	20000c50 	.word	0x20000c50
 8003e3c:	20000c64 	.word	0x20000c64
 8003e40:	20000c80 	.word	0x20000c80
 8003e44:	20000c94 	.word	0x20000c94
 8003e48:	20000cac 	.word	0x20000cac
 8003e4c:	20000c78 	.word	0x20000c78
 8003e50:	20000c7c 	.word	0x20000c7c

08003e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e5a:	e019      	b.n	8003e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e5c:	f000 fdec 	bl	8004a38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <prvCheckTasksWaitingTermination+0x50>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe fcf7 	bl	8002860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <prvCheckTasksWaitingTermination+0x54>)
 8003e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4a0a      	ldr	r2, [pc, #40]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e86:	f000 fe09 	bl	8004a9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f810 	bl	8003eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e90:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <prvCheckTasksWaitingTermination+0x58>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e1      	bne.n	8003e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000c94 	.word	0x20000c94
 8003ea8:	20000cc0 	.word	0x20000cc0
 8003eac:	20000ca8 	.word	0x20000ca8

08003eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3358      	adds	r3, #88	@ 0x58
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fa39 	bl	8005334 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d108      	bne.n	8003ede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ffa1 	bl	8004e18 <vPortFree>
				vPortFree( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ff9e 	bl	8004e18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003edc:	e019      	b.n	8003f12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d103      	bne.n	8003ef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 ff95 	bl	8004e18 <vPortFree>
	}
 8003eee:	e010      	b.n	8003f12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d00b      	beq.n	8003f12 <prvDeleteTCB+0x62>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <prvDeleteTCB+0x5e>
	}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f22:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <prvResetNextTaskUnblockTime+0x38>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <prvResetNextTaskUnblockTime+0x3c>)
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f34:	e008      	b.n	8003f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f36:	4b07      	ldr	r3, [pc, #28]	@ (8003f54 <prvResetNextTaskUnblockTime+0x38>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <prvResetNextTaskUnblockTime+0x3c>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000c78 	.word	0x20000c78
 8003f58:	20000ce0 	.word	0x20000ce0

08003f5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <xTaskGetSchedulerState+0x34>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	e008      	b.n	8003f82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f70:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <xTaskGetSchedulerState+0x38>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	e001      	b.n	8003f82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f82:	687b      	ldr	r3, [r7, #4]
	}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000ccc 	.word	0x20000ccc
 8003f94:	20000ce8 	.word	0x20000ce8

08003f98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d058      	beq.n	8004060 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003fae:	4b2f      	ldr	r3, [pc, #188]	@ (800406c <xTaskPriorityDisinherit+0xd4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d00b      	beq.n	8003fd0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	60fb      	str	r3, [r7, #12]
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60bb      	str	r3, [r7, #8]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	429a      	cmp	r2, r3
 8004004:	d02c      	beq.n	8004060 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400a:	2b00      	cmp	r3, #0
 800400c:	d128      	bne.n	8004060 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	3304      	adds	r3, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fc24 	bl	8002860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <xTaskPriorityDisinherit+0xd8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d903      	bls.n	8004040 <xTaskPriorityDisinherit+0xa8>
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403c:	4a0c      	ldr	r2, [pc, #48]	@ (8004070 <xTaskPriorityDisinherit+0xd8>)
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <xTaskPriorityDisinherit+0xdc>)
 800404e:	441a      	add	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7fe fba5 	bl	80027a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004060:	697b      	ldr	r3, [r7, #20]
	}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200007ec 	.word	0x200007ec
 8004070:	20000cc8 	.word	0x20000cc8
 8004074:	200007f0 	.word	0x200007f0

08004078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004082:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <prvAddCurrentTaskToDelayedList+0x90>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004088:	4b20      	ldr	r3, [pc, #128]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fbe6 	bl	8002860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d10a      	bne.n	80040b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4819      	ldr	r0, [pc, #100]	@ (8004110 <prvAddCurrentTaskToDelayedList+0x98>)
 80040ac:	f7fe fb7b 	bl	80027a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040b0:	e026      	b.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d209      	bcs.n	80040de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe fb89 	bl	80027ee <vListInsert>
}
 80040dc:	e010      	b.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7fe fb7f 	bl	80027ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvAddCurrentTaskToDelayedList+0xa4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d202      	bcs.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040fa:	4a08      	ldr	r2, [pc, #32]	@ (800411c <prvAddCurrentTaskToDelayedList+0xa4>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000cc4 	.word	0x20000cc4
 800410c:	200007ec 	.word	0x200007ec
 8004110:	20000cac 	.word	0x20000cac
 8004114:	20000c7c 	.word	0x20000c7c
 8004118:	20000c78 	.word	0x20000c78
 800411c:	20000ce0 	.word	0x20000ce0

08004120 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800412a:	f000 fb13 	bl	8004754 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800412e:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <xTimerCreateTimerTask+0x84>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800413e:	1d3a      	adds	r2, r7, #4
 8004140:	f107 0108 	add.w	r1, r7, #8
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fae5 	bl	8002718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	9202      	str	r2, [sp, #8]
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	2302      	movs	r3, #2
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	460a      	mov	r2, r1
 8004160:	4911      	ldr	r1, [pc, #68]	@ (80041a8 <xTimerCreateTimerTask+0x88>)
 8004162:	4812      	ldr	r0, [pc, #72]	@ (80041ac <xTimerCreateTimerTask+0x8c>)
 8004164:	f7ff f8a0 	bl	80032a8 <xTaskCreateStatic>
 8004168:	4603      	mov	r3, r0
 800416a:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <xTimerCreateTimerTask+0x90>)
 800416c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <xTimerCreateTimerTask+0x90>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004176:	2301      	movs	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	613b      	str	r3, [r7, #16]
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004198:	697b      	ldr	r3, [r7, #20]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000d1c 	.word	0x20000d1c
 80041a8:	0800612c 	.word	0x0800612c
 80041ac:	080042ed 	.word	0x080042ed
 80041b0:	20000d20 	.word	0x20000d20

080041b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	@ 0x28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	623b      	str	r3, [r7, #32]
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <xTimerGenericCommand+0x98>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	dc18      	bgt.n	8004230 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041fe:	f7ff fead 	bl	8003f5c <xTaskGetSchedulerState>
 8004202:	4603      	mov	r3, r0
 8004204:	2b02      	cmp	r3, #2
 8004206:	d109      	bne.n	800421c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <xTimerGenericCommand+0x98>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	f107 0110 	add.w	r1, r7, #16
 8004210:	2300      	movs	r3, #0
 8004212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004214:	f7fe fc58 	bl	8002ac8 <xQueueGenericSend>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24
 800421a:	e012      	b.n	8004242 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <xTimerGenericCommand+0x98>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	f107 0110 	add.w	r1, r7, #16
 8004224:	2300      	movs	r3, #0
 8004226:	2200      	movs	r2, #0
 8004228:	f7fe fc4e 	bl	8002ac8 <xQueueGenericSend>
 800422c:	6278      	str	r0, [r7, #36]	@ 0x24
 800422e:	e008      	b.n	8004242 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <xTimerGenericCommand+0x98>)
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	f107 0110 	add.w	r1, r7, #16
 8004238:	2300      	movs	r3, #0
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	f7fe fd46 	bl	8002ccc <xQueueGenericSendFromISR>
 8004240:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000d1c 	.word	0x20000d1c

08004250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425a:	4b23      	ldr	r3, [pc, #140]	@ (80042e8 <prvProcessExpiredTimer+0x98>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe faf9 	bl	8002860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d023      	beq.n	80042c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	18d1      	adds	r1, r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	f000 f8d5 	bl	8004438 <prvInsertTimerInActiveList>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2300      	movs	r3, #0
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	2100      	movs	r1, #0
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff88 	bl	80041b4 <xTimerGenericCommand>
 80042a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d114      	bne.n	80042d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60fb      	str	r3, [r7, #12]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	6978      	ldr	r0, [r7, #20]
 80042dc:	4798      	blx	r3
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000d14 	.word	0x20000d14

080042ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042f4:	f107 0308 	add.w	r3, r7, #8
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f859 	bl	80043b0 <prvGetNextExpireTime>
 80042fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f805 	bl	8004314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800430a:	f000 f8d7 	bl	80044bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800430e:	bf00      	nop
 8004310:	e7f0      	b.n	80042f4 <prvTimerTask+0x8>
	...

08004314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800431e:	f7ff fa29 	bl	8003774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f866 	bl	80043f8 <prvSampleTimeNow>
 800432c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d130      	bne.n	8004396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <prvProcessTimerOrBlockTask+0x3c>
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	429a      	cmp	r2, r3
 8004340:	d806      	bhi.n	8004350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004342:	f7ff fa25 	bl	8003790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff81 	bl	8004250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800434e:	e024      	b.n	800439a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004356:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <prvProcessTimerOrBlockTask+0x90>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <prvProcessTimerOrBlockTask+0x50>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <prvProcessTimerOrBlockTask+0x52>
 8004364:	2300      	movs	r3, #0
 8004366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004368:	4b0f      	ldr	r3, [pc, #60]	@ (80043a8 <prvProcessTimerOrBlockTask+0x94>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	f7fe ff63 	bl	8003240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800437a:	f7ff fa09 	bl	8003790 <xTaskResumeAll>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <prvProcessTimerOrBlockTask+0x98>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
}
 8004394:	e001      	b.n	800439a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004396:	f7ff f9fb 	bl	8003790 <xTaskResumeAll>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000d18 	.word	0x20000d18
 80043a8:	20000d1c 	.word	0x20000d1c
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043b8:	4b0e      	ldr	r3, [pc, #56]	@ (80043f4 <prvGetNextExpireTime+0x44>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <prvGetNextExpireTime+0x16>
 80043c2:	2201      	movs	r2, #1
 80043c4:	e000      	b.n	80043c8 <prvGetNextExpireTime+0x18>
 80043c6:	2200      	movs	r2, #0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d4:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <prvGetNextExpireTime+0x44>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e001      	b.n	80043e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043e4:	68fb      	ldr	r3, [r7, #12]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000d14 	.word	0x20000d14

080043f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004400:	f7ff fa64 	bl	80038cc <xTaskGetTickCount>
 8004404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <prvSampleTimeNow+0x3c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	d205      	bcs.n	800441c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004410:	f000 f93a 	bl	8004688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e002      	b.n	8004422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004422:	4a04      	ldr	r2, [pc, #16]	@ (8004434 <prvSampleTimeNow+0x3c>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000d24 	.word	0x20000d24

08004438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d812      	bhi.n	8004484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	1ad2      	subs	r2, r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e01b      	b.n	80044aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <prvInsertTimerInActiveList+0x7c>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f7fe f9b6 	bl	80027ee <vListInsert>
 8004482:	e012      	b.n	80044aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d206      	bcs.n	800449a <prvInsertTimerInActiveList+0x62>
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e007      	b.n	80044aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <prvInsertTimerInActiveList+0x80>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fe f9a2 	bl	80027ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80044aa:	697b      	ldr	r3, [r7, #20]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000d18 	.word	0x20000d18
 80044b8:	20000d14 	.word	0x20000d14

080044bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	@ 0x38
 80044c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044c2:	e0ce      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	da19      	bge.n	80044fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044ca:	1d3b      	adds	r3, r7, #4
 80044cc:	3304      	adds	r3, #4
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	61fb      	str	r3, [r7, #28]
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f4:	6850      	ldr	r0, [r2, #4]
 80044f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f2c0 80ae 	blt.w	8004662 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	3304      	adds	r3, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe f9a2 	bl	8002860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800451c:	463b      	mov	r3, r7
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff6a 	bl	80043f8 <prvSampleTimeNow>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b09      	cmp	r3, #9
 800452a:	f200 8097 	bhi.w	800465c <prvProcessReceivedCommands+0x1a0>
 800452e:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <prvProcessReceivedCommands+0x78>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	0800455d 	.word	0x0800455d
 8004538:	0800455d 	.word	0x0800455d
 800453c:	0800455d 	.word	0x0800455d
 8004540:	080045d3 	.word	0x080045d3
 8004544:	080045e7 	.word	0x080045e7
 8004548:	08004633 	.word	0x08004633
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800455d 	.word	0x0800455d
 8004554:	080045d3 	.word	0x080045d3
 8004558:	080045e7 	.word	0x080045e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	18d1      	adds	r1, r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800457c:	f7ff ff5c 	bl	8004438 <prvInsertTimerInActiveList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d06c      	beq.n	8004660 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800458c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d061      	beq.n	8004660 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	441a      	add	r2, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ae:	f7ff fe01 	bl	80041b4 <xTimerGenericCommand>
 80045b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d152      	bne.n	8004660 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	61bb      	str	r3, [r7, #24]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80045e4:	e03d      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	617b      	str	r3, [r7, #20]
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	18d1      	adds	r1, r2, r3
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800462c:	f7ff ff04 	bl	8004438 <prvInsertTimerInActiveList>
					break;
 8004630:	e017      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004642:	f000 fbe9 	bl	8004e18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004646:	e00c      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800465a:	e002      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <prvProcessReceivedCommands+0x1a6>
					break;
 8004660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <prvProcessReceivedCommands+0x1c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1d39      	adds	r1, r7, #4
 8004668:	2200      	movs	r2, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fbcc 	bl	8002e08 <xQueueReceive>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	f47f af26 	bne.w	80044c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3730      	adds	r7, #48	@ 0x30
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000d1c 	.word	0x20000d1c

08004688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800468e:	e049      	b.n	8004724 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004690:	4b2e      	ldr	r3, [pc, #184]	@ (800474c <prvSwitchTimerLists+0xc4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469a:	4b2c      	ldr	r3, [pc, #176]	@ (800474c <prvSwitchTimerLists+0xc4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe f8d9 	bl	8002860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02f      	beq.n	8004724 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90e      	bls.n	80046f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046e2:	4b1a      	ldr	r3, [pc, #104]	@ (800474c <prvSwitchTimerLists+0xc4>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe f87e 	bl	80027ee <vListInsert>
 80046f2:	e017      	b.n	8004724 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	2100      	movs	r1, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fd58 	bl	80041b4 <xTimerGenericCommand>
 8004704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	603b      	str	r3, [r7, #0]
}
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	e7fd      	b.n	8004720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004724:	4b09      	ldr	r3, [pc, #36]	@ (800474c <prvSwitchTimerLists+0xc4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1b0      	bne.n	8004690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800472e:	4b07      	ldr	r3, [pc, #28]	@ (800474c <prvSwitchTimerLists+0xc4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <prvSwitchTimerLists+0xc8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a04      	ldr	r2, [pc, #16]	@ (800474c <prvSwitchTimerLists+0xc4>)
 800473a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800473c:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <prvSwitchTimerLists+0xc8>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	6013      	str	r3, [r2, #0]
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000d14 	.word	0x20000d14
 8004750:	20000d18 	.word	0x20000d18

08004754 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800475a:	f000 f96d 	bl	8004a38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <prvCheckForValidListAndQueue+0x60>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d120      	bne.n	80047a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004766:	4814      	ldr	r0, [pc, #80]	@ (80047b8 <prvCheckForValidListAndQueue+0x64>)
 8004768:	f7fd fff0 	bl	800274c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800476c:	4813      	ldr	r0, [pc, #76]	@ (80047bc <prvCheckForValidListAndQueue+0x68>)
 800476e:	f7fd ffed 	bl	800274c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004772:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <prvCheckForValidListAndQueue+0x6c>)
 8004774:	4a10      	ldr	r2, [pc, #64]	@ (80047b8 <prvCheckForValidListAndQueue+0x64>)
 8004776:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004778:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <prvCheckForValidListAndQueue+0x70>)
 800477a:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <prvCheckForValidListAndQueue+0x68>)
 800477c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800477e:	2300      	movs	r3, #0
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <prvCheckForValidListAndQueue+0x74>)
 8004784:	4a11      	ldr	r2, [pc, #68]	@ (80047cc <prvCheckForValidListAndQueue+0x78>)
 8004786:	2110      	movs	r1, #16
 8004788:	200a      	movs	r0, #10
 800478a:	f7fe f8fd 	bl	8002988 <xQueueGenericCreateStatic>
 800478e:	4603      	mov	r3, r0
 8004790:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <prvCheckForValidListAndQueue+0x60>)
 8004792:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <prvCheckForValidListAndQueue+0x60>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <prvCheckForValidListAndQueue+0x60>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	490b      	ldr	r1, [pc, #44]	@ (80047d0 <prvCheckForValidListAndQueue+0x7c>)
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fd22 	bl	80031ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a8:	f000 f978 	bl	8004a9c <vPortExitCritical>
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000d1c 	.word	0x20000d1c
 80047b8:	20000cec 	.word	0x20000cec
 80047bc:	20000d00 	.word	0x20000d00
 80047c0:	20000d14 	.word	0x20000d14
 80047c4:	20000d18 	.word	0x20000d18
 80047c8:	20000dc8 	.word	0x20000dc8
 80047cc:	20000d28 	.word	0x20000d28
 80047d0:	08006134 	.word	0x08006134

080047d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3b04      	subs	r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3b04      	subs	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b04      	subs	r3, #4
 8004802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004804:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <pxPortInitialiseStack+0x64>)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3b14      	subs	r3, #20
 800480e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3b04      	subs	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f06f 0202 	mvn.w	r2, #2
 8004822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b20      	subs	r3, #32
 8004828:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	0800483d 	.word	0x0800483d

0800483c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <prvTaskExitError+0x58>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d00b      	beq.n	8004868 <prvTaskExitError+0x2c>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <prvTaskExitError+0x28>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60bb      	str	r3, [r7, #8]
}
 800487a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800487c:	bf00      	nop
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0fc      	beq.n	800487e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	2000000c 	.word	0x2000000c
	...

080048a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048a0:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <pxCurrentTCBConst2>)
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	6808      	ldr	r0, [r1, #0]
 80048a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	f380 8809 	msr	PSP, r0
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	4770      	bx	lr
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst2>:
 80048c0:	200007ec 	.word	0x200007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048c8:	4808      	ldr	r0, [pc, #32]	@ (80048ec <prvPortStartFirstTask+0x24>)
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	6800      	ldr	r0, [r0, #0]
 80048ce:	f380 8808 	msr	MSP, r0
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8814 	msr	CONTROL, r0
 80048da:	b662      	cpsie	i
 80048dc:	b661      	cpsie	f
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	df00      	svc	0
 80048e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ea:	bf00      	nop
 80048ec:	e000ed08 	.word	0xe000ed08

080048f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048f6:	4b47      	ldr	r3, [pc, #284]	@ (8004a14 <xPortStartScheduler+0x124>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a47      	ldr	r2, [pc, #284]	@ (8004a18 <xPortStartScheduler+0x128>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10b      	bne.n	8004918 <xPortStartScheduler+0x28>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004918:	4b3e      	ldr	r3, [pc, #248]	@ (8004a14 <xPortStartScheduler+0x124>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a1c <xPortStartScheduler+0x12c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d10b      	bne.n	800493a <xPortStartScheduler+0x4a>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60fb      	str	r3, [r7, #12]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800493a:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <xPortStartScheduler+0x130>)
 800493c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	22ff      	movs	r2, #255	@ 0xff
 800494a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <xPortStartScheduler+0x134>)
 8004960:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004962:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <xPortStartScheduler+0x138>)
 8004964:	2207      	movs	r2, #7
 8004966:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004968:	e009      	b.n	800497e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800496a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a28 <xPortStartScheduler+0x138>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3b01      	subs	r3, #1
 8004970:	4a2d      	ldr	r2, [pc, #180]	@ (8004a28 <xPortStartScheduler+0x138>)
 8004972:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b80      	cmp	r3, #128	@ 0x80
 8004988:	d0ef      	beq.n	800496a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800498a:	4b27      	ldr	r3, [pc, #156]	@ (8004a28 <xPortStartScheduler+0x138>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1c3 0307 	rsb	r3, r3, #7
 8004992:	2b04      	cmp	r3, #4
 8004994:	d00b      	beq.n	80049ae <xPortStartScheduler+0xbe>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	60bb      	str	r3, [r7, #8]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004a28 <xPortStartScheduler+0x138>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <xPortStartScheduler+0x138>)
 80049b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a28 <xPortStartScheduler+0x138>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049c0:	4a19      	ldr	r2, [pc, #100]	@ (8004a28 <xPortStartScheduler+0x138>)
 80049c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049cc:	4b17      	ldr	r3, [pc, #92]	@ (8004a2c <xPortStartScheduler+0x13c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a16      	ldr	r2, [pc, #88]	@ (8004a2c <xPortStartScheduler+0x13c>)
 80049d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049d8:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <xPortStartScheduler+0x13c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a13      	ldr	r2, [pc, #76]	@ (8004a2c <xPortStartScheduler+0x13c>)
 80049de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80049e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049e4:	f000 f8da 	bl	8004b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049e8:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <xPortStartScheduler+0x140>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049ee:	f000 f8f9 	bl	8004be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <xPortStartScheduler+0x144>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <xPortStartScheduler+0x144>)
 80049f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049fe:	f7ff ff63 	bl	80048c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a02:	f7ff f82d 	bl	8003a60 <vTaskSwitchContext>
	prvTaskExitError();
 8004a06:	f7ff ff19 	bl	800483c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed00 	.word	0xe000ed00
 8004a18:	410fc271 	.word	0x410fc271
 8004a1c:	410fc270 	.word	0x410fc270
 8004a20:	e000e400 	.word	0xe000e400
 8004a24:	20000e18 	.word	0x20000e18
 8004a28:	20000e1c 	.word	0x20000e1c
 8004a2c:	e000ed20 	.word	0xe000ed20
 8004a30:	2000000c 	.word	0x2000000c
 8004a34:	e000ef34 	.word	0xe000ef34

08004a38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <vPortEnterCritical+0x5c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a0e      	ldr	r2, [pc, #56]	@ (8004a94 <vPortEnterCritical+0x5c>)
 8004a5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <vPortEnterCritical+0x5c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d110      	bne.n	8004a86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <vPortEnterCritical+0x60>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <vPortEnterCritical+0x4a>
	}
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	2000000c 	.word	0x2000000c
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aa2:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <vPortExitCritical+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <vPortExitCritical+0x26>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	607b      	str	r3, [r7, #4]
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	e7fd      	b.n	8004abe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <vPortExitCritical+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4a08      	ldr	r2, [pc, #32]	@ (8004aec <vPortExitCritical+0x50>)
 8004aca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <vPortExitCritical+0x50>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <vPortExitCritical+0x44>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f383 8811 	msr	BASEPRI, r3
}
 8004ade:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004af0:	f3ef 8009 	mrs	r0, PSP
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4b15      	ldr	r3, [pc, #84]	@ (8004b50 <pxCurrentTCBConst>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f01e 0f10 	tst.w	lr, #16
 8004b00:	bf08      	it	eq
 8004b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	6010      	str	r0, [r2, #0]
 8004b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004b14:	f380 8811 	msr	BASEPRI, r0
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f7fe ff9e 	bl	8003a60 <vTaskSwitchContext>
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f380 8811 	msr	BASEPRI, r0
 8004b2c:	bc09      	pop	{r0, r3}
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b36:	f01e 0f10 	tst.w	lr, #16
 8004b3a:	bf08      	it	eq
 8004b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b40:	f380 8809 	msr	PSP, r0
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst>:
 8004b50:	200007ec 	.word	0x200007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
}
 8004b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b72:	f7fe febb 	bl	80038ec <xTaskIncrementTick>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <xPortSysTickHandler+0x40>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
}
 8004b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <vPortSetupTimerInterrupt+0x38>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <vPortSetupTimerInterrupt+0x3c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <vPortSetupTimerInterrupt+0x40>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <vPortSetupTimerInterrupt+0x44>)
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010
 8004bd4:	e000e018 	.word	0xe000e018
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	10624dd3 	.word	0x10624dd3
 8004be0:	e000e014 	.word	0xe000e014

08004be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004be4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004bf4 <vPortEnableVFP+0x10>
 8004be8:	6801      	ldr	r1, [r0, #0]
 8004bea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004bee:	6001      	str	r1, [r0, #0]
 8004bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed88 	.word	0xe000ed88

08004bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bfe:	f3ef 8305 	mrs	r3, IPSR
 8004c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d915      	bls.n	8004c36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <vPortValidateInterruptPriority+0x74>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c14:	4b16      	ldr	r3, [pc, #88]	@ (8004c70 <vPortValidateInterruptPriority+0x78>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	7afa      	ldrb	r2, [r7, #11]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d20b      	bcs.n	8004c36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c36:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <vPortValidateInterruptPriority+0x7c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <vPortValidateInterruptPriority+0x80>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d90b      	bls.n	8004c5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	603b      	str	r3, [r7, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <vPortValidateInterruptPriority+0x62>
	}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e3f0 	.word	0xe000e3f0
 8004c70:	20000e18 	.word	0x20000e18
 8004c74:	e000ed0c 	.word	0xe000ed0c
 8004c78:	20000e1c 	.word	0x20000e1c

08004c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	@ 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c88:	f7fe fd74 	bl	8003774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004e00 <pvPortMalloc+0x184>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c94:	f000 f924 	bl	8004ee0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c98:	4b5a      	ldr	r3, [pc, #360]	@ (8004e04 <pvPortMalloc+0x188>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 8095 	bne.w	8004dd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004cac:	2208      	movs	r2, #8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d015      	beq.n	8004cea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <pvPortMalloc+0x6e>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	617b      	str	r3, [r7, #20]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d06f      	beq.n	8004dd0 <pvPortMalloc+0x154>
 8004cf0:	4b45      	ldr	r3, [pc, #276]	@ (8004e08 <pvPortMalloc+0x18c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d86a      	bhi.n	8004dd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cfa:	4b44      	ldr	r3, [pc, #272]	@ (8004e0c <pvPortMalloc+0x190>)
 8004cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cfe:	4b43      	ldr	r3, [pc, #268]	@ (8004e0c <pvPortMalloc+0x190>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d04:	e004      	b.n	8004d10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d903      	bls.n	8004d22 <pvPortMalloc+0xa6>
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f1      	bne.n	8004d06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d22:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <pvPortMalloc+0x184>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d051      	beq.n	8004dd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2208      	movs	r2, #8
 8004d32:	4413      	add	r3, r2
 8004d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	2308      	movs	r3, #8
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d920      	bls.n	8004d90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00b      	beq.n	8004d78 <pvPortMalloc+0xfc>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	613b      	str	r3, [r7, #16]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d8a:	69b8      	ldr	r0, [r7, #24]
 8004d8c:	f000 f90a 	bl	8004fa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d90:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <pvPortMalloc+0x18c>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <pvPortMalloc+0x18c>)
 8004d9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <pvPortMalloc+0x18c>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <pvPortMalloc+0x194>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d203      	bcs.n	8004db2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004daa:	4b17      	ldr	r3, [pc, #92]	@ (8004e08 <pvPortMalloc+0x18c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <pvPortMalloc+0x194>)
 8004db0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4b13      	ldr	r3, [pc, #76]	@ (8004e04 <pvPortMalloc+0x188>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dc6:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <pvPortMalloc+0x198>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	4a11      	ldr	r2, [pc, #68]	@ (8004e14 <pvPortMalloc+0x198>)
 8004dce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dd0:	f7fe fcde 	bl	8003790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <pvPortMalloc+0x17a>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60fb      	str	r3, [r7, #12]
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <pvPortMalloc+0x176>
	return pvReturn;
 8004df6:	69fb      	ldr	r3, [r7, #28]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	@ 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20004a28 	.word	0x20004a28
 8004e04:	20004a3c 	.word	0x20004a3c
 8004e08:	20004a2c 	.word	0x20004a2c
 8004e0c:	20004a20 	.word	0x20004a20
 8004e10:	20004a30 	.word	0x20004a30
 8004e14:	20004a34 	.word	0x20004a34

08004e18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04f      	beq.n	8004eca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	425b      	negs	r3, r3
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4413      	add	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <vPortFree+0xbc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <vPortFree+0x46>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <vPortFree+0x66>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <vPortFree+0xbc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01e      	beq.n	8004eca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11a      	bne.n	8004eca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <vPortFree+0xbc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ea4:	f7fe fc66 	bl	8003774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <vPortFree+0xc0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4a09      	ldr	r2, [pc, #36]	@ (8004ed8 <vPortFree+0xc0>)
 8004eb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eb6:	6938      	ldr	r0, [r7, #16]
 8004eb8:	f000 f874 	bl	8004fa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ebc:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <vPortFree+0xc4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	4a06      	ldr	r2, [pc, #24]	@ (8004edc <vPortFree+0xc4>)
 8004ec4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ec6:	f7fe fc63 	bl	8003790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20004a3c 	.word	0x20004a3c
 8004ed8:	20004a2c 	.word	0x20004a2c
 8004edc:	20004a38 	.word	0x20004a38

08004ee0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ee6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004eea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eec:	4b27      	ldr	r3, [pc, #156]	@ (8004f8c <prvHeapInit+0xac>)
 8004eee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3307      	adds	r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0307 	bic.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f8c <prvHeapInit+0xac>)
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f18:	4a1d      	ldr	r2, [pc, #116]	@ (8004f90 <prvHeapInit+0xb0>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f90 <prvHeapInit+0xb0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4413      	add	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	@ (8004f94 <prvHeapInit+0xb4>)
 8004f40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f42:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <prvHeapInit+0xb4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f4a:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <prvHeapInit+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f60:	4b0c      	ldr	r3, [pc, #48]	@ (8004f94 <prvHeapInit+0xb4>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f98 <prvHeapInit+0xb8>)
 8004f6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <prvHeapInit+0xbc>)
 8004f76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f78:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <prvHeapInit+0xc0>)
 8004f7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f7e:	601a      	str	r2, [r3, #0]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000e20 	.word	0x20000e20
 8004f90:	20004a20 	.word	0x20004a20
 8004f94:	20004a28 	.word	0x20004a28
 8004f98:	20004a30 	.word	0x20004a30
 8004f9c:	20004a2c 	.word	0x20004a2c
 8004fa0:	20004a3c 	.word	0x20004a3c

08004fa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fac:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <prvInsertBlockIntoFreeList+0xac>)
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e002      	b.n	8004fb8 <prvInsertBlockIntoFreeList+0x14>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d8f7      	bhi.n	8004fb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d108      	bne.n	8004fe6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	441a      	add	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d118      	bne.n	800502c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d00d      	beq.n	8005022 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005022:	4b0c      	ldr	r3, [pc, #48]	@ (8005054 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e003      	b.n	8005034 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d002      	beq.n	8005042 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20004a20 	.word	0x20004a20
 8005054:	20004a28 	.word	0x20004a28

08005058 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800505c:	f000 f80e 	bl	800507c <rand>
 8005060:	4603      	mov	r3, r0
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005068:	b29b      	uxth	r3, r3
 800506a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800506e:	b29a      	uxth	r2, r3
 8005070:	4b01      	ldr	r3, [pc, #4]	@ (8005078 <tcp_init+0x20>)
 8005072:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005074:	bf00      	nop
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000010 	.word	0x20000010

0800507c <rand>:
 800507c:	4b16      	ldr	r3, [pc, #88]	@ (80050d8 <rand+0x5c>)
 800507e:	b510      	push	{r4, lr}
 8005080:	681c      	ldr	r4, [r3, #0]
 8005082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005084:	b9b3      	cbnz	r3, 80050b4 <rand+0x38>
 8005086:	2018      	movs	r0, #24
 8005088:	f000 fa84 	bl	8005594 <malloc>
 800508c:	4602      	mov	r2, r0
 800508e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005090:	b920      	cbnz	r0, 800509c <rand+0x20>
 8005092:	4b12      	ldr	r3, [pc, #72]	@ (80050dc <rand+0x60>)
 8005094:	4812      	ldr	r0, [pc, #72]	@ (80050e0 <rand+0x64>)
 8005096:	2152      	movs	r1, #82	@ 0x52
 8005098:	f000 fa14 	bl	80054c4 <__assert_func>
 800509c:	4911      	ldr	r1, [pc, #68]	@ (80050e4 <rand+0x68>)
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <rand+0x6c>)
 80050a0:	e9c0 1300 	strd	r1, r3, [r0]
 80050a4:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <rand+0x70>)
 80050a6:	6083      	str	r3, [r0, #8]
 80050a8:	230b      	movs	r3, #11
 80050aa:	8183      	strh	r3, [r0, #12]
 80050ac:	2100      	movs	r1, #0
 80050ae:	2001      	movs	r0, #1
 80050b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80050b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80050b6:	480e      	ldr	r0, [pc, #56]	@ (80050f0 <rand+0x74>)
 80050b8:	690b      	ldr	r3, [r1, #16]
 80050ba:	694c      	ldr	r4, [r1, #20]
 80050bc:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <rand+0x78>)
 80050be:	4358      	muls	r0, r3
 80050c0:	fb02 0004 	mla	r0, r2, r4, r0
 80050c4:	fba3 3202 	umull	r3, r2, r3, r2
 80050c8:	3301      	adds	r3, #1
 80050ca:	eb40 0002 	adc.w	r0, r0, r2
 80050ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80050d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80050d6:	bd10      	pop	{r4, pc}
 80050d8:	20000020 	.word	0x20000020
 80050dc:	08006178 	.word	0x08006178
 80050e0:	0800618f 	.word	0x0800618f
 80050e4:	abcd330e 	.word	0xabcd330e
 80050e8:	e66d1234 	.word	0xe66d1234
 80050ec:	0005deec 	.word	0x0005deec
 80050f0:	5851f42d 	.word	0x5851f42d
 80050f4:	4c957f2d 	.word	0x4c957f2d

080050f8 <std>:
 80050f8:	2300      	movs	r3, #0
 80050fa:	b510      	push	{r4, lr}
 80050fc:	4604      	mov	r4, r0
 80050fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005106:	6083      	str	r3, [r0, #8]
 8005108:	8181      	strh	r1, [r0, #12]
 800510a:	6643      	str	r3, [r0, #100]	@ 0x64
 800510c:	81c2      	strh	r2, [r0, #14]
 800510e:	6183      	str	r3, [r0, #24]
 8005110:	4619      	mov	r1, r3
 8005112:	2208      	movs	r2, #8
 8005114:	305c      	adds	r0, #92	@ 0x5c
 8005116:	f000 f8f4 	bl	8005302 <memset>
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <std+0x58>)
 800511c:	6263      	str	r3, [r4, #36]	@ 0x24
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <std+0x5c>)
 8005120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <std+0x60>)
 8005124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <std+0x64>)
 8005128:	6323      	str	r3, [r4, #48]	@ 0x30
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <std+0x68>)
 800512c:	6224      	str	r4, [r4, #32]
 800512e:	429c      	cmp	r4, r3
 8005130:	d006      	beq.n	8005140 <std+0x48>
 8005132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005136:	4294      	cmp	r4, r2
 8005138:	d002      	beq.n	8005140 <std+0x48>
 800513a:	33d0      	adds	r3, #208	@ 0xd0
 800513c:	429c      	cmp	r4, r3
 800513e:	d105      	bne.n	800514c <std+0x54>
 8005140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	f000 b9aa 	b.w	80054a0 <__retarget_lock_init_recursive>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	bf00      	nop
 8005150:	0800527d 	.word	0x0800527d
 8005154:	0800529f 	.word	0x0800529f
 8005158:	080052d7 	.word	0x080052d7
 800515c:	080052fb 	.word	0x080052fb
 8005160:	20004a40 	.word	0x20004a40

08005164 <stdio_exit_handler>:
 8005164:	4a02      	ldr	r2, [pc, #8]	@ (8005170 <stdio_exit_handler+0xc>)
 8005166:	4903      	ldr	r1, [pc, #12]	@ (8005174 <stdio_exit_handler+0x10>)
 8005168:	4803      	ldr	r0, [pc, #12]	@ (8005178 <stdio_exit_handler+0x14>)
 800516a:	f000 b869 	b.w	8005240 <_fwalk_sglue>
 800516e:	bf00      	nop
 8005170:	20000014 	.word	0x20000014
 8005174:	08005809 	.word	0x08005809
 8005178:	20000024 	.word	0x20000024

0800517c <cleanup_stdio>:
 800517c:	6841      	ldr	r1, [r0, #4]
 800517e:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <cleanup_stdio+0x34>)
 8005180:	4299      	cmp	r1, r3
 8005182:	b510      	push	{r4, lr}
 8005184:	4604      	mov	r4, r0
 8005186:	d001      	beq.n	800518c <cleanup_stdio+0x10>
 8005188:	f000 fb3e 	bl	8005808 <_fflush_r>
 800518c:	68a1      	ldr	r1, [r4, #8]
 800518e:	4b09      	ldr	r3, [pc, #36]	@ (80051b4 <cleanup_stdio+0x38>)
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <cleanup_stdio+0x1e>
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fb37 	bl	8005808 <_fflush_r>
 800519a:	68e1      	ldr	r1, [r4, #12]
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <cleanup_stdio+0x3c>)
 800519e:	4299      	cmp	r1, r3
 80051a0:	d004      	beq.n	80051ac <cleanup_stdio+0x30>
 80051a2:	4620      	mov	r0, r4
 80051a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a8:	f000 bb2e 	b.w	8005808 <_fflush_r>
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	bf00      	nop
 80051b0:	20004a40 	.word	0x20004a40
 80051b4:	20004aa8 	.word	0x20004aa8
 80051b8:	20004b10 	.word	0x20004b10

080051bc <global_stdio_init.part.0>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <global_stdio_init.part.0+0x30>)
 80051c0:	4c0b      	ldr	r4, [pc, #44]	@ (80051f0 <global_stdio_init.part.0+0x34>)
 80051c2:	4a0c      	ldr	r2, [pc, #48]	@ (80051f4 <global_stdio_init.part.0+0x38>)
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	4620      	mov	r0, r4
 80051c8:	2200      	movs	r2, #0
 80051ca:	2104      	movs	r1, #4
 80051cc:	f7ff ff94 	bl	80050f8 <std>
 80051d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051d4:	2201      	movs	r2, #1
 80051d6:	2109      	movs	r1, #9
 80051d8:	f7ff ff8e 	bl	80050f8 <std>
 80051dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051e0:	2202      	movs	r2, #2
 80051e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e6:	2112      	movs	r1, #18
 80051e8:	f7ff bf86 	b.w	80050f8 <std>
 80051ec:	20004b78 	.word	0x20004b78
 80051f0:	20004a40 	.word	0x20004a40
 80051f4:	08005165 	.word	0x08005165

080051f8 <__sfp_lock_acquire>:
 80051f8:	4801      	ldr	r0, [pc, #4]	@ (8005200 <__sfp_lock_acquire+0x8>)
 80051fa:	f000 b952 	b.w	80054a2 <__retarget_lock_acquire_recursive>
 80051fe:	bf00      	nop
 8005200:	20004b81 	.word	0x20004b81

08005204 <__sfp_lock_release>:
 8005204:	4801      	ldr	r0, [pc, #4]	@ (800520c <__sfp_lock_release+0x8>)
 8005206:	f000 b94d 	b.w	80054a4 <__retarget_lock_release_recursive>
 800520a:	bf00      	nop
 800520c:	20004b81 	.word	0x20004b81

08005210 <__sinit>:
 8005210:	b510      	push	{r4, lr}
 8005212:	4604      	mov	r4, r0
 8005214:	f7ff fff0 	bl	80051f8 <__sfp_lock_acquire>
 8005218:	6a23      	ldr	r3, [r4, #32]
 800521a:	b11b      	cbz	r3, 8005224 <__sinit+0x14>
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005220:	f7ff bff0 	b.w	8005204 <__sfp_lock_release>
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <__sinit+0x28>)
 8005226:	6223      	str	r3, [r4, #32]
 8005228:	4b04      	ldr	r3, [pc, #16]	@ (800523c <__sinit+0x2c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f5      	bne.n	800521c <__sinit+0xc>
 8005230:	f7ff ffc4 	bl	80051bc <global_stdio_init.part.0>
 8005234:	e7f2      	b.n	800521c <__sinit+0xc>
 8005236:	bf00      	nop
 8005238:	0800517d 	.word	0x0800517d
 800523c:	20004b78 	.word	0x20004b78

08005240 <_fwalk_sglue>:
 8005240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005244:	4607      	mov	r7, r0
 8005246:	4688      	mov	r8, r1
 8005248:	4614      	mov	r4, r2
 800524a:	2600      	movs	r6, #0
 800524c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005250:	f1b9 0901 	subs.w	r9, r9, #1
 8005254:	d505      	bpl.n	8005262 <_fwalk_sglue+0x22>
 8005256:	6824      	ldr	r4, [r4, #0]
 8005258:	2c00      	cmp	r4, #0
 800525a:	d1f7      	bne.n	800524c <_fwalk_sglue+0xc>
 800525c:	4630      	mov	r0, r6
 800525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005262:	89ab      	ldrh	r3, [r5, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d907      	bls.n	8005278 <_fwalk_sglue+0x38>
 8005268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800526c:	3301      	adds	r3, #1
 800526e:	d003      	beq.n	8005278 <_fwalk_sglue+0x38>
 8005270:	4629      	mov	r1, r5
 8005272:	4638      	mov	r0, r7
 8005274:	47c0      	blx	r8
 8005276:	4306      	orrs	r6, r0
 8005278:	3568      	adds	r5, #104	@ 0x68
 800527a:	e7e9      	b.n	8005250 <_fwalk_sglue+0x10>

0800527c <__sread>:
 800527c:	b510      	push	{r4, lr}
 800527e:	460c      	mov	r4, r1
 8005280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005284:	f000 f8be 	bl	8005404 <_read_r>
 8005288:	2800      	cmp	r0, #0
 800528a:	bfab      	itete	ge
 800528c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800528e:	89a3      	ldrhlt	r3, [r4, #12]
 8005290:	181b      	addge	r3, r3, r0
 8005292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005296:	bfac      	ite	ge
 8005298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800529a:	81a3      	strhlt	r3, [r4, #12]
 800529c:	bd10      	pop	{r4, pc}

0800529e <__swrite>:
 800529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a2:	461f      	mov	r7, r3
 80052a4:	898b      	ldrh	r3, [r1, #12]
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	4605      	mov	r5, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	4616      	mov	r6, r2
 80052ae:	d505      	bpl.n	80052bc <__swrite+0x1e>
 80052b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b4:	2302      	movs	r3, #2
 80052b6:	2200      	movs	r2, #0
 80052b8:	f000 f892 	bl	80053e0 <_lseek_r>
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052c6:	81a3      	strh	r3, [r4, #12]
 80052c8:	4632      	mov	r2, r6
 80052ca:	463b      	mov	r3, r7
 80052cc:	4628      	mov	r0, r5
 80052ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052d2:	f000 b8a9 	b.w	8005428 <_write_r>

080052d6 <__sseek>:
 80052d6:	b510      	push	{r4, lr}
 80052d8:	460c      	mov	r4, r1
 80052da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052de:	f000 f87f 	bl	80053e0 <_lseek_r>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	bf15      	itete	ne
 80052e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052f2:	81a3      	strheq	r3, [r4, #12]
 80052f4:	bf18      	it	ne
 80052f6:	81a3      	strhne	r3, [r4, #12]
 80052f8:	bd10      	pop	{r4, pc}

080052fa <__sclose>:
 80052fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fe:	f000 b809 	b.w	8005314 <_close_r>

08005302 <memset>:
 8005302:	4402      	add	r2, r0
 8005304:	4603      	mov	r3, r0
 8005306:	4293      	cmp	r3, r2
 8005308:	d100      	bne.n	800530c <memset+0xa>
 800530a:	4770      	bx	lr
 800530c:	f803 1b01 	strb.w	r1, [r3], #1
 8005310:	e7f9      	b.n	8005306 <memset+0x4>
	...

08005314 <_close_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	@ (8005330 <_close_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fb fb22 	bl	8000968 <_close>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_close_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_close_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20004b7c 	.word	0x20004b7c

08005334 <_reclaim_reent>:
 8005334:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <_reclaim_reent+0xa8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4283      	cmp	r3, r0
 800533a:	b570      	push	{r4, r5, r6, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	d04b      	beq.n	80053d8 <_reclaim_reent+0xa4>
 8005340:	69c3      	ldr	r3, [r0, #28]
 8005342:	b1ab      	cbz	r3, 8005370 <_reclaim_reent+0x3c>
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	b16b      	cbz	r3, 8005364 <_reclaim_reent+0x30>
 8005348:	2500      	movs	r5, #0
 800534a:	69e3      	ldr	r3, [r4, #28]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	5959      	ldr	r1, [r3, r5]
 8005350:	2900      	cmp	r1, #0
 8005352:	d13b      	bne.n	80053cc <_reclaim_reent+0x98>
 8005354:	3504      	adds	r5, #4
 8005356:	2d80      	cmp	r5, #128	@ 0x80
 8005358:	d1f7      	bne.n	800534a <_reclaim_reent+0x16>
 800535a:	69e3      	ldr	r3, [r4, #28]
 800535c:	4620      	mov	r0, r4
 800535e:	68d9      	ldr	r1, [r3, #12]
 8005360:	f000 f8ce 	bl	8005500 <_free_r>
 8005364:	69e3      	ldr	r3, [r4, #28]
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	b111      	cbz	r1, 8005370 <_reclaim_reent+0x3c>
 800536a:	4620      	mov	r0, r4
 800536c:	f000 f8c8 	bl	8005500 <_free_r>
 8005370:	6961      	ldr	r1, [r4, #20]
 8005372:	b111      	cbz	r1, 800537a <_reclaim_reent+0x46>
 8005374:	4620      	mov	r0, r4
 8005376:	f000 f8c3 	bl	8005500 <_free_r>
 800537a:	69e1      	ldr	r1, [r4, #28]
 800537c:	b111      	cbz	r1, 8005384 <_reclaim_reent+0x50>
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f8be 	bl	8005500 <_free_r>
 8005384:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005386:	b111      	cbz	r1, 800538e <_reclaim_reent+0x5a>
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f8b9 	bl	8005500 <_free_r>
 800538e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005390:	b111      	cbz	r1, 8005398 <_reclaim_reent+0x64>
 8005392:	4620      	mov	r0, r4
 8005394:	f000 f8b4 	bl	8005500 <_free_r>
 8005398:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800539a:	b111      	cbz	r1, 80053a2 <_reclaim_reent+0x6e>
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f8af 	bl	8005500 <_free_r>
 80053a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053a4:	b111      	cbz	r1, 80053ac <_reclaim_reent+0x78>
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f8aa 	bl	8005500 <_free_r>
 80053ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053ae:	b111      	cbz	r1, 80053b6 <_reclaim_reent+0x82>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f8a5 	bl	8005500 <_free_r>
 80053b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053b8:	b111      	cbz	r1, 80053c0 <_reclaim_reent+0x8c>
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 f8a0 	bl	8005500 <_free_r>
 80053c0:	6a23      	ldr	r3, [r4, #32]
 80053c2:	b14b      	cbz	r3, 80053d8 <_reclaim_reent+0xa4>
 80053c4:	4620      	mov	r0, r4
 80053c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053ca:	4718      	bx	r3
 80053cc:	680e      	ldr	r6, [r1, #0]
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f896 	bl	8005500 <_free_r>
 80053d4:	4631      	mov	r1, r6
 80053d6:	e7bb      	b.n	8005350 <_reclaim_reent+0x1c>
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
 80053da:	bf00      	nop
 80053dc:	20000020 	.word	0x20000020

080053e0 <_lseek_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	@ (8005400 <_lseek_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fb fae1 	bl	80009b6 <_lseek>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_lseek_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_lseek_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20004b7c 	.word	0x20004b7c

08005404 <_read_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_read_r+0x20>)
 8005408:	4604      	mov	r4, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fb fa6f 	bl	80008f6 <_read>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_read_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_read_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20004b7c 	.word	0x20004b7c

08005428 <_write_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	@ (8005448 <_write_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fb fa7a 	bl	8000930 <_write>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_write_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_write_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20004b7c 	.word	0x20004b7c

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	@ (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000020 	.word	0x20000020

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	@ (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	@ (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	@ (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	@ (800549c <__libc_init_array+0x44>)
 800546c:	f000 fe48 	bl	8006100 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08006260 	.word	0x08006260
 8005494:	08006260 	.word	0x08006260
 8005498:	08006260 	.word	0x08006260
 800549c:	08006264 	.word	0x08006264

080054a0 <__retarget_lock_init_recursive>:
 80054a0:	4770      	bx	lr

080054a2 <__retarget_lock_acquire_recursive>:
 80054a2:	4770      	bx	lr

080054a4 <__retarget_lock_release_recursive>:
 80054a4:	4770      	bx	lr

080054a6 <memcpy>:
 80054a6:	440a      	add	r2, r1
 80054a8:	4291      	cmp	r1, r2
 80054aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ae:	d100      	bne.n	80054b2 <memcpy+0xc>
 80054b0:	4770      	bx	lr
 80054b2:	b510      	push	{r4, lr}
 80054b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054bc:	4291      	cmp	r1, r2
 80054be:	d1f9      	bne.n	80054b4 <memcpy+0xe>
 80054c0:	bd10      	pop	{r4, pc}
	...

080054c4 <__assert_func>:
 80054c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054c6:	4614      	mov	r4, r2
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <__assert_func+0x2c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4605      	mov	r5, r0
 80054d0:	68d8      	ldr	r0, [r3, #12]
 80054d2:	b954      	cbnz	r4, 80054ea <__assert_func+0x26>
 80054d4:	4b07      	ldr	r3, [pc, #28]	@ (80054f4 <__assert_func+0x30>)
 80054d6:	461c      	mov	r4, r3
 80054d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054dc:	9100      	str	r1, [sp, #0]
 80054de:	462b      	mov	r3, r5
 80054e0:	4905      	ldr	r1, [pc, #20]	@ (80054f8 <__assert_func+0x34>)
 80054e2:	f000 f9b9 	bl	8005858 <fiprintf>
 80054e6:	f000 f9d9 	bl	800589c <abort>
 80054ea:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <__assert_func+0x38>)
 80054ec:	e7f4      	b.n	80054d8 <__assert_func+0x14>
 80054ee:	bf00      	nop
 80054f0:	20000020 	.word	0x20000020
 80054f4:	08006222 	.word	0x08006222
 80054f8:	080061f4 	.word	0x080061f4
 80054fc:	080061e7 	.word	0x080061e7

08005500 <_free_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4605      	mov	r5, r0
 8005504:	2900      	cmp	r1, #0
 8005506:	d041      	beq.n	800558c <_free_r+0x8c>
 8005508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800550c:	1f0c      	subs	r4, r1, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	bfb8      	it	lt
 8005512:	18e4      	addlt	r4, r4, r3
 8005514:	f000 f8e8 	bl	80056e8 <__malloc_lock>
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <_free_r+0x90>)
 800551a:	6813      	ldr	r3, [r2, #0]
 800551c:	b933      	cbnz	r3, 800552c <_free_r+0x2c>
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	6014      	str	r4, [r2, #0]
 8005522:	4628      	mov	r0, r5
 8005524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005528:	f000 b8e4 	b.w	80056f4 <__malloc_unlock>
 800552c:	42a3      	cmp	r3, r4
 800552e:	d908      	bls.n	8005542 <_free_r+0x42>
 8005530:	6820      	ldr	r0, [r4, #0]
 8005532:	1821      	adds	r1, r4, r0
 8005534:	428b      	cmp	r3, r1
 8005536:	bf01      	itttt	eq
 8005538:	6819      	ldreq	r1, [r3, #0]
 800553a:	685b      	ldreq	r3, [r3, #4]
 800553c:	1809      	addeq	r1, r1, r0
 800553e:	6021      	streq	r1, [r4, #0]
 8005540:	e7ed      	b.n	800551e <_free_r+0x1e>
 8005542:	461a      	mov	r2, r3
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b10b      	cbz	r3, 800554c <_free_r+0x4c>
 8005548:	42a3      	cmp	r3, r4
 800554a:	d9fa      	bls.n	8005542 <_free_r+0x42>
 800554c:	6811      	ldr	r1, [r2, #0]
 800554e:	1850      	adds	r0, r2, r1
 8005550:	42a0      	cmp	r0, r4
 8005552:	d10b      	bne.n	800556c <_free_r+0x6c>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	4401      	add	r1, r0
 8005558:	1850      	adds	r0, r2, r1
 800555a:	4283      	cmp	r3, r0
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	d1e0      	bne.n	8005522 <_free_r+0x22>
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	6053      	str	r3, [r2, #4]
 8005566:	4408      	add	r0, r1
 8005568:	6010      	str	r0, [r2, #0]
 800556a:	e7da      	b.n	8005522 <_free_r+0x22>
 800556c:	d902      	bls.n	8005574 <_free_r+0x74>
 800556e:	230c      	movs	r3, #12
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	e7d6      	b.n	8005522 <_free_r+0x22>
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	1821      	adds	r1, r4, r0
 8005578:	428b      	cmp	r3, r1
 800557a:	bf04      	itt	eq
 800557c:	6819      	ldreq	r1, [r3, #0]
 800557e:	685b      	ldreq	r3, [r3, #4]
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	bf04      	itt	eq
 8005584:	1809      	addeq	r1, r1, r0
 8005586:	6021      	streq	r1, [r4, #0]
 8005588:	6054      	str	r4, [r2, #4]
 800558a:	e7ca      	b.n	8005522 <_free_r+0x22>
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	bf00      	nop
 8005590:	20004b88 	.word	0x20004b88

08005594 <malloc>:
 8005594:	4b02      	ldr	r3, [pc, #8]	@ (80055a0 <malloc+0xc>)
 8005596:	4601      	mov	r1, r0
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f000 b825 	b.w	80055e8 <_malloc_r>
 800559e:	bf00      	nop
 80055a0:	20000020 	.word	0x20000020

080055a4 <sbrk_aligned>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4e0f      	ldr	r6, [pc, #60]	@ (80055e4 <sbrk_aligned+0x40>)
 80055a8:	460c      	mov	r4, r1
 80055aa:	6831      	ldr	r1, [r6, #0]
 80055ac:	4605      	mov	r5, r0
 80055ae:	b911      	cbnz	r1, 80055b6 <sbrk_aligned+0x12>
 80055b0:	f000 f964 	bl	800587c <_sbrk_r>
 80055b4:	6030      	str	r0, [r6, #0]
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 f95f 	bl	800587c <_sbrk_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d103      	bne.n	80055ca <sbrk_aligned+0x26>
 80055c2:	f04f 34ff 	mov.w	r4, #4294967295
 80055c6:	4620      	mov	r0, r4
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	1cc4      	adds	r4, r0, #3
 80055cc:	f024 0403 	bic.w	r4, r4, #3
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d0f8      	beq.n	80055c6 <sbrk_aligned+0x22>
 80055d4:	1a21      	subs	r1, r4, r0
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f950 	bl	800587c <_sbrk_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	d1f2      	bne.n	80055c6 <sbrk_aligned+0x22>
 80055e0:	e7ef      	b.n	80055c2 <sbrk_aligned+0x1e>
 80055e2:	bf00      	nop
 80055e4:	20004b84 	.word	0x20004b84

080055e8 <_malloc_r>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	1ccd      	adds	r5, r1, #3
 80055ee:	f025 0503 	bic.w	r5, r5, #3
 80055f2:	3508      	adds	r5, #8
 80055f4:	2d0c      	cmp	r5, #12
 80055f6:	bf38      	it	cc
 80055f8:	250c      	movcc	r5, #12
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	4606      	mov	r6, r0
 80055fe:	db01      	blt.n	8005604 <_malloc_r+0x1c>
 8005600:	42a9      	cmp	r1, r5
 8005602:	d904      	bls.n	800560e <_malloc_r+0x26>
 8005604:	230c      	movs	r3, #12
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	2000      	movs	r0, #0
 800560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e4 <_malloc_r+0xfc>
 8005612:	f000 f869 	bl	80056e8 <__malloc_lock>
 8005616:	f8d8 3000 	ldr.w	r3, [r8]
 800561a:	461c      	mov	r4, r3
 800561c:	bb44      	cbnz	r4, 8005670 <_malloc_r+0x88>
 800561e:	4629      	mov	r1, r5
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ffbf 	bl	80055a4 <sbrk_aligned>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	4604      	mov	r4, r0
 800562a:	d158      	bne.n	80056de <_malloc_r+0xf6>
 800562c:	f8d8 4000 	ldr.w	r4, [r8]
 8005630:	4627      	mov	r7, r4
 8005632:	2f00      	cmp	r7, #0
 8005634:	d143      	bne.n	80056be <_malloc_r+0xd6>
 8005636:	2c00      	cmp	r4, #0
 8005638:	d04b      	beq.n	80056d2 <_malloc_r+0xea>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	4639      	mov	r1, r7
 800563e:	4630      	mov	r0, r6
 8005640:	eb04 0903 	add.w	r9, r4, r3
 8005644:	f000 f91a 	bl	800587c <_sbrk_r>
 8005648:	4581      	cmp	r9, r0
 800564a:	d142      	bne.n	80056d2 <_malloc_r+0xea>
 800564c:	6821      	ldr	r1, [r4, #0]
 800564e:	1a6d      	subs	r5, r5, r1
 8005650:	4629      	mov	r1, r5
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffa6 	bl	80055a4 <sbrk_aligned>
 8005658:	3001      	adds	r0, #1
 800565a:	d03a      	beq.n	80056d2 <_malloc_r+0xea>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	442b      	add	r3, r5
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	f8d8 3000 	ldr.w	r3, [r8]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	bb62      	cbnz	r2, 80056c4 <_malloc_r+0xdc>
 800566a:	f8c8 7000 	str.w	r7, [r8]
 800566e:	e00f      	b.n	8005690 <_malloc_r+0xa8>
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	1b52      	subs	r2, r2, r5
 8005674:	d420      	bmi.n	80056b8 <_malloc_r+0xd0>
 8005676:	2a0b      	cmp	r2, #11
 8005678:	d917      	bls.n	80056aa <_malloc_r+0xc2>
 800567a:	1961      	adds	r1, r4, r5
 800567c:	42a3      	cmp	r3, r4
 800567e:	6025      	str	r5, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	6059      	strne	r1, [r3, #4]
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	bf08      	it	eq
 8005688:	f8c8 1000 	streq.w	r1, [r8]
 800568c:	5162      	str	r2, [r4, r5]
 800568e:	604b      	str	r3, [r1, #4]
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f82f 	bl	80056f4 <__malloc_unlock>
 8005696:	f104 000b 	add.w	r0, r4, #11
 800569a:	1d23      	adds	r3, r4, #4
 800569c:	f020 0007 	bic.w	r0, r0, #7
 80056a0:	1ac2      	subs	r2, r0, r3
 80056a2:	bf1c      	itt	ne
 80056a4:	1a1b      	subne	r3, r3, r0
 80056a6:	50a3      	strne	r3, [r4, r2]
 80056a8:	e7af      	b.n	800560a <_malloc_r+0x22>
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	bf0c      	ite	eq
 80056b0:	f8c8 2000 	streq.w	r2, [r8]
 80056b4:	605a      	strne	r2, [r3, #4]
 80056b6:	e7eb      	b.n	8005690 <_malloc_r+0xa8>
 80056b8:	4623      	mov	r3, r4
 80056ba:	6864      	ldr	r4, [r4, #4]
 80056bc:	e7ae      	b.n	800561c <_malloc_r+0x34>
 80056be:	463c      	mov	r4, r7
 80056c0:	687f      	ldr	r7, [r7, #4]
 80056c2:	e7b6      	b.n	8005632 <_malloc_r+0x4a>
 80056c4:	461a      	mov	r2, r3
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d1fb      	bne.n	80056c4 <_malloc_r+0xdc>
 80056cc:	2300      	movs	r3, #0
 80056ce:	6053      	str	r3, [r2, #4]
 80056d0:	e7de      	b.n	8005690 <_malloc_r+0xa8>
 80056d2:	230c      	movs	r3, #12
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	4630      	mov	r0, r6
 80056d8:	f000 f80c 	bl	80056f4 <__malloc_unlock>
 80056dc:	e794      	b.n	8005608 <_malloc_r+0x20>
 80056de:	6005      	str	r5, [r0, #0]
 80056e0:	e7d6      	b.n	8005690 <_malloc_r+0xa8>
 80056e2:	bf00      	nop
 80056e4:	20004b88 	.word	0x20004b88

080056e8 <__malloc_lock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	@ (80056f0 <__malloc_lock+0x8>)
 80056ea:	f7ff beda 	b.w	80054a2 <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	20004b80 	.word	0x20004b80

080056f4 <__malloc_unlock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	@ (80056fc <__malloc_unlock+0x8>)
 80056f6:	f7ff bed5 	b.w	80054a4 <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	20004b80 	.word	0x20004b80

08005700 <__sflush_r>:
 8005700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	0716      	lsls	r6, r2, #28
 800570a:	4605      	mov	r5, r0
 800570c:	460c      	mov	r4, r1
 800570e:	d454      	bmi.n	80057ba <__sflush_r+0xba>
 8005710:	684b      	ldr	r3, [r1, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dc02      	bgt.n	800571c <__sflush_r+0x1c>
 8005716:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	dd48      	ble.n	80057ae <__sflush_r+0xae>
 800571c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800571e:	2e00      	cmp	r6, #0
 8005720:	d045      	beq.n	80057ae <__sflush_r+0xae>
 8005722:	2300      	movs	r3, #0
 8005724:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005728:	682f      	ldr	r7, [r5, #0]
 800572a:	6a21      	ldr	r1, [r4, #32]
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	d030      	beq.n	8005792 <__sflush_r+0x92>
 8005730:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	0759      	lsls	r1, r3, #29
 8005736:	d505      	bpl.n	8005744 <__sflush_r+0x44>
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800573e:	b10b      	cbz	r3, 8005744 <__sflush_r+0x44>
 8005740:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005748:	6a21      	ldr	r1, [r4, #32]
 800574a:	4628      	mov	r0, r5
 800574c:	47b0      	blx	r6
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	d106      	bne.n	8005762 <__sflush_r+0x62>
 8005754:	6829      	ldr	r1, [r5, #0]
 8005756:	291d      	cmp	r1, #29
 8005758:	d82b      	bhi.n	80057b2 <__sflush_r+0xb2>
 800575a:	4a2a      	ldr	r2, [pc, #168]	@ (8005804 <__sflush_r+0x104>)
 800575c:	410a      	asrs	r2, r1
 800575e:	07d6      	lsls	r6, r2, #31
 8005760:	d427      	bmi.n	80057b2 <__sflush_r+0xb2>
 8005762:	2200      	movs	r2, #0
 8005764:	6062      	str	r2, [r4, #4]
 8005766:	04d9      	lsls	r1, r3, #19
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	6022      	str	r2, [r4, #0]
 800576c:	d504      	bpl.n	8005778 <__sflush_r+0x78>
 800576e:	1c42      	adds	r2, r0, #1
 8005770:	d101      	bne.n	8005776 <__sflush_r+0x76>
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	b903      	cbnz	r3, 8005778 <__sflush_r+0x78>
 8005776:	6560      	str	r0, [r4, #84]	@ 0x54
 8005778:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800577a:	602f      	str	r7, [r5, #0]
 800577c:	b1b9      	cbz	r1, 80057ae <__sflush_r+0xae>
 800577e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005782:	4299      	cmp	r1, r3
 8005784:	d002      	beq.n	800578c <__sflush_r+0x8c>
 8005786:	4628      	mov	r0, r5
 8005788:	f7ff feba 	bl	8005500 <_free_r>
 800578c:	2300      	movs	r3, #0
 800578e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005790:	e00d      	b.n	80057ae <__sflush_r+0xae>
 8005792:	2301      	movs	r3, #1
 8005794:	4628      	mov	r0, r5
 8005796:	47b0      	blx	r6
 8005798:	4602      	mov	r2, r0
 800579a:	1c50      	adds	r0, r2, #1
 800579c:	d1c9      	bne.n	8005732 <__sflush_r+0x32>
 800579e:	682b      	ldr	r3, [r5, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0c6      	beq.n	8005732 <__sflush_r+0x32>
 80057a4:	2b1d      	cmp	r3, #29
 80057a6:	d001      	beq.n	80057ac <__sflush_r+0xac>
 80057a8:	2b16      	cmp	r3, #22
 80057aa:	d11e      	bne.n	80057ea <__sflush_r+0xea>
 80057ac:	602f      	str	r7, [r5, #0]
 80057ae:	2000      	movs	r0, #0
 80057b0:	e022      	b.n	80057f8 <__sflush_r+0xf8>
 80057b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b6:	b21b      	sxth	r3, r3
 80057b8:	e01b      	b.n	80057f2 <__sflush_r+0xf2>
 80057ba:	690f      	ldr	r7, [r1, #16]
 80057bc:	2f00      	cmp	r7, #0
 80057be:	d0f6      	beq.n	80057ae <__sflush_r+0xae>
 80057c0:	0793      	lsls	r3, r2, #30
 80057c2:	680e      	ldr	r6, [r1, #0]
 80057c4:	bf08      	it	eq
 80057c6:	694b      	ldreq	r3, [r1, #20]
 80057c8:	600f      	str	r7, [r1, #0]
 80057ca:	bf18      	it	ne
 80057cc:	2300      	movne	r3, #0
 80057ce:	eba6 0807 	sub.w	r8, r6, r7
 80057d2:	608b      	str	r3, [r1, #8]
 80057d4:	f1b8 0f00 	cmp.w	r8, #0
 80057d8:	dde9      	ble.n	80057ae <__sflush_r+0xae>
 80057da:	6a21      	ldr	r1, [r4, #32]
 80057dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057de:	4643      	mov	r3, r8
 80057e0:	463a      	mov	r2, r7
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b0      	blx	r6
 80057e6:	2800      	cmp	r0, #0
 80057e8:	dc08      	bgt.n	80057fc <__sflush_r+0xfc>
 80057ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fc:	4407      	add	r7, r0
 80057fe:	eba8 0800 	sub.w	r8, r8, r0
 8005802:	e7e7      	b.n	80057d4 <__sflush_r+0xd4>
 8005804:	dfbffffe 	.word	0xdfbffffe

08005808 <_fflush_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	4605      	mov	r5, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b913      	cbnz	r3, 8005818 <_fflush_r+0x10>
 8005812:	2500      	movs	r5, #0
 8005814:	4628      	mov	r0, r5
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	b118      	cbz	r0, 8005822 <_fflush_r+0x1a>
 800581a:	6a03      	ldr	r3, [r0, #32]
 800581c:	b90b      	cbnz	r3, 8005822 <_fflush_r+0x1a>
 800581e:	f7ff fcf7 	bl	8005210 <__sinit>
 8005822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f3      	beq.n	8005812 <_fflush_r+0xa>
 800582a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800582c:	07d0      	lsls	r0, r2, #31
 800582e:	d404      	bmi.n	800583a <_fflush_r+0x32>
 8005830:	0599      	lsls	r1, r3, #22
 8005832:	d402      	bmi.n	800583a <_fflush_r+0x32>
 8005834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005836:	f7ff fe34 	bl	80054a2 <__retarget_lock_acquire_recursive>
 800583a:	4628      	mov	r0, r5
 800583c:	4621      	mov	r1, r4
 800583e:	f7ff ff5f 	bl	8005700 <__sflush_r>
 8005842:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005844:	07da      	lsls	r2, r3, #31
 8005846:	4605      	mov	r5, r0
 8005848:	d4e4      	bmi.n	8005814 <_fflush_r+0xc>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	059b      	lsls	r3, r3, #22
 800584e:	d4e1      	bmi.n	8005814 <_fflush_r+0xc>
 8005850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005852:	f7ff fe27 	bl	80054a4 <__retarget_lock_release_recursive>
 8005856:	e7dd      	b.n	8005814 <_fflush_r+0xc>

08005858 <fiprintf>:
 8005858:	b40e      	push	{r1, r2, r3}
 800585a:	b503      	push	{r0, r1, lr}
 800585c:	4601      	mov	r1, r0
 800585e:	ab03      	add	r3, sp, #12
 8005860:	4805      	ldr	r0, [pc, #20]	@ (8005878 <fiprintf+0x20>)
 8005862:	f853 2b04 	ldr.w	r2, [r3], #4
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	f000 f847 	bl	80058fc <_vfiprintf_r>
 800586e:	b002      	add	sp, #8
 8005870:	f85d eb04 	ldr.w	lr, [sp], #4
 8005874:	b003      	add	sp, #12
 8005876:	4770      	bx	lr
 8005878:	20000020 	.word	0x20000020

0800587c <_sbrk_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d06      	ldr	r5, [pc, #24]	@ (8005898 <_sbrk_r+0x1c>)
 8005880:	2300      	movs	r3, #0
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fb f8a2 	bl	80009d0 <_sbrk>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_sbrk_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_sbrk_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20004b7c 	.word	0x20004b7c

0800589c <abort>:
 800589c:	b508      	push	{r3, lr}
 800589e:	2006      	movs	r0, #6
 80058a0:	f000 fb8e 	bl	8005fc0 <raise>
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fb f81b 	bl	80008e0 <_exit>

080058aa <__sfputc_r>:
 80058aa:	6893      	ldr	r3, [r2, #8]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	b410      	push	{r4}
 80058b2:	6093      	str	r3, [r2, #8]
 80058b4:	da08      	bge.n	80058c8 <__sfputc_r+0x1e>
 80058b6:	6994      	ldr	r4, [r2, #24]
 80058b8:	42a3      	cmp	r3, r4
 80058ba:	db01      	blt.n	80058c0 <__sfputc_r+0x16>
 80058bc:	290a      	cmp	r1, #10
 80058be:	d103      	bne.n	80058c8 <__sfputc_r+0x1e>
 80058c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c4:	f000 bac0 	b.w	8005e48 <__swbuf_r>
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	1c58      	adds	r0, r3, #1
 80058cc:	6010      	str	r0, [r2, #0]
 80058ce:	7019      	strb	r1, [r3, #0]
 80058d0:	4608      	mov	r0, r1
 80058d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <__sfputs_r>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	4606      	mov	r6, r0
 80058dc:	460f      	mov	r7, r1
 80058de:	4614      	mov	r4, r2
 80058e0:	18d5      	adds	r5, r2, r3
 80058e2:	42ac      	cmp	r4, r5
 80058e4:	d101      	bne.n	80058ea <__sfputs_r+0x12>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e007      	b.n	80058fa <__sfputs_r+0x22>
 80058ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ee:	463a      	mov	r2, r7
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7ff ffda 	bl	80058aa <__sfputc_r>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d1f3      	bne.n	80058e2 <__sfputs_r+0xa>
 80058fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058fc <_vfiprintf_r>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	460d      	mov	r5, r1
 8005902:	b09d      	sub	sp, #116	@ 0x74
 8005904:	4614      	mov	r4, r2
 8005906:	4698      	mov	r8, r3
 8005908:	4606      	mov	r6, r0
 800590a:	b118      	cbz	r0, 8005914 <_vfiprintf_r+0x18>
 800590c:	6a03      	ldr	r3, [r0, #32]
 800590e:	b90b      	cbnz	r3, 8005914 <_vfiprintf_r+0x18>
 8005910:	f7ff fc7e 	bl	8005210 <__sinit>
 8005914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	d405      	bmi.n	8005926 <_vfiprintf_r+0x2a>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d402      	bmi.n	8005926 <_vfiprintf_r+0x2a>
 8005920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005922:	f7ff fdbe 	bl	80054a2 <__retarget_lock_acquire_recursive>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	071b      	lsls	r3, r3, #28
 800592a:	d501      	bpl.n	8005930 <_vfiprintf_r+0x34>
 800592c:	692b      	ldr	r3, [r5, #16]
 800592e:	b99b      	cbnz	r3, 8005958 <_vfiprintf_r+0x5c>
 8005930:	4629      	mov	r1, r5
 8005932:	4630      	mov	r0, r6
 8005934:	f000 fac6 	bl	8005ec4 <__swsetup_r>
 8005938:	b170      	cbz	r0, 8005958 <_vfiprintf_r+0x5c>
 800593a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800593c:	07dc      	lsls	r4, r3, #31
 800593e:	d504      	bpl.n	800594a <_vfiprintf_r+0x4e>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	b01d      	add	sp, #116	@ 0x74
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	89ab      	ldrh	r3, [r5, #12]
 800594c:	0598      	lsls	r0, r3, #22
 800594e:	d4f7      	bmi.n	8005940 <_vfiprintf_r+0x44>
 8005950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005952:	f7ff fda7 	bl	80054a4 <__retarget_lock_release_recursive>
 8005956:	e7f3      	b.n	8005940 <_vfiprintf_r+0x44>
 8005958:	2300      	movs	r3, #0
 800595a:	9309      	str	r3, [sp, #36]	@ 0x24
 800595c:	2320      	movs	r3, #32
 800595e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005962:	f8cd 800c 	str.w	r8, [sp, #12]
 8005966:	2330      	movs	r3, #48	@ 0x30
 8005968:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b18 <_vfiprintf_r+0x21c>
 800596c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005970:	f04f 0901 	mov.w	r9, #1
 8005974:	4623      	mov	r3, r4
 8005976:	469a      	mov	sl, r3
 8005978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800597c:	b10a      	cbz	r2, 8005982 <_vfiprintf_r+0x86>
 800597e:	2a25      	cmp	r2, #37	@ 0x25
 8005980:	d1f9      	bne.n	8005976 <_vfiprintf_r+0x7a>
 8005982:	ebba 0b04 	subs.w	fp, sl, r4
 8005986:	d00b      	beq.n	80059a0 <_vfiprintf_r+0xa4>
 8005988:	465b      	mov	r3, fp
 800598a:	4622      	mov	r2, r4
 800598c:	4629      	mov	r1, r5
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffa2 	bl	80058d8 <__sfputs_r>
 8005994:	3001      	adds	r0, #1
 8005996:	f000 80a7 	beq.w	8005ae8 <_vfiprintf_r+0x1ec>
 800599a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800599c:	445a      	add	r2, fp
 800599e:	9209      	str	r2, [sp, #36]	@ 0x24
 80059a0:	f89a 3000 	ldrb.w	r3, [sl]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 809f 	beq.w	8005ae8 <_vfiprintf_r+0x1ec>
 80059aa:	2300      	movs	r3, #0
 80059ac:	f04f 32ff 	mov.w	r2, #4294967295
 80059b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b4:	f10a 0a01 	add.w	sl, sl, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9307      	str	r3, [sp, #28]
 80059bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80059c2:	4654      	mov	r4, sl
 80059c4:	2205      	movs	r2, #5
 80059c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ca:	4853      	ldr	r0, [pc, #332]	@ (8005b18 <_vfiprintf_r+0x21c>)
 80059cc:	f7fa fc08 	bl	80001e0 <memchr>
 80059d0:	9a04      	ldr	r2, [sp, #16]
 80059d2:	b9d8      	cbnz	r0, 8005a0c <_vfiprintf_r+0x110>
 80059d4:	06d1      	lsls	r1, r2, #27
 80059d6:	bf44      	itt	mi
 80059d8:	2320      	movmi	r3, #32
 80059da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059de:	0713      	lsls	r3, r2, #28
 80059e0:	bf44      	itt	mi
 80059e2:	232b      	movmi	r3, #43	@ 0x2b
 80059e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059e8:	f89a 3000 	ldrb.w	r3, [sl]
 80059ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ee:	d015      	beq.n	8005a1c <_vfiprintf_r+0x120>
 80059f0:	9a07      	ldr	r2, [sp, #28]
 80059f2:	4654      	mov	r4, sl
 80059f4:	2000      	movs	r0, #0
 80059f6:	f04f 0c0a 	mov.w	ip, #10
 80059fa:	4621      	mov	r1, r4
 80059fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a00:	3b30      	subs	r3, #48	@ 0x30
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	d94b      	bls.n	8005a9e <_vfiprintf_r+0x1a2>
 8005a06:	b1b0      	cbz	r0, 8005a36 <_vfiprintf_r+0x13a>
 8005a08:	9207      	str	r2, [sp, #28]
 8005a0a:	e014      	b.n	8005a36 <_vfiprintf_r+0x13a>
 8005a0c:	eba0 0308 	sub.w	r3, r0, r8
 8005a10:	fa09 f303 	lsl.w	r3, r9, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	46a2      	mov	sl, r4
 8005a1a:	e7d2      	b.n	80059c2 <_vfiprintf_r+0xc6>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	1d19      	adds	r1, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	9103      	str	r1, [sp, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfbb      	ittet	lt
 8005a28:	425b      	neglt	r3, r3
 8005a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a2e:	9307      	strge	r3, [sp, #28]
 8005a30:	9307      	strlt	r3, [sp, #28]
 8005a32:	bfb8      	it	lt
 8005a34:	9204      	strlt	r2, [sp, #16]
 8005a36:	7823      	ldrb	r3, [r4, #0]
 8005a38:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a3a:	d10a      	bne.n	8005a52 <_vfiprintf_r+0x156>
 8005a3c:	7863      	ldrb	r3, [r4, #1]
 8005a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a40:	d132      	bne.n	8005aa8 <_vfiprintf_r+0x1ac>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	9203      	str	r2, [sp, #12]
 8005a4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a4e:	3402      	adds	r4, #2
 8005a50:	9305      	str	r3, [sp, #20]
 8005a52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b28 <_vfiprintf_r+0x22c>
 8005a56:	7821      	ldrb	r1, [r4, #0]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	f7fa fbc0 	bl	80001e0 <memchr>
 8005a60:	b138      	cbz	r0, 8005a72 <_vfiprintf_r+0x176>
 8005a62:	9b04      	ldr	r3, [sp, #16]
 8005a64:	eba0 000a 	sub.w	r0, r0, sl
 8005a68:	2240      	movs	r2, #64	@ 0x40
 8005a6a:	4082      	lsls	r2, r0
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	3401      	adds	r4, #1
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a76:	4829      	ldr	r0, [pc, #164]	@ (8005b1c <_vfiprintf_r+0x220>)
 8005a78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a7c:	2206      	movs	r2, #6
 8005a7e:	f7fa fbaf 	bl	80001e0 <memchr>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d03f      	beq.n	8005b06 <_vfiprintf_r+0x20a>
 8005a86:	4b26      	ldr	r3, [pc, #152]	@ (8005b20 <_vfiprintf_r+0x224>)
 8005a88:	bb1b      	cbnz	r3, 8005ad2 <_vfiprintf_r+0x1d6>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	3307      	adds	r3, #7
 8005a8e:	f023 0307 	bic.w	r3, r3, #7
 8005a92:	3308      	adds	r3, #8
 8005a94:	9303      	str	r3, [sp, #12]
 8005a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a98:	443b      	add	r3, r7
 8005a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9c:	e76a      	b.n	8005974 <_vfiprintf_r+0x78>
 8005a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	e7a8      	b.n	80059fa <_vfiprintf_r+0xfe>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	3401      	adds	r4, #1
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f04f 0c0a 	mov.w	ip, #10
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aba:	3a30      	subs	r2, #48	@ 0x30
 8005abc:	2a09      	cmp	r2, #9
 8005abe:	d903      	bls.n	8005ac8 <_vfiprintf_r+0x1cc>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0c6      	beq.n	8005a52 <_vfiprintf_r+0x156>
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	e7c4      	b.n	8005a52 <_vfiprintf_r+0x156>
 8005ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005acc:	4604      	mov	r4, r0
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e7f0      	b.n	8005ab4 <_vfiprintf_r+0x1b8>
 8005ad2:	ab03      	add	r3, sp, #12
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	462a      	mov	r2, r5
 8005ad8:	4b12      	ldr	r3, [pc, #72]	@ (8005b24 <_vfiprintf_r+0x228>)
 8005ada:	a904      	add	r1, sp, #16
 8005adc:	4630      	mov	r0, r6
 8005ade:	f3af 8000 	nop.w
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	1c78      	adds	r0, r7, #1
 8005ae6:	d1d6      	bne.n	8005a96 <_vfiprintf_r+0x19a>
 8005ae8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aea:	07d9      	lsls	r1, r3, #31
 8005aec:	d405      	bmi.n	8005afa <_vfiprintf_r+0x1fe>
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	059a      	lsls	r2, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_vfiprintf_r+0x1fe>
 8005af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005af6:	f7ff fcd5 	bl	80054a4 <__retarget_lock_release_recursive>
 8005afa:	89ab      	ldrh	r3, [r5, #12]
 8005afc:	065b      	lsls	r3, r3, #25
 8005afe:	f53f af1f 	bmi.w	8005940 <_vfiprintf_r+0x44>
 8005b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b04:	e71e      	b.n	8005944 <_vfiprintf_r+0x48>
 8005b06:	ab03      	add	r3, sp, #12
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	462a      	mov	r2, r5
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <_vfiprintf_r+0x228>)
 8005b0e:	a904      	add	r1, sp, #16
 8005b10:	4630      	mov	r0, r6
 8005b12:	f000 f879 	bl	8005c08 <_printf_i>
 8005b16:	e7e4      	b.n	8005ae2 <_vfiprintf_r+0x1e6>
 8005b18:	08006223 	.word	0x08006223
 8005b1c:	0800622d 	.word	0x0800622d
 8005b20:	00000000 	.word	0x00000000
 8005b24:	080058d9 	.word	0x080058d9
 8005b28:	08006229 	.word	0x08006229

08005b2c <_printf_common>:
 8005b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	4616      	mov	r6, r2
 8005b32:	4698      	mov	r8, r3
 8005b34:	688a      	ldr	r2, [r1, #8]
 8005b36:	690b      	ldr	r3, [r1, #16]
 8005b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bfb8      	it	lt
 8005b40:	4613      	movlt	r3, r2
 8005b42:	6033      	str	r3, [r6, #0]
 8005b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b48:	4607      	mov	r7, r0
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	b10a      	cbz	r2, 8005b52 <_printf_common+0x26>
 8005b4e:	3301      	adds	r3, #1
 8005b50:	6033      	str	r3, [r6, #0]
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	0699      	lsls	r1, r3, #26
 8005b56:	bf42      	ittt	mi
 8005b58:	6833      	ldrmi	r3, [r6, #0]
 8005b5a:	3302      	addmi	r3, #2
 8005b5c:	6033      	strmi	r3, [r6, #0]
 8005b5e:	6825      	ldr	r5, [r4, #0]
 8005b60:	f015 0506 	ands.w	r5, r5, #6
 8005b64:	d106      	bne.n	8005b74 <_printf_common+0x48>
 8005b66:	f104 0a19 	add.w	sl, r4, #25
 8005b6a:	68e3      	ldr	r3, [r4, #12]
 8005b6c:	6832      	ldr	r2, [r6, #0]
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	dc26      	bgt.n	8005bc2 <_printf_common+0x96>
 8005b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	3b00      	subs	r3, #0
 8005b7c:	bf18      	it	ne
 8005b7e:	2301      	movne	r3, #1
 8005b80:	0692      	lsls	r2, r2, #26
 8005b82:	d42b      	bmi.n	8005bdc <_printf_common+0xb0>
 8005b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b88:	4641      	mov	r1, r8
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	47c8      	blx	r9
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d01e      	beq.n	8005bd0 <_printf_common+0xa4>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	6922      	ldr	r2, [r4, #16]
 8005b96:	f003 0306 	and.w	r3, r3, #6
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	bf02      	ittt	eq
 8005b9e:	68e5      	ldreq	r5, [r4, #12]
 8005ba0:	6833      	ldreq	r3, [r6, #0]
 8005ba2:	1aed      	subeq	r5, r5, r3
 8005ba4:	68a3      	ldr	r3, [r4, #8]
 8005ba6:	bf0c      	ite	eq
 8005ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bac:	2500      	movne	r5, #0
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	bfc4      	itt	gt
 8005bb2:	1a9b      	subgt	r3, r3, r2
 8005bb4:	18ed      	addgt	r5, r5, r3
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	341a      	adds	r4, #26
 8005bba:	42b5      	cmp	r5, r6
 8005bbc:	d11a      	bne.n	8005bf4 <_printf_common+0xc8>
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e008      	b.n	8005bd4 <_printf_common+0xa8>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	4638      	mov	r0, r7
 8005bca:	47c8      	blx	r9
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d103      	bne.n	8005bd8 <_printf_common+0xac>
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd8:	3501      	adds	r5, #1
 8005bda:	e7c6      	b.n	8005b6a <_printf_common+0x3e>
 8005bdc:	18e1      	adds	r1, r4, r3
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	2030      	movs	r0, #48	@ 0x30
 8005be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005be6:	4422      	add	r2, r4
 8005be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	e7c7      	b.n	8005b84 <_printf_common+0x58>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	47c8      	blx	r9
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d0e6      	beq.n	8005bd0 <_printf_common+0xa4>
 8005c02:	3601      	adds	r6, #1
 8005c04:	e7d9      	b.n	8005bba <_printf_common+0x8e>
	...

08005c08 <_printf_i>:
 8005c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	7e0f      	ldrb	r7, [r1, #24]
 8005c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c10:	2f78      	cmp	r7, #120	@ 0x78
 8005c12:	4691      	mov	r9, r2
 8005c14:	4680      	mov	r8, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	469a      	mov	sl, r3
 8005c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c1e:	d807      	bhi.n	8005c30 <_printf_i+0x28>
 8005c20:	2f62      	cmp	r7, #98	@ 0x62
 8005c22:	d80a      	bhi.n	8005c3a <_printf_i+0x32>
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	f000 80d2 	beq.w	8005dce <_printf_i+0x1c6>
 8005c2a:	2f58      	cmp	r7, #88	@ 0x58
 8005c2c:	f000 80b9 	beq.w	8005da2 <_printf_i+0x19a>
 8005c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c38:	e03a      	b.n	8005cb0 <_printf_i+0xa8>
 8005c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c3e:	2b15      	cmp	r3, #21
 8005c40:	d8f6      	bhi.n	8005c30 <_printf_i+0x28>
 8005c42:	a101      	add	r1, pc, #4	@ (adr r1, 8005c48 <_printf_i+0x40>)
 8005c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c48:	08005ca1 	.word	0x08005ca1
 8005c4c:	08005cb5 	.word	0x08005cb5
 8005c50:	08005c31 	.word	0x08005c31
 8005c54:	08005c31 	.word	0x08005c31
 8005c58:	08005c31 	.word	0x08005c31
 8005c5c:	08005c31 	.word	0x08005c31
 8005c60:	08005cb5 	.word	0x08005cb5
 8005c64:	08005c31 	.word	0x08005c31
 8005c68:	08005c31 	.word	0x08005c31
 8005c6c:	08005c31 	.word	0x08005c31
 8005c70:	08005c31 	.word	0x08005c31
 8005c74:	08005db5 	.word	0x08005db5
 8005c78:	08005cdf 	.word	0x08005cdf
 8005c7c:	08005d6f 	.word	0x08005d6f
 8005c80:	08005c31 	.word	0x08005c31
 8005c84:	08005c31 	.word	0x08005c31
 8005c88:	08005dd7 	.word	0x08005dd7
 8005c8c:	08005c31 	.word	0x08005c31
 8005c90:	08005cdf 	.word	0x08005cdf
 8005c94:	08005c31 	.word	0x08005c31
 8005c98:	08005c31 	.word	0x08005c31
 8005c9c:	08005d77 	.word	0x08005d77
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6032      	str	r2, [r6, #0]
 8005ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e09d      	b.n	8005df0 <_printf_i+0x1e8>
 8005cb4:	6833      	ldr	r3, [r6, #0]
 8005cb6:	6820      	ldr	r0, [r4, #0]
 8005cb8:	1d19      	adds	r1, r3, #4
 8005cba:	6031      	str	r1, [r6, #0]
 8005cbc:	0606      	lsls	r6, r0, #24
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0xbc>
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	e003      	b.n	8005ccc <_printf_i+0xc4>
 8005cc4:	0645      	lsls	r5, r0, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0xb8>
 8005cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	da03      	bge.n	8005cd8 <_printf_i+0xd0>
 8005cd0:	232d      	movs	r3, #45	@ 0x2d
 8005cd2:	426d      	negs	r5, r5
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd8:	4859      	ldr	r0, [pc, #356]	@ (8005e40 <_printf_i+0x238>)
 8005cda:	230a      	movs	r3, #10
 8005cdc:	e011      	b.n	8005d02 <_printf_i+0xfa>
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	6833      	ldr	r3, [r6, #0]
 8005ce2:	0608      	lsls	r0, r1, #24
 8005ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ce8:	d402      	bmi.n	8005cf0 <_printf_i+0xe8>
 8005cea:	0649      	lsls	r1, r1, #25
 8005cec:	bf48      	it	mi
 8005cee:	b2ad      	uxthmi	r5, r5
 8005cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cf2:	4853      	ldr	r0, [pc, #332]	@ (8005e40 <_printf_i+0x238>)
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	bf14      	ite	ne
 8005cf8:	230a      	movne	r3, #10
 8005cfa:	2308      	moveq	r3, #8
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d02:	6866      	ldr	r6, [r4, #4]
 8005d04:	60a6      	str	r6, [r4, #8]
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	bfa2      	ittt	ge
 8005d0a:	6821      	ldrge	r1, [r4, #0]
 8005d0c:	f021 0104 	bicge.w	r1, r1, #4
 8005d10:	6021      	strge	r1, [r4, #0]
 8005d12:	b90d      	cbnz	r5, 8005d18 <_printf_i+0x110>
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	d04b      	beq.n	8005db0 <_printf_i+0x1a8>
 8005d18:	4616      	mov	r6, r2
 8005d1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d1e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d22:	5dc7      	ldrb	r7, [r0, r7]
 8005d24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d28:	462f      	mov	r7, r5
 8005d2a:	42bb      	cmp	r3, r7
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	d9f4      	bls.n	8005d1a <_printf_i+0x112>
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d10b      	bne.n	8005d4c <_printf_i+0x144>
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	07df      	lsls	r7, r3, #31
 8005d38:	d508      	bpl.n	8005d4c <_printf_i+0x144>
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	6861      	ldr	r1, [r4, #4]
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	bfde      	ittt	le
 8005d42:	2330      	movle	r3, #48	@ 0x30
 8005d44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d4c:	1b92      	subs	r2, r2, r6
 8005d4e:	6122      	str	r2, [r4, #16]
 8005d50:	f8cd a000 	str.w	sl, [sp]
 8005d54:	464b      	mov	r3, r9
 8005d56:	aa03      	add	r2, sp, #12
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f7ff fee6 	bl	8005b2c <_printf_common>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d14a      	bne.n	8005dfa <_printf_i+0x1f2>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b004      	add	sp, #16
 8005d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	f043 0320 	orr.w	r3, r3, #32
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	4833      	ldr	r0, [pc, #204]	@ (8005e44 <_printf_i+0x23c>)
 8005d78:	2778      	movs	r7, #120	@ 0x78
 8005d7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	6831      	ldr	r1, [r6, #0]
 8005d82:	061f      	lsls	r7, r3, #24
 8005d84:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d88:	d402      	bmi.n	8005d90 <_printf_i+0x188>
 8005d8a:	065f      	lsls	r7, r3, #25
 8005d8c:	bf48      	it	mi
 8005d8e:	b2ad      	uxthmi	r5, r5
 8005d90:	6031      	str	r1, [r6, #0]
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	bf44      	itt	mi
 8005d96:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9a:	6023      	strmi	r3, [r4, #0]
 8005d9c:	b11d      	cbz	r5, 8005da6 <_printf_i+0x19e>
 8005d9e:	2310      	movs	r3, #16
 8005da0:	e7ac      	b.n	8005cfc <_printf_i+0xf4>
 8005da2:	4827      	ldr	r0, [pc, #156]	@ (8005e40 <_printf_i+0x238>)
 8005da4:	e7e9      	b.n	8005d7a <_printf_i+0x172>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f023 0320 	bic.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	e7f6      	b.n	8005d9e <_printf_i+0x196>
 8005db0:	4616      	mov	r6, r2
 8005db2:	e7bd      	b.n	8005d30 <_printf_i+0x128>
 8005db4:	6833      	ldr	r3, [r6, #0]
 8005db6:	6825      	ldr	r5, [r4, #0]
 8005db8:	6961      	ldr	r1, [r4, #20]
 8005dba:	1d18      	adds	r0, r3, #4
 8005dbc:	6030      	str	r0, [r6, #0]
 8005dbe:	062e      	lsls	r6, r5, #24
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	d501      	bpl.n	8005dc8 <_printf_i+0x1c0>
 8005dc4:	6019      	str	r1, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <_printf_i+0x1c6>
 8005dc8:	0668      	lsls	r0, r5, #25
 8005dca:	d5fb      	bpl.n	8005dc4 <_printf_i+0x1bc>
 8005dcc:	8019      	strh	r1, [r3, #0]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6123      	str	r3, [r4, #16]
 8005dd2:	4616      	mov	r6, r2
 8005dd4:	e7bc      	b.n	8005d50 <_printf_i+0x148>
 8005dd6:	6833      	ldr	r3, [r6, #0]
 8005dd8:	1d1a      	adds	r2, r3, #4
 8005dda:	6032      	str	r2, [r6, #0]
 8005ddc:	681e      	ldr	r6, [r3, #0]
 8005dde:	6862      	ldr	r2, [r4, #4]
 8005de0:	2100      	movs	r1, #0
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7fa f9fc 	bl	80001e0 <memchr>
 8005de8:	b108      	cbz	r0, 8005dee <_printf_i+0x1e6>
 8005dea:	1b80      	subs	r0, r0, r6
 8005dec:	6060      	str	r0, [r4, #4]
 8005dee:	6863      	ldr	r3, [r4, #4]
 8005df0:	6123      	str	r3, [r4, #16]
 8005df2:	2300      	movs	r3, #0
 8005df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df8:	e7aa      	b.n	8005d50 <_printf_i+0x148>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4649      	mov	r1, r9
 8005e00:	4640      	mov	r0, r8
 8005e02:	47d0      	blx	sl
 8005e04:	3001      	adds	r0, #1
 8005e06:	d0ad      	beq.n	8005d64 <_printf_i+0x15c>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	079b      	lsls	r3, r3, #30
 8005e0c:	d413      	bmi.n	8005e36 <_printf_i+0x22e>
 8005e0e:	68e0      	ldr	r0, [r4, #12]
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	4298      	cmp	r0, r3
 8005e14:	bfb8      	it	lt
 8005e16:	4618      	movlt	r0, r3
 8005e18:	e7a6      	b.n	8005d68 <_printf_i+0x160>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4640      	mov	r0, r8
 8005e22:	47d0      	blx	sl
 8005e24:	3001      	adds	r0, #1
 8005e26:	d09d      	beq.n	8005d64 <_printf_i+0x15c>
 8005e28:	3501      	adds	r5, #1
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	9903      	ldr	r1, [sp, #12]
 8005e2e:	1a5b      	subs	r3, r3, r1
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	dcf2      	bgt.n	8005e1a <_printf_i+0x212>
 8005e34:	e7eb      	b.n	8005e0e <_printf_i+0x206>
 8005e36:	2500      	movs	r5, #0
 8005e38:	f104 0619 	add.w	r6, r4, #25
 8005e3c:	e7f5      	b.n	8005e2a <_printf_i+0x222>
 8005e3e:	bf00      	nop
 8005e40:	08006234 	.word	0x08006234
 8005e44:	08006245 	.word	0x08006245

08005e48 <__swbuf_r>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	460e      	mov	r6, r1
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b118      	cbz	r0, 8005e5a <__swbuf_r+0x12>
 8005e52:	6a03      	ldr	r3, [r0, #32]
 8005e54:	b90b      	cbnz	r3, 8005e5a <__swbuf_r+0x12>
 8005e56:	f7ff f9db 	bl	8005210 <__sinit>
 8005e5a:	69a3      	ldr	r3, [r4, #24]
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	071a      	lsls	r2, r3, #28
 8005e62:	d501      	bpl.n	8005e68 <__swbuf_r+0x20>
 8005e64:	6923      	ldr	r3, [r4, #16]
 8005e66:	b943      	cbnz	r3, 8005e7a <__swbuf_r+0x32>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f82a 	bl	8005ec4 <__swsetup_r>
 8005e70:	b118      	cbz	r0, 8005e7a <__swbuf_r+0x32>
 8005e72:	f04f 37ff 	mov.w	r7, #4294967295
 8005e76:	4638      	mov	r0, r7
 8005e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	6922      	ldr	r2, [r4, #16]
 8005e7e:	1a98      	subs	r0, r3, r2
 8005e80:	6963      	ldr	r3, [r4, #20]
 8005e82:	b2f6      	uxtb	r6, r6
 8005e84:	4283      	cmp	r3, r0
 8005e86:	4637      	mov	r7, r6
 8005e88:	dc05      	bgt.n	8005e96 <__swbuf_r+0x4e>
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff fcbb 	bl	8005808 <_fflush_r>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d1ed      	bne.n	8005e72 <__swbuf_r+0x2a>
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	60a3      	str	r3, [r4, #8]
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	701e      	strb	r6, [r3, #0]
 8005ea4:	6962      	ldr	r2, [r4, #20]
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d004      	beq.n	8005eb6 <__swbuf_r+0x6e>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	07db      	lsls	r3, r3, #31
 8005eb0:	d5e1      	bpl.n	8005e76 <__swbuf_r+0x2e>
 8005eb2:	2e0a      	cmp	r6, #10
 8005eb4:	d1df      	bne.n	8005e76 <__swbuf_r+0x2e>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7ff fca5 	bl	8005808 <_fflush_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0d9      	beq.n	8005e76 <__swbuf_r+0x2e>
 8005ec2:	e7d6      	b.n	8005e72 <__swbuf_r+0x2a>

08005ec4 <__swsetup_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4b29      	ldr	r3, [pc, #164]	@ (8005f6c <__swsetup_r+0xa8>)
 8005ec8:	4605      	mov	r5, r0
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	460c      	mov	r4, r1
 8005ece:	b118      	cbz	r0, 8005ed8 <__swsetup_r+0x14>
 8005ed0:	6a03      	ldr	r3, [r0, #32]
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <__swsetup_r+0x14>
 8005ed4:	f7ff f99c 	bl	8005210 <__sinit>
 8005ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005edc:	0719      	lsls	r1, r3, #28
 8005ede:	d422      	bmi.n	8005f26 <__swsetup_r+0x62>
 8005ee0:	06da      	lsls	r2, r3, #27
 8005ee2:	d407      	bmi.n	8005ef4 <__swsetup_r+0x30>
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	e033      	b.n	8005f5c <__swsetup_r+0x98>
 8005ef4:	0758      	lsls	r0, r3, #29
 8005ef6:	d512      	bpl.n	8005f1e <__swsetup_r+0x5a>
 8005ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005efa:	b141      	cbz	r1, 8005f0e <__swsetup_r+0x4a>
 8005efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d002      	beq.n	8005f0a <__swsetup_r+0x46>
 8005f04:	4628      	mov	r0, r5
 8005f06:	f7ff fafb 	bl	8005500 <_free_r>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	2300      	movs	r3, #0
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	f043 0308 	orr.w	r3, r3, #8
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	b94b      	cbnz	r3, 8005f3e <__swsetup_r+0x7a>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f34:	d003      	beq.n	8005f3e <__swsetup_r+0x7a>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 f883 	bl	8006044 <__smakebuf_r>
 8005f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f42:	f013 0201 	ands.w	r2, r3, #1
 8005f46:	d00a      	beq.n	8005f5e <__swsetup_r+0x9a>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	60a2      	str	r2, [r4, #8]
 8005f4c:	6962      	ldr	r2, [r4, #20]
 8005f4e:	4252      	negs	r2, r2
 8005f50:	61a2      	str	r2, [r4, #24]
 8005f52:	6922      	ldr	r2, [r4, #16]
 8005f54:	b942      	cbnz	r2, 8005f68 <__swsetup_r+0xa4>
 8005f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f5a:	d1c5      	bne.n	8005ee8 <__swsetup_r+0x24>
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
 8005f5e:	0799      	lsls	r1, r3, #30
 8005f60:	bf58      	it	pl
 8005f62:	6962      	ldrpl	r2, [r4, #20]
 8005f64:	60a2      	str	r2, [r4, #8]
 8005f66:	e7f4      	b.n	8005f52 <__swsetup_r+0x8e>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7f7      	b.n	8005f5c <__swsetup_r+0x98>
 8005f6c:	20000020 	.word	0x20000020

08005f70 <_raise_r>:
 8005f70:	291f      	cmp	r1, #31
 8005f72:	b538      	push	{r3, r4, r5, lr}
 8005f74:	4605      	mov	r5, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	d904      	bls.n	8005f84 <_raise_r+0x14>
 8005f7a:	2316      	movs	r3, #22
 8005f7c:	6003      	str	r3, [r0, #0]
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f86:	b112      	cbz	r2, 8005f8e <_raise_r+0x1e>
 8005f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f8c:	b94b      	cbnz	r3, 8005fa2 <_raise_r+0x32>
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f830 	bl	8005ff4 <_getpid_r>
 8005f94:	4622      	mov	r2, r4
 8005f96:	4601      	mov	r1, r0
 8005f98:	4628      	mov	r0, r5
 8005f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9e:	f000 b817 	b.w	8005fd0 <_kill_r>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d00a      	beq.n	8005fbc <_raise_r+0x4c>
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	d103      	bne.n	8005fb2 <_raise_r+0x42>
 8005faa:	2316      	movs	r3, #22
 8005fac:	6003      	str	r3, [r0, #0]
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e7e7      	b.n	8005f82 <_raise_r+0x12>
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4798      	blx	r3
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e7e0      	b.n	8005f82 <_raise_r+0x12>

08005fc0 <raise>:
 8005fc0:	4b02      	ldr	r3, [pc, #8]	@ (8005fcc <raise+0xc>)
 8005fc2:	4601      	mov	r1, r0
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	f7ff bfd3 	b.w	8005f70 <_raise_r>
 8005fca:	bf00      	nop
 8005fcc:	20000020 	.word	0x20000020

08005fd0 <_kill_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d07      	ldr	r5, [pc, #28]	@ (8005ff0 <_kill_r+0x20>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	4611      	mov	r1, r2
 8005fdc:	602b      	str	r3, [r5, #0]
 8005fde:	f7fa fc6f 	bl	80008c0 <_kill>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d102      	bne.n	8005fec <_kill_r+0x1c>
 8005fe6:	682b      	ldr	r3, [r5, #0]
 8005fe8:	b103      	cbz	r3, 8005fec <_kill_r+0x1c>
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	bd38      	pop	{r3, r4, r5, pc}
 8005fee:	bf00      	nop
 8005ff0:	20004b7c 	.word	0x20004b7c

08005ff4 <_getpid_r>:
 8005ff4:	f7fa bc5c 	b.w	80008b0 <_getpid>

08005ff8 <__swhatbuf_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	2900      	cmp	r1, #0
 8006002:	b096      	sub	sp, #88	@ 0x58
 8006004:	4615      	mov	r5, r2
 8006006:	461e      	mov	r6, r3
 8006008:	da0d      	bge.n	8006026 <__swhatbuf_r+0x2e>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	bf14      	ite	ne
 8006016:	2340      	movne	r3, #64	@ 0x40
 8006018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800601c:	2000      	movs	r0, #0
 800601e:	6031      	str	r1, [r6, #0]
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	b016      	add	sp, #88	@ 0x58
 8006024:	bd70      	pop	{r4, r5, r6, pc}
 8006026:	466a      	mov	r2, sp
 8006028:	f000 f848 	bl	80060bc <_fstat_r>
 800602c:	2800      	cmp	r0, #0
 800602e:	dbec      	blt.n	800600a <__swhatbuf_r+0x12>
 8006030:	9901      	ldr	r1, [sp, #4]
 8006032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800603a:	4259      	negs	r1, r3
 800603c:	4159      	adcs	r1, r3
 800603e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006042:	e7eb      	b.n	800601c <__swhatbuf_r+0x24>

08006044 <__smakebuf_r>:
 8006044:	898b      	ldrh	r3, [r1, #12]
 8006046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006048:	079d      	lsls	r5, r3, #30
 800604a:	4606      	mov	r6, r0
 800604c:	460c      	mov	r4, r1
 800604e:	d507      	bpl.n	8006060 <__smakebuf_r+0x1c>
 8006050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2301      	movs	r3, #1
 800605a:	6163      	str	r3, [r4, #20]
 800605c:	b003      	add	sp, #12
 800605e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006060:	ab01      	add	r3, sp, #4
 8006062:	466a      	mov	r2, sp
 8006064:	f7ff ffc8 	bl	8005ff8 <__swhatbuf_r>
 8006068:	9f00      	ldr	r7, [sp, #0]
 800606a:	4605      	mov	r5, r0
 800606c:	4639      	mov	r1, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff faba 	bl	80055e8 <_malloc_r>
 8006074:	b948      	cbnz	r0, 800608a <__smakebuf_r+0x46>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	059a      	lsls	r2, r3, #22
 800607c:	d4ee      	bmi.n	800605c <__smakebuf_r+0x18>
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	e7e2      	b.n	8006050 <__smakebuf_r+0xc>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	6020      	str	r0, [r4, #0]
 800608e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800609a:	b15b      	cbz	r3, 80060b4 <__smakebuf_r+0x70>
 800609c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a0:	4630      	mov	r0, r6
 80060a2:	f000 f81d 	bl	80060e0 <_isatty_r>
 80060a6:	b128      	cbz	r0, 80060b4 <__smakebuf_r+0x70>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	81a3      	strh	r3, [r4, #12]
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	431d      	orrs	r5, r3
 80060b8:	81a5      	strh	r5, [r4, #12]
 80060ba:	e7cf      	b.n	800605c <__smakebuf_r+0x18>

080060bc <_fstat_r>:
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4d07      	ldr	r5, [pc, #28]	@ (80060dc <_fstat_r+0x20>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	4604      	mov	r4, r0
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	f7fa fc59 	bl	8000980 <_fstat>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	d102      	bne.n	80060d8 <_fstat_r+0x1c>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	b103      	cbz	r3, 80060d8 <_fstat_r+0x1c>
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	bd38      	pop	{r3, r4, r5, pc}
 80060da:	bf00      	nop
 80060dc:	20004b7c 	.word	0x20004b7c

080060e0 <_isatty_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4d06      	ldr	r5, [pc, #24]	@ (80060fc <_isatty_r+0x1c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	f7fa fc58 	bl	80009a0 <_isatty>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_isatty_r+0x1a>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_isatty_r+0x1a>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20004b7c 	.word	0x20004b7c

08006100 <_init>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr

0800610c <_fini>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr
